{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n  const n = numbers.length\n  const array = new Array(n)\n  const m = n - 1\n  let m2 = m\n  let x\n  let y\n\n  while (m2 >= 0) {\n    x = numbers[m2]\n    y = numbers[m]\n    const distance = Math.abs(x - y)\n\n    if (distance < threshold) {\n      array[m2] = x\n      m2--\n    } else {\n      m--\n      m2--\n    }\n  }\n\n  return array.every(x => x === numbers[0])\n}\n\n/*\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElementsWithError = (numbers, threshold) => {\n  const n = numbers.length\n  const array = new Array(n)\n  const m = n - 1\n  let m2 = m\n  let x\n  let y\n\n  while (m2 >= 0) {\n    x = numbers[m2]\n    y = numbers[m]\n    const distance = Math.abs(x - y)\n\n    if (distance < threshold) {\n      array[m2] = x\n      m2--\n    } else {\n      m--\n      m2--\n    }\n  }\n\n  return array.every(x => x === numbers[0])\n}\n\n/*\n  Check if given value is in the list of values, and if so, return the index of it.\n  >>> receiveIndexInArray([1, 2, 3, 4], 2)\n  2\n  >>> receiveIndexInArray([1, 2, 3, 4], 5)\n  -1\n  >>> receiveIndexInArray([1, 2, 3, 4], -1)\n  -1\n  */\nconst receiveIndexInArray = (values, value) => {\n  const len = values.length\n  const i = len\n\n  while (i--) {\n    if (values[i] === value) {\n      return i\n    }\n  }\n\n  return -1\n}\n\n/*\n  Given a list of numbers, return a list of the numbers that have the greatest\n  number of the elements they are in.\n  >>> receiveGreatestElements([1, 2, 3, 4, 5, 6, 7, 8])\n  [8, 7, 6, 5, 4, 3, 2, 1]\n  >>> receiveGreatestElements([9, 8, 7, 6, 5, 4, 3, 2, 1])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst receiveGreatestElements = (numbers) => {\n  const len = numbers.length\n  const result = new Array(len)\n\n  for (let i = 0; i < len; i++) {\n    let count = 1\n    for (let j = i + 1; j < len; j++) {\n      if (numbers[i] > numbers[j]) {\n        count++\n      }\n    }\n\n    result[i] = count\n  }\n\n  return result\n}\n\n/*\n  Given a list of numbers, return a list of the numbers that have the greatest\n  number of the elements they are in, ignoring any equal elements.\n  >>> receiveGreatestElements([1, 2, 3, 2, 1])\n  [2, 3, 1]\n  >>> receiveGreatestElements([9, 8, 7, 6, 5, 4, 3, 2, 1])\n  [9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> receiveGreatestElements([9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1])\n  [9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1]\n  >>> receiveGreatestElements([9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 2, 3, 1])\n  [9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 2, 3, 1]\n  */\nconst receiveGreatestElementsWithError = (numbers) => {\n  const len = numbers.length\n  const result = new Array(len)\n\n  for (let i = 0; i < len; i++) {\n    let count = 1\n    for (let j = i + 1; j < len; j++) {\n      if (numbers[i] > numbers[j]) {\n        count++\n      }\n    }\n\n    result[i] = count\n  }\n\n  return result\n}\n\n/*\n  Given a list of numbers, return a list of the numbers that have the least\n  number of the elements they are in.\n  >>> receiveLeastElements([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> receiveLeastElements([9, 8, 7, 6, 5, 4, 3, 2, 1])\n  [9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> receiveLeastElements([9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1])\n  [9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1]\n  >>> receiveLeastElements([9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 2, 3, 1])\n  [9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 1, 2, 3, 1]\n  */\nconst receiveLeastElements = (numbers) => {\n  const len = numbers.length\n  const result = new Array(len)\n\n  for (let"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)|\\)/);\n  const balanced_groups = [];\n  paren_groups.forEach((group) => {\n    const curr_level = 1;\n    const open_braces = 0;\n    for (let i = 0; i < group.length; i++) {\n      if (group[i] === ')') {\n        curr_level--;\n        if (curr_level === 0) {\n          balanced_groups.push(group.substring(1, i));\n          break;\n        }\n      } else if (group[i] === '(') {\n        curr_level++;\n      }\n    }\n  });\n  return balanced_groups;\n};\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst balancedParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)|\\)/);\n  const balanced_groups = [];\n  paren_groups.forEach((group) => {\n    const curr_level = 1;\n    const open_braces = 0;\n    let next_open_brace = group.indexOf('(');\n    while (next_open_brace!== -1) {\n      const group_start = group.indexOf('(');\n      const group_end = group.indexOf(')');\n      const group_text = group.substring(group_start, group_end + 1);\n      const level_text = group.substring(0, group_start);\n      const level = level_text.length;\n      const next_open_brace = group.indexOf('(', group_end + 1);\n      const level_increment = (next_open_brace!== -1)? 1 : 0;\n      const level_change = (level + level_increment) % 2;\n      const new_level = level + level_change;\n      if (new_level > 0) {\n        curr_level = new_level;\n      } else if (new_level === 0) {\n        balanced_groups.push(level_text);\n        break;\n      }\n      group = group.substring(group_end + 1);\n      next_open_brace = group.indexOf('(', next_open_brace + 1);\n    }\n  });\n  return balanced_groups;\n};\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> balancedParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst balancedParenGroups2 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)|\\)/);\n  const balanced_groups = [];\n  paren_groups.forEach((group) => {\n    const curr_level = 1;\n    const open_braces = 0;\n    let next_open_brace = group.indexOf('(');\n    while (next_open_brace!== -1) {\n      const group_start = group.indexOf('(');\n      const group_end = group.indexOf(')');\n      const group_text = group.substring(group_start, group_end + 1);\n      const level_text = group.substring(0, group_start);\n      const level = level_text.length;\n      const next_open_brace = group.indexOf('(', group_end + 1);\n      const level_increment = (next_open_brace!== -1)? 1 : 0;\n      const level_change = (level + level_increment) % 2;\n      const new_level = level + level_change;\n      if (new_level > 0) {\n        curr_level = new_level;\n      } else if (new_level === 0) {\n        balanced_groups.push(level_text);\n        break;\n      }\n      group = group.substring(group_end + 1);\n      next_open_brace = group.indexOf('(', next_open_brace + 1);\n    }\n  });\n  return balanced_groups;\n};\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> balancedParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst balancedParenGroups3 = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)|\\)/);\n  const balanced_groups = [];\n  paren_groups.forEach((group) => {\n    const curr_level = 1;\n    const open_braces = 0;\n    let next_open_brace = group.indexOf('(');\n    while (next_open_brace!== -1) {\n      const group_start = group.indexOf('(');\n      const group_end = group.indexOf(')');\n      const group_text = group.substring(group_start, group_end + 1);\n      const level_text = group.substring("}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimalNumber = number.toString().split('.')[1];\n  let integerNumber = number.toString().split('.')[0];\n  let integerNumberLength = integerNumber.length;\n  let integerPart = integerNumber.slice(0, integerNumberLength - 1);\n  let decimalPart = decimalNumber.slice(1);\n  if (decimalNumber.length > 1) {\n    decimalNumber = '0' + decimalNumber;\n  }\n  return integerNumber + decimalNumber;\n};\n\n/**\n  Given a string, return the number of letters that are smaller than the given\n  number.\n\n  Return the number of letters that are smaller than the given number.\n  >>> countSmallLetters('a')\n  0\n  >>> countSmallLetters('abc')\n  1\n  >>> countSmallLetters('aabc')\n  2\n  >>> countSmallLetters('abcdef')\n  2\n  */\nconst countSmallLetters = (string) => {\n  let count = 0;\n  let letter = string.charAt(0);\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < letter) {\n      count++;\n    }\n    letter = string.charAt(i);\n  }\n  return count;\n};\n\n/**\n  Given a string, return the number of letters that are larger than the given\n  number.\n\n  Return the number of letters that are larger than the given number.\n  >>> countLargerLetters('a')\n  1\n  >>> countLargerLetters('abc')\n  0\n  >>> countLargerLetters('aabc')\n  0\n  >>> countLargerLetters('abcdef')\n  1\n  */\nconst countLargerLetters = (string) => {\n  let count = 0;\n  let letter = string.charAt(0);\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) > letter) {\n      count++;\n    }\n    letter = string.charAt(i);\n  }\n  return count;\n};\n\n/**\n  Given a string, return the number of letters that are in upper case.\n\n  Return the number of letters that are in upper case.\n  >>> countUppercaseLetters('a')\n  1\n  >>> countUppercaseLetters('abc')\n  0\n  >>> countUppercaseLetters('aabc')\n  0\n  >>> countUppercaseLetters('abcdef')\n  2\n  */\nconst countUppercaseLetters = (string) => {\n  let count = 0;\n  let letter = string.charAt(0);\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).toUpperCase() === letter) {\n      count++;\n    }\n    letter = string.charAt(i);\n  }\n  return count;\n};\n\n/**\n  Given a string, return the number of letters that are in lower case.\n\n  Return the number of letters that are in lower case.\n  >>> countLowercaseLetters('a')\n  0\n  >>> countLowercaseLetters('abc')\n  1\n  >>> countLowercaseLetters('aabc')\n  1\n  >>> countLowercaseLetters('abcdef')\n  2\n  */\nconst countLowercaseLetters = (string) => {\n  let count = 0;\n  let letter = string.charAt(0);\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i).toLowerCase() === letter) {\n      count++;\n    }\n    letter = string.charAt(i);\n  }\n  return count;\n};\n\n/**\n  Given a string, return the number of vowels in the string.\n\n  Return the number of vowels in the string.\n  >>> countVowels('a')\n  0\n  >>> countVowels('abc')\n  1\n  >>> countVowels('aabc')\n  1\n  >>> countVowels('abcdef')\n  2\n  */\nconst countVowels = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a' || string.charAt(i) === 'e' || string.charAt(i) === 'i' || string.charAt(i) === 'o' || string.charAt(i) === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  truncateNumber,\n  countSmallLetters,\n  countLargerLetters,\n  countUppercaseLetters,\n  countLowercaseLetters,\n  countVowels\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  let sum = 0.0\n  numbers.forEach((num) => sum += Math.abs(num - Math.mean(numbers)))\n  return sum / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailStandardDeviation = (numbers) => {\n  let avg = 0.0\n  let sum = 0.0\n  numbers.forEach((num) => {\n    sum += Math.pow(num - avg, 2)\n    avg += num\n  })\n  return Math.sqrt(sum / numbers.length)\n}\n\n/*\n  For a given list of input numbers, calculate the sum of squares of the\n  differences between each element and the mean of this dataset.\n  >>> entailSumOfSquares = (numbers) => {\n ...   let sum = 0.0\n ...   numbers.forEach((num) => sum += Math.pow(num - Math.mean(numbers), 2))\n ...   return sum\n ... }\n  >>> entailSumOfSquares([1.0, 2.0, 3.0, 4.0])\n  14.0\n  */\nconst entailSumOfSquares = (numbers) => {\n  let sum = 0.0\n  numbers.forEach((num) => sum += Math.pow(num - Math.mean(numbers), 2))\n  return sum\n}\n\nmodule.exports = {\n  entailAbsoluteDeviation,\n  entailStandardDeviation,\n  entailSumOfSquares\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const delimiters = []\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    delimiters.push(numbers[i])\n  }\n\n  return delimiters.concat(numbers[numbers.length - 1], delimeter)\n}\n\nmodule.exports = intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = [];\n  const last_stack_index = stack.length - 1;\n  const is_parsed = false;\n  const is_stack_empty = stack.length === 0;\n  const open_paren = paren_string.charAt(0);\n  const close_paren = paren_string.charAt(paren_string.length - 1);\n  const is_open_paren = paren_string.includes(open_paren);\n  const is_close_paren = paren_string.includes(close_paren);\n\n  if (is_stack_empty) {\n    stack.push(paren_string.length);\n    return stack;\n  }\n\n  if (is_open_paren) {\n    stack.push(paren_string.length);\n  } else if (is_close_paren) {\n    stack.pop();\n  }\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string.charAt(i) === open_paren) {\n      stack.push(paren_string.length);\n    } else if (paren_string.charAt(i) === close_paren) {\n      if (stack.length === last_stack_index) {\n        is_parsed = true;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n\n  if (is_parsed) {\n    return stack;\n  } else {\n    return false;\n  }\n};\n\n/**\n  *\n  * @param {string} paren_string\n  * @returns {boolean}\n  */\nconst validateNestedParens = (paren_string) => {\n  const stack = parseNestedParens(paren_string);\n\n  if (stack.length!== 0 && stack.length!== paren_string.length) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  parseNestedParens,\n  validateNestedParens\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const substrings = substring.split('').map((s, i) => `${s}${i}`)\n  return strings.filter(str => substrings.every(s => str.indexOf(s) >= 0))\n}\n\nmodule.exports = filterBySubstring\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  const list = numbers.slice();\n  let sum = 0;\n  let product = 1;\n\n  while (list.length > 1) {\n    const currentSum = sum + list.pop();\n    const nextProduct = product * list.pop();\n\n    if (currentSum > 0 && nextProduct > 0) {\n      sum = currentSum;\n      product = nextProduct;\n    }\n  }\n\n  if (list.length === 1) {\n    if (sum === 0) {\n      return (0, 1);\n    }\n\n    return (sum, product);\n  }\n\n  if (list.length === 0) {\n    return (0, 1);\n  }\n\n  return (sum, product);\n};\n\nexport { kernelIntersection };\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  const max = numbers[0];\n  const nextMax = numbers[1];\n\n  for (let i = 2; i < numbers.length; i++) {\n    if (numbers[i] > nextMax) {\n      nextMax = numbers[i];\n      max = nextMax;\n    }\n  }\n\n  return [max, nextMax];\n};\n\nmodule.exports = rolledMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string;\n  let suffix = string;\n  while (suffix.length > 0 &&!isPalindrome(suffix)) {\n    suffix = suffix.slice(0, suffix.length - 1);\n  }\n  while (prefix.length > 0 &&!isPalindrome(prefix)) {\n    prefix = prefix.slice(1, prefix.length);\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that is contained in a string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cataa')\n  'cataa'\n  >>> makePalindrome('cataac')\n  'cataac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string;\n  let suffix = string;\n  while (suffix.length > 0 &&!isPalindrome(suffix)) {\n    suffix = suffix.slice(0, suffix.length - 1);\n  }\n  while (prefix.length > 0 &&!isPalindrome(prefix)) {\n    prefix = prefix.slice(1, prefix.length);\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that is contained in a string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cataa')\n  'cataa'\n  >>> makePalindrome('cataac')\n  'cataac'\n  >>> makePalindrome('cataacaa')\n  'cataacaa'\n  >>> makePalindrome('cataacaaaa')\n  'cataacaaaa'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string;\n  let suffix = string;\n  while (suffix.length > 0 &&!isPalindrome(suffix)) {\n    suffix = suffix.slice(0, suffix.length - 1);\n  }\n  while (prefix.length > 0 &&!isPalindrome(prefix)) {\n    prefix = prefix.slice(1, prefix.length);\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that is contained in a string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cataa')\n  'cataa'\n  >>> makePalindrome('cataac')\n  'cataac'\n  >>> makePalindrome('cataacaa')\n  'cataacaa'\n  >>> makePalindrome('cataacaaaa')\n  'cataacaaaa'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string;\n  let suffix = string;\n  while (suffix.length > 0 &&!isPalindrome(suffix)) {\n    suffix = suffix.slice(0, suffix.length - 1);\n  }\n  while (prefix.length > 0 &&!isPalindrome(prefix)) {\n    prefix = prefix.slice(1, prefix.length);\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that is contained in a string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cataa')\n  'cataa'\n  >>> makePalindrome('cataac')\n  'cataac'\n  >>> makePalindrome('cataacaa')\n  'cataacaa'\n  >>> makePalindrome('cataacaaaa')\n  'cataacaaaa'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string;\n  let suffix = string;\n  while (suffix.length > 0 &&!isPalindrome(suffix)) {\n    suffix = suffix.slice(0, suffix.length - 1);\n  }\n  while (prefix.length > 0 &&!isPalindrome(prefix)) {\n    prefix = prefix.slice(1, prefix.length);\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that is contained in a string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cataa')\n  'cataa'\n  >>> makePalindrome('cataac')\n  'cataac'\n  >>> makePalindrome('cataacaa')\n  'cataacaa'\n  >>> makePalindrome('cataacaaaa')\n  'cataacaaaa'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string;\n  let suffix = string;\n  while (suffix.length >"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const stringLength = Math.min(aLength, bLength);\n  const result = Array(stringLength);\n  for (let i = 0; i < stringLength; i++) {\n    const char = a[i] ^ b[i];\n    result[i] = char.toString(2);\n  }\n  return result.join('');\n};\n\nexport default bowedStringedInstrumentXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  let length = strings.length\n  if (!length) return null\n  let lengthStrings = strings.map(str => str.length)\n  let minLength = Math.min(...lengthStrings)\n  let i = 0\n  while (i < length) {\n    let j = 0\n    let result = strings[i]\n    while (j < minLength && strings[i + j] === strings[i + j + 1]) {\n      j += 1\n    }\n    if (j === minLength) {\n      return result\n    }\n    i += j\n  }\n  return null\n}\n\n/*\n  >>> farseeing(['a', 'b', 'c'])\n  'c'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> farseeing(['a', 'b', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'])\n  'c'\n  >>> farseeing(['a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'])\n  'c'\n  */\nconst farseeing = (strings) => {\n  let length = strings.length\n  if (!length) return null\n  let lengthStrings = strings.map(str => str.length)\n  let minLength = Math.min(...lengthStrings)\n  let result = strings[0]\n  let i = 0\n  while (i < length) {\n    let j = 0\n    while (j < minLength && strings[i + j] === strings[i + j + 1]) {\n      j += 1\n    }\n    if (j === minLength) {\n      return result\n    }\n    i += j\n    result = strings[i]\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  if (b === 0) return a;\n  else return capitalCoarseDivisor(b, a % b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> capitalCoarseMultiply(3, 5)\n  15\n  >>> capitalCoarseMultiply(25, 15)\n  225\n  */\nconst capitalCoarseMultiply = (a, b) => {\n  return (a * capitalCoarseDivisor(b, capitalCoarseDivisor(a, b))) / capitalCoarseDivisor(a, b);\n};\n\n/* Return a number that has all the properties of both a and b\n  >>> capitalCoarseAdd(3, 5)\n  8\n  >>> capitalCoarseAdd(25, 15)\n  30\n  */\nconst capitalCoarseAdd = (a, b) => {\n  return {\n    capital: capitalCoarseMultiply(a.capital, b.capital),\n    coarse: capitalCoarseMultiply(a.coarse, b.coarse)\n  };\n};\n\n/* Return a number that has all the properties of both a and b\n  >>> capitalCoarseSubtract(3, 5)\n  2\n  >>> capitalCoarseSubtract(25, 15)\n  20\n  */\nconst capitalCoarseSubtract = (a, b) => {\n  return capitalCoarseAdd(a, capitalCoarseMultiply(capitalCoarseDivisor(a, b), capitalCoarseMultiply(b, capitalCoarseDivisor(b, a))));\n};\n\n/* Return a number that has all the properties of both a and b\n  >>> capitalCoarseMultiply(3, 5)\n  15\n  >>> capitalCoarseMultiply(25, 15)\n  225\n  >>> capitalCoarseSubtract(3, 5)\n  8\n  >>> capitalCoarseSubtract(25, 15)\n  20\n  */\nconst capitalCoarseSubtract = (a, b) => {\n  return capitalCoarseAdd(a, capitalCoarseMultiply(capitalCoarseDivisor(b, capitalCoarseDivisor(a, b)), capitalCoarseMultiply(b, capitalCoarseDivisor(a, b))));\n};\n\n/* Return a number that has all the properties of both a and b\n  >>> capitalCoarseDivide(3, 5)\n  1\n  >>> capitalCoarseDivide(25, 15)\n  5\n  >>> capitalCoarseDivide(25, 5)\n  25\n  */\nconst capitalCoarseDivide = (a, b) => {\n  return (a.capital / capitalCoarseDivisor(a.capital, capitalCoarseDivisor(b, capitalCoarseDivisor(b, a.capital)))) * capitalCoarseMultiply(b, capitalCoarseDivisor(a, capitalCoarseDivisor(a, b)));\n};\n\nmodule.exports = {\n  capitalCoarseAdd,\n  capitalCoarseSubtract,\n  capitalCoarseMultiply,\n  capitalCoarseDivide\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  const prefixes = []\n  const len = string.length\n\n  for (let i = 0; i <= len; i++) {\n    const prefix = string.substring(0, i)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n\n  return prefixes\n}\n\nexport default allPrefix\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  return (new Array(n + 1).join(' '))\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(6)\n  '0 1 2 3 4 5 6'\n  */\nconst bowedStringedInstrumentSuccession2 = (n) => {\n  let str = ''\n  for (let i = 0; i <= n; i++) {\n    str += (i + 1)\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(8)\n  '0 1 2 3 4 5 6 7 8'\n  */\nconst bowedStringedInstrumentSuccession3 = (n) => {\n  let str = ''\n  for (let i = 0; i <= n; i++) {\n    str += `${(i + 1)}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(12)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12'\n  */\nconst bowedStringedInstrumentSuccession4 = (n) => {\n  let str = ''\n  for (let i = 0; i <= n; i++) {\n    str += `${(i + 1)}${(i + 2)}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(18)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'\n  */\nconst bowedStringedInstrumentSuccession5 = (n) => {\n  let str = ''\n  for (let i = 0; i <= n; i++) {\n    str += `${(i + 1)}${(i + 2)}${(i + 3)}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(24)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24'\n  */\nconst bowedStringedInstrumentSuccession6 = (n) => {\n  let str = ''\n  for (let i = 0; i <= n; i++) {\n    str += `${(i + 1)}${(i + 2)}${(i + 3)}${(i + 4)}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(30)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30'\n  */\nconst bowedStringedInstrumentSuccession7 = (n) => {\n  let str = ''\n  for (let i = 0; i <= n; i++) {\n    str += `${(i + 1)}${(i + 2)}${(i + 3)}${(i + 4)}${(i + 5)}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(36)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36'\n  */\nconst bowedStringedInstrumentSuccession8 = (n) => {\n  let str = ''\n  for (let i = 0; i <= n; i++) {\n    str += `${(i + 1)}${(i + 2)}${(i + 3)}${(i + 4)}${(i + 5)}${(i + 6)}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(42)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42'\n  */\nconst bowedStringedInstrumentSuccession9 = (n) => {\n  let str = ''\n  for (let i = 0; i <= n; i++) {\n    str += `${(i + 1)}${(i + 2)}${(i + 3)}${(i + 4)}${(i + 5)}${(i + 6)}${(i + 7)}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(48)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48'\n  */\nconst bowedStringedInstrumentSuccession10 = (n) => {\n  let str = ''\n  for (let i = 0; i <= n; i++) {\n    str += `${(i + 1)}${(i + 2)}${(i + 3)}${(i + 4)}${(i + 5)}${(i + 6)}${(i + 7)}${(i + 8)}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(54)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49'\n  */\nconst bowedStringedInstrumentSuccession11 = (n) => {\n  let str = ''\n  for (let i = 0; i <= n; i++) {\n    str += `${(i + 1)}${(i + 2)}${(i + 3)}${(i + 4)}${(i + 5)}${("}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  // `string` contains only lowercase characters\n  return string.split('').reduce((acc, char) => {\n    if (acc.indexOf(char) === -1) {\n      acc.push(char);\n    }\n    return acc;\n  }, []);\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('aBc')\n  2\n  >>> considerClearcutCharacters('aa')\n  1\n  */\nconst considerClearcutCharacters2 = (string) => {\n  // `string` contains only lowercase characters\n  const hash = {};\n  for (let i = 0; i < string.length; i++) {\n    if (hash.hasOwnProperty(string[i])) {\n      hash[string[i]] += 1;\n    } else {\n      hash[string[i]] = 1;\n    }\n  }\n  return Object.keys(hash).length;\n};\n\nmodule.exports = {\n  considerClearcutCharacters,\n  considerClearcutCharacters2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (const note of notes) {\n    let beat = 0;\n    for (let i = 0; i < note.length; i++) {\n      if (note[i] === 'o') {\n        beat += 1;\n      } else if (note[i] === '|') {\n        beat += 1;\n      } else if (note[i] === '.') {\n        beat += 1;\n      }\n    }\n    beats.push(beat);\n  }\n  return beats;\n};\n\n/*\n  Input: string \"A B C D E F G\"\n  Output: [2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  if (string.length < 2) return 0\n  const subStrLen = substring.length\n  let times = 0\n  let i = 0\n  let j = 0\n  while (i < string.length - subStrLen) {\n    if (string.slice(i, i + subStrLen) === substring) {\n      times++\n      i += subStrLen\n      j = i\n      while (j < string.length) {\n        if (string.slice(j, j + subStrLen) === substring) {\n          times++\n          j += subStrLen\n        } else {\n          break\n        }\n      }\n    } else {\n      i++\n    }\n  }\n  return times\n}\n\n/*\n  Problem\n  Given a string, we may add one or more characters from the set of lowercase letters A to Z to the string.\n\n  Return a list of all possible strings we could create by doing this.\n\n  Examples:\n  >>> addOneToString('a')\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  >>> addOneToString('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  >>> addOneToString('abcd')\n  ['abcd', 'abce', 'acdb', 'acde', 'bcd', 'bcde', 'cde', 'cdf', 'def', 'defg', 'fed', 'feeg', 'feg', 'gde', 'gdf', 'hde', 'hdf', 'id', 'ide', 'jd', 'jdf', 'jfg', 'kgd', 'kgd', 'lgd', 'lgf', 'lgfj', 'lfgj','mfg','mfgj','mgfj', 'nfd', 'nfdj', 'ngf', 'ngfj', 'ofd', 'ofdj', 'ogf', 'ogfj', 'pfd', 'pfdj', 'pfg', 'pfgj', 'pgf', 'pgfj', 'qgd', 'qgf', 'rgd', 'rgf','sf','sfd','sgd','sif','sig','sjf','sjg','snf','snfj','sog','sogj','spf','spfj','spg','spgj','sqf','sqg','stf','stfj','stg','stgj', 'tfd', 'tfjd', 'tif', 'tig', 'tjf', 'tjg', 'tpf', 'tpfj', 'tpg', 'tpjg', 'uif', 'uig', 'ufd', 'ufg', 'ufj', 'ugf', 'ugfj', 'ugj', 'ujf', 'ujg', 'ulg', 'ulp', 'uog', 'uogj', 'uogj', 'upg', 'upjg', 'vf', 'vfg', 'vfj', 'vjf', 'vjp', 'wf', 'wfg', 'wfj', 'wjf', 'wjg', 'wog', 'wogj', 'wpg', 'wpgj', 'wqf', 'wqg', 'wqgj', 'wqj', 'wqjg', 'wtf', 'wtfj', 'wtg', 'wtgj', 'wtj', 'wtjg', 'wzg', 'wzgj', 'wzj', 'wzjg', 'xdf', 'xdfj', 'xfd', 'xfdj', 'xgf', 'xgfj', 'xjf', 'xjfj', 'xjg', 'xjgj', 'xmf', 'xmfj', 'xnf', 'xnfj', 'xof', 'xofj', 'xog', 'xogj', 'xpg', 'xpgj', 'xpj', 'xpgj', 'xqf', 'xqfj', 'xqg', 'xqgj', 'xqj', 'xqjg', 'xrf', 'xrfg', 'xrfj', 'xrg', 'xrgj', 'xrfq', 'xrfqg', 'xrpf', 'xrpfq', 'xspf', 'xspfq', 'xspg', 'xspgq', 'xsqf', 'xsqg', 'xsqj', 'xsqjg', 'xspgq', 'xspgqj', 'xsqgq', 'xsqjqg', 'xspq', 'xspqj', 'xspqg', 'xspqjg', 'xwf', 'xwfj', 'xwg', 'xwgj', 'xwj', 'xwjg', 'xwog', 'xwogj', 'xwpg', 'xwpgj', 'xwqf', 'xwqfj', 'xwqg', 'xwqgj', 'xwqj', 'xwqjg', 'xwtf', 'xwtfj', 'xwtg', 'xwtgj', 'xwtj', 'xwtjg', 'xwzf', 'xwzg', 'xwzgj', 'xwzj', 'xwzjg', 'xwzqf', 'xwzqfj', 'xwzqg', 'xwzqgj', 'xwzqj', 'xwzqjg', 'xwzqjgj', 'xwzqjjg', 'xwzqjjjg', 'yaf', 'yafj', 'yag', 'yagj', 'yaj', '"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNums = [...numbers.split(' ')];\n  sortedNums = sortedNums.sort((a, b) => {\n    if(a < b) {\n      return -1;\n    }\n    if(a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNums.join(' ');\n};\n\n/*\n  Given a list of integers, determine whether or not it is a permutation of the numbers 1 to 10\n  >>> isPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  True\n  >>> isPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  False\n  >>> isPermutation([1, 2, 3, 4, 5, 6, 7, 8])\n  False\n  >>> isPermutation([1, 2, 3, 4, 5, 6, 7])\n  False\n  >>> isPermutation([1, 2, 3, 4, 5])\n  False\n  >>> isPermutation([1, 2, 3, 4])\n  False\n  >>> isPermutation([1, 2, 3])\n  False\n  >>> isPermutation([1, 2])\n  False\n  >>> isPermutation([1])\n  False\n  >>> isPermutation([])\n  False\n  >>> isPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  True\n  */\nconst isPermutation = (numbers) => {\n  let i = 1;\n  while(i <= 10) {\n    if(numbers.indexOf(i) === -1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Given a string of 'A' to 'Z' and a string of 'a' to 'z', determine whether or not the first string is a permutation of the second.\n  Permutation is defined as:\n    - All characters are in the same order.\n    - All characters are lowercase.\n    - The same character may not be repeated in the string.\n  >>> isPermutation('AZ', 'az')\n  True\n  >>> isPermutation('az', 'AZ')\n  False\n  >>> isPermutation('az', 'za')\n  False\n  >>> isPermutation('AZ', 'za')\n  False\n  >>> isPermutation('aa', 'ab')\n  False\n  >>> isPermutation('aA', 'aa')\n  False\n  >>> isPermutation('Aa', 'aa')\n  False\n  >>> isPermutation('Aa', 'aA')\n  False\n  >>> isPermutation('aZ', 'az')\n  False\n  >>> isPermutation('aZ', 'za')\n  False\n  >>> isPermutation('az', 'aZ')\n  False\n  >>> isPermutation('aa', 'aZ')\n  False\n  >>> isPermutation('aa', 'Az')\n  False\n  >>> isPermutation('aA', 'Az')\n  False\n  >>> isPermutation('aa', 'Az')\n  False\n  >>> isPermutation('aA', 'Az')\n  False\n  */\nconst isPermutation = (str1, str2) => {\n  if(str1.length!== str2.length) {\n    return false;\n  }\n  let letters = {};\n  str1.split('').forEach((letter, index) => {\n    let letter = letter.toLowerCase();\n    if(letter in letters) {\n      return;\n    }\n    letters[letter] = index;\n  });\n  let allSame = str1.split('').every((letter, index) => {\n    let letter = letter.toLowerCase();\n    return (letter in letters && letters[letter] === index);\n  });\n  return allSame;\n};\n\n/*\n  Given an array of string of digits, return the number of digits\n  >>> numberOfDigits(['9', '9', '9', '9'])\n  9\n  >>> numberOfDigits(['9', '9', '9', '9', '9'])\n  10\n  >>> numberOfDigits(['9', '9', '9', '9', '9', '9'])\n  10\n  >>> numberOfDigits(['9', '9', '9', '9', '9', '9', '9'])\n  10\n  >>> numberOfDigits(['9', '9', '9', '9', '9', '9', '9', '9'])\n  10\n  >>> numberOfDigits(['9', '9', '9', '9', '9', '9', '9', '9', '9'])\n  10\n  >>> numberOfDigits(['9', '9', '9', '9', '9', '9', '9', '9', '9', '9'])\n  10\n  >>> numberOfDigits(['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'])\n  10\n  >>> numberOfDigits(['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'])\n  10\n  >>> numberOfDigits(['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'])\n  10\n  >>> numberOfDigits(['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'])\n  10\n  >>> numberOfDigits(['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  // get the difference between each element in the array and the previous element\n  const diff = [...new Array(numbers.length - 1)].map((x, i) => x - numbers[i]);\n  // get the two elements with the smallest difference\n  const [smallest1, smallest2] = diff.sort()[0].split(Math.abs(smallest1 - smallest2));\n  // return the first and second element\n  return [numbers[smallest1], numbers[smallest2]];\n};\n\nmodule.exports = receiveClosestChemicalElement;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  return numbers.reduce((acc, n) => {\n    acc[0] = acc[0] + n;\n    acc[1] = acc[1] + n * n;\n    return acc;\n  }, [0, 0]);\n}\n\nconst mean = (numbers) => {\n  return numbers.reduce((acc, n) => {\n    acc[0] = acc[0] + n;\n    return acc;\n  }, [0]);\n}\n\nconst variance = (numbers) => {\n  return numbers.reduce((acc, n) => {\n    const x = acc[0];\n    const y = acc[1];\n    const n_minus_1 = n - 1;\n    acc[0] = (x + n * n_minus_1) / n_minus_1;\n    acc[1] = (y + n_minus_1 * n_minus_1) / n_minus_1;\n    return acc;\n  }, [0, 0]);\n}\n\nconst stdDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance[0]);\n}\n\nconst mode = (numbers) => {\n  const values = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (values.indexOf(numbers[i]) === -1) {\n      values.push(numbers[i]);\n    }\n  }\n  return values[Math.max.apply(Math, values)];\n}\n\nconst sortBy = (numbers, sortBy = 'value') => {\n  const sortedNums = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sortedNums.push([numbers[i], i]);\n  }\n  sortedNums.sort((a, b) => a[sortBy] > b[sortBy]? 1 : -1);\n  return sortedNums.map(n => n[0]);\n}\n\nconst median = (numbers) => {\n  const sortedNums = sortBy(numbers);\n  if (sortedNums.length % 2 === 0) {\n    return (sortedNums[Math.floor(sortedNums.length / 2)] + sortedNums[Math.floor(sortedNums.length / 2) + 1]) / 2;\n  } else {\n    return sortedNums[Math.floor(sortedNums.length / 2)];\n  }\n}\n\nconst modeBy = (numbers, modeBy = 'index') => {\n  const values = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (values.indexOf(numbers[i][modeBy]) === -1) {\n      values.push(numbers[i][modeBy]);\n    }\n  }\n  return values[Math.max.apply(Math, values)];\n}\n\nconst sample = (numbers, k = 1) => {\n  const sample = [];\n  for (let i = 0; i < k; i++) {\n    sample.push(numbers[Math.floor(Math.random() * numbers.length)]);\n  }\n  return sample;\n}\n\nconst sampleBy = (numbers, sampleBy = 'index') => {\n  const sample = [];\n  for (let i = 0; i < k; i++) {\n    sample.push(numbers[sampleBy][Math.floor(Math.random() * numbers[sampleBy].length)]);\n  }\n  return sample;\n}\n\nconst modeBy2 = (numbers, modeBy = 'index') => {\n  const values = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (values.indexOf(numbers[i][modeBy]) === -1) {\n      values.push(numbers[i][modeBy]);\n    }\n  }\n  return values[Math.max.apply(Math, values)];\n}\n\nconst sampleBy2 = (numbers, sampleBy = 'index') => {\n  const values = [];\n  for (let i = 0; i < k; i++) {\n    values.push(numbers[sampleBy][Math.floor(Math.random() * numbers[sampleBy].length)]);\n  }\n  return values;\n}\n\nconst sampleBy3 = (numbers, sampleBy = 'index') => {\n  const values = [];\n  for (let i = 0; i < k; i++) {\n    values.push(numbers[sampleBy][Math.floor(Math.random() * numbers[sampleBy].length)]);\n  }\n  return values;\n}\n\nmodule.exports = {\n  mean,\n  variance,\n  stdDeviation,\n  mode,\n  sortBy,\n  median,\n  modeBy,\n  sample,\n  sampleBy,\n  sampleBy2,\n  sampleBy3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'number' && isInteger(val);\n  });\n};\n\nconst isInteger = (val) => {\n  return!isNaN(val) && parseFloat(val) % 1 === 0;\n};\n\n/*\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'number';\n  });\n};\n\n/*\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((val) => {\n    return typeof val ==='string';\n  });\n};\n\n/*\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'object';\n  });\n};\n\n/*\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter((val) => {\n    return Array.isArray(val);\n  });\n};\n\n/*\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'boolean';\n  });\n};\n\n/*\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter((val) => {\n    return val!== null;\n  });\n};\n\n/*\n  >>> filterNil(['a', 3.14, 5])\n  [5]\n  >>> filterNil([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNil = (values) => {\n  return values.filter((val) => {\n    return val!== null && val!== undefined;\n  });\n};\n\nexport {\n  filterNumbers,\n  filterStrings,\n  filterIntegers,\n  filterArrays,\n  filterObjects,\n  filterBooleans,\n  filterNulls,\n  filterNil\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index++\n  }\n  return index\n}\n\n/* Return length of given string with unicode\n  >>> strlen(u'abc')\n  3\n  */\nconst unicode_strlen = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 1\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 1\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_2 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 2\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_3 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 3\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_4 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 4\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_5 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 5\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_6 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 6\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_7 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 7\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_8 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 8\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_9 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 9\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_10 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 10\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_11 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 11\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_12 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 12\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_13 = (string) => {\n  let index = 0\n  while (index < string.length) {\n    if (string.charCodeAt(index) === 0x0A) {\n      break\n    }\n    index += 13\n  }\n  return index\n}\n\n/* Return length of given string with utf8\n  >>> strlen(u'abc')\n  3\n  */\nconst utf8_strlen_14 = (string) => {\n  "}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  let divisor = 2\n  while (n % divisor) {\n    divisor++\n  }\n  return divisor\n}\n\n/*\n  >>> bigDivisor(8)\n  2\n  >>> bigDivisor(16)\n  4\n  >>> bigDivisor(10)\n  1\n  >>> bigDivisor(12)\n  2\n  >>> bigDivisor(26)\n  3\n  >>> bigDivisor(18)\n  2\n  >>> bigDivisor(24)\n  4\n  >>> bigDivisor(9)\n  1\n  >>> bigDivisor(27)\n  3\n  >>> bigDivisor(28)\n  1\n  >>> bigDivisor(33)\n  1\n  >>> bigDivisor(45)\n  1\n  >>> bigDivisor(64)\n  2\n  >>> bigDivisor(64)\n  2\n  >>> bigDivisor(70)\n  3\n  >>> bigDivisor(72)\n  3\n  >>> bigDivisor(81)\n  3\n  >>> bigDivisor(88)\n  3\n  >>> bigDivisor(96)\n  4\n  >>> bigDivisor(105)\n  5\n  >>> bigDivisor(111)\n  3\n  >>> bigDivisor(108)\n  3\n  >>> bigDivisor(120)\n  3\n  >>> bigDivisor(126)\n  3\n  >>> bigDivisor(132)\n  4\n  >>> bigDivisor(144)\n  4\n  >>> bigDivisor(147)\n  5\n  >>> bigDivisor(168)\n  6\n  >>> bigDivisor(180)\n  6\n  >>> bigDivisor(186)\n  6\n  >>> bigDivisor(192)\n  6\n  >>> bigDivisor(198)\n  6\n  >>> bigDivisor(216)\n  6\n  >>> bigDivisor(216)\n  6\n  >>> bigDivisor(225)\n  3\n  >>> bigDivisor(288)\n  9\n  >>> bigDivisor(270)\n  3\n  >>> bigDivisor(300)\n  9\n  >>> bigDivisor(312)\n  9\n  >>> bigDivisor(330)\n  9\n  >>> bigDivisor(360)\n  10\n  >>> bigDivisor(405)\n  15\n  >>> bigDivisor(456)\n  15\n  >>> bigDivisor(510)\n  15\n  >>> bigDivisor(720)\n  15\n  >>> bigDivisor(900)\n  15\n  >>> bigDivisor(900)\n  15\n  >>> bigDivisor(960)\n  15\n  >>> bigDivisor(960)\n  15\n  >>> bigDivisor(1296)\n  15\n  >>> bigDivisor(1296)\n  15\n  >>> bigDivisor(1800)\n  15\n  >>> bigDivisor(3600)\n  15\n  >>> bigDivisor(7200)\n  15\n  >>> bigDivisor(7200)\n  15\n  >>> bigDivisor(7200)\n  15\n  >>> bigDivisor(9000)\n  15\n  >>> bigDivisor(9000)\n  15\n  >>> bigDivisor(9000)\n  15\n  >>> bigDivisor(12000)\n  15\n  >>> bigDivisor(12000)\n  15\n  >>> bigDivisor(12000)\n  15\n  >>> bigDivisor(14400)\n  15\n  >>> bigDivisor(14400)\n  15\n  >>> bigDivisor(16800)\n  15\n  >>> bigDivisor(16800)\n  15\n  >>> bigDivisor(24000)\n  15\n  >>> bigDivisor(24000)\n  15\n  >>> bigDivisor(24000)\n  15\n  >>> bigDivisor(28800)\n  15\n  >>> bigDivisor(28800)\n  15\n  >>> bigDivisor(28800)\n  15\n  >>> bigDivisor(36000)\n  15\n  >>> bigDivisor(36000)\n  15\n  >>> bigDivisor(36000)\n  15\n  >>> bigDivisor(43200)\n  15\n  >>> bigDivisor(43200)\n  15\n  >>> bigDivisor(48000)\n  15\n  >>> bigDivisor(48000)\n  15\n  >>> bigDivisor(48000)\n  15\n  >>> bigDivisor(54000)\n  15\n  >>> bigDivisor(54000)\n  15\n  >>> bigDivisor(54000)\n  15\n  >>> bigDivisor(64800)\n  15\n  >>> bigDivisor(64800)\n  15\n  >>> bigDivisor(64800)\n  15\n  >>> bigDivisor(71680)\n  15\n  >>> bigDivisor(71680)\n  15\n  >>> bigDivisor(71680)\n  15\n  >>> bigDivisor(86400)\n  15\n  >>> bigDivisor(86400)\n  15\n  >>> bigDivisor(91200)\n  15\n  >>> bigDivisor(91200)\n  15\n  >>> bigDivisor(91200)\n  15\n  >>> bigDivisor(98400)\n  15\n  >>> bigDivisor(98400)\n  15\n  >>> bigDivisor(98400)\n  15\n  >>> bigDivisor(108000)\n  15\n  >>> bigDivisor(108000)\n  15\n  >>> bigDivisor(108000)\n  15\n  >>> bigDivisor(118800)\n  15\n  >>> bigDivisor(118800)\n  15\n  >>> bigDivisor(118800)\n  15\n  >>> bigDivisor(129600)\n  15\n  >>> bigDivisor(129600)\n  15\n  >>> bigDivisor(129600)\n  15\n  >>> bigDivisor"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let count = 1;\n  while (n > 1) {\n    if (n % 2 === 0) {\n      factors.push(2);\n      n = n / 2;\n    } else {\n      const remainder = n % 3;\n      if (remainder === 0) {\n        factors.push(3);\n        n = n / 3;\n      } else if (remainder === 1) {\n        factors.push(1);\n        n = n / 3;\n      } else if (remainder === 2) {\n        factors.push(2);\n        n = n / 3;\n      }\n    }\n    count++;\n  }\n  return factors;\n};\n\nmodule.exports = {\n  factorize,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const d = new Set()\n  return numbers.filter((v, i) => d.has(v)? false : (d.add(v), true))\n}\n\nconsole.log(getRidOfDuplicate([1, 2, 3, 2, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* For a given string, replace the first letter with the first letter of\n  a new string, and all other letters with lowercase letters.\n  >>> impudentCapital('Hello')\n  'hELLO'\n  */\nconst impudentCapital = (string) => {\n  return string.replace(/^[A-Z]/, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> impudentCapital('Hello')\n  'HELLO'\n  >>> impudentCapital('hELLO')\n  'Hello'\n  >>> impudentCapital('hEllo')\n  'Hello'\n  */\nconst impudentCapital2 = (string) => {\n  return string.replace(/^[a-z]/, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* For a given string, replace all uppercase letters with lowercase letters.\n  >>> impudentLower('HELLO')\n  'hello'\n  */\nconst impudentLower = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> impudentLower('HELLO')\n  'hello'\n  >>> impudentLower('hELLO')\n  'hello'\n  >>> impudentLower('hEllo')\n  'hello'\n  */\nconst impudentLower2 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> impudentUpper('HELLO')\n  'HELLO'\n  >>> impudentUpper('hELLO')\n  'Hello'\n  >>> impudentUpper('hEllo')\n  'Hello'\n  */\nconst impudentUpper = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* For a given string, replace all lowercase letters with uppercase letters.\n  >>> impudentUpper('hello')\n  'HELLO'\n  */\nconst impudentUpper2 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* For a given string, replace all letters with their equivalent hexadecimal\n  character.\n  >>> impudentHex('hello')\n  '68656c6c6f'\n  >>> impudentHex('HELLO')\n  '68656c6c6f'\n  >>> impudentHex('hELLO')\n  '68656c6c6f'\n  >>> impudentHex('hEllo')\n  '68656c6c6f'\n  */\nconst impudentHex = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return String.fromCharCode(match.charCodeAt(0) + 32);\n  });\n};\n\n/*\n  >>> impudentHex('HELLO')\n  '68656c6c6f'\n  >>> impudentHex('hELLO')\n  '68656c6c6f'\n  >>> impudentHex('hEllo')\n  '68656c6c6f'\n  */\nconst impudentHex2 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return String.fromCharCode(match.charCodeAt(0) - 32);\n  });\n};\n\n/*\n  >>> impudentHex('HELLO')\n  '68656c6c6f'\n  >>> impudentHex('hELLO')\n  '68656c6c6f'\n  >>> impudentHex('hEllo')\n  '68656c6c6f'\n  */\nconst impudentHex3 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return String.fromCharCode(match.charCodeAt(0) - 32 + 16);\n  });\n};\n\n/*\n  >>> impudentHex('HELLO')\n  '68656c6c6f'\n  >>> impudentHex('hELLO')\n  '68656c6c6f'\n  >>> impudentHex('hEllo')\n  '68656c6c6f'\n  */\nconst impudentHex4 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return String.fromCharCode(match.charCodeAt(0) - 32 + 16 + 16);\n  });\n};\n\n/*\n  >>> impudentHex('HELLO')\n  '68656c6c6f'\n  >>> impudentHex('hELLO')\n  '68656c6c6f'\n  >>> impudentHex('hEllo')\n  '68656c6c6f'\n  */\nconst impudentHex5 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return String.fromCharCode(match.charCodeAt(0) - 32 + 16 + 16 + 16);\n  });\n};\n\n/*\n  >>> impudentHex('HELLO')\n  '68656c6c6f'\n  >>> impudentHex('hELLO')\n  '68656c6c6f'\n  >>> impudentHex('hEllo')\n  '68656c6c6f'\n  */\nconst impudentHex6 = (string) => {\n  return string.replace(/[a-z]"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((prev, curr) => prev + curr, '');\n};\n\nmodule.exports = concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Get the index of the first string in a list that contains a given prefix.\n  >>> indexOfPrefix([], 'a')\n  -1\n  >>> indexOfPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  1\n  >>> indexOfPrefix(['abc', 'bcd', 'cde', 'array'], 'f')\n  -1\n  */\nconst indexOfPrefix = (strings, prefix) => {\n  return strings.findIndex(s => s.startsWith(prefix));\n};\n\n/*\n  Get the last index of a string in a list.\n  >>> lastIndexOf('abc', 'a')\n  3\n  >>> lastIndexOf('abc', 'b')\n  2\n  >>> lastIndexOf('abc', 'c')\n  1\n  >>> lastIndexOf('abc', 'd')\n  -1\n  */\nconst lastIndexOf = (str, searchStr) => {\n  return str.lastIndexOf(searchStr);\n};\n\n/*\n  Get the index of the last string in a list that contains a given prefix.\n  >>> lastIndexOfPrefix([], 'a')\n  -1\n  >>> lastIndexOfPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  3\n  >>> lastIndexOfPrefix(['abc', 'bcd', 'cde', 'array'], 'f')\n  -1\n  */\nconst lastIndexOfPrefix = (strings, prefix) => {\n  return strings.slice(0, indexOfPrefix(strings, prefix)).reverse()[0];\n};\n\n/*\n  Return a list of the first 10 elements of a list.\n  >>> take(10, ['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde', 'array']\n  >>> take(10, [])\n  []\n  */\nconst take = (num, list) => {\n  return list.slice(0, num);\n};\n\n/*\n  Return a list of the last 10 elements of a list.\n  >>> drop(10, ['abc', 'bcd', 'cde', 'array'])\n  ['bcd', 'cde', 'array']\n  >>> drop(10, [])\n  []\n  */\nconst drop = (num, list) => {\n  return list.slice(list.length - num);\n};\n\n/*\n  Return a list with the first N elements of a list.\n  >>> takeN(3, ['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde']\n  >>> takeN(3, [])\n  []\n  */\nconst takeN = (num, list) => {\n  return take(num, list);\n};\n\n/*\n  Return a list with the last N elements of a list.\n  >>> dropN(3, ['abc', 'bcd', 'cde', 'array'])\n  ['cde', 'array']\n  >>> dropN(3, [])\n  []\n  */\nconst dropN = (num, list) => {\n  return drop(num, list);\n};\n\nmodule.exports = {\n  filterByPrefix,\n  indexOfPrefix,\n  lastIndexOf,\n  lastIndexOfPrefix,\n  take,\n  takeN,\n  drop,\n  dropN,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\nconst isSorted = (l) => {\n  if (l.length < 2) {\n    return true;\n  }\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\nconst merge = (a, b) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < a.length && j < b.length) {\n    if (a[i] < b[j]) {\n      result.push(a[i]);\n      i++;\n    } else if (a[i] > b[j]) {\n      result.push(b[j]);\n      j++;\n    } else {\n      result.push(a[i]);\n      i++;\n      j++;\n    }\n  }\n  if (i < a.length) {\n    while (i < a.length) {\n      result.push(a[i]);\n      i++;\n    }\n  }\n  if (j < b.length) {\n    while (j < b.length) {\n      result.push(b[j]);\n      j++;\n    }\n  }\n  return result;\n};\n\nconst mergeSort = (l) => {\n  if (isSorted(l)) {\n    return l;\n  }\n  let half = Math.floor(l.length / 2);\n  let left = mergeSort(l.slice(0, half));\n  let right = mergeSort(l.slice(half));\n  return merge(left, right);\n};\n\nmodule.exports = mergeSort;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  let i = 1\n  let prime = true\n  while (prime) {\n    if (i * i > n) {\n      break\n    }\n    if (n % i === 0) {\n      prime = false\n    }\n    i++\n  }\n  return prime\n}\n\nmodule.exports = isPremier\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if(len % 2!== 0)\n    throw new Error('List should have even number of elements');\n\n  const max = xs[len / 2];\n  const min = xs[len / 2 - 1];\n  if(max === 0 && min === 0)\n    throw new Error('List should have non zero elements');\n\n  let i = 0;\n  while(Math.abs(poly(xs, i)) <= max)\n    i++;\n\n  return i;\n}\n\nmodule.exports = {\n  poly,\n  findZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.slice(0, 3).concat(l.slice(3).sort());\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i === 0 || l[i]!== l[i - 1]) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n};\n\n/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone2 = (l) => {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i === 0 || l[i]!== l[i - 1] || l[i]!== l[i + 1]) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n};\n\n/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone3 = (l) => {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i === 0 || l[i]!== l[i - 1] || l[i]!== l[i + 1] || l[i]!== l[i + 2]) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n};\n\n/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone4 = (l) => {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i === 0 || l[i]!== l[i - 1] || l[i]!== l[i + 1] || l[i]!== l[i + 2] || l[i]!== l[i + 3]) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n};\n\n/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone5 = (l) => {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i === 0 || l[i]!== l[i - 1] || l[i]!== l[i + 1] || l[i]!== l[i + 2] || l[i]!== l[i + 3] || l[i]!== l[i + 4]) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n};\n\n/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone6 = (l) => {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i === 0 || l[i]!== l[i - 1] || l[i]!== l[i + 1] || l[i]!== l[i + 2] || l[i]!== l[i + 3] || l[i]!== l[i + 4] || l[i]!== l[i + 5]) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n};\n\n/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone7 = (l) => {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i === 0 || l[i]!== l[i - 1] || l[i]!== l[i + 1] || l[i]!== l[i + 2] || l[i]!== l[i + 3] || l[i]!== l[i + 4] || l[i]!== l[i + 5] || l[i]!== l[i + 6]) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n};\n\n/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone8 = (l) => {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i === 0 || l[i]!== l[i - 1] || l[i]!== l[i + 1] || l[i]!== l[i + 2] || l[i]!== l[i + 3] || l[i]!== l[i + 4] || l[i]!== l[i + 5] || l[i]!== l[i + 6] || l[i]!== l[i + 7]) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n};\n\n/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone9 = (l) => {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i === 0 || l[i]!== l[i - 1] || l[i]!== l[i + 1] || l[i]!== l[i + 2] || l[i]!== l[i + 3"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  const maximum = () => {\n    let temp = 0;\n    for (let i = 0; i < l.length; i += 1) {\n      if (l[i] > temp) {\n        temp = l[i];\n      }\n    }\n    return temp;\n  };\n  const min = () => {\n    let temp = l[0];\n    for (let i = 1; i < l.length; i += 1) {\n      if (l[i] < temp) {\n        temp = l[i];\n      }\n    }\n    return temp;\n  };\n  return {\n    maximum,\n    min\n  };\n};\n\n//export default soapElement;\n\nexport default (l) => {\n  return soapElement(l);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const digit7 = (x) => x % 11 === 0 || x % 13 === 0;\n  const nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  return nums.filter((x) => digit7(x) && nums.indexOf(n) < n);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.reduce((a, b) => {\n    if (a % 2!== 0 && b % 2 === 0) {\n      a = b;\n    }\n    return a;\n  });\n};\n\nmodule.exports = sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('-')) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(groups2.slice(3 * i, Math.min((3 * i + 3), s.length)).join(''));\n  }\n  return groups.join('');\n}\n\n/*\n  returns a string of length l that contains a sequence of n equal characters.\n  */\nconst getRandom = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += c;\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  */\nconst getRandomChars = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandom(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters\n  with every 3rd character repeating.\n  */\nconst getCyclic = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandomChars(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  The returned string is cyclic.\n  */\nconst getCyclicChars = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandomChars(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  The returned string is cyclic.\n  */\nconst getCyclicChars2 = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandomChars(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  The returned string is cyclic.\n  */\nconst getCyclicChars3 = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandomChars(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  The returned string is cyclic.\n  */\nconst getCyclicChars4 = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandomChars(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  The returned string is cyclic.\n  */\nconst getCyclicChars5 = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandomChars(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  The returned string is cyclic.\n  */\nconst getCyclicChars6 = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandomChars(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  The returned string is cyclic.\n  */\nconst getCyclicChars7 = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandomChars(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  The returned string is cyclic.\n  */\nconst getCyclicChars8 = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandomChars(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  The returned string is cyclic.\n  */\nconst getCyclicChars9 = (l, n) => {\n  const c = '';\n  for (let i = 0; i < n; i++)\n    c += getRandomChars(1, 26);\n  return c.slice(0, l);\n}\n\n/*\n  returns a string of length l that contains a sequence of n characters.\n  The returned string is cyclic.\n  */\nconst getCyclicChars10 = (l, n) => {\n  const c = '';\n  for (let i ="}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  const fib = fibonacci(n);\n  return isPrime(fib) && fib === n? fib : fib - fib % 2;\n};\n\nconsole.log(premierFib(1));\nconsole.log(premierFib(2));\nconsole.log(premierFib(3));\nconsole.log(premierFib(4));\nconsole.log(premierFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    const current = l[i];\n    const next = l[i + 1];\n    if (current + next === 0) {\n      set.add(current);\n      set.add(next);\n    } else {\n      set.delete(current);\n      set.delete(next);\n    }\n  }\n  return set.size === 3;\n};\n\nconsole.log(tripleTotalToZero([1, 3, 5, 0]));\nconsole.log(tripleTotalToZero([1, 3, -2, 1]));\nconsole.log(tripleTotalToZero([1, 2, 3, 7]));\nconsole.log(tripleTotalToZero([2, 4, -5, 3, 9, 7]));\nconsole.log(tripleTotalToZero([1]));\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collisionCount = 0;\n  let a = new Array(n);\n  let b = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i;\n    b[i] = n - i - 1;\n  }\n  while (true) {\n    collisionCount += checkCollision(a, b);\n    if (collisionCount === n) break;\n    swap(a, b);\n  }\n  return collisionCount;\n}\n\nmodule.exports = {\n  cableCarRaceCollision: cableCarRaceCollision\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.slice().concat([1]).concat(l.slice(1).concat([1]));\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n    let s = 0;\n    for (let i = 0; i < l.length; i++) {\n        s += l[i];\n    }\n    if (s === 0) return false;\n    for (let i = 0; i < l.length; i++) {\n        if (s === l[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  const num = x.toString();\n  const result = [];\n  const remainder = x % base;\n  for (let i = 0; i < num.length; i += 1) {\n    result.push(num[i] + remainder.toString());\n    remainder = remainder * base;\n  }\n  return result.join('');\n};\n\n/**\n  * Convert number x to base.\n  * return string representation of x converted to base.\n  * @param {number} x\n  * @param {number} base\n  * @return {string}\n  * @example\n  *\n  * //output:\n  * varietyBase(4, 2)\n  * //'100'\n  */\nconst varietyBase2 = (x, base) => {\n  const result = [];\n  let div = 1;\n  let remainder = x;\n  while (remainder >= base) {\n    remainder = remainder % base;\n    result.push(1 + remainder.toString());\n    div = div + 1;\n  }\n  return result.reverse().join('') + div.toString();\n};\n\n/**\n  * Convert number x to base.\n  * return string representation of x converted to base.\n  * @param {number} x\n  * @param {number} base\n  * @return {string}\n  * @example\n  *\n  * //output:\n  * varietyBase(8, 3)\n  * //'22'\n  */\nconst varietyBase3 = (x, base) => {\n  const num = x.toString();\n  const result = [];\n  const remainder = x % base;\n  for (let i = 0; i < num.length; i += 1) {\n    result.push(num[i] + remainder.toString());\n    remainder = remainder * base;\n  }\n  return result.join('');\n};\n\nmodule.exports = {\n  varietyBase,\n  varietyBase2,\n  varietyBase3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * (h - Math.sqrt(h * h - 4 * a * a)) / 2;\n};\n\nexport default triangulumArea;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if (n === 3) {\n        return 0;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// test case\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('median of empty list')\n  }\n\n  let half = Math.floor(l.length / 2)\n  if (l.length % 2 === 0) {\n    return (l[half - 1] + l[half]) / 2\n  } else {\n    return l[half]\n  }\n}\n\nexport default median\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let string = text.toLowerCase();\n    let length = string.length;\n    for (let i = 0; i < length / 2; i++) {\n        if (string[i]!== string[length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport default isPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)\n   ? (Math.pow(2, n % p) % p)\n    : n\n}\n\n/*Return a random number in [0,n).\n  >>> rand(0, 0)\n  0\n  >>> rand(1, 1)\n  1\n  >>> rand(1, 2)\n  2\n  >>> rand(0, 1)\n  0\n  >>> rand(1, -1)\n  0\n  >>> rand(-1, -1)\n  -1\n  >>> rand(1, -1)\n  -1\n  */\nconst rand = (n, r) => {\n  return Math.floor(Math.random() * n) % r\n}\n\n/*Return a random number in [a, b]\n  >>> rand(0, 1)\n  0\n  >>> rand(1, 2)\n  1\n  >>> rand(1, 2)\n  1\n  >>> rand(2, 1)\n  1\n  >>> rand(1, 2)\n  1\n  >>> rand(0, 2)\n  1\n  */\nconst randRange = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1)) + a\n}\n\n/*Return the length of the string.\n  >>> len('hello')\n  5\n  >>> len('hello ')\n  6\n  >>> len('hello world')\n  11\n  */\nconst len = (s) => {\n  return s.length\n}\n\n/*Return the length of the list.\n  >>> len([1, 2, 3])\n  3\n  >>> len([1, 2, 3, [1, 2]])\n  4\n  >>> len([1, 2, 3, 4, 5, [1, 2, 3]])\n  6\n  >>> len([1, 2, 3, 4, 5, 6, 7, [1, 2, 3], [4, 5, 6]])\n  10\n  >>> len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, [1, 2, 3], [4, 5, 6]])\n  11\n  */\nconst lenList = (l) => {\n  return l.length\n}\n\n/*Return the index of the first occurence of the element in the list.\n  >>> indexOf([1, 2, 3], 2)\n  1\n  >>> indexOf([1, 2, 3], 4)\n  -1\n  >>> indexOf([1, 2, 3], 2, 1)\n  2\n  */\nconst indexOf = (l, e, idx = 0) => {\n  let idx = idx\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === e) {\n      return idx\n    }\n    idx++\n  }\n  return -1\n}\n\n/*Return the index of the last occurence of the element in the list.\n  >>> lastIndexOf([1, 2, 3], 2)\n  2\n  >>> lastIndexOf([1, 2, 3], 4)\n  -1\n  >>> lastIndexOf([1, 2, 3], 2, -1)\n  3\n  */\nconst lastIndexOf = (l, e, idx = 0) => {\n  let idx = idx\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] === e) {\n      return idx\n    }\n    idx--\n  }\n  return -1\n}\n\n/*Return the index of the first occurence of the element in the list.\n  >>> lastIndexOf([1, 2, 3], 2, 1)\n  1\n  */\nconst lastIndexOf = (l, e, idx = 0) => {\n  let idx = idx\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] === e) {\n      return idx\n    }\n    idx--\n  }\n  return -1\n}\n\n/*Return a list containing elements that are in the intersection of the lists.\n  >>> intersect([1, 2, 3], [2, 3, 4])\n  [2, 3]\n  >>> intersect([1, 2, 3], [2, 3, 4], [1, 3])\n  [2, 3]\n  >>> intersect([1, 2, 3], [2, 3, 4], [1, 3, 4])\n  [2, 3]\n  >>> intersect([1, 2, 3], [2, 3, 4], [1, 3, 4], [2, 3, 4])\n  [2, 3]\n  >>> intersect([1, 2, 3], [2, 3, 4], [1, 3, 4], [2, 3, 4])\n  [2, 3]\n  */\nconst intersect = (l1, l2, idx = 0) => {\n  let idx = idx\n  let res = []\n  for (let i = 0; i < l1.length; i++) {\n    if (indexOf(l2, l1[i], idx)!= -1) {\n      res.push(l1[i])\n    }\n    idx++\n  }\n  return res\n}\n\n/*Return a list containing elements that are in the union of the lists.\n  >>> union([1, 2, 3], [2, 3, 4])\n  [1, 2, 3, 4]\n  >>> union([1, 2, 3], [2, 3, 4], [1, 3])\n  [1, 2, 3, 4]\n  >>> union([1, 2, 3], [2, 3, 4], [1, 3, 4])\n  [1, 2, 3, 4]\n  >>> union([1, 2, 3], [2, 3, 4], [1, 3, 4], [2, 3, 4])\n  [1, 2, 3, 4]\n  */\nconst union = (l1, l2, idx = 0) => {\n  let idx = idx\n"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\nconst encode = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\nconst decode = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\nconst main = () => {\n  const test = decode(\"a\");\n  console.log(test);\n  console.log(encode(\"a\"));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  text = text.toLowerCase();\n  return text.replace(/[aeiou]{1}/g, '');\n}\n\n/*\n  getRidOfNumeric is a function that takes string and returns string without numbers.\n  >>> getRidOfNumeric('')\n  ''\n  >>> getRidOfNumeric('abcdef123')\n  'abcdef'\n  >>> getRidOfNumeric('aBCDEF')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF'\n  >>> getRidOfNumeric('aBCDEF123')\n  'ABCDEF"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  const i = l.length - 1;\n  while (i >= 0 && l[i] <= t) {\n    i--;\n  }\n  return i < 0;\n};\n\n/* Return the maximum element in the list.\n  >>> maximum([1, 2, 4, 10])\n  10\n  >>> maximum([1, 2, 4, 0])\n  4\n  >>> maximum([1, 2, 4, -1])\n  4\n  >>> maximum([])\n  undefined\n  */\nconst maximum = (l) => {\n  const i = l.length - 1;\n  while (i >= 0 && l[i] <= l[i + 1]) {\n    i--;\n  }\n  return l[i + 1];\n};\n\n/* Return the minimum element in the list.\n  >>> minimum([1, 2, 4, 10])\n  1\n  >>> minimum([1, 2, 4, 0])\n  1\n  >>> minimum([1, 2, 4, -1])\n  1\n  >>> minimum([])\n  undefined\n  */\nconst minimum = (l) => {\n  const i = l.length - 1;\n  while (i >= 0 && l[i] <= l[i + 1]) {\n    i--;\n  }\n  return l[i];\n};\n\n/* Return the largest of two numbers.\n  >>> largest(1, 2)\n  2\n  >>> largest(2, 1)\n  2\n  >>> largest(1, -1)\n  1\n  >>> largest(2, -2)\n  2\n  */\nconst largest = (a, b) => {\n  return a > b? a : b;\n};\n\n/* Return the smallest of two numbers.\n  >>> smallest(1, 2)\n  1\n  >>> smallest(2, 1)\n  1\n  >>> smallest(1, -1)\n  1\n  >>> smallest(2, -2)\n  2\n  */\nconst smallest = (a, b) => {\n  return a < b? a : b;\n};\n\n/* Return a random number from the list.\n  >>> random([1, 2, 4, 10])\n  4\n  >>> random([1, 2, 4, 0])\n  1\n  >>> random([1, 2, 4, -1])\n  4\n  >>> random([])\n  undefined\n  */\nconst random = (l) => {\n  const i = Math.floor(Math.random() * l.length);\n  return l[i];\n};\n\n/* Return a random element from the list.\n  >>> randomElement([1, 2, 4, 10])\n  4\n  >>> randomElement([1, 2, 4, 0])\n  1\n  >>> randomElement([1, 2, 4, -1])\n  4\n  >>> randomElement([])\n  undefined\n  */\nconst randomElement = (l) => {\n  const i = Math.floor(Math.random() * l.length);\n  return l[i];\n};\n\nmodule.exports = {\n  add,\n  divide,\n  divisible,\n  floor,\n  greaterThan,\n  greaterThanOrEqualTo,\n  isEven,\n  isOdd,\n  lessThan,\n  lessThanOrEqualTo,\n  maximum,\n  minimum,\n  modulo,\n  modulus,\n  multiply,\n  notEqualTo,\n  notGreaterThan,\n  notGreaterThanOrEqualTo,\n  notLessThan,\n  notLessThanOrEqualTo,\n  notNull,\n  notZero,\n  odd,\n  positive,\n  product,\n  random,\n  randomElement,\n  randomInt,\n  randomIntInRange,\n  randomIntRange,\n  randomIntRangeInclusive,\n  randomIntRangeInclusiveMax,\n  randomIntRangeInclusiveMin,\n  randomIntRangeMax,\n  randomIntRangeMin,\n  randomIntRangeMaxInclusive,\n  randomIntRangeMinInclusive,\n  randomIntRangeMaxInclusive,\n  randomIntRangeMinInclusive,\n  randomIntRangeMaxInclusiveMax,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMaxInclusiveMax,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMaxInclusiveMax,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMaxInclusiveMax,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMaxInclusiveMax,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMaxInclusiveMax,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMaxInclusiveMax,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMaxInclusiveMax,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMaxInclusiveMax,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMaxInclusiveMax,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMinInclusiveMax,\n  randomIntRangeMinInclusiveMin,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMaxInclusiveMin,\n  randomIntRangeMaxInclusiveMax,\n  randomInt"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  if (x === 0) {\n    return y;\n  }\n\n  if (y === 0) {\n    return x;\n  }\n\n  if (x < 0) {\n    if (y < 0) {\n      return -lend(-x, -y);\n    }\n\n    return -lend(x + y, x);\n  }\n\n  if (y < 0) {\n    return -lend(x, -y);\n  }\n\n  return x + y;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  const s1 = s1.toLowerCase();\n  const s0 = s0.toLowerCase();\n  const chars = new Set(s0);\n  const s2 = new Set(s1);\n  return chars.every(c => s2.has(c));\n};\n\n/*\n  Check if two words are synonyms.\n  >>> synonym('abc', 'abcd')\n  true\n  >>> synonym('abcd', 'abc')\n  true\n  >>> synonym('abc', 'abcc')\n  false\n  >>> synonym('abc', 'accc')\n  false\n  >>> synonym('a', 'ab')\n  true\n  >>> synonym('a', 'aa')\n  true\n  >>> synonym('a', 'aab')\n  false\n  >>> synonym('aa', 'a')\n  true\n  >>> synonym('abcd', 'abcde')\n  false\n  >>> synonym('abcd', 'abce')\n  false\n  >>> synonym('abcd', 'abcd')\n  true\n  >>> synonym('abcdef', 'abcedf')\n  false\n  >>> synonym('abcedf', 'abcd')\n  false\n  >>> synonym('abcdef', 'abcdeg')\n  false\n  >>> synonym('abcdef', 'abcdegf')\n  false\n  >>> synonym('abcdef', 'abcdeg')\n  true\n  >>> synonym('abcdef', 'abcdegfg')\n  false\n  >>> synonym('abcdef', 'abcdegfgf')\n  false\n  >>> synonym('abcdef', 'abcdegfgg')\n  false\n  >>> synonym('abcdef', 'abcdegfggg')\n  false\n  >>> synonym('abcdef', 'abcdegfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggg')\n  false\n  >>> synonym('abcdef', 'abcdegfgggf')\n  false\n  >>> synonym('abcdef', 'abcdegfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfg')\n  false\n  >>> synonym('abcdef', 'abcdegfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfgf')\n  false\n  >>> synonym('abcdef', 'abcdegfggf')\n  true\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  false\n  >>> synonym('abcdef', 'abcdegfggfg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfgf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  false\n  >>> synonym('abcdef', 'abcdegfggfg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  false\n  >>> synonym('abcdef', 'abcdegfggfg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfgf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfgf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfgf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('abcdef', 'abcdegfggfggf')\n  false\n  >>> synonym('abcdef', 'abcdegfggfgg')\n  true\n  >>> synonym('"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    return (n <= 2)? 1 : fib(n - 1) + fib(n - 2);\n};\n\nexport default fib;<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const stack = [...brackets];\n  const bracketsLength = brackets.length;\n  while (stack.length > 0) {\n    if (stack[stack.length - 1] === \"<\") {\n      if (stack.some((_, i) => i > 0 && stack[i - 1] === \">\")) {\n        return true;\n      }\n      stack.pop();\n    } else {\n      stack.pop();\n      stack.push(\"<\");\n    }\n  }\n  return false;\n};\n\n/*\n  Takes an array of words, and returns a string that represents the\n  sentence formed by connecting all of the words together with a single\n  space in between each word. The string will be the same as the given\n  input if the input contains only one word.\n\n  >>> sentence(\"one\")\n  'one'\n  >>> sentence([\"one\", \"two\"])\n  'one two'\n  >>> sentence([\"one\", \"two\", \"three\"])\n  'one two three'\n  >>> sentence([\"one\", \"two\", \"three\", \"four\"])\n  'one two three four'\n  >>> sentence([])\n  ''\n  */\nconst sentence = (words) => {\n  const len = words.length;\n  if (len === 0) {\n    return \"\";\n  }\n  if (len === 1) {\n    return words[0];\n  }\n  return words.reduce((str, word) => str + \" \" + word, \"\");\n};\n\n/*\n  Takes an array of words, and returns a string that represents the\n  sentence formed by connecting all of the words together with a single\n  space in between each word. The string will be the same as the given\n  input if the input contains only one word.\n\n  >>> sentence(\"one\")\n  'one'\n  >>> sentence([\"one\", \"two\"])\n  'one two'\n  >>> sentence([\"one\", \"two\", \"three\"])\n  'one two three'\n  >>> sentence([\"one\", \"two\", \"three\", \"four\"])\n  'one two three four'\n  >>> sentence([])\n  ''\n  */\nconst sentenceWithSpaces = (words) => {\n  const len = words.length;\n  if (len === 0) {\n    return \"\";\n  }\n  if (len === 1) {\n    return words[0];\n  }\n  return words.reduce((str, word) => str + \" \" + word, \"\");\n};\n\n/*\n  Takes a string and returns a string that represents the number of\n  spaces that are in the string.\n\n  >>> spaces(\"one two\")\n  3\n  >>> spaces(\"one two three\")\n  4\n  >>> spaces(\"one two three four\")\n  4\n  >>> spaces(\"\")\n  0\n  >>> spaces(\"\")\n  0\n  */\nconst spaces = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return 0;\n  }\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (string[i] === \" \") {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Takes a string and returns a string that represents the number of\n  spaces that are in the string.\n\n  >>> spaces(\"one two\")\n  3\n  >>> spaces(\"one two three\")\n  4\n  >>> spaces(\"one two three four\")\n  4\n  >>> spaces(\"\")\n  0\n  >>> spaces(\"\")\n  0\n  */\nconst spacesWithSpaces = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return \"\";\n  }\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (string[i] === \" \") {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Takes a string and returns a string that contains all the lowercase\n  letters in the given string.\n\n  >>> lowercase(\"one two\")\n  'two'\n  >>> lowercase(\"one two three\")\n  'three'\n  >>> lowercase(\"one two three four\")\n  'three four'\n  >>> lowercase(\"\")\n  ''\n  >>> lowercase(\"\")\n  ''\n  */\nconst lowercase = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return \"\";\n  }\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (string[i].toLowerCase() === string[i]) {\n      count += 1;\n    }\n  }\n  return string.slice(0, count);\n};\n\n/*\n  Takes a string and returns a string that contains all the uppercase\n  letters in the given string.\n\n  >>> uppercase(\"one two\")\n  'ONE TWO'\n  >>> uppercase(\"one two three\")\n  'THREE'\n  >>> uppercase(\"one two three four\")\n  'THREE FOUR'\n  >>> uppercase(\"\")\n  ''\n  >>> uppercase(\"\")\n  ''\n  */\nconst uppercase = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return \"\";\n  }\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (string[i].toUpperCase() === string[i]) {\n      count += 1;\n    }\n  }\n  return string.slice(0, count);\n};\n\n/*\n  Takes a string and returns a string that contains all the letters\n  that are in the given string.\n\n  >>> letters(\"one two\")\n  'one two'\n  >>> letters(\"one two three\")\n  'one two three'\n  >>> letters(\"one two three four\")\n  'one two three four'\n  >>> letters(\"\")\n  ''\n  >>> letters(\"\")"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  return l.reduce((a, b) => a && b, true)\n}\n\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// [1, 2, 3, 4, 5, 6"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const uniq = new Set(l1.concat(l2));\n  return uniq.values();\n}\n\n/**\n  * Return a list of lists, sorted by length, of the elements of the given list.\n  *\n  * @param {Array} list - The list to split.\n  * @return {Array} The list of lists, sorted by length.\n  */\nconst splitList = (list) => {\n  const split = new Set(list);\n  return Array.from(split).sort((a, b) => a.length - b.length);\n}\n\n/**\n  * Returns a list of lists, sorted by length, of the elements of the given list.\n  *\n  * @param {Array} list - The list to split.\n  * @return {Array} The list of lists, sorted by length.\n  */\nconst splitListByLength = (list) => {\n  const split = new Set(list);\n  return split.values().sort((a, b) => a.length - b.length);\n}\n\n/**\n  * Returns a list of lists, sorted by length, of the elements of the given list.\n  *\n  * @param {Array} list - The list to split.\n  * @return {Array} The list of lists, sorted by length.\n  */\nconst splitListByLengthInverse = (list) => {\n  const split = new Set(list);\n  return split.values().sort((a, b) => b.length - a.length);\n}\n\n/**\n  * Returns a list of lists, sorted by length, of the elements of the given list.\n  *\n  * @param {Array} list - The list to split.\n  * @return {Array} The list of lists, sorted by length.\n  */\nconst splitListByLengthInverseByLength = (list) => {\n  const split = new Set(list);\n  return split.values().sort((a, b) => b.length - a.length);\n}\n\n/**\n  * Returns a list of lists, sorted by length, of the elements of the given list.\n  *\n  * @param {Array} list - The list to split.\n  * @return {Array} The list of lists, sorted by length.\n  */\nconst splitListByLengthByLengthInverse = (list) => {\n  const split = new Set(list);\n  return split.values().sort((a, b) => a.length - b.length);\n}\n\n/**\n  * Returns a list of lists, sorted by length, of the elements of the given list.\n  *\n  * @param {Array} list - The list to split.\n  * @return {Array} The list of lists, sorted by length.\n  */\nconst splitListByLengthByLengthInverseByLength = (list) => {\n  const split = new Set(list);\n  return split.values().sort((a, b) => a.length - b.length);\n}\n\n/**\n  * Returns a list of lists, sorted by length, of the elements of the given list.\n  *\n  * @param {Array} list - The list to split.\n  * @return {Array} The list of lists, sorted by length.\n  */\nconst splitListByLengthByLengthInverseByLengthInverse = (list) => {\n  const split = new Set(list);\n  return split.values().sort((a, b) => b.length - a.length);\n}\n\n/**\n  * Returns a list of lists, sorted by length, of the elements of the given list.\n  *\n  * @param {Array} list - The list to split.\n  * @return {Array} The list of lists, sorted by length.\n  */\nconst splitListByLengthByLengthInverseByLengthInverseByLength = (list) => {\n  const split = new Set(list);\n  return split.values().sort((a, b) => a.length - b.length);\n}\n\n/**\n  * Returns a list of lists, sorted by length, of the elements of the given list.\n  *\n  * @param {Array} list - The list to split.\n  * @return {Array} The list of lists, sorted by length.\n  */\nconst splitListByLengthByLengthInverseByLengthInverseByLength = (list) => {\n  const split = new Set(list);\n  return split.values().sort((a, b) => b.length - a.length);\n}\n\nmodule.exports = {\n  coarse,\n  splitList,\n  splitListByLength,\n  splitListByLengthInverse,\n  splitListByLengthInverseByLength,\n  splitListByLengthByLengthInverse,\n  splitListByLengthByLengthInverseByLength,\n  splitListByLengthByLengthInverseByLengthInverse,\n  splitListByLengthByLengthInverseByLengthInverseByLength,\n  splitListByLengthByLengthInverseByLengthInverseByLengthInverse,\n  splitListByLengthByLengthInverseByLengthInverseByLengthInverseByLength,\n  splitListByLengthByLengthInverseByLengthInverseByLengthInverseByLengthInverse,\n  splitListByLengthByLengthInverseByLengthInverseByLengthInverseByLengthInverseByLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  const arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793"}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  return (sum) => {\n    if (sum < n) {\n      return 1;\n    }\n    return n - sum;\n  };\n};\n\nconst getTotalN = (sum, n) => {\n  return (n) => {\n    return sum + n;\n  };\n};\n\nconst getTotalN1 = (sum, n) => {\n  return (n) => {\n    return sum + n - 1;\n  };\n};\n\nconst getTotalN2 = (sum, n) => {\n  return (n) => {\n    return sum + n - 2;\n  };\n};\n\nconst getTotalN3 = (sum, n) => {\n  return (n) => {\n    return sum + n - 3;\n  };\n};\n\nconst getTotalN4 = (sum, n) => {\n  return (n) => {\n    return sum + n - 4;\n  };\n};\n\nconst getTotalN5 = (sum, n) => {\n  return (n) => {\n    return sum + n - 5;\n  };\n};\n\nconst getTotalN6 = (sum, n) => {\n  return (n) => {\n    return sum + n - 6;\n  };\n};\n\nconst getTotalN7 = (sum, n) => {\n  return (n) => {\n    return sum + n - 7;\n  };\n};\n\nconst getTotalN8 = (sum, n) => {\n  return (n) => {\n    return sum + n - 8;\n  };\n};\n\nconst getTotalN9 = (sum, n) => {\n  return (n) => {\n    return sum + n - 9;\n  };\n};\n\nconst getTotalN10 = (sum, n) => {\n  return (n) => {\n    return sum + n - 10;\n  };\n};\n\nconst getTotalN11 = (sum, n) => {\n  return (n) => {\n    return sum + n - 11;\n  };\n};\n\nconst getTotalN12 = (sum, n) => {\n  return (n) => {\n    return sum + n - 12;\n  };\n};\n\nconst getTotalN13 = (sum, n) => {\n  return (n) => {\n    return sum + n - 13;\n  };\n};\n\nconst getTotalN14 = (sum, n) => {\n  return (n) => {\n    return sum + n - 14;\n  };\n};\n\nconst getTotalN15 = (sum, n) => {\n  return (n) => {\n    return sum + n - 15;\n  };\n};\n\nconst getTotalN16 = (sum, n) => {\n  return (n) => {\n    return sum + n - 16;\n  };\n};\n\nconst getTotalN17 = (sum, n) => {\n  return (n) => {\n    return sum + n - 17;\n  };\n};\n\nconst getTotalN18 = (sum, n) => {\n  return (n) => {\n    return sum + n - 18;\n  };\n};\n\nconst getTotalN19 = (sum, n) => {\n  return (n) => {\n    return sum + n - 19;\n  };\n};\n\nconst getTotalN20 = (sum, n) => {\n  return (n) => {\n    return sum + n - 20;\n  };\n};\n\nconst getTotalN21 = (sum, n) => {\n  return (n) => {\n    return sum + n - 21;\n  };\n};\n\nconst getTotalN22 = (sum, n) => {\n  return (n) => {\n    return sum + n - 22;\n  };\n};\n\nconst getTotalN23 = (sum, n) => {\n  return (n) => {\n    return sum + n - 23;\n  };\n};\n\nconst getTotalN24 = (sum, n) => {\n  return (n) => {\n    return sum + n - 24;\n  };\n};\n\nconst getTotalN25 = (sum, n) => {\n  return (n) => {\n    return sum + n - 25;\n  };\n};\n\nconst getTotalN26 = (sum, n) => {\n  return (n) => {\n    return sum + n - 26;\n  };\n};\n\nconst getTotalN27 = (sum, n) => {\n  return (n) => {\n    return sum + n - 27;\n  };\n};\n\nconst getTotalN28 = (sum, n) => {\n  return (n) => {\n    return sum + n - 28;\n  };\n};\n\nconst getTotalN29 = (sum, n) => {\n  return (n) => {\n    return sum + n - 29;\n  };\n};\n\nconst getTotalN30 = (sum, n) => {\n  return (n) => {\n    return sum + n - 30;\n  };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  let isOpen = false;\n  let current = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      isOpen =!isOpen;\n    } else if (brackets[i] === ')') {\n      if (isOpen) {\n        return false;\n      }\n      isOpen = true;\n    }\n    if (isOpen) {\n      current++;\n    }\n  }\n  return current === 0;\n};\n\n/**\n  Finds the longest substring that is bracketed.\n  Returns an array containing the start and end indices of the longest substring.\n  >>> longestSubstring(\"(())())\")\n  [1, 3]\n  >>> longestSubstring(\"()\")\n  [1, 2]\n  >>> longestSubstring(\"()\")\n  [1, 2]\n  >>> longestSubstring(\"(()())\")\n  [1, 3]\n  >>> longestSubstring(\"(())\")\n  [1, 2]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()()\")\n  [1, 2]\n  >>> longestSubstring(\"()())\")\n  [1, 3]\n  >>> longestSubstring(\"\")\n  []\n  >>> longestSubstring(\"((()())(())\")\n  [1, 4]\n  >>> longestSubstring(\"((())())\")\n  [1, 3]\n  >>> longestSubstring(\"((())(()))\")\n  [1, 4]\n  >>> longestSubstring(\"(((()))(()))\")\n  [1, 5]\n  >>> longestSubstring(\"((()())(()()))\")\n  [1, 5]\n  >>> longestSubstring(\"((())())\")\n  [1, 3]\n  >>> longestSubstring(\"((())\")\n  [1, 3]\n  >>> longestSubstring(\"((()()())\")\n  [1, 5]\n  >>> longestSubstring(\"(()()())\")\n  [1, 4]\n  >>> longestSubstring(\"(())\")\n  [1, 2]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"((())\")\n  [1, 3]\n  >>> longestSubstring(\"(()())\")\n  [1, 3]\n  >>> longestSubstring(\"()())\")\n  [1, 3]\n  >>> longestSubstring(\"()()\")\n  [1, 2]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"((()())\")\n  [1, 4]\n  >>> longestSubstring(\"(())\")\n  [1, 2]\n  >>> longestSubstring(\"((())\")\n  [1, 3]\n  >>> longestSubstring(\"(()())\")\n  [1, 4]\n  >>> longestSubstring(\"(())\")\n  [1, 2]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  >>> longestSubstring(\"()\")\n  [1, 1]\n  "}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs_len = xs.length\n  const derivative_arr = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    derivative_arr[i] = xs[i]\n  }\n  return derivative_arr\n}\n\nconst derivative_int = (xs) => {\n  const xs_len = xs.length\n  const derivative_arr = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    derivative_arr[i] = xs[i]\n  }\n  return derivative_arr\n}\n\nconst add_constant = (xs, c) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = xs[i] + c\n  }\n  return new_xs\n}\n\nconst multiply_constant = (xs, c) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = xs[i] * c\n  }\n  return new_xs\n}\n\nconst subtract_constant = (xs, c) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = xs[i] - c\n  }\n  return new_xs\n}\n\nconst divide_constant = (xs, c) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = xs[i] / c\n  }\n  return new_xs\n}\n\nconst multiply_scalar = (xs, s) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = xs[i] * s\n  }\n  return new_xs\n}\n\nconst subtract_scalar = (xs, s) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = xs[i] - s\n  }\n  return new_xs\n}\n\nconst divide_scalar = (xs, s) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = xs[i] / s\n  }\n  return new_xs\n}\n\nconst scale_to_range = (xs, min_value, max_value) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = (xs[i] - min_value) / (max_value - min_value)\n  }\n  return new_xs\n}\n\nconst scale_to_range_int = (xs, min_value, max_value) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = (xs[i] - min_value) / (max_value - min_value)\n  }\n  return new_xs\n}\n\nconst scale_to_range_float = (xs, min_value, max_value) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = (xs[i] - min_value) / (max_value - min_value)\n  }\n  return new_xs\n}\n\nconst scale_to_range_float_int = (xs, min_value, max_value) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = (xs[i] - min_value) / (max_value - min_value)\n  }\n  return new_xs\n}\n\nconst scale_to_range_int_int = (xs, min_value, max_value) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = (xs[i] - min_value) / (max_value - min_value)\n  }\n  return new_xs\n}\n\nconst scale_to_range_int_float = (xs, min_value, max_value) => {\n  const xs_len = xs.length\n  const new_xs = new Array(xs_len)\n  for (let i = 0; i < xs_len; i++) {\n    new_xs[i] = (xs[i] - min_value) / (max_value - min_value)\n  }\n  return new_xs\n}\n\nconst"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n    if (i === s.length - 1) {\n      if (s[i] === 'y') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(vowelReckon(\"abc\"));\nconsole.log(vowelReckon(\"abcde\"));\nconsole.log(vowelReckon(\"ACEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  return x.toString().split('').reverse().join('').substr(0, shift);\n};\n\nconst roundShiftArray = (x, shift) => {\n  let res = new Array(x.length);\n  for (let i = 0; i < x.length; i++) {\n    res[i] = roundShift(x[i], shift);\n  }\n  return res;\n};\n\n/*\n  Multiply the digits of x by y.\n  x must be a string.\n  y must be an integer.\n  Return the result as a string.\n  >>> multiply(1, '1')\n  '11'\n  >>> multiply(1, 2)\n  '10'\n  >>> multiply(1, 3)\n  '9'\n  >>> multiply(1, 4)\n  '8'\n  >>> multiply(1, 5)\n  '7'\n  >>> multiply(1, 6)\n  '6'\n  >>> multiply(1, 7)\n  '5'\n  >>> multiply(1, 8)\n  '4'\n  >>> multiply(1, 9)\n  '3'\n  >>> multiply(1, 10)\n  '2'\n  >>> multiply(1, 11)\n  '1'\n  >>> multiply(1, 12)\n  '0'\n  >>> multiply(1, 13)\n  '0'\n  >>> multiply(1, 14)\n  '0'\n  >>> multiply(1, 15)\n  '0'\n  >>> multiply(1, 16)\n  '0'\n  >>> multiply(1, 17)\n  '0'\n  >>> multiply(1, 18)\n  '0'\n  >>> multiply(1, 19)\n  '0'\n  >>> multiply(1, 20)\n  '0'\n  >>> multiply(1, 21)\n  '0'\n  >>> multiply(1, 22)\n  '0'\n  >>> multiply(1, 23)\n  '0'\n  >>> multiply(1, 24)\n  '0'\n  >>> multiply(1, 25)\n  '0'\n  >>> multiply(1, 26)\n  '0'\n  >>> multiply(1, 27)\n  '0'\n  >>> multiply(1, 28)\n  '0'\n  >>> multiply(1, 29)\n  '0'\n  >>> multiply(1, 30)\n  '0'\n  >>> multiply(1, 31)\n  '0'\n  >>> multiply(1, 32)\n  '0'\n  >>> multiply(1, 33)\n  '0'\n  >>> multiply(1, 34)\n  '0'\n  >>> multiply(1, 35)\n  '0'\n  >>> multiply(1, 36)\n  '0'\n  >>> multiply(1, 37)\n  '0'\n  >>> multiply(1, 38)\n  '0'\n  >>> multiply(1, 39)\n  '0'\n  >>> multiply(1, 40)\n  '0'\n  >>> multiply(1, 41)\n  '0'\n  >>> multiply(1, 42)\n  '0'\n  >>> multiply(1, 43)\n  '0'\n  >>> multiply(1, 44)\n  '0'\n  >>> multiply(1, 45)\n  '0'\n  >>> multiply(1, 46)\n  '0'\n  >>> multiply(1, 47)\n  '0'\n  >>> multiply(1, 48)\n  '0'\n  >>> multiply(1, 49)\n  '0'\n  >>> multiply(1, 50)\n  '0'\n  >>> multiply(1, 51)\n  '0'\n  >>> multiply(1, 52)\n  '0'\n  >>> multiply(1, 53)\n  '0'\n  >>> multiply(1, 54)\n  '0'\n  >>> multiply(1, 55)\n  '0'\n  >>> multiply(1, 56)\n  '0'\n  >>> multiply(1, 57)\n  '0'\n  >>> multiply(1, 58)\n  '0'\n  >>> multiply(1, 59)\n  '0'\n  >>> multiply(1, 60)\n  '0'\n  >>> multiply(1, 61)\n  '0'\n  >>> multiply(1, 62)\n  '0'\n  >>> multiply(1, 63)\n  '0'\n  >>> multiply(1, 64)\n  '0'\n  >>> multiply(1, 65)\n  '0'\n  >>> multiply(1, 66)\n  '0'\n  >>> multiply(1, 67)\n  '0'\n  >>> multiply(1, 68)\n  '0'\n  >>> multiply(1, 69)\n  '0'\n  >>> multiply(1, 70)\n  '0'\n  >>> multiply(1, 71)\n  '0'\n  >>> multiply(1, 72)\n  '0'\n  >>> multiply(1, 73)\n  '0'\n  >>> multiply(1, 74)\n  '0'\n  >>> multiply(1, 75)\n  '0'\n  >>> multiply(1, 76)\n  '0'\n  >>> multiply(1, 77)\n  '0'\n  >>> multiply(1, 78)\n  '0'\n  >>> multiply(1, 79)\n  '0'\n  >>> multiply(1, 80)\n  '0'\n  >>> multiply(1, 81)\n  '0'\n  >>> multiply(1, 82)\n  '0'\n  >>> multiply(1, 83)\n  '0'\n  >>> multiply(1, 84)\n  '0'\n  >>> multiply(1, 85)\n  '0'\n  >>> multiply(1, 86)\n  '0'\n  >>> multiply(1, 87)\n  '0'\n  >>> multiply(1, 88)\n  '0'\n  >>> multiply(1, 89)\n  '0'\n  >>> multiply(1, 90)\n  '0'\n  >>> multiply(1, 91)\n  '0'\n  >>> multiply(1, 92)\n  '0'\n  >>> multiply(1, 93)\n  '0'\n  >>> multiply(1, 94)\n  "}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].charCodeAt(0) >= 65 && s[i].charCodeAt(0) <= 90) {\n      sum += s[i].charCodeAt(0) - 65;\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and ').shift())\n  const oranges = parseInt(s.split(' oranges and ').shift())\n  const mango = apples + oranges - n\n  return mango\n}\n\nconst yieldDistribution = (s, n) => {\n  const apples = parseInt(s.split(' apples and '"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n    let min_value = 0;\n    let min_index = 0;\n    const res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (min_value === 0 || arr[i] < min_value) {\n                min_value = arr[i];\n                min_index = i;\n            }\n        }\n    }\n    if (min_value === 0) {\n        res = [];\n    } else {\n        res.push([min_value, min_index]);\n    }\n    return res;\n}\n\nconst arr = [4,2,3];\nconsole.log(hustle(arr));\n\n// const arr = [1,2,3];\n// console.log(hustle(arr));\n\n// const arr = [];\n// console.log(hustle(arr));\n\n// const arr = [5, 0, 3, 0, 4, 2];\n// console.log(hustle(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  let result = -1\n  for (let i = 0; i < lst.length; i++) {\n    let freq = lst[i]\n    if (freq > 0) {\n      if (result < 0 || freq >= result) {\n        result = freq\n      }\n    }\n  }\n  return result\n}\n\n//console.log(research([4, 1, 2, 2, 3, 1]))\nconsole.log(research([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n    if (!lst) {\n        return lst\n    }\n    const l = lst.length\n    const out = []\n    for (let i = 0; i < l; i++) {\n        const item = lst[i]\n        out.push(item)\n    }\n    return out.sort((a, b) => a - b)\n}\n\nmodule.exports = foreignSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  //TODO: Make it faster using\n  // http://stackoverflow.com/questions/18131053/find-area-of-triangle-using-math-formula-in-javascript\n\n  let ab = a + b;\n  let ac = a + c;\n  let bc = b + c;\n\n  if (ab > c || bc > ac) {\n    return -1;\n  }\n\n  return Math.abs(((ac * bc) - (bc * ab)) / 2);\n};\n\nconst solve = () => {\n  let input = process.stdin.read();\n  let lines = input.split(\"\\n\");\n  let sides = lines[0].split(\" \");\n  let result = triangulumArea(sides[0], sides[1], sides[2]);\n  process.stdout.write(`${result}`);\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nprocess.stdin.on('data', solve);\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n    let balanced = true;\n    let sum = 0;\n    for (let i = 0; i < q.length / 2; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        balanced = false;\n    }\n    for (let i = q.length - 1; i >= 0; i--) {\n        sum -= q[i];\n        if (sum > w) {\n            balanced = false;\n        }\n    }\n    return balanced;\n};\n\nconst q = [1, 2, 3];\nconst w = 9;\n\nconsole.log(`${willItFlee(q, w)}`);\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  const sortedArr = arr.sort();\n  const len = sortedArr.length;\n  let count = 1;\n  let i = 0;\n  while (i < len / 2) {\n    if (sortedArr[i]!== sortedArr[len - 1 - i]) {\n      count++;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = smallChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst1;\n  }\n  if (lst2.length === 0) {\n    return lst2;\n  }\n  const maxLen = Math.max(lst1.length, lst2.length);\n  const result = [];\n  let i = 0;\n  while (i < maxLen) {\n    if (lst1[i] < lst2[i]) {\n      result.push(lst1[i]);\n      i++;\n    } else if (lst1[i] > lst2[i]) {\n      result.push(lst2[i]);\n      i++;\n    } else {\n      result.push(lst1[i]);\n      i++;\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const maxPrime = a / 2\n  const minPrime = 2\n  const factors = []\n  for (let i = minPrime; i <= maxPrime; i++) {\n    const count = a % i\n    if (count === 0) {\n      return false\n    }\n    factors.push(i)\n  }\n  return factors.every(f => f > 1)\n}\n\nconst isMultiplyPrime2 = (a) => {\n  const maxPrime = a / 2\n  const minPrime = 2\n  const factors = []\n  for (let i = minPrime; i <= maxPrime; i++) {\n    const count = a % i\n    if (count === 0) {\n      return false\n    }\n    factors.push(i)\n  }\n  return factors.every(f => f > 1) && factors.every(f => f > 3)\n}\n\nconst isMultiplyPrime3 = (a) => {\n  const maxPrime = a / 2\n  const minPrime = 2\n  const factors = []\n  for (let i = minPrime; i <= maxPrime; i++) {\n    const count = a % i\n    if (count === 0) {\n      return false\n    }\n    factors.push(i)\n  }\n  return factors.every(f => f > 1) && factors.every(f => f > 3) && factors.every(f => f > 7)\n}\n\nconst isMultiplyPrime4 = (a) => {\n  const maxPrime = a / 2\n  const minPrime = 2\n  const factors = []\n  for (let i = minPrime; i <= maxPrime; i++) {\n    const count = a % i\n    if (count === 0) {\n      return false\n    }\n    factors.push(i)\n  }\n  return factors.every(f => f > 1) && factors.every(f => f > 3) && factors.every(f => f > 7) && factors.every(f => f > 13)\n}\n\nconst isMultiplyPrime5 = (a) => {\n  const maxPrime = a / 2\n  const minPrime = 2\n  const factors = []\n  for (let i = minPrime; i <= maxPrime; i++) {\n    const count = a % i\n    if (count === 0) {\n      return false\n    }\n    factors.push(i)\n  }\n  return factors.every(f => f > 1) && factors.every(f => f > 3) && factors.every(f => f > 7) && factors.every(f => f > 13) && factors.every(f => f > 29)\n}\n\nconst isMultiplyPrime6 = (a) => {\n  const maxPrime = a / 2\n  const minPrime = 2\n  const factors = []\n  for (let i = minPrime; i <= maxPrime; i++) {\n    const count = a % i\n    if (count === 0) {\n      return false\n    }\n    factors.push(i)\n  }\n  return factors.every(f => f > 1) && factors.every(f => f > 3) && factors.every(f => f > 7) && factors.every(f => f > 13) && factors.every(f => f > 29) && factors.every(f => f > 61)\n}\n\nconst isMultiplyPrime7 = (a) => {\n  const maxPrime = a / 2\n  const minPrime = 2\n  const factors = []\n  for (let i = minPrime; i <= maxPrime; i++) {\n    const count = a % i\n    if (count === 0) {\n      return false\n    }\n    factors.push(i)\n  }\n  return factors.every(f => f > 1) && factors.every(f => f > 3) && factors.every(f => f > 7) && factors.every(f => f > 13) && factors.every(f => f > 29) && factors.every(f => f > 61) && factors.every(f => f > 103)\n}\n\nconst isMultiplyPrime8 = (a) => {\n  const maxPrime = a / 2\n  const minPrime = 2\n  const factors = []\n  for (let i = minPrime; i <= maxPrime; i++) {\n    const count = a % i\n    if (count === 0) {\n      return false\n    }\n    factors.push(i)\n  }\n  return factors.every(f => f > 1) && factors.every(f => f > 3) && factors.every(f => f > 7) && factors.every(f => f > 13) && factors.every(f => f > 29) && factors.every(f => f > 61) && factors.every(f => f > 103) && factors.every(f => f > 167)\n}\n\nconst isMultiplyPrime9 = (a) => {\n  const maxPrime = a / 2\n  const minPrime = 2\n  const factors = []\n  for (let i = minPrime; i <= maxPrime; i++) {\n    const count = a % i\n    if (count === 0) {\n      return false\n    }\n    factors.push(i)\n  }\n  return factors.every(f => f > 1) && factors.every(f => f > 3) && factors.every(f => f > 7) && factors.every(f => f > 13) && factors.every(f => f > 29) && factors.every(f => f > 61) && factors.every(f => f > 103) && factors.every(f => f > 167) && factors.every(f => f > 251)\n}\n\nconst isMultiplyPrime10 = (a) => {\n  const maxPrime = a / 2\n  const minPrime = 2\n  const factors = []\n  for (let i = minPrime; i <= maxPrime; i++) {\n    const count = a % i\n    if (count === 0) {\n      return false\n    }\n    factors.push(i)\n  }\n  return factors.every(f => f > 1) && factors.every(f => f > 3) && factors.every(f => f >"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  return (x % n === 0) && (Math.pow(n, x) === x);\n}\n\nconst isElementaryWorldPowerTest = [\n  [1, 4],\n  [2, 2],\n  [8, 2],\n  [3, 2],\n  [3, 1],\n  [5, 3]\n]\n\nexport default isElementaryWorldPowerTest<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return (Math.pow(a, 3) === a);\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this integer is a perfect cube.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectcube(1) ==> true\n  perfectcube(2) ==> false\n  perfectcube(3) ==> false\n  perfectcube(4) ==> true\n  perfectcube(6) ==> true\n  perfectcube(8) ==> true\n  perfectcube(16) ==> true\n  perfectcube(32) ==> true\n  perfectcube(64) ==> true\n  perfectcube(128) ==> true\n  perfectcube(144) ==> false\n  perfectcube(144) ==> false\n  perfectcube(144) ==> false\n  */\nconst perfectcube = (a) => {\n  return (Math.pow(a, 3) === a * a * a);\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this integer is a perfect square.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectsquare(1) ==> true\n  perfectsquare(2) ==> false\n  perfectsquare(3) ==> true\n  perfectsquare(4) ==> true\n  perfectsquare(6) ==> true\n  perfectsquare(8) ==> true\n  perfectsquare(16) ==> true\n  perfectsquare(32) ==> true\n  perfectsquare(64) ==> true\n  perfectsquare(128) ==> false\n  perfectsquare(144) ==> true\n  perfectsquare(144) ==> true\n  perfectsquare(144) ==> true\n  */\nconst perfectsquare = (a) => {\n  return (Math.pow(a, 2) === a);\n}\n\n/*\n  Write a function that takes two integers a and b and returns true\n  if both of them are perfect squares.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectsquare(1, 2) ==> true\n  perfectsquare(2, 4) ==> true\n  perfectsquare(4, 8) ==> true\n  perfectsquare(4, 16) ==> false\n  perfectsquare(6, 9) ==> true\n  perfectsquare(9, 27) ==> true\n  perfectsquare(9, 81) ==> false\n  perfectsquare(16, 64) ==> true\n  perfectsquare(9, 27) ==> false\n  perfectsquare(16, 64) ==> false\n  perfectsquare(9, 27) ==> false\n  */\nconst perfectsquare = (a, b) => {\n  return (Math.pow(a, 2) === a && Math.pow(b, 2) === b);\n}\n\n/*\n  Write a function that takes two integers a and b and returns true\n  if both of them are perfect cubes.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectcube(1, 2) ==> false\n  perfectcube(2, 4) ==> true\n  perfectcube(4, 8) ==> true\n  perfectcube(4, 16) ==> true\n  perfectcube(6, 9) ==> true\n  perfectcube(9, 27) ==> true\n  perfectcube(9, 81) ==> true\n  perfectcube(16, 64) ==> true\n  perfectcube(9, 27) ==> false\n  perfectcube(16, 64) ==> false\n  perfectcube(9, 27) ==> false\n  */\nconst perfectcube = (a, b) => {\n  return (Math.pow(a, 3) === a && Math.pow(b, 3) === b);\n}\n\n/*\n  Write a function that takes two integers a and b and returns true\n  if both of them are perfect cubes.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectcube(1, 2) ==> false\n  perfectcube(2, 4) ==> true\n  perfectcube(4, 8) ==> true\n  perfectcube(4, 16) ==> true\n  perfectcube(6, 9) ==> true\n  perfectcube(9, 27) ==> true\n  perfectcube(9, 81) ==> true\n  perfectcube(16, 64) ==> true\n  perfectcube(9, 27) ==> false\n  perfectcube(16, 64) ==> false\n  perfectcube(9, 27) ==> false\n  */\nconst perfectcube = (a, b) => {\n  return (Math.pow(a, 3) === a && Math.pow(b, 3) === b);\n}\n\n/*\n  Write a function that takes two integers a and b and returns true\n  if both of them are perfect cubes.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectsquare(1, 2) ==> false\n  perfectsquare(2, 4) ==> true\n  perfectsquare(4, 8) ==> true\n  perfectsquare(4, 16) ==> true\n  perfectsquare(6, 9) ==> true\n  perfectsquare(9, 27) ==> true\n  perfectsquare(9, 81) ==> true\n  perfectsquare(16, 64) ==> true\n  perfectsquare(9, 27) ==> false\n  perfectsquare(16, 64) ==> false\n  perfectsquare(9, 27) ==> false\n  */\nconst perfectsquare = (a, b) => {\n  return (Math.pow(a, 3) === a && Math.pow(b, 3) === b);\n}\n\n/*\n  Write a function that takes two integers a and b and returns true\n  if both of them are perfect squares or cubes.\n  Note: you may assume the input is always valid.\n  Examples:\n  perfectsquare(1, 2) ==> true\n  perfectsquare(2, 4) ==> true\n  perfectsquare(4, 8) ==> true\n  perfectsquare(4, 16) ==> true\n  perfectsquare("}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  return num.split('').map(e => e.charCodeAt(0)).filter((e, i) => i % 2 === 1).length;\n};\n\nconst getPrimeNumbers = (num) => {\n  const result = [];\n  const hexKey = (num) => {\n    return num.split('').map(e => e.charCodeAt(0)).filter((e, i) => i % 2 === 1).length;\n  };\n\n  const isPrime = (number) => {\n    const isPrime = number > 1 && number % 1 === 0;\n\n    return isPrime;\n  };\n\n  const hexNumbers = new Set(num.split('').map(e => e.charCodeAt(0)));\n  const primeNumbers = hexNumbers.filter(isPrime);\n\n  const primeNumbersSum = primeNumbers.reduce((prev, current) => prev + current, 0);\n\n  const primeNumbersHex = primeNumbers.filter((number) => number % 10 === 1);\n\n  const hexNumbersSum = primeNumbersHex.reduce((prev, current) => prev + current, 0);\n\n  const result = primeNumbersSum + hexNumbersSum;\n\n  return result;\n};\n\nconst solution = getPrimeNumbers;\n\nconsole.log(solution('ABED1A33'));\nconsole.log(solution('123456789ABCDEF0'));\nconsole.log(solution('2020'));\nconsole.log(solution('1077E'));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return 'db' + (decimal & 1? '1' : '0') + (decimal >> 1 & 1? '1' : '0') + (decimal >> 2 & 1? '1' : '0') + (decimal >> 3 & 1? '1' : '0') + (decimal >> 4 & 1? '1' : '0') + (decimal >> 5 & 1? '1' : '0') + (decimal >> 6 & 1? '1' : '0') + (decimal >> 7 & 1? '1' : '0') + (decimal >> 8 & 1? '1' : '0') + (decimal >> 9 & 1? '1' : '0') + (decimal >> 10 & 1? '1' : '0') + (decimal >> 11 & 1? '1' : '0') + (decimal >> 12 & 1? '1' : '0') + (decimal >> 13 & 1? '1' : '0') + (decimal >> 14 & 1? '1' : '0') + (decimal >> 15 & 1? '1' : '0') + (decimal >> 16 & 1? '1' : '0') + (decimal >> 17 & 1? '1' : '0') + (decimal >> 18 & 1? '1' : '0') + (decimal >> 19 & 1? '1' : '0') + (decimal >> 20 & 1? '1' : '0') + (decimal >> 21 & 1? '1' : '0') + (decimal >> 22 & 1? '1' : '0') + (decimal >> 23 & 1? '1' : '0') + (decimal >> 24 & 1? '1' : '0') + (decimal >> 25 & 1? '1' : '0') + (decimal >> 26 & 1? '1' : '0') + (decimal >> 27 & 1? '1' : '0') + (decimal >> 28 & 1? '1' : '0') + (decimal >> 29 & 1? '1' : '0') + (decimal >> 30 & 1? '1' : '0') + (decimal >> 31 & 1? '1' : '0') + 'b';\n}\n\n/*\n  Convert a decimal number to hexadecimal.\n\n  Example:\n  decimalToHex(15)  # returns \"f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  const arr = s.split('');\n  const len = arr.length;\n  let prev = arr[0];\n  let curr = arr[1];\n  let count = 1;\n  for (let i = 1; i < len; i++) {\n    if (arr[i]!== prev) {\n      if (count > 3) {\n        return false;\n      }\n      prev = curr;\n      curr = arr[i];\n      count = 1;\n    } else {\n      count++;\n    }\n  }\n  return count >= 3;\n};\n\nconsole.log(isFelicitous('aa'));\nconsole.log(isFelicitous('aab'));\nconsole.log(isFelicitous('xyy'));\nconsole.log(isFelicitous('adb'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  const sorted = grades.slice().sort();\n  const range = [\n    { min: 0, max: 7 },\n    { min: 8, max: 9 },\n    { min: 10, max: 12 }\n  ];\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let grade = sorted[i];\n    for (let r = 0; r < range.length; r++) {\n      if (grade >= range[r].min && grade <= range[r].max) {\n        result.push(ranges[r]);\n        break;\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(numericLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n// [ 'A+', 'B', 'C-', 'C', 'A-' ]\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n  const prime = new Map();\n  for (let i = 2; i < string.length; i++) {\n    if (!prime.has(i)) {\n      prime.set(i, i);\n      const primeSet = new Set();\n      while (string.includes(i.toString())) {\n        primeSet.add(i);\n        i++;\n      }\n      if (primeSet.size === string.length) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport {\n  premierDistance\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  const arr = Array.from({ length: n }).filter(\n    (x) => x % 10 === 1 || x % 10 === 9\n  );\n  const f = (x) => {\n    let sum = 0;\n    while (x >= 10) {\n      sum += x % 10;\n      x /= 10;\n    }\n    sum += x;\n    return sum;\n  };\n  const count = arr.reduce((acc, x) => {\n    return acc + f(x);\n  }, 0);\n  return count;\n};\n\nconsole.log(beginOneEnd(9));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  const str = '0123456789';\n  const result = [];\n\n  for (let i = N; i > 0; i--) {\n    result.push(str[i % 2]);\n  }\n\n  return result.join('');\n};\n\nconsole.log(resolve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let len = lst.length\n  let i = 0\n  while (i < len) {\n    if (lst[i] % 2 === 1) {\n      return lst[i]\n    }\n    i++\n  }\n}\n\nconsole.log(lend([4, 2, 6, 7]))\n\n//lend([4, 2, 6, 7])\n\n/*Given a non-empty array. \n\nReturn the number of elements that have an odd index. \n\n\n  Examples:\n      array([4, 2, 6, 7]) -> 1 \n  */\nconst odd = (arr) => {\n  let len = arr.length\n  let i = 0\n  let sum = 0\n  while (i < len) {\n    if (arr[i] % 2 === 1) {\n      sum++\n    }\n    i++\n  }\n  return sum\n}\n\nconsole.log(odd([4, 2, 6, 7]))\n\n//odd([4, 2, 6, 7])\n\n/*Given a non-empty array. \n\nReturn the number of elements that are larger than or equal to 3. \n\n\n  Examples:\n      array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> 3 \n  */\nconst sizeOfSorted = (arr) => {\n  let len = arr.length\n  let i = 0\n  let sum = 0\n  while (i < len) {\n    if (arr[i] >= 3) {\n      sum++\n    }\n    i++\n  }\n  return sum\n}\n\nconsole.log(sizeOfSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n//sizeOfSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n/*Given a non-empty array. \n\nFind the maximum number of equal elements in the array. \n\n\n  Examples:\n      array([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> 2 \n  */\nconst maxOfEqual = (arr) => {\n  let len = arr.length\n  let i = 0\n  let max = 0\n  while (i < len) {\n    if (arr[i] === arr[i + 1]) {\n      max++\n    }\n    i++\n  }\n  return max\n}\n\nconsole.log(maxOfEqual([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\n\n//maxOfEqual([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])\n\n/*Given a non-empty array. \n\nFind the maximum number of equal elements in the array. \n\n\n  Examples:\n      array([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> 2 \n  */\nconst minOfEqual = (arr) => {\n  let len = arr.length\n  let i = 0\n  let min = 0\n  while (i < len) {\n    if (arr[i] === arr[i + 1]) {\n      min++\n    }\n    i++\n  }\n  return min\n}\n\nconsole.log(minOfEqual([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\n\n//minOfEqual([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])\n\n/*Given a non-empty array. \n\nFind the minimum number of equal elements in the array. \n\n\n  Examples:\n      array([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> 2 \n  */\nconst minOfEqual1 = (arr) => {\n  let len = arr.length\n  let i = 0\n  let min = 0\n  while (i < len) {\n    if (arr[i] === arr[i + 1]) {\n      min++\n    }\n    i++\n  }\n  return min\n}\n\nconsole.log(minOfEqual1([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\n\n//minOfEqual1([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])\n\n/*Given a non-empty array. \n\nFind the minimum number of equal elements in the array. \n\n\n  Examples:\n      array([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> 2 \n  */\nconst minOfEqual2 = (arr) => {\n  let len = arr.length\n  let i = 0\n  let min = 0\n  while (i < len) {\n    if (arr[i] === arr[i + 1]) {\n      min++\n    }\n    i++\n  }\n  return min\n}\n\nconsole.log(minOfEqual2([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\n\n//minOfEqual2([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])\n\n/*Given a non-empty array. \n\nFind the minimum number of equal elements in the array. \n\n\n  Examples:\n      array([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) -> 2 \n  */\nconst minOfEqual3 = (arr) => {\n  let len = arr.length\n  let i = 0\n  let min = 0\n  while (i < len) {\n    if (arr[i] === arr[i + 1]) {\n      min++\n    }\n    i++\n  }\n  return min\n}\n\nconsole.log(minOfEqual3([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\n\n//minOfEqual3([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])\n\n/*Given a non-empty array. \n\nFind the minimum number of equal elements in the array. \n\n\n  Examples:\n      array([1, 1, 2, 2, 3, 3, 4,"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const letters = s.split('')\n  let shuffle = []\n  let shuffleIndex = 0\n  let order = {}\n  let char = 0\n  for (let i = 0; i < letters.length; i++) {\n    if (i % 2 === 0) {\n      if (order[char]!== undefined) {\n        order[char] += 1\n      } else {\n        order[char] = 1\n      }\n    } else {\n      order[char] = 1\n    }\n    if (order[char] > 1) {\n      shuffle[shuffleIndex] = letters[i]\n      shuffleIndex += 1\n    } else {\n      shuffle[shuffleIndex] = ''\n    }\n    char = String.fromCharCode(letters[i].charCodeAt(0) + 1)\n  }\n  return shuffle.join('')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  const rows = []\n  const cols = []\n\n  let row = 0\n  let col = 0\n\n  while (row < lst.length) {\n    while (col < lst[row].length) {\n      rows.push(row)\n      cols.push(col)\n      col += 1\n    }\n    col = 0\n    row += 1\n  }\n\n  const sortedRows = rows.sort((a, b) => a - b)\n\n  const sortedCols = cols.sort((a, b) => b - a)\n\n  let result = []\n\n  for (row of sortedRows) {\n    const newRow = []\n\n    for (col of sortedCols) {\n      newRow.push(lst[row][col])\n    }\n\n    result.push(newRow)\n  }\n\n  return result\n}\n\nconst catchRowTest = [\n  [[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]],\n  [],\n  [[], [1], [1, 2, 3]]\n]\n\nconsole.log(catchRowTest[0])\nconsole.log(catchRowTest[1])\nconsole.log(catchRowTest[2])\n\nlet res = catchRow(catchRowTest[0], 2)\nconsole.log(res)\n\nres = catchRow(catchRowTest[1], 2)\nconsole.log(res)\n\nres = catchRow(catchRowTest[2], 2)\nconsole.log(res)\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const last = array.length - 1\n  let sum = 0\n  let flag = 0\n  let i = 0\n\n  while (i < last) {\n    sum = array[i] + array[i + 1]\n    if (sum % 2 === 0) {\n      array[i + 1] = array[i]\n      array[i] = array[last]\n      array[last] = array[last - 1]\n      array[last - 1] = array[i + 1]\n      sum = array[i] + array[i + 1]\n      i = i + 2\n      last = last - 1\n    } else {\n      i = i + 2\n    }\n  }\n  return array\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const rot = (x) => {\n    const n = x.length;\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n      arr.push(x.charAt(i));\n    }\n    return arr.join('');\n  };\n  return rot(s);\n};\n\nconst encrypt2 = (s) => {\n  const rot = (x) => {\n    const n = x.length;\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n      arr.push(x.charAt(i));\n    }\n    for (let i = 0; i < n; i++) {\n      arr.push(x.charAt(n - i - 1));\n    }\n    return arr.join('');\n  };\n  return rot(s);\n};\n\nconst decrypt = (s) => {\n  const rot = (x) => {\n    const n = x.length;\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n      arr.push(x.charAt(i));\n    }\n    for (let i = 0; i < n; i++) {\n      arr.push(x.charAt(n - i - 1));\n    }\n    return arr.join('');\n  };\n  return rot(s);\n};\n\nconst decrypt2 = (s) => {\n  const rot = (x) => {\n    const n = x.length;\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n      arr.push(x.charAt(i));\n    }\n    for (let i = 0; i < n; i++) {\n      arr.push(x.charAt(n - i - 1));\n    }\n    return arr.join('');\n  };\n  return rot(s);\n};\n\nconst main = (s) => {\n  const rot1 = (s) => {\n    return encrypt(s);\n  };\n  const rot2 = (s) => {\n    return encrypt2(s);\n  };\n  const rot3 = (s) => {\n    return decrypt(s);\n  };\n  const rot4 = (s) => {\n    return decrypt2(s);\n  };\n  return `${rot1(s)}${rot2(s)}${rot3(s)}${rot4(s)}`;\n};\n\nconsole.log(main('asdfghjkl'));\nconsole.log(main('gf'));\nconsole.log(main('et'));\nconsole.log(main('hi'));\nconsole.log(main('qwrt'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let smallest = null;\n  let smallestIdx = null;\n  let i = 0;\n  \n  while (i < lst.length) {\n    if (smallest === null || lst[i] < smallest) {\n      smallest = lst[i];\n      smallestIdx = i;\n    }\n    i++;\n  }\n  \n  return smallestIdx;\n}\n\nmodule.exports = nextSmallest;\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let count = 0;\n  const delimiters = ['?', '.', '!'];\n  let isBlase = false;\n  for (let i = 0; i < S.length; i++) {\n    for (let j = 0; j < delimiters.length; j++) {\n      if (S[i] === delimiters[j]) {\n        if (isBlase) {\n          return count;\n        }\n        count++;\n        isBlase = true;\n        break;\n      }\n    }\n  }\n  return count;\n};\n\n//console.log(isBlase(\"Hello world\"));\n//console.log(isBlase(\"The sky is blue. The sun is shining. I love this weather\"));\n\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase(\"Hello World. I am a person.\"));\n//console.log(isBlase"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return (x === y + z) || (x === z + y) || (y === z + x);\n  }\n  return false;\n};\n\nconst anyIntTest = [\n  { x: 5, y: 2, z: 7 },\n  { x: 3, y: 2, z: 2 },\n  { x: 3, y: -2, z: 1 },\n  { x: 3.6, y: -2.2, z: 2 },\n  { x: -2, y: 2, z: 1 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: 2, z: 1 },\n  { x: 5, y: -2, z: -7 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z: -2 },\n  { x: -2, y: -2, z"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let result = message.replace(/[A-Z]/g, function (letter) {\n        return letter.toUpperCase()\n    });\n\n    return result.replace(/[a-z]/g, function (letter) {\n        return letter.toLowerCase()\n    });\n};\n\nmodule.exports = encode;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let primes = [];\n  for (let i = 1; i <= 10; i++) {\n    primes.push(i);\n  }\n  let maxPrime = 0;\n  for (let i = 0; i < primes.length; i++) {\n    let prime = primes[i];\n    let digits = 0;\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      digits += parseInt(lst[j], 10) % prime;\n      sum += digits;\n    }\n    if (sum > maxPrime) {\n      maxPrime = sum;\n    }\n  }\n  return maxPrime;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  for (const key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    } else if (typeof dict[key] ==='string') {\n      if (dict[key].toLowerCase()!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = determineDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  const primes = [];\n  const limit = n;\n  for (let i = 2; i < limit; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  Implement a function that takes a positive integer and returns a string\n  representation of the number.\n  for example:\n  toString(1) => \"1\"\n  toString(2) => \"2\"\n  toString(3) => \"3\"\n  toString(10) => \"10\"\n  toString(5) => \"5\"\n  toString(0) => \"0\"\n  toString(-1) => \"1\"\n  toString(-2) => \"2\"\n  toString(-3) => \"3\"\n  toString(-4) => \"4\"\n  toString(-10) => \"10\"\n  toString(11) => \"11\"\n  toString(12) => \"12\"\n  toString(15) => \"15\"\n  toString(16) => \"16\"\n  toString(17) => \"17\"\n  toString(18) => \"18\"\n  toString(19) => \"19\"\n  toString(20) => \"20\"\n  toString(21) => \"21\"\n  toString(22) => \"22\"\n  toString(23) => \"23\"\n  toString(24) => \"24\"\n  toString(25) => \"25\"\n  toString(30) => \"30\"\n  toString(35) => \"35\"\n  toString(40) => \"40\"\n  toString(45) => \"45\"\n  toString(50) => \"50\"\n  toString(55) => \"55\"\n  toString(60) => \"60\"\n  toString(65) => \"65\"\n  toString(70) => \"70\"\n  toString(75) => \"75\"\n  toString(80) => \"80\"\n  toString(85) => \"85\"\n  toString(90) => \"90\"\n  toString(95) => \"95\"\n  toString(100) => \"100\"\n  toString(101) => \"101\"\n  toString(102) => \"102\"\n  toString(103) => \"103\"\n  toString(104) => \"104\"\n  toString(105) => \"105\"\n  toString(106) => \"106\"\n  toString(107) => \"107\"\n  toString(108) => \"108\"\n  toString(109) => \"109\"\n  toString(110) => \"110\"\n  toString(111) => \"111\"\n  toString(112) => \"112\"\n  toString(113) => \"113\"\n  toString(114) => \"114\"\n  toString(115) => \"115\"\n  toString(116) => \"116\"\n  toString(117) => \"117\"\n  toString(118) => \"118\"\n  toString(119) => \"119\"\n  toString(120) => \"120\"\n  toString(121) => \"121\"\n  toString(122) => \"122\"\n  toString(123) => \"123\"\n  toString(124) => \"124\"\n  toString(125) => \"125\"\n  toString(126) => \"126\"\n  toString(127) => \"127\"\n  toString(128) => \"128\"\n  toString(129) => \"129\"\n  toString(130) => \"130\"\n  toString(131) => \"131\"\n  toString(132) => \"132\"\n  toString(133) => \"133\"\n  toString(134) => \"134\"\n  toString(135) => \"135\"\n  toString(136) => \"136\"\n  toString(137) => \"137\"\n  toString(138) => \"138\"\n  toString(139) => \"139\"\n  toString(140) => \"140\"\n  toString(141) => \"141\"\n  toString(142) => \"142\"\n  toString(143) => \"143\"\n  toString(144) => \"144\"\n  toString(145) => \"145\"\n  toString(146) => \"146\"\n  toString(147) => \"147\"\n  toString(148) => \"148\"\n  toString(149) => \"149\"\n  toString(150) => \"150\"\n  toString(151) => \"151\"\n  toString(152) => \"152\"\n  toString(153) => \"153\"\n  toString(154) => \"154\"\n  toString(155) => \"155\"\n  toString(156) => \"156\"\n  toString(157) => \"157\"\n  toString(158) => \"158\"\n  toString(159) => \"159\"\n  toString(160) => \"160\"\n  toString(161) => \"161\"\n  toString(162) => \"162\"\n  toString(163) => \"163\"\n  toString(164) => \"164\"\n  toString(165) => \"165\"\n  toString(166) => \"166\"\n  toString(167) => \"167\"\n  toString(168) => \"168\"\n  toString(169) => \"169\"\n  toString(170) => \"170\"\n  toString(171) => \"171\"\n  toString(172) => \"172\"\n  toString(173) => \"173\"\n  toString(174) => \"174\"\n  toString(175) => \"175\"\n  toString(176) => \"176\"\n  toString(177) => \"177\"\n  toString(178) => \"178\"\n"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  const s = '' + a + b;\n  let t = 0;\n  for (let i = 0; i < s.length; i++) {\n    t += s.charAt(i);\n  }\n  return t;\n};\n\nbreed(1, 2);\nbreed(2, -2);\nbreed(5, 0);\nbreed(3, 3);\nbreed(5, -5);\nbreed(4, -1);\nbreed(2, -3);\nbreed(-4, 1);\nbreed(6, 2);\nbreed(1, -6);\nbreed(10, -1);\nbreed(8, -4);\nbreed(8, -2);\nbreed(7, 7);\nbreed(4, 5);\nbreed(4, -1);\nbreed(7, 1);\nbreed(7, -2);\nbreed(5, -3);\nbreed(1, -5);\nbreed(6, -2);\nbreed(5, 2);\nbreed(4, -4);\nbreed(1, -3);\nbreed(6, 3);\nbreed(9, 9);\nbreed(9, -9);\nbreed(2, 9);\nbreed(3, -2);\nbreed(1, -2);\nbreed(5, -3);\nbreed(3, -5);\nbreed(9, 2);\nbreed(8, -1);\nbreed(8, 2);\nbreed(9, -4);\nbreed(7, -1);\nbreed(3, -7);\nbreed(6, 5);\nbreed(2, -4);\nbreed(6, 4);\nbreed(7, -5);\nbreed(3, -6);\nbreed(6, -1);\nbreed(3, -5);\nbreed(5, -4);\nbreed(4, -1);\nbreed(3, -2);\nbreed(4, -1);\nbreed(3, -3);\nbreed(2, 1);\nbreed(2, -1);\nbreed(1, 1);\nbreed(2, -2);\nbreed(3, -4);\nbreed(3, -2);\nbreed(1, -4);\nbreed(2, 3);\nbreed(2, -3);\nbreed(3, -2);\nbreed(3, -5);\nbreed(2, -6);\nbreed(1, -5);\nbreed(2, -7);\nbreed(3, -4);\nbreed(2, -8);\nbreed(3, -3);\nbreed(2, -7);\nbreed(1, -3);\nbreed(2, -5);\nbreed(2, -4);\nbreed(2, -3);\nbreed(3, -3);\nbreed(4, -3);\nbreed(3, -1);\nbreed(3, -2);\nbreed(1, -3);\nbreed(4, -1);\nbreed(2, -2);\nbreed(2, -4);\nbreed(3, -3);\nbreed(2, -3);\nbreed(2, -2);\nbreed(2, -1);\nbreed(1, -1);\nbreed(2, 1);\nbreed(3, 2);\nbreed(1, 1);\nbreed(2, -1);\nbreed(1, -2);\nbreed(2, -2);\nbreed(2, -3);\nbreed(1, -2);\nbreed(1, -3);\nbreed(1, -2);\nbreed(1, -1);\nbreed(2, -1);\nbreed(1, 0);\nbreed(1, -1);\nbreed(2, 0);\nbreed(1, 1);\nbreed(1, 0);\nbreed(2, -1);\nbreed(2, 0);\nbreed(2, 1);\nbreed(1, -2);\nbreed(2, 2);\nbreed(1, -2);\nbreed(1, -1);\nbreed(2, -2);\nbreed(1, -2);\nbreed(1, -1);\nbreed(1, 0);\nbreed(1, -1);\nbreed(1, 1);\nbreed(1, 0);\nbreed(1, -1);\nbreed(1, 0);\nbreed(2, -1);\nbreed(2, 1);\nbreed(1, 1);\nbreed(2, 1);\nbreed(1, -1);\nbreed(1, 1);\nbreed(1, 0);\nbreed(1, -1);\nbreed(2, 1);\nbreed(1, 1);\nbreed(1, 0);\nbreed(1, -1);\nbreed(1, 0);\nbreed(1, -1);\nbreed(2, 1);\nbreed(2, 0);\nbreed(1, -1);\nbreed(2, 0);\nbreed(2, 1);\nbreed(1, 1);\nbreed(2, 1);\nbreed(1, -1);\nbreed(1, 0);\nbreed(2, -1);\nbreed(1, 1);\nbreed(1, -1);\nbreed(2, 1);\nbreed(1, -1);\nbreed(1, 0);\nbreed(2, -1);\nbreed(2, 1);\nbreed(1, 1);\nbreed(2, 1);\nbreed(1, -1);\nbreed(1, 0);\nbreed(1, -1);\nbreed(2, 1);\nbreed(1, 1);\nbreed(1, 0);\nbreed(2, -1);\nbreed(2, 1);\nbreed(1,"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n    const len = s.length;\n    let vowelCount = 0;\n    for (let i = 0; i < len; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n};\n\nconsole.log(considerUpper('aBCdEf'));\nconsole.log(considerUpper('abcdefg'));\nconsole.log(considerUpper('dBBE'));<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  let integer = +value;\n  let fraction = value.split(/[.]/);\n  let base = integer + fraction[1];\n  if (Math.abs(integer - base) < Math.abs(integer - (integer + 1))) {\n    return integer;\n  }\n  return base;\n};\n\nmodule.exports = closeInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i)\n    } else {\n      result.push(i - 1)\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  // get all words in string\n  const words = s.split(/[\\s,]+/g);\n  // return an array of words\n  return words;\n};\n\n/*\n  You will be given an array of words. Your task is to return an array of all\n  the unique combinations of the words in the array. For example:\n  \n  arr = [\"one\", \"two\", \"three\"]\n  combos = [\"one\", \"two\", \"three\", \"one,two\", \"one,three\", \"two,three\", \"one,two,three\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\"]\n  combos = [\"one\", \"two\", \"three\", \"one,two\", \"one,three\", \"two,three\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"one,two\", \"one,three\", \"one,four\", \"two,three\", \"two,four\", \"three,four\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one,two\", \"one,three\", \"one,four\", \"one,five\", \"one,six\", \"two,three\", \"two,four\", \"two,five\", \"two,six\", \"three,four\", \"three,five\", \"three,six\", \"four,five\", \"four,six\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one,two\", \"one,three\", \"one,four\", \"one,five\", \"one,six\", \"two,three\", \"two,four\", \"two,five\", \"two,six\", \"three,four\", \"three,five\", \"three,six\", \"four,five\", \"four,six\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one,two\", \"one,three\", \"one,four\", \"one,five\", \"one,six\", \"two,three\", \"two,four\", \"two,five\", \"two,six\", \"three,four\", \"three,five\", \"three,six\", \"four,five\", \"four,six\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one,two\", \"one,three\", \"one,four\", \"one,five\", \"one,six\", \"two,three\", \"two,four\", \"two,five\", \"two,six\", \"three,four\", \"three,five\", \"three,six\", \"four,five\", \"four,six\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one,two\", \"one,three\", \"one,four\", \"one,five\", \"one,six\", \"two,three\", \"two,four\", \"two,five\", \"two,six\", \"three,four\", \"three,five\", \"three,six\", \"four,five\", \"four,six\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one,two\", \"one,three\", \"one,four\", \"one,five\", \"one,six\", \"two,three\", \"two,four\", \"two,five\", \"two,six\", \"three,four\", \"three,five\", \"three,six\", \"four,five\", \"four,six\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one,two\", \"one,three\", \"one,four\", \"one,five\", \"one,six\", \"two,three\", \"two,four\", \"two,five\", \"two,six\", \"three,four\", \"three,five\", \"three,six\", \"four,five\", \"four,six\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one,two\", \"one,three\", \"one,four\", \"one,five\", \"one,six\", \"two,three\", \"two,four\", \"two,five\", \"two,six\", \"three,four\", \"three,five\", \"three,six\", \"four,five\", \"four,six\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one,two\", \"one,three\", \"one,four\", \"one,five\", \"one,six\", \"two,three\", \"two,four\", \"two,five\", \"two,six\", \"three,four\", \"three,five\", \"three,six\", \"four,five\", \"four,six\"]\n  \n  For example:\n  arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  combos = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one,two\", \"one,three\", \"one,four"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return chooseNum(y, x);\n  }\n\n  if (x % 2 === 0) {\n    return x;\n  }\n\n  let curr = x;\n  let prev = x;\n\n  while (curr <= y) {\n    if (curr % 2 === 0) {\n      return prev;\n    }\n    prev = curr;\n    curr += 2;\n  }\n\n  return -1;\n};\n\n// console.log(chooseNum(12, 15));\n// console.log(chooseNum(13, 12));\n\nconst evenNum = (x, y) => {\n  if (x > y) {\n    return evenNum(y, x);\n  }\n\n  return x;\n};\n\n// console.log(evenNum(12, 15));\n// console.log(evenNum(13, 12));\n\nconst evenNum2 = (x, y) => {\n  if (x > y) {\n    return evenNum2(y, x);\n  }\n\n  if (x % 2 === 0) {\n    return x;\n  }\n\n  return x + 2;\n};\n\n// console.log(evenNum2(12, 15));\n// console.log(evenNum2(13, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let count = 0;\n  const total = (n + m) / 2;\n  for (let i = n; i < m; i++) {\n    count += i;\n  }\n  const rounded = Math.round(total / count);\n  return rounded.toString(2);\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n    let res = [];\n    for (let i = 0; i < x.length; i++) {\n        let digit = x[i] % 10;\n        if (digit % 2 === 0) {\n            res.push(x[i]);\n        }\n    }\n    res.sort((a, b) => a - b);\n    return res;\n};\n\nconsole.log(aloneDigit([15, 33, 1422, 1])); //[1, 15, 33]\nconsole.log(aloneDigit([152, 323, 1422, 10])); //[]<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  return sortedArr.reverse().map((n) => {\n    return {name: n}\n  })\n}\n\nconst byDurationDesc = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return b - a\n  })\n  return sortedArr.reverse().map((n) => {\n    return {name: n}\n  })\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst bySize = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  return sortedArr.reverse().map((n) => {\n    return {name: n}\n  })\n}\n\nconst bySizeDesc = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return b - a\n  })\n  return sortedArr.reverse().map((n) => {\n    return {name: n}\n  })\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byCount = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  return sortedArr.reverse().map((n) => {\n    return {name: n}\n  })\n}\n\nconst byCountDesc = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return b - a\n  })\n  return sortedArr.reverse().map((n) => {\n    return {name: n}\n  })\n}\n\nconst byName = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a.name < b.name? -1 : 1\n  })\n  return sortedArr.reverse().map((n) => {\n    return {name: n}\n  })\n}\n\nconst byNameDesc = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a.name > b.name? -1 : 1\n  })\n  return sortedArr.reverse().map((n) => {\n    return {name: n}\n  })\n}\n\nexport {\n  byDuration,\n  byDurationDesc,\n  bySize,\n  bySizeDesc,\n  byCount,\n  byCountDesc,\n  byName,\n  byNameDesc\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * factorial(i));\n    } else {\n      result.push(i * sum(1, i));\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\nconst sum = (from, to) => {\n  let sum = 0;\n  for (let i = from; i <= to; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the i-th and (i+1)th-th factorials.\n  Example:\n  f(5) == [1, 2, 3, 7, 6]\n  */\nconst f2 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * (i + 1));\n  }\n  return result;\n};\n\nconst factorial2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the i-th and (i+1)th-th factorials.\n  Example:\n  f(5) == [1, 2, 3, 7, 6]\n  */\nconst f3 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * (i + 1) * (i + 2));\n  }\n  return result;\n};\n\nconst factorial3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString()\n    const reverse = str.split('').reverse().join('')\n    if (str === reverse) {\n      if (str.length % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n    }\n  }\n  return [even, odd]\n}\n\nconsole.log(evenOddPalindrome(10))\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  const length = arr.length;\n  const sum = 0;\n\n  for (let i = 0; i < length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      sum += num;\n    } else {\n      sum += (num - Math.floor(num));\n    }\n  }\n\n  return sum > 0? length : sum;\n};\n\nconst sumOfDigits = (n) => {\n  const arr = Array(n + 1).fill(-1);\n\n  for (let i = 1; i <= n; i++) {\n    arr[i] = i;\n  }\n\n  return considerNums(arr);\n};\n\nconst n = sumOfDigits(9);\nconsole.log(n);\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let last = arr[arr.length - 1];\n  let sorted = arr.slice();\n  sorted.sort((a, b) => a - b);\n\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (sorted[i - 1] < sorted[i]) {\n      sorted.splice(i, 1, sorted[i - 1]);\n    }\n  }\n  return sorted.includes(last);\n};\n\nconst test = require('tape');\n\ntest('affectOneTestis([3, 4, 5, 1, 2])', t => {\n  t.plan(2);\n  t.ok(affectOneTestis([3, 4, 5, 1, 2]),'returns true');\n  t.ok(affectOneTestis([1, 2, 3, 4, 5]),'returns false');\n});\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n    let i = 0\n    while (lst1[i] < lst2[i]) {\n        i += 1\n    }\n    while (lst1[i] > lst2[i]) {\n        i -= 1\n    }\n    while (lst1[i] < lst2[i]) {\n        if (lst1[i] % 2!== 0) {\n            return \"NO\"\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\nlet result = central([1, 2, 3, 4], [1, 5, 3, 4])\nconsole.log(result)<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const dictionary = {}\n  for (let i = 0; i < test.length; i++) {\n    dictionary[test[i]] = dictionary[test[i]] || 0\n    dictionary[test[i]]++\n  }\n  return dictionary\n}\n\nconsole.log(histogram('a b c'))\nconsole.log(histogram('a b b a'))\nconsole.log(histogram('b b b b a'))\nconsole.log(histogram(''))<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  const result = [];\n  const len = s.length;\n  for (let i = 0; i < len; i++) {\n    const char = s[i];\n    if (c.includes(char)) {\n      continue;\n    }\n    result.push(char);\n  }\n  const reversed = result.reverse();\n  return [result.join(''), s === reversed];\n};\n\nexport { invertDelete };\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  const len = lst.length;\n  const odd = (n) => n % 2 === 1;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    let n = parseInt(lst[i], 10);\n    let count = 0;\n    while (n--) {\n      if (odd(n)) {\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count} in the ${i}`);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n    let result = 0;\n    for(let i = 0; i < nums.length; i++) {\n        let sum = 0;\n        for(let j = 0; j < nums.length; j++) {\n            if(i!== j) {\n                sum += nums[j];\n            }\n            if(sum > result) {\n                result = sum;\n            }\n        }\n    }\n    return result;\n};\n\nconsole.log(minuteSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n        grid[i][j] = 0;\n        for (let k = 0; k < capacity; k++) {\n          grid[i + 1][j + 1] = 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst test_soapFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n        grid[i][j] = 0;\n        for (let k = 0; k < capacity; k++) {\n          grid[i + 1][j + 1] = 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst solution = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n        grid[i][j] = 0;\n        for (let k = 0; k < capacity; k++) {\n          grid[i + 1][j + 1] = 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst test_solution = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n        grid[i][j] = 0;\n        for (let k = 0; k < capacity; k++) {\n          grid[i + 1][j + 1] = 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst solution2 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n        grid[i][j] = 0;\n        for (let k = 0; k < capacity; k++) {\n          grid[i + 1][j + 1] = 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst test_solution2 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n        grid[i][j] = 0;\n        for (let k = 0; k < capacity; k++) {\n          grid[i + 1][j + 1] = 1;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  soapFill,\n  test_soapFill,\n  solution,\n  test_solution,\n  solution2,\n  test_solution2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    let result = arr;\n\n    // create a copy of the array\n    result = Array.from(arr);\n\n    // create an array of the elements of the original array, in reverse order\n    // and count the number of ones in their binary representation\n    let count = [0, 0];\n    for (let i = result.length - 1; i >= 0; i--) {\n        let number = result[i];\n        let binary = number.toString(2);\n        let length = binary.length;\n\n        for (let j = 0; j < length; j++) {\n            if (binary[j] === '1') {\n                count[1]++;\n            } else {\n                count[0]++;\n            }\n        }\n    }\n\n    // sort the array based on the number of ones in the binary representation\n    // in ascending order\n    result = result.sort((a, b) => count[1] - count[0]);\n\n    // sort the array based on the decimal value\n    result = result.sort((a, b) => a - b);\n\n    return result;\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let consonantCount = 0\n  const chars = s.split(\" \")\n  let list = []\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[a-zA-Z]/)) {\n      consonantCount++\n      if (consonantCount === n) {\n        list.push(chars[i])\n      }\n    }\n  }\n  return list\n}\n\n/*\n  Given a string s, you have been tasked to implement a function that returns \n  a list of all words from the string s that contain a given character.\n  If the string s is empty then the function should return an empty list.\n  Examples:\n  findAll(\"mary had a little lamb\", \"a\") ==> [\"mary\", \"had\", \"lamb\"]\n  findAll(\"hello world\", \"d\") ==> [\"hello\", \"world\"]\n  findAll(\"a\", \"a\") ==> [\"a\"]\n  findAll(\"\", \"\") ==> []\n  findAll(\"hello world\", \" \") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"e\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"x\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello\") ==> [\"world\"]\n  findAll(\"hello world\", \"d\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"dhello\") ==> [\"world\"]\n  findAll(\"hello world\", \"\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello \") ==> [\"world\"]\n  findAll(\"hello world\", \"h\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"ello\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"ll\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"ello world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") ==> [\"hello\", \"world\"]\n  findAll(\"hello world\", \"hello world, world\") =="}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  let last_consonant = word.lastIndexOf(\"a\") + 1;\n  let first_vowel = word.indexOf(\"a\") + 1;\n  let vowel = \"\";\n  let distance = word.length;\n  while (last_consonant < word.length) {\n    distance = distance - (word[last_consonant] === \"a\");\n    if (distance < 0) {\n      return vowel;\n    }\n    if (word[last_consonant] === \"a\" && word[last_consonant - 1] === \"a\") {\n      distance = distance + 1;\n      last_consonant = last_consonant - 1;\n    }\n    if (distance === 0) {\n      vowel = word[first_vowel];\n      break;\n    }\n    if (distance === 1) {\n      vowel = word[first_vowel];\n      break;\n    }\n    if (distance < word[last_consonant]) {\n      vowel = word[first_vowel];\n      break;\n    }\n    last_consonant = last_consonant + 1;\n  }\n  return vowel;\n};\n\nconsole.log(catchClosestVowel(\"a\"));\nconsole.log(catchClosestVowel(\"yogurt\"));\nconsole.log(catchClosestVowel(\"FULL\"));\nconsole.log(catchClosestVowel(\"quick\"));\nconsole.log(catchClosestVowel(\"ab\"));\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  let stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === ')') {\n      stack.pop()\n    } else {\n      stack.push(lst[i])\n    }\n  }\n  return stack.length === 0\n}\n\nmodule.exports = catchParens\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  const arrLen = arr.length\n\n  if (arrLen <= 1) return arr\n\n  if (arrLen === 2) {\n    if (arr[0] > arr[1]) return arr\n    return [arr[1], arr[0]]\n  }\n\n  let i, j, maxNum, minNum, tempArr\n\n  for (i = 0; i < arrLen - 1; i++) {\n    for (j = i + 1; j < arrLen; j++) {\n      maxNum = Math.max(arr[i], arr[j])\n      minNum = Math.min(arr[i], arr[j])\n\n      if (maxNum > k) {\n        if (minNum <= k) {\n          tempArr = [arr[i], arr[j]]\n          k -= arr[i]\n          arr[i] = arr[j]\n          arr[j] = tempArr\n        }\n      } else if (minNum < k) {\n        tempArr = [arr[i], arr[j]]\n        k -= arr[j]\n        arr[i] = arr[j]\n        arr[j] = tempArr\n      }\n    }\n  }\n\n  return arr\n}\n\nexport default maximal<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst lst = [5, 8, 7, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) return 0;\n  if (arrLength === 1) return arr[0];\n\n  const sum = arr[0];\n  for (let i = 1; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst test = [\n  [[1, 2, 3], 4],\n  [[3, 2, 1], 4],\n  [[2, 2, 1, 1, 1], 5],\n  [[2, 2, 1, 1, 1], 2],\n  [[1, 2, 1, 2, 3], 5],\n  [[1, 2, 1, 2, 3], 4],\n  [[1, 2, 1, 2, 3], 3],\n  [[1, 2, 1, 2, 3], 2],\n  [[1, 2, 1, 2, 3], 1]\n];\n\ntest.forEach(({ arr, k }) => {\n  console.log(`${lendElement(arr, k)} = ${k}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  let collatz = []\n\n  while (n > 1) {\n    if (n % 2 === 1) {\n      collatz.push(n)\n      n = (n * 3) + 1\n    } else {\n      n = n / 2\n    }\n  }\n\n  collatz.push(n)\n\n  return collatz\n}\n\n// Test\n\nconsole.log('catchOddCollatz(1) ='+ catchOddCollatz(1))\nconsole.log('catchOddCollatz(5) ='+ catchOddCollatz(5))\nconsole.log('catchOddCollatz(10) ='+ catchOddCollatz(10))\nconsole.log('catchOddCollatz(20) ='+ catchOddCollatz(20))\nconsole.log('catchOddCollatz(40) ='+ catchOddCollatz(40))\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  return typeof(date) ==='string' &&\n    (date.length === 4 ||\n    (date.length === 6 && isNaN(Date.parse(date))) ||\n    (date.length === 8 && isNaN(Date.parse(date)))) &&\n    isDate(date)\n};\n\n/*\n  You have to write a function which checks if a given number is a number.\n  The number should be in the format of a number.\n  e.g. if(isNumber(123)) => true\n  if(isNumber('123')) => false\n  if(isNumber(true)) => false\n  if(isNumber(false)) => false\n  if(isNumber(null)) => false\n  if(isNumber(undefined)) => false\n  if(isNumber(NaN)) => false\n  if(isNumber('abc')) => false\n*/\nconst isNumber = (number) => {\n  return typeof(number) === 'number';\n};\n\n/*\n  You have to write a function which checks if a given string is a string.\n  The string should be in the format of a string.\n  e.g. if(isString('abc')) => true\n  if(isString(123)) => false\n  if(isString(true)) => false\n  if(isString(false)) => false\n  if(isString(null)) => false\n  if(isString(undefined)) => false\n  if(isString(NaN)) => false\n  if(isString('abc')) => false\n*/\nconst isString = (string) => {\n  return typeof(string) ==='string';\n};\n\n/*\n  You have to write a function which checks if a given string is a string.\n  The string should be in the format of a string.\n  e.g. if(isDate('03-11-2000')) => true\n  if(isDate(123)) => false\n  if(isDate(true)) => false\n  if(isDate(false)) => false\n  if(isDate(null)) => false\n  if(isDate(undefined)) => false\n  if(isDate(NaN)) => false\n  if(isDate('abc')) => false\n*/\nconst isDate = (date) => {\n  return typeof(date) ==='string' &&\n    (date.length === 4 ||\n    (date.length === 6 && isNaN(Date.parse(date))) ||\n    (date.length === 8 && isNaN(Date.parse(date)))) &&\n    isNaN(Date.parse(date)) &&\n    isNaN(Date.parse(date).toString()) &&\n    isNaN(Date.parse(date).toDateString())\n};\n\n/*\n  You have to write a function which returns the current date.\n  The format of the date should be the following:\n  mm-dd-yyyy\n  For example:\n  getDate() => '05-10-2013'\n  getDate(format) => '10-10-2013'\n  getDate('yyyy-mm-dd') => '2013-10-10'\n  getDate('dd-mm-yyyy') => '10-10-2013'\n  getDate('dd.mm.yyyy') => '10.10.2013'\n*/\nconst getDate = (format) => {\n  const date = new Date();\n  const result = format === undefined?\n    (date.getFullYear() + '-' + date.getMonth() + '-' + date.getDate()) :\n    (format.replace(/(-|_)(.+)/g, '$2-$1'));\n  return result;\n};\n\n/*\n  You have to write a function which returns the current month and year.\n  The format of the date should be the following:\n  mm-dd-yyyy\n  For example:\n  getMonthYear() => '05-2013'\n  getMonthYear(format) => '05-2013'\n  getMonthYear('yyyy-mm-dd') => '2013-05-10'\n  getMonthYear('dd-mm-yyyy') => '10-05-2013'\n  getMonthYear('dd.mm.yyyy') => '10.05.2013'\n*/\nconst getMonthYear = (format) => {\n  const date = new Date();\n  const result = format === undefined?\n    (date.getFullYear() + '-' + date.getMonth() + '-') :\n    (format.replace(/(-|_)(.+)/g, '$2-$1'));\n  return result;\n};\n\n/*\n  You have to write a function which returns a random number.\n  The format of the date should be the following:\n  mm-dd-yyyy\n  For example:\n  getRandom() => '04-05-2015'\n*/\nconst getRandom = () => {\n  return getDate().split('-')[1] + '-' + getMonthYear().split('-')[1] + '-' + (Math.floor(Math.random() * 10) + 1);\n};\n\n/*\n  You have to write a function which converts the given string to a number.\n  The string can be a decimal number or a string with the format:\n  a.b\n  For example:\n  toDecimal('1.5') => 1.5\n  toDecimal('a.b') => 0.0\n  toDecimal('1') => 1\n*/\nconst toDecimal = (string) => {\n"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  let chars = txt.split('')\n  let result = []\n  let isWord = false\n  let word = []\n  let pos = 0\n  while (pos < chars.length) {\n    if (chars[pos] ==='') {\n      if (isWord) {\n        result.push(word.join(''))\n        word = []\n      }\n      isWord = false\n    } else {\n      if (!isWord) {\n        word = []\n        isWord = true\n      }\n      word.push(chars[pos])\n    }\n    pos++\n  }\n  if (isWord) {\n    result.push(word.join(''))\n  }\n  return result\n}\n\n/*\n  Given a string of words, return the number of words that are not connected, for example\n  disconnectedWords(\"Hello world!\") == 2\n  disconnectedWords(\"Hello world!\") == 0\n  disconnectedWords(\"Hello world!\") == 3\n  disconnectedWords(\"Hello world!\") == 5\n  */\nconst notConnectedWords = (txt) => {\n  const words = disconnectedWords(txt)\n  return words.length - 1\n}\n\n// This is our test function\nconst test = () => {\n  console.log(disconnectedWords(\"Hello world!\"))\n  console.log(disconnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))\n  console.log(notConnectedWords(\"Hello world!\"))"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  let index = 0;\n  let count = 0;\n  let cur = lst[index];\n  while (index < lst.length - 1) {\n    if (lst[index] < lst[index + 1]) {\n      index += 1;\n      count += 1;\n      cur = lst[index];\n    } else {\n      return false;\n    }\n  }\n  return count === lst.length - 1;\n};\n\nexport default isScreen;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  const end1_end2 = end1 < end2? end1 : end2\n  const end1_start2 = end1 < start2? end1 : start2\n  const end2_start1 = end2 < start1? end2 : start1\n  const end2_end1 = end2 < end1? end2 : end1\n  if (end1_end2 >= start1 && end1_end2 <= end2) {\n    return \"YES\"\n  }\n  if (end1_start2 >= start1 && end1_start2 <= start2) {\n    return \"YES\"\n  }\n  if (end2_start1 >= start1 && end2_start1 <= start2) {\n    return \"YES\"\n  }\n  if (end2_end1 >= start1 && end2_end1 <= end1) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nexport default overlap\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    let sign = 1;\n    if (num < 0) {\n      sign = -1;\n    }\n    result.push(sign * num);\n  }\n  return result.reduce((sum, num) => {\n    if (num < 0) {\n      return sum - num;\n    }\n    return sum + num;\n  }, 0);\n};\n\n/*\n  Input: arr = [1, 2, 2, -4]\n  Output: -9\n\n  Input: arr = [0, 1]\n  Output: 0\n  */\nconst goadSigns2 = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const sign = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      sign.push(-1);\n    } else {\n      sign.push(1);\n    }\n  }\n  return sign.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns3 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    } else {\n      result.push(-num);\n    }\n  }\n  return result.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns4 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    } else {\n      result.push(-num);\n    }\n  }\n  return result.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns5 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    } else {\n      result.push(-num);\n    }\n  }\n  return result.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns6 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    } else {\n      result.push(-num);\n    }\n  }\n  return result.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns7 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    } else {\n      result.push(-num);\n    }\n  }\n  return result.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns8 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    } else {\n      result.push(-num);\n    }\n  }\n  return result.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns9 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    } else {\n      result.push(-num);\n    }\n  }\n  return result.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns10 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    } else {\n      result.push(-num);\n    }\n  }\n  return result.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns11 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    } else {\n      result.push(-num);\n    }\n  }\n  return result.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns12 = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      result.push(num);\n    } else {\n      result.push(-num);\n    }\n  }\n  return result.reduce((sum, num) => {\n    return sum + num;\n  }, 0);\n};\n\nconst goadSigns13 = (arr)"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const result = [];\n  const visited = new Set();\n  const stack = [];\n  const n = grid.length;\n  for (let i = 0; i < n; i++) {\n    stack.push(i);\n  }\n\n  while (stack.length > 0) {\n    const current = stack.shift();\n    const row = grid[current];\n    const n = row.length;\n\n    for (let j = 0; j < n; j++) {\n      const next = row[j];\n      if (visited.has(next)) {\n        continue;\n      }\n      if (visited.size === k) {\n        result.unshift(next);\n        break;\n      }\n      visited.add(next);\n      stack.push(next);\n    }\n  }\n\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = [];\n  tri.push(3);\n  for (let i = 1; i <= n; i++) {\n    tri.push(1 + i / 2);\n  }\n  return tri;\n};\n\nexport default tri;\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let digit = 0;\n  while (n > 0) {\n    digit = digit * 10 + (n % 10);\n    n = n / 10;\n  }\n  if (digit > 0) {\n    return digit;\n  } else {\n    return 0;\n  }\n}\n\nconst countOdd = (n) => {\n  let count = 0;\n  while (n > 0) {\n    count += (n % 10)? 1 : 0;\n    n = n / 10;\n  }\n  return count;\n}\n\nconst isOdd = (n) => {\n  return countOdd(n) > 0;\n}\n\nconst product = (n) => {\n  let num = 1;\n  while (isOdd(n)) {\n    num = num * digit(n);\n    n = n / 10;\n  }\n  return num;\n}\n\nconsole.log(product(1));\nconsole.log(product(234));\nconsole.log(product(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const bracketStack = [];\n  const nextBracket = (char) => {\n    const index = string.indexOf(char);\n    if (index < 0) return false;\n    const stackLen = bracketStack.length;\n    bracketStack.push(char);\n    if (stackLen < 2) return false;\n    const nextBracket = bracketStack[stackLen - 2];\n    const lastBracket = bracketStack[stackLen - 1];\n    if (nextBracket === ']') {\n      if (lastBracket === '[' && string.indexOf(']', index + 1) > index) {\n        bracketStack.pop();\n        return true;\n      }\n    }\n    if (nextBracket === '[' && lastBracket === ']') {\n      bracketStack.pop();\n      return true;\n    }\n    return false;\n  };\n  for (let i = 0; i < string.length; i++) {\n    if (!nextBracket(string[i])) return false;\n  }\n  return true;\n};\n\nconst isNestDemo = () => {\n  console.log(isNest('[[]]'));\n  console.log(isNest('[]]]]]]][[[[[]'));\n  console.log(isNest('[][]'));\n  console.log(isNest('[]'));\n  console.log(isNest('[[][]]'));\n  console.log(isNest('[[]][['));\n};\n\nisNestDemo();\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const nums = lst.map(n => Math.ceil(n))\n  let sum = 0\n  nums.forEach(n => {\n    sum += n * n\n  })\n  return sum\n}\n\nconsole.log(summarizeSquare([1, 2, 3]))\nconsole.log(summarizeSquare([1, 4, 9]))\nconsole.log(summarizeSquare([1, 3, 5, 7]))\nconsole.log(summarizeSquare([1.4, 4.2, 0]))\nconsole.log(summarizeSquare([-2.4, 1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n    let i = txt.length - 1;\n    while(i > 0) {\n        if(txt[i].isalpha()) {\n            if(i === txt.length - 1) {\n                return false;\n            }\n            else {\n                if(!txt[i+1].isalpha()) {\n                    return true;\n                }\n            }\n        }\n        i--;\n    }\n    return false;\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter2 = (txt) => {\n    let i = txt.length - 1;\n    while(i > 0) {\n        if(txt[i].isalpha()) {\n            if(i === txt.length - 1) {\n                return true;\n            }\n            else {\n                if(!txt[i+1].isalpha()) {\n                    return false;\n                }\n            }\n        }\n        i--;\n    }\n    return false;\n}\n\nconst determineIfConcludingCharConstituteALetter3 = (txt) => {\n    let i = txt.length - 1;\n    while(i > 0) {\n        if(txt[i].isalpha()) {\n            if(i === txt.length - 1) {\n                return true;\n            }\n            else {\n                if(!txt[i+1].isalpha()) {\n                    return false;\n                }\n            }\n        }\n        i--;\n    }\n    return true;\n}\n\nconst determineIfConcludingCharConstituteALetter4 = (txt) => {\n    let i = txt.length - 1;\n    while(i > 0) {\n        if(txt[i].isalpha()) {\n            if(i === txt.length - 1) {\n                return false;\n            }\n            else {\n                if(!txt[i+1].isalpha()) {\n                    return true;\n                }\n            }\n        }\n        i--;\n    }\n    return false;\n}\n\nconst determineIfConcludingCharConstituteALetter5 = (txt) => {\n    let i = txt.length - 1;\n    while(i > 0) {\n        if(txt[i].isalpha()) {\n            if(i === txt.length - 1) {\n                return false;\n            }\n            else {\n                if(!txt[i+1].isalpha()) {\n                    return true;\n                }\n            }\n        }\n        i--;\n    }\n    return true;\n}\n\nconst determineIfConcludingCharConstituteALetter6 = (txt) => {\n    let i = txt.length - 1;\n    while(i > 0) {\n        if(txt[i].isalpha()) {\n            if(i === txt.length - 1) {\n                return true;\n            }\n            else {\n                if(!txt[i+1].isalpha()) {\n                    return false;\n                }\n            }\n        }\n        i--;\n    }\n    return false;\n}\n\nconst determineIfConcludingCharConstituteALetter7 = (txt) => {\n    let i = txt.length - 1;\n    while(i > 0) {\n        if(txt[i].isalpha()) {\n            if(i === txt.length - 1) {\n                return true;\n            }\n            else {\n                if(!txt[i+1].isalpha()) {\n                    return false;\n                }\n            }\n        }\n        i--;\n    }\n    return true;\n}\n\nconst determineIfConcludingCharConstituteALetter8 = (txt) => {\n    let i = txt.length - 1;\n    while(i > 0) {\n        if(txt[i].isalpha()) {\n            if(i === txt.length - 1) {\n                return false;\n            }\n            else {\n                if(!txt[i+1].isalpha()) {\n                    return true;\n                }\n            }\n        }\n        i--;\n    }\n    return false;\n}\n\nconst determineIfConcludingCharConstituteALetter9 = (txt) => {\n    let i = txt.length - 1;\n    while(i > 0) {\n        if(txt[i].isalpha()) {\n            if(i === txt.length - 1) {\n                return true;\n            }\n            else {\n                if(!txt[i+1].isalpha()) {\n                    return false;\n                }\n            }\n        }\n        i--;\n    }\n    return true;\n}\n\nconst determineIfConcludingCharConstituteALetter10 = (txt) => {\n    let i = txt.length - 1;\n    while(i > 0) {\n        if(txt[i].isalpha()) {\n            if(i === txt.length - 1) {\n                return false;\n            }\n            else {\n                if(!txt[i+1].isalpha()) {\n                    return true;\n                }\n            }\n        }\n        i--;\n    }\n    return false;\n}\n\nconst determineIfConcludingCharConstituteALetter11 = (txt) => {\n    let i = t"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let max = -1;\n  let current = 0;\n  let index = -1;\n\n  while (current < arr.length - 1) {\n    if (arr[current] >= arr[current + 1]) {\n      max = current;\n      index = current;\n    }\n    current++;\n  }\n\n  if (max === -1) {\n    return -1;\n  }\n\n  return index;\n};\n\nmodule.exports = canStage;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  let first = null;\n  let second = null;\n\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      if (first === null) {\n        first = num;\n      } else if (num > first) {\n        first = num;\n      }\n    } else if (num > 0) {\n      if (second === null) {\n        second = num;\n      } else if (num < second) {\n        second = num;\n      }\n    }\n  }\n\n  return { first, second };\n};\n\n// Tests\n\nconsole.log(bigSmallIntegers([2, 4, 1, 3, 5, 7])); // {first: null, second: 1}\nconsole.log(bigSmallIntegers([])); // {first: null, second: null}\nconsole.log(bigSmallIntegers([0])); // {first: null, second: null}\nconsole.log(bigSmallIntegers([2, 4, 1, 3, 5, 7, 0])); // {first: 2, second: 1}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne2 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne3 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne4 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne5 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne6 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne7 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne8 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne9 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne10 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne11 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne12 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne13 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne14 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne15 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n  if (floatA < floatB) {\n    return b;\n  } else if (floatA > floatB) {\n    return a;\n  } else if (floatA === floatB) {\n    return null;\n  }\n};\n\nconst compareOne16 = (a, b) => {\n  const floatA = Number(a);\n  const floatB = Number(b);\n"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenFive = (n) => {\n  return n % 2 === 0 && (n + 3) % 5 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenSeven = (n) => {\n  return n % 2 === 0 && (n + 5) % 7 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 11 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenEleven = (n) => {\n  return n % 2 === 0 && (n + 3) % 11 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 13 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenThirteen = (n) => {\n  return n % 2 === 0 && (n + 5) % 13 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 17 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenSeventeen = (n) => {\n  return n % 2 === 0 && (n + 3) % 17 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 19 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenNineteen = (n) => {\n  return n % 2 === 0 && (n + 5) % 19 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 21 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenTwentyone = (n) => {\n  return n % 2 === 0 && (n + 3) % 21 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 23 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenTwentyThree = (n) => {\n  return n % 2 === 0 && (n + 5) % 23 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 29 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenTwentyNine = (n) => {\n  return n % 2 === 0 && (n + 3) % 29 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 31 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenThirtyOne = (n) => {\n  return n % 2 === 0 && (n + 5) % 31 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 33 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequateToSumEvenThirtyThree = (n) => {\n  return n % 2 === 0 && (n + 3) % 33 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 37 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(12) == true\n  */\nconst isAdequate"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  if (n < 0) {\n    return 0\n  }\n\n  let result = 1\n\n  for (let i = 1; i <= n; i++) {\n    result *= i\n  }\n\n  return result\n}\n\nmodule.exports = extraFactorial\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n  //return text.replace(/ /g,'_')\n  return text.replace(/\\s+/g,'_')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst removePunctuations = (text) => {\n  return text.replace(/[.,!@#$%^&*()_\\-=+|{}]/g,'')\n}\n\nconst format = (text) => {\n  return text\n   .replace(/[^a-zA-Z0-9]/g,'')\n   .replace(/\\s+/g,' ')\n   .replace(/([^\\s])([\\s]+)([^\\s])/g,'$1$2$3')\n}\n\nconst toTitleCase = (text) => {\n  return text\n   .replace(/([^\\s])([\\s]+)([^\\s])/g,'$1 $2 $3')\n}\n\nconst normalize = (text) => {\n  return text.replace(/\\s+/g,' ')\n}\n\nconst normalizeTitle = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g,'')\n   .replace(/\\s+/g,' ')\n   .replace(/([^\\s])([\\s]+)([^\\s])/g,'$1 $2 $3')\n}\n\nconst upperCaseWords = (text) => {\n  return text\n   .replace(/([a-z])([A-Z]+)/g,'$1 $2')\n}\n\nconst upperCaseWords2 = (text) => {\n    return text\n       .replace(/([a-z])([A-Z]+)/g,'$1 $2')\n       .replace(/\\s+/g,' ')\n}\n\nconst lowerCaseWords = (text) => {\n  return text\n   .replace(/([A-Z]+)([a-z]+)/g,'$1 $2')\n   .replace(/\\s+/g,' ')\n}\n\nconst removeAccents = (text) => {\n  return text\n   .replace(/[\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/g,function(c){return c.toLowerCase()})\n   .replace(/[\\u00E0-\\u00F6\\u00F8-\\u00FF]/g,function(c){return c.toLowerCase()})\n   .replace(/[\\u00E8-\\u00F9\\u00EC-\\u00ED\\u00F2-\\u00F3\\u00FA-\\u00FB\\u00DF]/g,function(c){return c.toLowerCase()})\n   .replace(/[\\u00C7]/g,function(c){return c.toLowerCase()})\n   .replace(/[\\u00D1-\\u00D3]/g,function(c){return c.toLowerCase()})\n   .replace(/[\\u00D9-\\u00DC]/g,function(c){return c.toLowerCase()})\n}\n\nconst toHtml = (text) => {\n  return text\n   .replace(/[\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/g,function(c){return '&#'+c.charCodeAt(0)+';'})\n   .replace(/[\\u00E0-\\u00F6\\u00F8-\\u00FF]/g,function(c){return '&#'+c.charCodeAt(0)+';'})\n   .replace(/[\\u00E8-\\u00F9\\u00EC-\\u00ED\\u00F2-\\u00F3\\u00FA-\\u00FB\\u00DF]/g,function(c){return '&#'+c.charCodeAt(0)+';'})\n   .replace(/[\\u00C7]/g,function(c){return '&#'+c.charCodeAt(0)+';'})\n   .replace(/[\\u00D1-\\u00D3]/g,function(c){return '&#'+c.charCodeAt(0)+';'})\n   .replace(/[\\u00D9-\\u00DC]/g,function(c){return '&#'+c.charCodeAt(0)+';'})\n   .replace(/\\s+/g,'&nbsp;')\n}\n\nconst toLowerCase = (text) => {\n    return text\n       .replace(/([a-z])([A-Z]+)/g,'$1 $2')\n       .replace(/\\s+/g,' ')\n}\n\nconst toCapitalCase = (text) => {\n    return text\n       .replace(/([a-z])([A-Z]+)/g,'$1 $2')\n       .replace(/\\s+/g,' ')\n}\n\nconst formatTitle = (text) => {\n    return text\n       .replace(/([a-z])([A-Z]+)/g,'$1 $2')\n       .replace(/\\s+/g,' ')\n       .replace(/([A-Z]+)([A-Z])/g,'$1 $2')\n       .replace(/([A-Z]+)([a-z]+)/g,'$"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let re = /(^[a-zA-Z]+[0-9]*$)/.test(file_name);\n  re = re && /(\\.txt|\\.exe|\\.dll)$/.test(file_name);\n  return re;\n};\n\n/*\n  Create a function which takes a number and returns the number in base 10.\n  The number is guaranteed to fit in 32 bits.\n  */\nconst intToBase10 = (num) => {\n  let result = num;\n  while (result > 0) {\n    result = Math.floor(result / 10);\n  }\n  return result;\n};\n\n/*\n  Create a function which takes a string representing an integer, and returns\n  'Yes' if the the integer is a valid base 10 integer, and returns 'No' otherwise.\n  A valid integer is one which is between 0 and 2^32-1, inclusive.\n  Examples:\n  intCheck(\"0\") # => 'Yes'\n  intCheck(\"1\") # => 'Yes'\n  intCheck(\"10\") # => 'No' (the number is not a valid base 10 integer)\n  intCheck(\"100\") # => 'No' (the number is not a valid base 10 integer)\n  intCheck(\"2147483648\") # => 'No' (the number is not a valid base 10 integer)\n  intCheck(\"2147483649\") # => 'No' (the number is not a valid base 10 integer)\n  intCheck(\"4294967295\") # => 'Yes'\n  intCheck(\"4294967296\") # => 'No' (the number is not a valid base 10 integer)\n  */\nconst intCheck = (int_value) => {\n  let re = /^[0-9]+$/.test(int_value);\n  re = re && intToBase10(parseInt(int_value, 10)) <= 2147483648;\n  return re;\n};\n\n/*\n  Create a function which takes a string representing an integer, and returns\n  'Yes' if the the integer is a valid base 36 integer, and returns 'No' otherwise.\n  A valid base 36 integer is one which is between 0 and 2^32-1, inclusive.\n  Examples:\n  intCheck(\"0\") # => 'Yes'\n  intCheck(\"1\") # => 'Yes'\n  intCheck(\"10\") # => 'No' (the number is not a valid base 36 integer)\n  intCheck(\"100\") # => 'No' (the number is not a valid base 36 integer)\n  intCheck(\"2147483648\") # => 'Yes'\n  intCheck(\"2147483649\") # => 'Yes' (the number is not a valid base 36 integer)\n  intCheck(\"4294967295\") # => 'Yes'\n  intCheck(\"4294967296\") # => 'No' (the number is not a valid base 36 integer)\n  */\nconst intCheck36 = (int_value) => {\n  let re = /^[0-9]+$/.test(int_value);\n  re = re && intToBase36(parseInt(int_value, 10)) <= 2147483648;\n  return re;\n};\n\n/*\n  Create a function which takes a string representing an integer, and returns\n  'Yes' if the the integer is a valid base 36 integer, and returns 'No' otherwise.\n  A valid base 36 integer is one which is between 0 and 2^32-1, inclusive.\n  Examples:\n  intCheck(\"0\") # => 'Yes'\n  intCheck(\"1\") # => 'Yes'\n  intCheck(\"10\") # => 'No' (the number is not a valid base 36 integer)\n  intCheck(\"100\") # => 'No' (the number is not a valid base 36 integer)\n  intCheck(\"2147483648\") # => 'Yes'\n  intCheck(\"2147483649\") # => 'Yes' (the number is not a valid base 36 integer)\n  intCheck(\"4294967295\") # => 'Yes'\n  intCheck(\"4294967296\") # => 'No' (the number is not a valid base 36 integer)\n  */\nconst intCheck36Base36 = (int_value) => {\n  let re = /^[0-9]+$/.test(int_value);\n  re = re && intToBase36(parseInt(int_value, 10)) <= 2147483648;\n  return re;\n};\n\n/*\n  Create a function which takes a string representing an integer, and returns\n  'Yes' if the the integer is a valid base 36 integer, and returns 'No' otherwise.\n  A valid base 36 integer is one which is between 0 and 2^32-1, inclusive.\n  Examples:\n  intCheck(\"0\") # => 'Yes'\n  intCheck(\"1\") # => 'Yes'\n  intCheck(\"10\") # => 'No' (the number is not a valid base 36 integer)\n  intCheck(\"100\") # => 'No' (the number is not a valid base 36 integer)\n  intCheck(\"2147483648\") # => 'Yes'\n  intCheck(\"2147483649\") # => 'Yes' (the number is not a valid base 36 integer)\n  intCheck(\"4294967295\") # => 'Yes'\n  intCheck(\"4294967296\") # => 'No' (the number is not a valid base 36 integer)\n  */\nconst intCheckBase36 = (int_value) => {\n  let re = /^[0-9]+$/.test(int_value);\n  re = re && intToBase36(parseInt(int"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0\n  lst.forEach((e) => {\n    if (e % 3 === 0) {\n      sum += e*e\n    }\n    if (e % 4 === 0) {\n      sum += e*e*e\n    }\n  })\n  return sum\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the sum of all the multiples of \n  two that the integer entry is a divisor of. For example, given the list [1,2,3,4,5,6,7,8,9,10] the function should return \n  [1,4,9,16,25]. The function shall not change the entries in the list that are not a divisor of two.\n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,4,9,16,25]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-1,-1,-1,-1]\n  */\nconst summarizeDivisibleByTwo = (lst) => {\n  let sum = 0\n  lst.forEach((e) => {\n    if (e % 2 === 0) {\n      sum += e*(e-1)\n    }\n  })\n  return sum\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the sum of all the multiples of \n  three that the integer entry is a divisor of. For example, given the list [1,2,3,4,5,6,7,8,9,10] the function should return \n  [1,6,15,24]. The function shall not change the entries in the list that are not a divisor of three.\n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,6,15,24]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-1,-1,-1,-1]\n  */\nconst summarizeDivisibleByThree = (lst) => {\n  let sum = 0\n  lst.forEach((e) => {\n    if (e % 3 === 0) {\n      sum += e*(e-1)*(e-2)\n    }\n  })\n  return sum\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the sum of all the multiples of \n  four that the integer entry is a divisor of. For example, given the list [1,2,3,4,5,6,7,8,9,10] the function should return \n  [1,4,9,16,25]. The function shall not change the entries in the list that are not a divisor of four.\n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,4,9,16,25]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-1,-1,-1,-1]\n  */\nconst summarizeDivisibleByFour = (lst) => {\n  let sum = 0\n  lst.forEach((e) => {\n    if (e % 4 === 0) {\n      sum += e*(e-1)*(e-2)*(e-3)\n    }\n  })\n  return sum\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the sum of all the multiples of \n  five that the integer entry is a divisor of. For example, given the list [1,2,3,4,5,6,7,8,9,10] the function should return \n  [1,10,100,1000]. The function shall not change the entries in the list that are not a divisor of five.\n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [1,10,100,1000]\n  For lst = []  the output should be []\n  For lst = [-1,-5,2,-1,-5]  the output should be [-1,-1,-1,-1]\n  */\nconst summarizeDivisibleByFive = (lst) => {\n  let sum = 0\n  lst.forEach((e) => {\n    if (e % 5 === 0) {\n      sum += e*(e-1)*(e-2)*(e-3)*(e-4)\n    }\n  })\n  return sum\n}\n\nconst getSum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n//console.log(summarizeSquare([1,2,3,4,5,6,7,8,9,10]))\nconsole.log(summarizeDivisibleByTwo([1,2,3,4,5,6,7,8,9,10]))\nconsole.log(summarizeDivisibleByThree([1,2,3,4,5,6,7,8,9,10]))\nconsole.log(summarizeDivisibleByFour([1,2,"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  let words = sentence.split(' ')\n  let newSentence = words.map(word => {\n    let n = parseInt(word.length)\n    while (n % 2 === 0) {\n      n += 1\n    }\n    return word\n  }).filter(word => {\n    let n = parseInt(word.length)\n    while (n % 2 === 0) {\n      n += 1\n    }\n    return n === 1\n  })\n  return newSentence.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  with the words order as the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n*/\nconst bibleInPrisonSort = (sentence) => {\n  let words = sentence.split(' ')\n  let newSentence = words.sort()\n  return newSentence.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  with the words in alphabetical order.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n*/\nconst bibleInPrisonSortByAsc = (sentence) => {\n  let words = sentence.split(' ')\n  let newSentence = words.sort((a, b) => a < b)\n  return newSentence.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  with the words in alphabetical order.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n*/\nconst bibleInPrisonSortByDesc = (sentence) => {\n  let words = sentence.split(' ')\n  let newSentence = words.sort((a, b) => a > b)\n  return newSentence.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  with the words in alphabetical order.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n*/\nconst bibleInPrisonSortByAsc = (sentence) => {\n  let words = sentence.split(' ')\n  let newSentence = words.sort((a, b) => a < b)\n  return newSentence.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  with the words in alphabetical order.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n*/\nconst bibleInPrisonSortByDesc = (sentence) => {\n  let words = sentence.split(' ')\n  let newSentence = words.sort((a, b) => a > b)\n  return newSentence.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  with the words in the reverse order.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n*/\nconst bibleInPrisonReverse = (sentence) => {\n  let words = sentence.split(' ')\n  let newSentence = words.reverse()\n  return newSentence.join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [x_, n_] = x.split(\"/\");\n  const x = parseInt(x_, 10);\n  const n = parseInt(n_, 10);\n  if (x === 0 || n === 0) return false;\n  return (x * n === x)? true : false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\")); // true\nconsole.log(simplify(\"1/6\", \"2/1\")); // false\nconsole.log(simplify(\"7/10\", \"10/2\")); // false\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const len = nums.length\n  const map = nums.reduce((pre, curr, i) => {\n    const {digits} = curr\n    pre[digits] = i\n    return pre\n  }, {})\n  const list = []\n  let sum = 0\n  for (let key in map) {\n    if (sum < key) {\n      sum += key\n      list.push(map[key])\n    }\n  }\n  list.sort((a, b) => {\n    return list.indexOf(a) - list.indexOf(b)\n  })\n  return list\n}\n\nconsole.log(holyOrderByPoint([1, 11, -1, -11, -12]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  const isOdd = (num) => {\n    const arr = num.toString();\n    return arr[0] % 2 === 1 && arr[1] % 2 === 1;\n  };\n  let oddNums = 0;\n  for (let num of nums) {\n    if (isOdd(num)) {\n      oddNums++;\n    }\n  }\n  return oddNums;\n};\n\nconst numbers = [\n  15, -73, 14, -15,\n  33, -2, -3, 45, 21, 109\n];\n\nconsole.log(extraFilter(numbers));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  const a = new Array(n)\n  const triples = 0\n\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (a[i] + a[j] + a[i + j] > 0) {\n        triples++\n      }\n    }\n  }\n\n  return triples\n}\n\nconsole.log(catchMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  var ret = [];\n\n  var p1 = planet.indexOf(planet1);\n  var p2 = planet.indexOf(planet2);\n  if (p1 < 0 || p2 < 0) return ret;\n\n  for (var i = p1; i <= p2; i++) {\n    var planet = planet[i];\n    if (Math.abs(Math.cos(Math.acos(Math.cos(Math.PI - Math.PI / 6) /\n        (Math.cos(Math.PI - Math.PI / planet.length) +\n        Math.cos(Math.PI - Math.PI / planet.length) +\n        Math.cos(Math.PI - Math.PI / planet.length))))) < 1)\n      ret.push(planet);\n  }\n  return ret;\n};\n\nvar planet = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Jupiter\", \"Mercury\"));\nconsole.log(bf(\"Mars\", \"Jupiter\"));\nconsole.log(bf(\"Saturn\", \"Jupiter\"));\nconsole.log(bf(\"Saturn\", \"Neptune\"));\nconsole.log(bf(\"Jupiter\", \"Uranus\"));\nconsole.log(bf(\"Uranus\", \"Saturn\"));\nconsole.log(bf(\"Neptune\", \"Saturn\"));\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const removeOdd = (arr) => arr.filter((x, index) => index % 2!== 0)\n  const removeOddLength = (arr) => arr.filter((x, index) => index % 2 === 0)\n  const removeDuplicates = (arr) => arr.filter((x, index) => index === 0 || arr[index - 1]!== x)\n  const sorted = removeOdd(removeOddLength(removeDuplicates(lst)))\n  return sorted.sort((a, b) => a.length - b.length)\n}\n\nconsole.log(screenTiltSum([\"aa\", \"a\", \"aaa\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  const isPrime = n.isPrime\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nexport default xOrYttrium\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  const length = lst.length\n  let sum = 0\n  for (let i = 0; i < length; i++) {\n    const x = lst[i]\n    if (x > 0 && typeof x === 'number') {\n      sum += (x * x)\n    }\n  }\n  if (length === 0) {\n    return 0\n  }\n  let deviation = sum / length\n  for (let i = 0; i < length; i++) {\n    const x = lst[i]\n    if (x > 0 && typeof x === 'number') {\n      if (x % 2 === 0) {\n        deviation -= (x * x)\n      }\n    }\n  }\n  return deviation\n}\n\n// Tests\n\nconst doubleTheDeviationTests = [\n  [[1, 3, 2, 0], 10],\n  [[-1, -2, 0], 0],\n  [[9, -2], 81],\n  [[0], 0],\n  [[], 0]\n]\n\nconsole.log(doubleTheDeviationTests.map(t => doubleTheDeviation(t[0])))\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let diff = 0;\n  let score = game.length;\n  let guess = guess.length;\n  let res = new Array(score);\n  for (let i = 0; i < score; i++) {\n    if (guess[i] === game[i]) {\n      res[i] = 0;\n    } else {\n      diff = Math.abs(guess[i] - game[i]);\n      res[i] = diff;\n    }\n  }\n  return res;\n};\n\nexport default compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  const class_parts = class_name.split('.')\n  let strongest_extension = null\n\n  extensions.forEach((extension) => {\n    const extension_parts = extension.split('.')\n    const extension_strength = extension_parts.reduce((acc, curr) => {\n      const parts_count = class_parts.length\n      const caps_count = curr.length - curr.replace(/[^\\w]/g, '').length\n      return acc + (caps_count - parts_count)\n    }, 0)\n\n    if (extension_strength > strongest_extension) {\n      strongest_extension = extension\n    }\n  })\n\n  return class_parts.concat(strongest_extension.split('.')).join('.')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n    let pattern = b.split('').map((c) => c.charCodeAt(0)).sort().join('');\n    let l = a.length;\n    let i = 0;\n    while (i < l) {\n        if (pattern.indexOf(a.charCodeAt(i)) > -1) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\"));\nconsole.log(cycpatternCheck(\"hello\",\"ell\"));\nconsole.log(cycpatternCheck(\"whassup\",\"psus\"));\nconsole.log(cycpatternCheck(\"abab\",\"baa\"));\nconsole.log(cycpatternCheck(\"efef\",\"eeff\"));\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"));<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenDigits = 0;\n  let oddDigits = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      evenDigits += 1;\n    }\n    else {\n      oddDigits += 1;\n    }\n    num = num / 10;\n  }\n  return [evenDigits, oddDigits];\n};\n\n/* Given an integer, return the number of digits.\n   The number of digits can be any number of digits.\n   Example:\n      numberOfDigits(-12) ==> 3\n      numberOfDigits(12) ==> 2\n      numberOfDigits(123) ==> 3\n*/\nconst numberOfDigits = (num) => {\n  let digits = 0;\n  while (num) {\n    digits += 1;\n    num = num / 10;\n  }\n  return digits;\n};\n\n/* Given an integer, return the number of digits that are even.\n   The number of digits can be any number of digits.\n   Example:\n      numberOfEvenDigits(12) ==> 2\n      numberOfEvenDigits(123) ==> 1\n*/\nconst numberOfEvenDigits = (num) => {\n  let evenDigits = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      evenDigits += 1;\n    }\n    num = num / 10;\n  }\n  return evenDigits;\n};\n\n/* Given an integer, return the number of digits that are odd.\n   The number of digits can be any number of digits.\n   Example:\n      numberOfOddDigits(12) ==> 2\n      numberOfOddDigits(123) ==> 3\n*/\nconst numberOfOddDigits = (num) => {\n  let oddDigits = 0;\n  while (num) {\n    if (num % 2!== 0) {\n      oddDigits += 1;\n    }\n    num = num / 10;\n  }\n  return oddDigits;\n};\n\nconst evenOddDigits = (num) => {\n  let evenDigits = 0;\n  let oddDigits = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      evenDigits += 1;\n    }\n    else {\n      oddDigits += 1;\n    }\n    num = num / 10;\n  }\n  return [evenDigits, oddDigits];\n};\n\nconst numberOfDigits = (num) => {\n  let digits = 0;\n  while (num) {\n    digits += 1;\n    num = num / 10;\n  }\n  return digits;\n};\n\nconst numberOfEvenDigits = (num) => {\n  let evenDigits = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      evenDigits += 1;\n    }\n    num = num / 10;\n  }\n  return evenDigits;\n};\n\nconst numberOfOddDigits = (num) => {\n  let oddDigits = 0;\n  while (num) {\n    if (num % 2!== 0) {\n      oddDigits += 1;\n    }\n    num = num / 10;\n  }\n  return oddDigits;\n};\n\nconst evenOddDigits = (num) => {\n  let evenDigits = 0;\n  let oddDigits = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      evenDigits += 1;\n    }\n    else {\n      oddDigits += 1;\n    }\n    num = num / 10;\n  }\n  return [evenDigits, oddDigits];\n};\n\nconst sumOfDigits = (num) => {\n  let sum = 0;\n  while (num) {\n    sum += num % 10;\n    num = num / 10;\n  }\n  return sum;\n};\n\nconst sumOfEvenDigits = (num) => {\n  let sum = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      sum += num % 10;\n    }\n    num = num / 10;\n  }\n  return sum;\n};\n\nconst sumOfOddDigits = (num) => {\n  let sum = 0;\n  while (num) {\n    if (num % 2!== 0) {\n      sum += num % 10;\n    }\n    num = num / 10;\n  }\n  return sum;\n};\n\nconst sumOfDigits = (num) => {\n  let sum = 0;\n  while (num) {\n    sum += num % 10;\n    num = num / 10;\n  }\n  return sum;\n};\n\nconst sumOfEvenDigits = (num) => {\n  let sum = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      sum += num % 10;\n    }\n    num = num / 10;\n  }\n  return sum;\n};\n\nconst sumOfOddDigits = (num) => {\n  let sum = 0;\n  while (num) {\n    if (num % 2!== 0) {\n      sum += num % 10;\n    }\n    num = num / 10;\n  }\n  return sum;\n};\n\nconst productOfDigits = (num) => {\n  let sum = 1;\n  while (num) {\n    sum *= num % 10;\n    num = num / 10;\n  }\n  return sum;\n};\n\nconst productOfEvenDigits = (num) => {\n  let sum = 1;\n  while (num) {\n    if (num % 2 === 0) {\n      sum *= num % 10;\n    }\n    num = num / 10;\n  }\n  return sum;\n};\n\nconst productOfOddDigits = (num) => {\n  let sum = 1;\n  while (num) {\n    if (num % 2!== 0) {\n      sum *= num % 10;\n    }\n    num = num / 10;\n  }\n  return sum;\n};\n\nconst productOfDigits = (num) => {\n  let"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = {\n    'I': 1,\n    'V': 5,\n    'X': 10,\n    'L': 50,\n    'C': 100,\n    'D': 500,\n    'M': 1000\n  };\n\n  const len = number.toString().length;\n  let res = '';\n  let num = 0;\n\n  for (let i = 0; i < len; i++) {\n    if (number.toString()[i] === 'I') {\n      num = 1;\n      res += 'I';\n    } else if (number.toString()[i] === 'V') {\n      num = 5;\n      res += 'V';\n    } else if (number.toString()[i] === 'X') {\n      num = 10;\n      res += 'X';\n    } else if (number.toString()[i] === 'L') {\n      num = 50;\n      res += 'L';\n    } else if (number.toString()[i] === 'C') {\n      num = 100;\n      res += 'C';\n    } else if (number.toString()[i] === 'D') {\n      num = 500;\n      res += 'D';\n    } else if (number.toString()[i] === 'M') {\n      num = 1000;\n      res += 'M';\n    }\n\n    if (i < len - 1 && num % roman[number.toString()[i + 1]] === 0) {\n      num = num / roman[number.toString()[i + 1]];\n      res += number.toString()[i + 1];\n    }\n  }\n\n  return res.toLowerCase();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  return (Math.abs(a - b) + Math.abs(a - c) <= Math.abs(a + b + c)) && (Math.abs(b - c) + Math.abs(b - a) <= Math.abs(b + c + a))\n}\n\n/**\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  A triangle is a right-angled triangle if the two sides are equal.\n  Example:\n  areaOfTriangle(3, 4, 5) == 18\n  areaOfTriangle(1, 2, 3) == null\n  */\nconst areaOfTriangle = (a, b, c) => {\n  if (goodSlantTriangle(a, b, c)) {\n    return (a * b) / 2\n  } else {\n    return null\n  }\n}\n\nmodule.exports = {\n  goodSlantTriangle,\n  areaOfTriangle\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  const uniqueChars = new Set();\n  const result = words.reduce((previous, current) => {\n    if (uniqueChars.has(current)) {\n      return previous + current;\n    } else {\n      uniqueChars.add(current);\n      return previous + current;\n    }\n  });\n\n  if (uniqueChars.size === 0) {\n    return \"\";\n  }\n\n  return words.find((word) => uniqueChars.has(word));\n};\n\nmodule.exports = receiveMax;\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  // YOUR CODE HERE\n  // return [Math.min(remaining, number), remaining]\n  if (remaining > 0) return [Math.min(remaining, number), remaining]\n  else return [number, 0]\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {\n\tcout << \"Test \" << testNum << \": [\" << p0 << \",\" << p1 << \",\" << p2;\n\tcout << \"]\" << endl;\n\tint answer;\n\tint p3Answer = 0;\n\tswitch (testNum) {\n\tcase 0: {\n\t\tint a0 = p0;\n\t\tint a1 = p1;\n\t\tint a2 = p2;\n\t\tint a3 = p3;\n\t\tint r = feed(a0, a1, a2);\n\t\tcout << \"Desired answer:\" << endl;\n\t\tcout << \"\\t\" << \"an array\" << endl;\n\t\tcout << \"\\t\" << \"{\" << a3 << \",\" << a2 << \"}\" << endl;\n\t\tcout << \"Your answer:\" << endl;\n\t\tcout << \"\\t\" << \"{\" << r[0] << \",\" << r[1] << \"}\" << endl;\n\t\tif (hasAnswer) {\n\t\t\tcout << \"Desired answer:\" << endl;\n\t\t\tcout << \"\\t\" << \"an array\" << endl;\n\t\t\tcout << \"\\t\" << \"{\" << a3 << \",\" << a2 << \"}\" << endl;\n\t\t}\n\t\tanswer = r[0];\n\t\tp3Answer = r[1];\n\t\tbreak;\n\t}\n\n\tcase 1: {\n\t\tint a0 = p0;\n\t\tint a1 = p1;\n\t\tint a2 = p2;\n\t\tint a3 = p3;\n\t\tint r = feed(a0, a1, a2);\n\t\tcout << \"Desired answer:\" << endl;\n\t\tcout << \"\\t\" << \"an array\" << endl;\n\t\tcout << \"\\t\" << \"{\" << a3 << \",\" << a2 << \"}\" << endl;\n\t\tcout << \"Your answer:\" << endl;\n\t\tcout << \"\\t\" << \"{\" << r[0] << \",\" << r[1] << \"}\" << endl;\n\t\tif (hasAnswer) {\n\t\t\tcout << \"Desired answer:\" << endl;\n\t\t\tcout << \"\\t\" << \"an array\" << endl;\n\t\t\tcout << \"\\t\" << \"{\" << a3 << \",\" << a2 << \"}\" << endl;\n\t\t}\n\t\tanswer = r[0];\n\t\tp3Answer = r[1];\n\t\tbreak;\n\t}\n\n\tcase 2: {\n\t\tint a0 = p0;\n\t\tint a1 = p1;\n\t\tint a2 = p2;\n\t\tint a3 = p3;\n\t\tint r = feed(a0, a1, a2);\n\t\tcout << \"Desired answer:\" << endl;\n\t\tcout << \"\\t\" << \"an array\" << endl;\n\t\tcout << \"\\t\" << \"{\" << a3 << \",\" << a2 << \"}\" << endl;\n\t\tcout << \"Your answer:\" << endl;\n\t\tcout << \"\\t\" << \"{\" << r[0] << \",\" << r[1] << \"}\" << endl;\n\t\tif (hasAnswer) {\n\t\t\tcout << \"Desired answer:\" << endl;\n\t\t\tcout << \"\\t\" << \"an array\" << endl;\n\t\t\tcout << \"\\t\" << \"{\" << a3 << \",\" << a2 << \"}\" << endl;\n\t\t}\n\t\tanswer = r[0];\n\t\tp3Answer = r[1];\n\t\tbreak;\n\t}\n\t}\n\tif (hasAnswer) {\n\t\tif (answer!= p3Answer) {\n\t\t\tcout << \"DOESN'T MATCH!!!!\" << endl;\n\t\t} else {\n\t\t\tcout << \"Match :-)\" << endl;\n\t\t}\n\t} else {\n\t\tcout << \"You're lost...:-(\" << endl;\n\t}\n\tif (p3 == -1) {\n\t\tcout << \"Targeted sequences:\" << endl;\n\t\tfor (int i=0; i<p3; i++) {\n\t\t\tcout << q[i] << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn true;\n}\nint main() {\n\tbool all_right;\n\tbool disabled;\n\tbool tests_disabled;\n\tall_right = true;\n\ttests_disabled = false;\n\t\n\tint p0;\n\tint p1;\n\tint p2;\n\tint p3;\n\t\n\t// ----- test 0 -----\n\tdisabled = false;\n\tp0 = 5;\n\tp1 = 6;\n\tp2 = 10;\n\tp3 = 11;\n\tall_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  let ops = operator.slice(0, -1)\n  let op = operator[operator.length - 1]\n  let operands = operand.slice(0, -1)\n  let operand = operand[operand.length - 1]\n\n  if (ops.length === 0 || operands.length === 0) {\n    return operand\n  }\n\n  let i = 0\n  let j = 0\n\n  let result = ops[i](operands[i], operand)\n  while (j < ops.length) {\n    result = ops[i](result, ops[j](operands[j], operand))\n    j++\n  }\n\n  return result\n}\n\nconst testSufficientAlgebra = () => {\n  let operator = ['+', '*', '-']\n  let operand = [2, 3, 4, 5]\n  let result = sufficeAlgebra(operator, operand)\n  console.log(result)\n}\n\ntestSufficientAlgebra()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  if (s.length === 0) return s;\n  let c = s.charAt(0);\n  if (c >= 'a' && c <= 'z') {\n    return s.toUpperCase();\n  } else if (c >= 'A' && c <= 'Z') {\n    return s.toLowerCase();\n  } else {\n    return s;\n  }\n};\n\nconst reverse = (s) => {\n  if (s.length === 0) return s;\n  let c = s.charAt(0);\n  if (c >= 'a' && c <= 'z') {\n    return s.toLowerCase();\n  } else if (c >= 'A' && c <= 'Z') {\n    return s.toUpperCase();\n  } else {\n    return s;\n  }\n};\n\nconst reverseStr = (s) => {\n  if (s.length === 0) return s;\n  let c = s.charAt(0);\n  if (c >= 'a' && c <= 'z') {\n    return s.toLowerCase();\n  } else if (c >= 'A' && c <= 'Z') {\n    return s.toUpperCase();\n  } else {\n    return s;\n  }\n};\n\nconst toTitleCase = (s) => {\n  if (s.length === 0) return s;\n  let c = s.charAt(0);\n  if (c >= 'a' && c <= 'z') {\n    return s.toUpperCase();\n  } else if (c >= 'A' && c <= 'Z') {\n    return s.toLowerCase();\n  } else {\n    return s;\n  }\n};\n\nconst toTitleCaseStr = (s) => {\n  if (s.length === 0) return s;\n  let c = s.charAt(0);\n  if (c >= 'a' && c <= 'z') {\n    return s.toUpperCase();\n  } else if (c >= 'A' && c <= 'Z') {\n    return s.toLowerCase();\n  } else {\n    return s;\n  }\n};\n\nconst main = () => {\n  const s = '#a@c';\n  console.log(resolve(s));\n  console.log(reverse(s));\n  console.log(reverseStr(s));\n  console.log(toTitleCase(s));\n  console.log(toTitleCaseStr(s));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  const md5 = require('crypto-md5');\n  if (text === '') {\n    return null;\n  }\n  return md5(text);\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha1('Hello world') == '9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9d07f9a9f9"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  if (a === b) return [a];\n  const half = Math.ceil((b - a) / 2);\n  return [...new Array(half),...renderInteger(a, b - half)];\n};\n\nconst test = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(renderInteger(1, 9));\nconsole.log(renderInteger(2, 9));\nconsole.log(renderInteger(3, 9));\nconsole.log(renderInteger(4, 9));\nconsole.log(renderInteger(5, 9));\nconsole.log(renderInteger(6, 9));\nconsole.log(renderInteger(7, 9));\nconsole.log(renderInteger(8, 9));\nconsole.log(renderInteger(9, 9));\n<|endoftext|>"}
