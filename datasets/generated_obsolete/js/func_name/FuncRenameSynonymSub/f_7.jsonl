{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n    let prevNumber = null;\n    let prevDistance = null;\n    let distance = null;\n    for (let number of numbers) {\n        if (prevNumber === null) {\n            prevNumber = number;\n            distance = Math.abs(number - prevNumber);\n            prevDistance = distance;\n        } else {\n            distance = Math.abs(number - prevNumber);\n            if (distance < prevDistance - threshold) {\n                return false;\n            }\n            prevNumber = number;\n            prevDistance = distance;\n        }\n    }\n    return true;\n}\n\n// http://stackoverflow.com/questions/14872404/how-to-sort-an-array-by-a-property-in-javascript\nconst compareByProperty = (property1, property2) => {\n    let comp = null;\n    if (property1 < property2) {\n        comp = -1;\n    } else if (property1 > property2) {\n        comp = 1;\n    }\n    return comp;\n}\n\n// http://stackoverflow.com/questions/295828/how-to-sort-an-array-of-objects-by-property-in-javascript\nconst sortByProperty = (property, comparator) => {\n    const sortedArray = [];\n    for (let element of array) {\n        sortedArray.push([element[property], element]);\n    }\n    sortedArray.sort(comparator);\n    return sortedArray;\n}\n\n// http://stackoverflow.com/questions/153745/how-to-get-the-first-and-last-n-elements-from-an-array-in-javascript\nconst getFirstLastElements = (array, number) => {\n    return array.slice(0, number).concat(array.slice(array.length - number, array.length));\n}\n\n// http://stackoverflow.com/questions/13656844/how-to-get-the-nth-element-in-an-array-in-javascript\nconst getNthElement = (array, n) => {\n    return array[n];\n}\n\n// http://stackoverflow.com/questions/182810/how-to-check-if-an-array-is-empty-or-null\nconst isEmpty = (array) => {\n    return (array === null) || (array.length === 0);\n}\n\n// http://stackoverflow.com/questions/1209749/how-to-convert-an-array-to-a-string-in-javascript\nconst toString = (array) => {\n    return array.join(', ');\n}\n\n// http://stackoverflow.com/questions/155845/how-to-convert-an-array-to-an-integer\nconst toInteger = (array) => {\n    return array.reduce((prev, current) => prev + current, 0);\n}\n\n// http://stackoverflow.com/questions/167936/how-to-get-the-element-with-the-highest-value-in-an-array\nconst max = (array) => {\n    return Math.max.apply(Math, array);\n}\n\n// http://stackoverflow.com/questions/167936/how-to-get-the-element-with-the-highest-value-in-an-array\nconst min = (array) => {\n    return Math.min.apply(Math, array);\n}\n\n// http://stackoverflow.com/questions/155845/how-to-convert-an-array-to-an-integer\nconst sum = (array) => {\n    return array.reduce((prev, current) => prev + current, 0);\n}\n\n// http://stackoverflow.com/questions/167936/how-to-get-the-element-with-the-highest-value-in-an-array\nconst average = (array) => {\n    return sum(array) / array.length;\n}\n\n// http://stackoverflow.com/questions/155845/how-to-convert-an-array-to-an-integer\nconst count = (array) => {\n    return array.length;\n}\n\n// http://stackoverflow.com/questions/155845/how-to-convert-an-array-to-an-integer\nconst reverse = (array) => {\n    let reversedArray = array.slice(0);\n    reversedArray.reverse();\n    return reversedArray;\n}\n\n// http://stackoverflow.com/questions/155845/how-to-convert-an-array-to-an-integer\nconst sum = (array) => {\n    return array.reduce((prev, current) => prev + current, 0);\n}\n\n// http://stackoverflow.com/questions/155845/how-to-convert-an-array-to-an-integer\nconst average = (array) => {\n    return sum(array) / array.length;\n}\n\n// http://stackoverflow.com/questions/155845/how-to-convert-an-array-to-an-integer\nconst max = (array) => {\n    return array.reduce((prev, current) => prev > current? prev : current, array[0]);\n}\n\n// http://stackoverflow.com/questions/155845/how-to-convert-an-array-to-an-integer\nconst min = (array) => {\n    return array.reduce((prev, current) => prev < current? prev : current, array[0]);\n}\n\n// http://stackoverflow.com/questions/155845/how-to-convert-an-array-to-an-integer\nconst reverse = (array) => {\n    let reversedArray = array.slice(0);\n    reversedArray.reverse();\n    return reversedArray;\n}\n\n// http://stackoverflow.com/questions/155845/how"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  paren_string = paren_string.trim().split('');\n  return paren_string.reduce((acc, curr) => {\n    if (curr === '(') {\n      acc.push('');\n    } else if (curr === ')') {\n      const inner = acc.pop();\n      if (inner === '') {\n        acc.push('');\n      } else {\n        acc.push(inner);\n      }\n    } else {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Input:\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n  10\n  11\n  12\n  13\n  14\n  15\n  16\n  17\n  18\n  19\n  20\n  21\n  22\n  23\n  24\n  25\n  26\n  27\n  28\n  29\n  30\n  31\n  32\n  33\n  34\n  35\n  36\n  37\n  38\n  39\n  40\n  41\n  42\n  43\n  44\n  45\n  46\n  47\n  48\n  49\n  50\n  51\n  52\n  53\n  54\n  55\n  56\n  57\n  58\n  59\n  60\n  61\n  62\n  63\n  64\n  65\n  66\n  67\n  68\n  69\n  70\n  71\n  72\n  73\n  74\n  75\n  76\n  77\n  78\n  79\n  80\n  81\n  82\n  83\n  84\n  85\n  86\n  87\n  88\n  89\n  90\n  91\n  92\n  93\n  94\n  95\n  96\n  97\n  98\n  99\n  100\n  101\n  102\n  103\n  104\n  105\n  106\n  107\n  108\n  109\n  110\n  111\n  112\n  113\n  114\n  115\n  116\n  117\n  118\n  119\n  120\n  121\n  122\n  123\n  124\n  125\n  126\n  127\n  128\n  129\n  130\n  131\n  132\n  133\n  134\n  135\n  136\n  137\n  138\n  139\n  140\n  141\n  142\n  143\n  144\n  145\n  146\n  147\n  148\n  149\n  150\n  151\n  152\n  153\n  154\n  155\n  156\n  157\n  158\n  159\n  160\n  161\n  162\n  163\n  164\n  165\n  166\n  167\n  168\n  169\n  170\n  171\n  172\n  173\n  174\n  175\n  176\n  177\n  178\n  179\n  180\n  181\n  182\n  183\n  184\n  185\n  186\n  187\n  188\n  189\n  190\n  191\n  192\n  193\n  194\n  195\n  196\n  197\n  198\n  199\n  200\n  201\n  202\n  203\n  204\n  205\n  206\n  207\n  208\n  209\n  210\n  211\n  212\n  213\n  214\n  215\n  216\n  217\n  218\n  219\n  220\n  221\n  222\n  223\n  224\n  225\n  226\n  227\n  228\n  229\n  230\n  231\n  232\n  233\n  234\n  235\n  236\n  237\n  238\n  239\n  240\n  241\n  242\n  243\n  244\n  245\n  246\n  247\n  248\n  249\n  250\n  251\n  252\n  253\n  254\n  255\n  256\n  257\n  258\n  259\n  260\n  261\n  262\n  263\n  264\n  265\n  266\n  267\n  268\n  269\n  270\n  271\n  272\n  273\n  274\n  275\n  276\n  277\n  278\n  279\n  280\n  281\n  282\n  283\n  284\n  285\n  286\n  287\n  288\n  289\n  290\n  291\n  292\n  293\n  294\n  295\n  296\n  297\n  298\n  299\n  300\n  301\n  302\n  303\n  304\n  305\n  306\n  307\n  308\n  309\n  310\n  311\n  312\n  313\n  314\n  315\n  316\n  317\n  318\n  319\n  320\n  321\n  322\n  323\n  324\n  325\n  326\n  327\n  328\n  329\n  330\n  331\n  332\n  333\n  334\n  335\n  336\n  337\n  338\n  339\n  340\n  341\n  342\n  343\n  344\n  345\n  346\n  347\n  348\n  349\n  350\n  351\n  352\n  353\n  354\n  355\n  356\n  357\n  358\n  359\n  360\n  361\n  362\n  363\n  364\n  365\n  366\n  367\n  368\n  369\n  370\n  371\n  372\n  373\n  374\n  375\n  376\n  377\n  378\n  379\n  380\n  381\n  382\n  383\n  384\n  385\n  386\n  387\n  388\n  389\n  390\n  391\n  392\n  393\n  394\n  395\n  396\n  397\n  398\n  399\n  400\n  401\n  402\n  403\n  404\n  405\n  406\n  407\n  408\n  409\n  410\n  411\n  412\n  413\n  414\n  415\n  416\n  417\n  418\n  419\n  420\n  421\n  422\n  423\n  "}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const num = parseFloat(number);\n  const integerPart = Math.floor(num);\n  const decimalPart = num - integerPart;\n  return decimalPart;\n};\n\nexport default truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let index = 0;\n  let sum = 0;\n\n  while (index < operations.length) {\n    sum += operations[index];\n    if (sum < 0) {\n      return true;\n    }\n    index++;\n  }\n\n  return false;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  numbers.forEach(num => {\n    sum += Math.abs(num - (Math.floor(num) + 0.5));\n  });\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Median Absolute Deviation\n  around the median of this dataset.\n  Median Absolute Deviation is the average absolute difference between each\n  element and the median of this dataset:\n  MAD = (average | x - median |) / 2\n  >>> entailMedianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailMedianAbsoluteDeviation = (numbers) => {\n  let sorted = [].concat(numbers).sort((a, b) => a - b);\n  let mid = Math.floor(sorted.length / 2);\n  return sorted[mid];\n};\n\n/*\n  For a given list of input numbers, calculate the Mean Squared Error\n  around the mean of this dataset.\n  Mean Squared Error is the sum of the square of each difference between each\n  element and the mean of this dataset:\n  MSE = sum( | x - x_mean |^2 ) / len(x)\n  >>> entailMeanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailMeanSquaredError = (numbers) => {\n  let sum = 0;\n  numbers.forEach(num => {\n    sum += (Math.pow(num - (Math.floor(num) + 0.5), 2));\n  });\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Mean Squared Error\n  around the median of this dataset.\n  Mean Squared Error is the sum of the square of each difference between each\n  element and the median of this dataset:\n  MSE = sum( | x - median |^2 ) / len(x)\n  >>> entailMeanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailMeanSquaredMedianError = (numbers) => {\n  let sorted = [].concat(numbers).sort((a, b) => a - b);\n  let mid = Math.floor(sorted.length / 2);\n  let median = sorted[mid];\n  let sum = 0;\n  numbers.forEach(num => {\n    sum += Math.pow(num - median, 2);\n  });\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the RMS Error\n  around the mean of this dataset.\n  RMS Error is the square root of the sum of the squared differences between each\n  element and the mean of this dataset:\n  RMS = sqrt( sum( | x - x_mean |^2 ) / len(x) )\n  >>> entailRootMeanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailRootMeanSquaredError = (numbers) => {\n  let sum = 0;\n  numbers.forEach(num => {\n    sum += Math.pow(num - (Math.floor(num) + 0.5), 2);\n  });\n  return Math.sqrt(sum / numbers.length);\n};\n\n/*\n  For a given list of input numbers, calculate the Root Mean Squared Error\n  around the median of this dataset.\n  RMS Error is the square root of the sum of the squared differences between each\n  element and the median of this dataset:\n  RMS = sqrt( sum( | x - median |^2 ) / len(x) )\n  >>> entailRootMeanSquaredMedianError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailRootMeanSquaredMedianError = (numbers) => {\n  let sorted = [].concat(numbers).sort((a, b) => a - b);\n  let mid = Math.floor(sorted.length / 2);\n  let median = sorted[mid];\n  let sum = 0;\n  numbers.forEach(num => {\n    sum += Math.pow(num - median, 2);\n  });\n  return Math.sqrt(sum / numbers.length);\n};\n\nmodule.exports = {\n  entailAbsoluteDeviation,\n  entailMedianAbsoluteDeviation,\n  entailMeanSquaredError,\n  entailMeanSquaredMedianError,\n  entailRootMeanSquaredError,\n  entailRootMeanSquaredMedianError\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let output = [];\n\n  if (!numbers ||!numbers.length) {\n    return output;\n  }\n\n  const numberCount = numbers.length;\n  let i = numberCount - 1;\n  let j = numberCount - 2;\n  let k = numberCount - 1;\n\n  while (j >= 0) {\n    output.push(numbers[i]);\n    output.push(delimeter);\n    i--;\n    j--;\n    k--;\n  }\n\n  return output;\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const split = paren_string.split(' ');\n  const stack = [];\n  const max_level = 0;\n  let current_level = 0;\n  for (let i = 0; i < split.length; i++) {\n    if (split[i] === '(') {\n      stack.push(i);\n    } else if (split[i] === ')') {\n      const index = stack.pop();\n      current_level--;\n      if (index!== -1) {\n        max_level = Math.max(max_level, current_level);\n      }\n    }\n  }\n  return max_level;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensNoSpaces = (paren_string) => {\n  const stack = [];\n  const max_level = 0;\n  let current_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(i);\n    } else if (paren_string[i] === ')') {\n      const index = stack.pop();\n      current_level--;\n      if (index!== -1) {\n        max_level = Math.max(max_level, current_level);\n      }\n    }\n  }\n  return max_level;\n};\n\nconst test = () => {\n  console.log('Testing nested parentheses');\n  const string = '(()()) ((())) () ((())()())';\n  console.log(parseNestedParens(string));\n  console.log(parseNestedParensNoSpaces(string));\n  const string2 = '((()()()))(()())';\n  console.log(parseNestedParens(string2));\n  console.log(parseNestedParensNoSpaces(string2));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring15 = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n    const [sum, product] = kernelSumAndProduct(numbers);\n    return [sum, product];\n};\n\nconst kernelSumAndProduct = (numbers) => {\n    let sum = 0;\n    let product = 1;\n    for (let number of numbers) {\n        sum += number;\n        product *= number;\n    }\n    return [sum, product];\n};\n\nexport {kernelIntersection};\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  let max = numbers[0];\n  let current = numbers[0];\n  let currentMax = max;\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > currentMax) {\n      currentMax = numbers[i];\n      current = currentMax;\n    }\n    i++;\n  }\n  return [current, currentMax];\n};\n\nmodule.exports = rolledMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let suffix = '';\n  while (string.length &&!isPalindrome(string)) {\n    suffix += string.slice(0, string.length)\n    string = string.slice(1, string.length)\n  }\n  return string + suffix.split('').reverse().join('')\n}\n\nmodule.exports = makePalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let output = '';\n  for (let i = 0; i < a.length; i++) {\n    output += (a[i] === '1'? '0' : '1');\n    output += (b[i] === '1'? '0' : '1');\n  }\n  return output;\n};\n\n/*\n  Implement the following function.\n  */\nconst findFirstCommonCharacter = (string1, string2) => {\n  let firstCommon = null;\n  let currentIndex = 0;\n  while (currentIndex < string1.length && currentIndex < string2.length) {\n    if (string1[currentIndex] === string2[currentIndex]) {\n      firstCommon = string1[currentIndex];\n      break;\n    }\n    currentIndex++;\n  }\n  return firstCommon;\n};\n\n/*\n  Implement the following function.\n  */\nconst isSubstring = (str1, str2) => {\n  return str1.indexOf(str2)!== -1;\n};\n\nconst findSubstrings = (str, substrs) => {\n  let result = [];\n  for (let i = 0; i < substrs.length; i++) {\n    if (isSubstring(str, substrs[i])) {\n      result.push(substrs[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Implement the following function.\n  */\nconst isPalindrome = str => {\n  if (str.length <= 1) {\n    return true;\n  }\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return str === reversed;\n};\n\n/*\n  Implement the following function.\n  */\nconst rotateLeft = str => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Implement the following function.\n  */\nconst rotateRight = str => {\n  return str.split('').join('');\n};\n\nconst rotate = (str, times) => {\n  let rotated = '';\n  for (let i = 0; i < times; i++) {\n    rotated += rotateRight(rotateLeft(str));\n  }\n  return rotated;\n};\n\n/*\n  Implement the following function.\n  */\nconst findLongestRepeatedSubstring = str => {\n  let longestRepeatedSubstring = '';\n  let maxLength = 1;\n  let repeatedSubstring = '';\n  let i = 0;\n  while (i < str.length) {\n    let currentSubstring = str.substr(i, maxLength);\n    if (isSubstring(currentSubstring, str)) {\n      if (currentSubstring.length > longestRepeatedSubstring.length) {\n        longestRepeatedSubstring = currentSubstring;\n        repeatedSubstring = str.substr(i, maxLength);\n      }\n    }\n    i++;\n  }\n  return { longestRepeatedSubstring: longestRepeatedSubstring,\n    repeatedSubstring: repeatedSubstring };\n};\n\n/*\n  Implement the following function.\n  */\nconst findRepeatedSubstrings = str => {\n  let repeatedSubstrings = [];\n  let longestRepeatedSubstring = findLongestRepeatedSubstring(str);\n  let repeatedSubstring = longestRepeatedSubstring.repeatedSubstring;\n  while (repeatedSubstring.length > 0) {\n    repeatedSubstrings.push(longestRepeatedSubstring.longestRepeatedSubstring);\n    longestRepeatedSubstring = findLongestRepeatedSubstring(rotate(str, repeatedSubstring.length));\n    repeatedSubstring = longestRepeatedSubstring.repeatedSubstring;\n  }\n  return repeatedSubstrings;\n};\n\nconst findRepeatedSubstringsInRotatedString = str => {\n  let repeatedSubstrings = findRepeatedSubstrings(str);\n  let rotatedString = rotate(str, repeatedSubstrings.length);\n  return findRepeatedSubstrings(rotatedString);\n};\n\nconst main = () => {\n  let testCases = [\n    'a',\n    'aa',\n    'aaa',\n    'ab',\n    'aba',\n    'abaa',\n    'abaaa',\n    'b',\n    'bb',\n    'bbb',\n    'bab',\n    'baba',\n    'babaa',\n    'babaaa'\n  ];\n\n  for (let i = 0; i < testCases.length; i++) {\n    let testCase = testCases[i];\n    let repeatedSubstrings = findRepeatedSubstringsInRotatedString(testCase);\n    console.log('Case #' + i + ':'+ repeatedSubstrings.length + '\\n');\n    repeatedSubstrings.forEach(substring => {\n      console.log(substring);\n    });\n  }\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  let result = strings[0]\n\n  for (let i = 1; i < strings.length; i++) {\n    const s = strings[i]\n    const l = s.length\n\n    if (l > result.length) {\n      result = s\n    } else if (l === result.length) {\n      if (result.charAt(l - 1) === s.charAt(0)) {\n        result += s\n      }\n    }\n  }\n\n  return result\n}\n\nexport default farseeing\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  let aValue = a;\n  let bValue = b;\n  while (bValue) {\n    let remainder = aValue % bValue;\n    aValue = bValue;\n    bValue = remainder;\n  }\n  return aValue;\n};\n\nmodule.exports = capitalCoarseDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  const result = [];\n  let current = string;\n  while (current) {\n    const substr = current.slice(0, current.length - 1);\n    result.push(substr);\n    current = substr;\n  }\n  return result;\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  const result = [];\n  let current = string;\n  while (current) {\n    const substr = current.slice(0, current.length - 1);\n    result.push(substr);\n    current = substr;\n  }\n  return result[result.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0, string.length - 1);\n    prefixes.push(substr);\n    string = substr;\n  }\n  return prefixes[prefixes.length - 1];\n};\n\n// Return the longest prefix of a string\nconst longestPrefix = (string) => {\n  let prefixes = [];\n  while (string) {\n    const substr = string.slice(0,"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n// Borrowed from: https://www.reddit.com/r/dailyprogrammer/comments/5y5t7g/2021_02_01_challenge_232_easy_puzzle/\nconst stringFromNthToNthInString = (str, nth, nth2) => {\n  if (nth > str.length) return undefined;\n  if (nth2 > str.length) return undefined;\n\n  let string = '';\n  for (let i = nth; i < nth2; i++) {\n    string += str[i];\n  }\n\n  return string;\n};\n\n// Borrowed from: https://www.reddit.com/r/dailyprogrammer/comments/5y5t7g/2021_02_01_challenge_232_easy_puzzle/\nconst getIndexOfNthChar = (str, nth) => {\n  if (nth < 0) return undefined;\n  let index = str.indexOf(nth);\n  if (index === -1) return undefined;\n\n  return index;\n};\n\n// Borrowed from: https://www.reddit.com/r/dailyprogrammer/comments/5y5t7g/2021_02_01_challenge_232_easy_puzzle/\nconst getIndexOfNthCharInNthToNth = (str, nth, nth2) => {\n  if (nth2 < 0) return undefined;\n  let index = getIndexOfNthChar(str, nth);\n  if (index === undefined) return undefined;\n\n  return str.indexOf(nth2, index + 1);\n};\n\n// Borrowed from: https://www.reddit.com/r/dailyprogrammer/comments/5y5t7g/2021_02_01_challenge_232_easy_puzzle/\nconst getNthCharInNthToNth = (str, nth, nth2) => {\n  if (nth2 < 0) return undefined;\n  let index = getIndexOfNthCharInNthToNth(str, nth, nth2);\n  if (index === undefined) return undefined;\n\n  return str.charAt(index);\n};\n\n// Borrowed from: https://www.reddit.com/r/dailyprogrammer/comments/5y5t7g/2021_02_01_challenge_232_easy_puzzle/\nconst stringFromNthToNthInString = (str, nth, nth2) => {\n  let index = getIndexOfNthCharInNthToNth(str, nth, nth2);\n  if (index === undefined) return undefined;\n\n  return str.slice(index, index + nth2);\n};\n\n// Borrowed from: https://www.reddit.com/r/dailyprogrammer/comments/5y5t7g/2021_02_01_challenge_232_easy_puzzle/\nconst stringFromNthToNthInStringWithNthChar = (str, nth, nth2) => {\n  let index = getIndexOfNthChar(str, nth);\n  if (index === undefined) return undefined;\n\n  return stringFromNthToNthInString(str.slice(index), nth, nth2);\n};\n\n// Borrowed from: https://www.reddit.com/r/dailyprogrammer/comments/5y5t7g/2021_02_01_challenge_232_easy_puzzle/\nconst stringFromNthToNthInStringWithNthCharInNthToNth = (str, nth, nth2) => {\n  let index = getIndexOfNthCharInNthToNth(str, nth, nth2);\n  if (index === undefined) return undefined;\n\n  return stringFromNthToNthInString(str.slice(index, index + nth2), nth, nth2);\n};\n\n// Borrowed from: https://www.reddit.com/r/dailyprogrammer/comments/5y5t7g/2021_02_01_challenge_232_easy_puzzle/\nconst stringFromNthToNthInStringWithNthCharInNthToNthInNth = (str, nth, nth2) => {\n  let index = getIndexOfNthCharInNthToNth(str, nth, nth2);\n  if (index === undefined) return undefined;\n\n  return stringFromNthToNthInString(str.slice(index, index + nth2), nth, nth2);\n};\n\nconst result = {\n  'bowedStringedInstrumentSuccession': bowedStringedInstrumentSuccession,\n 'stringFromNthToNthInString': stringFromNthToNthInString,\n 'stringFromNthToNthInStringWithNthChar': stringFromNthToNthInStringWithNthChar,\n 'stringFromNthToNthInStringWithNthCharInNth': stringFromNthToNthInStringWithNthCharInNth,\n 'stringFromNthToNthInStringWithNthCharInNthInNth': stringFromNthToNthInStringWithNthCharInNthInNth,\n};\n\nmodule.exports = result;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n    const chars = []\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i]\n        if (chars.indexOf(char) === -1) {\n            chars.push(char)\n        }\n    }\n    return chars.length\n}\n\n/*\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  >>> considerClearcutCharacters('Jerry')\n  3\n  */\nconst considerClearcutCharacters2 = (string) => {\n    const chars = []\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i]\n        if (chars.indexOf(char.toLowerCase()) === -1) {\n            chars.push(char.toLowerCase())\n        }\n    }\n    return chars.length\n}\n\nconst clearcutCharacters = (string) => {\n    return string.replace(/[^a-z]/gi, '')\n}\n\n/*\n  >>> clearcutCharacters('xyzXYZ')\n  'xyz'\n  >>> clearcutCharacters('xyzXYZ')\n  'xyz'\n  >>> clearcutCharacters('xyzXYZ')\n  'xyz'\n  >>> clearcutCharacters('xyzXYZ')\n  'xyz'\n  */\nconst clearcutCharacters2 = (string) => {\n    return string.toLowerCase().replace(/[^a-z]/gi, '')\n}\n\nconst main = () => {\n    console.log(`${clearcutCharacters('xyzXYZ')}`)\n    console.log(`${clearcutCharacters2('xyzXYZ')}`)\n    console.log(`${considerClearcutCharacters('xyzXYZ')}`)\n    console.log(`${considerClearcutCharacters2('xyzXYZ')}`)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    let note_list = [];\n    let beat_list = [];\n    let beat_count = 0;\n    let temp_beat = 0;\n\n    for (let i = 0; i < music_string.length; i++) {\n        if (music_string[i] === 'o') {\n            if (beat_count > 0) {\n                beat_list.push(beat_count);\n                beat_count = 0;\n            }\n            beat_list.push(4);\n            beat_count += 4;\n        }\n        else if (music_string[i] === 'o|') {\n            if (beat_count > 0) {\n                beat_list.push(beat_count);\n                beat_count = 0;\n            }\n            beat_list.push(2);\n            beat_count += 2;\n        }\n        else if (music_string[i] === '.') {\n            if (beat_count > 0) {\n                beat_list.push(beat_count);\n                beat_count = 0;\n            }\n            beat_list.push(1);\n            beat_count += 1;\n        }\n    }\n\n    if (beat_count > 0) {\n        beat_list.push(beat_count);\n    }\n\n    beat_list.forEach((n) => {\n        temp_beat += n;\n    })\n\n    return beat_list;\n};\n\nexport { parseMusic };\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  if (!string) return 0;\n\n  const count = [];\n  const len = string.length;\n  for (let i = 0; i < len; i++) {\n    count[i] = 0;\n  }\n\n  let lastOccurrences = 0;\n  let i = 0;\n  while (lastOccurrences < len) {\n    i = i + 1;\n    while (string[lastOccurrences] === substring[i - 1]) {\n      count[lastOccurrences] += 1;\n      lastOccurrences += 1;\n      if (lastOccurrences === len) return count;\n    }\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const s = (s) => s.split(' ')\n  const split = s(numbers)\n  const numbersArray = split.map((n) => parseInt(n))\n  const sorted = _.sortBy(numbersArray, (x) => x)\n  return sorted.join(' ')\n}\n\n/* Input is a string of numbers.\n  Return the string with the largest number at the end of the string.\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst largest = (numbers) => {\n  const split = numbers.split(' ')\n  const numbersArray = split.map((n) => parseInt(n))\n  const sorted = _.sortBy(numbersArray, (x) => x)\n  return sorted.reverse()[0]\n}\n\n/* Input is a string of numbers.\n  Return the string with the largest number at the end of the string.\n  >>> largest('three one five')\n  'five three one'\n  */\nconst largest2 = (numbers) => {\n  const split = numbers.split(' ')\n  const numbersArray = split.map((n) => parseInt(n))\n  const sorted = _.sortBy(numbersArray, (x) => x)\n  return sorted[0]\n}\n\n/* Input is a string of numbers.\n  Return the string with the smallest number at the end of the string.\n  >>> largest('three one five')\n  'one three five'\n  */\nconst smallest = (numbers) => {\n  const split = numbers.split(' ')\n  const numbersArray = split.map((n) => parseInt(n))\n  const sorted = _.sortBy(numbersArray, (x) => x)\n  return sorted[1]\n}\n\n/* Input is a string of numbers.\n  Return the string with the smallest number at the end of the string.\n  >>> smallest('three one five')\n  'one three five'\n  */\nconst smallest2 = (numbers) => {\n  const split = numbers.split(' ')\n  const numbersArray = split.map((n) => parseInt(n))\n  const sorted = _.sortBy(numbersArray, (x) => x)\n  return sorted[1]\n}\n\n/* Input is a string of numbers.\n  Return the string with the largest and smallest number at the end of the string.\n  >>> largest2('three one five')\n  'five three one'\n  */\nconst largestAndSmallest = (numbers) => {\n  const split = numbers.split(' ')\n  const numbersArray = split.map((n) => parseInt(n))\n  const sorted = _.sortBy(numbersArray, (x) => x)\n  return sorted.reverse()[0] +'' + sorted[1]\n}\n\n/* Input is a string of numbers.\n  Return the string with the largest and smallest number at the end of the string.\n  >>> largestAndSmallest('three one five')\n  'five three one'\n  */\nconst largestAndSmallest2 = (numbers) => {\n  const split = numbers.split(' ')\n  const numbersArray = split.map((n) => parseInt(n))\n  const sorted = _.sortBy(numbersArray, (x) => x)\n  return sorted.reverse()[0] +'' + sorted[1]\n}\n\n/* Input is a string of numbers.\n  Return the string with the largest and smallest number at the end of the string.\n  >>> largestAndSmallest('three one five')\n  'five three one'\n  */\nconst largestAndSmallest3 = (numbers) => {\n  const split = numbers.split(' ')\n  const numbersArray = split.map((n) => parseInt(n))\n  const sorted = _.sortBy(numbersArray, (x) => x)\n  return sorted.reverse()[0] +'' + sorted[1]\n}\n\n/* Input is a string of numbers.\n  Return the string with the largest and smallest number at the end of the string.\n  >>> largestAndSmallest('three one five')\n  'five three one'\n  */\nconst largestAndSmallest4 = (numbers) => {\n  const split = numbers.split(' ')\n  const numbersArray = split.map((n) => parseInt(n))\n  const sorted = _.sortBy(numbersArray, (x) => x)\n  return sorted[0] +'' + sorted[1]\n}\n\nmodule.exports = {\n  sortNumbers, largest, largest2, largestAndSmallest, largestAndSmallest2, largestAndSmallest3, largestAndSmallest4, smallest, smallest2, largestAndSmallest, largestAndSmallest2, largestAndSmallest3, largestAndSmallest4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  let result = null;\n  let resultClosest = null;\n  let min = numbers[0];\n  let minDist = Number.MAX_VALUE;\n  let current = null;\n\n  for (let i = 0; i < numbers.length; i++) {\n    current = numbers[i];\n    let dist = Math.abs(current - min);\n    if (dist < minDist) {\n      min = current;\n      minDist = dist;\n      result = current;\n      resultClosest = min;\n    }\n  }\n  return [result, resultClosest];\n};\n\nmodule.exports = receiveClosestChemicalElement;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (num) => (num - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/*\n  Given a sorted list of numbers, return a list of their indices in sorted order.\n  >>> sortedIndices([0, 1, 2, 3, 4, 5])\n  [0, 1, 2, 3, 4, 5]\n  */\nconst sortedIndices = (numbers) => {\n  const indices = []\n  for (let i = 0; i < numbers.length; i++) {\n    indices.push(i)\n  }\n  return indices.sort()\n}\n\n/*\n  Given a sorted list of numbers, return a list of their indices in sorted order.\n  >>> sortedIndices([0, 1, 2, 3, 4, 5])\n  [0, 1, 2, 3, 4, 5]\n  */\nconst sortedIndicesReverse = (numbers) => {\n  const indices = []\n  for (let i = 0; i < numbers.length; i++) {\n    indices.push(numbers.length - i - 1)\n  }\n  return indices.sort()\n}\n\n/*\n  Given a sorted list of numbers, return the smallest and the largest number\n  >>> sortedIndices([0, 1, 2, 3, 4, 5])\n  [0, 1, 2, 3, 4, 5]\n  >>> sortedIndices([1, 2, 3, 4, 5, 6])\n  [0, 1, 2, 3, 4, 5]\n  >>> sortedIndices([-1, 2, 3, 4, 5, 6])\n  [0, 1, 2, 3, 4, 5]\n  >>> sortedIndices([-2, -1, 0, 1, 2])\n  [0, 1, 2]\n  >>> sortedIndices([-2, -1, 0, 1, 2, 3])\n  [0, 1, 2]\n  >>> sortedIndices([-2, -1, 0, 1, 2, 3, 4])\n  [0, 1, 2]\n  >>> sortedIndices([-2, -1, 0, 1, 2, 3, 4, 5])\n  [0, 1, 2, 3, 4, 5]\n  >>> sortedIndices([-2, -1, 0, 1, 2, 3, 4, 5, 6])\n  [0, 1, 2, 3, 4, 5]\n  */\nconst sortedIndicesRange = (numbers) => {\n  let start = 0\n  let end = numbers.length - 1\n  while (end - start + 1 < 2) {\n    const middle = Math.floor((end + start) / 2)\n    if (numbers[middle] > numbers[end]) {\n      end = middle\n    } else {\n      start = middle\n    }\n  }\n  return [start, end]\n}\n\n/*\n  Given a sorted list of numbers, return the smallest and the largest number\n  >>> sortedIndices([0, 1, 2, 3, 4, 5])\n  [0, 1, 2, 3, 4, 5]\n  >>> sortedIndices([1, 2, 3, 4, 5, 6])\n  [0, 1, 2, 3, 4, 5]\n  >>> sortedIndices([-1, 2, 3, 4, 5, 6])\n  [0, 1, 2, 3, 4, 5]\n  >>> sortedIndices([-2, -1, 0, 1, 2])\n  [0, 1, 2]\n  >>> sortedIndices([-2, -1, 0, 1, 2, 3])\n  [0, 1, 2]\n  >>> sortedIndices([-2, -1, 0, 1, 2, 3, 4])\n  [0, 1, 2]\n  >>> sortedIndices([-2, -1, 0, 1, 2, 3, 4, 5])\n  [0, 1, 2, 3, 4, 5]\n  >>> sortedIndices([-2, -1, 0, 1, 2, 3, 4, 5, 6])\n  [0, 1, 2, 3, 4, 5]\n  */\nconst sortedIndicesRange2 = (numbers) => {\n  let start = 0\n  let end = numbers.length - 1\n  while (end - start + 1 < 2) {\n    const middle = Math.floor((end + start) / 2)\n    if (numbers[middle] > numbers[end]) {\n      end = middle\n    } else {\n      start = middle\n    }\n  }\n  return [start, end]\n}\n\nexport {\n  findMedian,\n  findKthNumber,\n  findMedianFromSortedArray,\n  findKthNumberFromSortedArray,\n  findKthNumberFromSortedArrayReverse,\n  findKthNumberFromSortedArrayReverse2,\n  findKthNumberFromSortedArrayReverse3,\n  findKthNumberFromSortedArrayReverse4,\n  findKthNumberFromSortedArrayReverse5,\n  findKthNumberFromSortedArrayReverse6,\n  findKthNumberFromSortedArrayReverse7,\n  findKthNumberFromSortedArrayReverse8,\n  findKthNumberFromSortedArrayReverse9,\n  findKthNumberFromSortedArrayReverse10,\n  findKthNumberFromSortedArrayReverse11,\n  findKthNumberFromSortedArrayReverse12,\n  findKthNumberFromSortedArrayReverse13,\n  findKthNumberFromSortedArrayReverse14,\n  findKthNumberFromSortedArrayReverse15,\n  findKthNumberFromSortedArrayReverse16,\n  findKthNumberFromSortedArrayReverse17,\n  findKthNumberFromSortedArrayReverse18,\n  findKthNumberFromSortedArrayReverse19,\n  findKthNumberFromSorted"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = values.filter((v) => typeof v === 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filter(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filter(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filter(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filter(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filter(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filter(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filter(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN(v));\n};\n\n/*\n  >>> filter(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter = (values) => {\n  const filtered = values.filter((v) => typeof v!== 'number');\n  return filtered.filter(v =>!isNaN("}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    if (!(string && typeof string ==='string')) return 0;\n    return string.length;\n};\n\n/**\n  * Convert string to array of characters\n  *\n  * @param {string} string - The string to convert\n  * @returns {Array} - The converted string\n  *\n  * @example\n  *\n  *   str2array('abc')\n  *   // => ['a', 'b', 'c']\n  *\n  * @example\n  *\n  *   str2array('aaa')\n  *   // => ['a', 'a', 'a']\n  *\n  * @example\n  *\n  *   str2array('a')\n  *   // => ['a']\n  *\n  * @example\n  *\n  *   str2array(null)\n  *   // => []\n  *\n  */\nconst str2array = (string) => {\n    if (!(string && typeof string ==='string')) return [];\n    const array = [];\n    for (let i = 0; i < string.length; i++) {\n        array.push(string.charCodeAt(i));\n    }\n    return array;\n};\n\n/**\n  * Convert array of characters to string\n  *\n  * @param {Array} array - The array of characters\n  * @returns {string} - The converted string\n  *\n  * @example\n  *\n  *   array2str([65, 66, 67])\n  *   // => 'ABC'\n  *\n  * @example\n  *\n  *   array2str([])\n  *   // => ''\n  *\n  */\nconst array2str = (array) => {\n    if (!(array && Array.isArray(array))) return '';\n    let result = '';\n    for (let i = 0; i < array.length; i++) {\n        result += String.fromCharCode(array[i]);\n    }\n    return result;\n};\n\n/**\n  * Convert string to integer\n  *\n  * @param {string} string - The string to convert\n  * @returns {number} - The converted number\n  *\n  * @example\n  *\n  *   str2num('3')\n  *   // => 3\n  *\n  */\nconst str2num = (string) => {\n    if (!(string && typeof string ==='string')) return 0;\n    return parseInt(string, 10);\n};\n\n/**\n  * Convert integer to string\n  *\n  * @param {number} number - The number to convert\n  * @returns {string} - The converted number\n  *\n  * @example\n  *\n  *   num2str(3)\n  *   // => '3'\n  *\n  */\nconst num2str = (number) => {\n    if (!(number && typeof number === 'number')) return '';\n    return number.toString();\n};\n\n/**\n  * Check if string starts with given string\n  *\n  * @param {string} string - The string to check\n  * @param {string} starts - The string to check against\n  * @returns {boolean} - True if starts, false if not\n  *\n  * @example\n  *\n  *   startsWith('abc', 'ab')\n  *   // => true\n  *\n  *   startsWith('abc', 'ac')\n  *   // => false\n  *\n  */\nconst startsWith = (string, starts) => {\n    if (!(string && typeof string ==='string' && starts && typeof starts ==='string')) return false;\n    return string.indexOf(starts) === 0;\n};\n\n/**\n  * Check if string ends with given string\n  *\n  * @param {string} string - The string to check\n  * @param {string} ends - The string to check against\n  * @returns {boolean} - True if ends, false if not\n  *\n  * @example\n  *\n  *   endsWith('abc', 'bc')\n  *   // => true\n  *\n  *   endsWith('abc', 'ac')\n  *   // => false\n  *\n  */\nconst endsWith = (string, ends) => {\n    if (!(string && typeof string ==='string' && ends && typeof ends ==='string')) return false;\n    return string.lastIndexOf(ends) === string.length - ends.length;\n};\n\nmodule.exports = {\n    array2str,\n    array2str,\n    str2array,\n    str2array,\n    str2num,\n    str2num,\n    startsWith,\n    endsWith\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n    let low = 1;\n    let high = n;\n    while (low < high) {\n        const mid = (low + high) / 2;\n        const divided = n / mid;\n        if (divided % mid === 0) {\n            return mid;\n        } else if (divided < mid) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n};\n\nmodule.exports = bigDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let currentFactor = 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      while (n % i === 0) {\n        currentFactor += 1\n        n = n / i\n      }\n      factors.push(i)\n      if (n === 1) break\n    }\n  }\n  if (n!== 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\nconst factorial = (n) => {\n  let result = 1\n  for (let i = 2; i <= n; i++) {\n    result *= i\n  }\n  return result\n}\n\nconst sumFactorial = (n) => {\n  return n * (n + 1) / 2\n}\n\nconst sumOfFactorials = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    result += factorial(i)\n  }\n  return result\n}\n\nconst sumOfFactorialsByRecursion = (n) => {\n  return sumOfFactorials(n)\n}\n\nconst sumOfFactorialsByLoop = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    result += factorial(i)\n  }\n  return result\n}\n\nconst main() {\n  console.log(factorize(8))\n  console.log(factorize(25))\n  console.log(factorize(70))\n  console.log(factorize(9))\n  console.log(factorize(26))\n  console.log(factorize(10))\n  console.log(factorize(11))\n  console.log(factorize(90))\n  console.log(factorize(21))\n  console.log(factorize(70))\n  console.log(factorize(8))\n  console.log(factorize(8))\n  console.log(factorize(21))\n  console.log(factorize(70))\n  console.log(factorize(7))\n  console.log(factorize(10))\n  console.log(factorize(20))\n  console.log(factorize(100))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize(900))\n  console.log(factorize("}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  let a = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (a.indexOf(numbers[i]) === -1) {\n      a.push(numbers[i]);\n    }\n  }\n  return a;\n};\n\nexport default getRidOfDuplicate;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase()\n  })\n}\n\n/*\n  # (2) For a given string, remove all leading and trailing spaces.\n  >>> removeSpaces(' Hello ')\n 'Hello '\n  */\nconst removeSpaces = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '')\n}\n\n/*\n  # (3) For a given string, convert all letters to lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase()\n}\n\n/*\n  # (4) For a given string, remove all non-alphabetic characters.\n  >>> removeNonAlphas('HelloWorld!')\n  'HelloWorld'\n  */\nconst removeNonAlphas = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '')\n}\n\n/*\n  # (5) For a given string, capitalize the first letter.\n  >>> capitalize('hello world')\n  'Hello world'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/*\n  # (6) For a given string, reverse the string.\n  >>> reverse('Hello')\n  'olleH'\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('')\n}\n\n/*\n  # (7) For a given string, append an's' to the end.\n  >>> append('Hello', 'world')\n  'Hello world'\n  */\nconst append = (string, appendTo) => {\n  return string + appendTo\n}\n\n/*\n  # (8) For a given string, remove all occurrences of 'Hello' from the end of the string.\n  >>> removeHello('Hello world')\n  'Hello world'\n  */\nconst removeHello = (string) => {\n  return string.replace(/[^\\s]+$/g, '')\n}\n\n/*\n  # (9) For a given string, remove all occurrences of 'World' from the beginning of the string.\n  >>> removeWorld('Hello World!')\n  'Hello '\n  */\nconst removeWorld = (string) => {\n  return string.replace(/^[^\\s]+/g, '')\n}\n\n/*\n  # (10) For a given string, remove all occurrences of '!' from the beginning of the string.\n  >>> removeBang('Hello!')\n  'Hello'\n  */\nconst removeBang = (string) => {\n  return string.replace(/^[^\\s]+/g, '')\n}\n\n/*\n  # (11) For a given string, remove all occurrences of '.' from the beginning of the string.\n  >>> removeDot('Hello. World!')\n  'Hello. World'\n  */\nconst removeDot = (string) => {\n  return string.replace(/^[^\\s]+/g, '')\n}\n\n/*\n  # (12) For a given string, remove all occurrences of ',' from the beginning of the string.\n  >>> removeComma('Hello, World!')\n  'Hello, World'\n  */\nconst removeComma = (string) => {\n  return string.replace(/^[^\\s]+/g, '')\n}\n\n/*\n  # (13) For a given string, remove all occurrences of ',' from the end of the string.\n  >>> removeComma('Hello, World!')\n  'Hello World!'\n  */\nconst removeComma2 = (string) => {\n  return string.replace(/[^\\s]+$/g, '')\n}\n\n/*\n  # (14) For a given string, replace all occurrences of 'Hello' with 'Hi' and all occurrences of 'World' with 'Word'.\n  >>> replaceHelloWorld('Hello World!')\n  'Hi Word!'\n  */\nconst replaceHelloWorld = (string) => {\n  return string.replace(/Hello/g, 'Hi')\n              .replace(/World/g, 'Word')\n}\n\n/*\n  # (15) For a given string, replace all occurrences of 'Hello' with 'Hi' and all occurrences of 'World' with 'Word'.\n  >>> replaceHelloWorld('Hello World!')\n  'Hi Word!'\n  */\nconst replaceHelloWorld2 = (string) => {\n  return string.replace(/Hello/g, 'Hi')\n              .replace(/World/g, 'Word')\n}\n\n/*\n  # (16) For a given string, replace all occurrences of '!' with '?' and all occurrences of ',' with '&'.\n  >>> replaceBangComma('Hello! World!')\n  'Hello? World?'\n  */\nconst replaceBangComma = (string) => {\n  return string.replace(/!/g, '?')\n              .replace(/,/g, '&')\n}\n\n/*\n  # (17) For a given string, replace all occurrences of 'Hello' with 'Hi' and all occurrences of 'World' with 'Word'.\n  >>> replaceHelloWorld('Hello World!')\n  'Hi Word!'\n  */\nconst replaceHelloWorld3 = (string) => {\n  return string.replace(/Hello/g, 'Hi')\n              .replace(/World/g, 'Word')\n}\n\n/*\n  # (18) For a given string, replace all occurrences of 'Hello' with 'Hi' and all occurrences of 'World' with 'Word'.\n  >>> replaceHelloWorld2('Hello World!')\n  'Hi Word!'\n  */\nconst replaceHelloWorld4 = (string) => {\n  return string.replace(/Hello/g, 'Hi')\n              .replace(/World/g, 'Word')\n}\n\n/*\n  # (19) For a given string, replace all occurrences of 'Hello' with 'Hi' and all occurrences of 'World' with 'Word'.\n  >>> replaceHelloWorld3('Hello World!')\n  'Hi Word!'\n  */\nconst replaceHelloWorld5 = (string) => {\n  return string.replace(/Hello/g, '"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((str, el) => str + el, '')\n}\n\n/**\n  * Takes a list of strings, concatenates them, and then splits them into an array of strings\n  *\n  * The first string is the concatenation of all of the strings in the list\n  * The second string is the string resulting from splitting the first string into an array\n  *\n  * Example:\n  * [ 'a', 'b', 'c' ]\n  * result = 'abc'\n  * result.split = 'abc'\n  *\n  * The last string in the list is the result of the split on the first string\n  *\n  * @param {array} strings\n  * @returns {object}\n  *\n  * @example\n  * const strings = [ 'a', 'b', 'c' ]\n  * const result = concatenate(strings)\n  * console.log(result) // 'abc'\n  * console.log(result.split) // 'abc'\n  */\nconst concatenateAndSplit = (strings) => {\n  return {\n    concatenation: concatenate(strings),\n    split: strings[0].split(concatenate(strings))\n  }\n}\n\nmodule.exports = concatenateAndSplit\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return (strings || []).filter((string) => string.indexOf(prefix) === 0);\n}\n\n/*\n  Return a list of strings without the given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'cde', 'array']\n  */\nconst filterByPrefixRemove = (strings, prefix) => {\n  return (strings || []).filter((string) => string.indexOf(prefix)!== 0);\n}\n\n/*\n  Return the first item in the list.\n  >>> first(['a', 'b', 'c'])\n  'a'\n  >>> first([])\n  undefined\n  */\nconst first = (array) => {\n  return array.length? array[0] : undefined;\n}\n\n/*\n  Return the last item in the list.\n  >>> last(['a', 'b', 'c'])\n  'c'\n  >>> last([])\n  undefined\n  */\nconst last = (array) => {\n  return array.length? array[array.length - 1] : undefined;\n}\n\n/*\n  Return a list of items that occur more than once.\n  >>> repeated([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 3, 4, 5, 6, 7, 8]\n  >>> repeated([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8])\n  []\n  */\nconst repeated = (array) => {\n  let items = {};\n  for (let i = 0; i < array.length; i++) {\n    if (items[array[i]] === undefined) {\n      items[array[i]] = 1;\n    } else {\n      items[array[i]]++;\n    }\n  }\n  return Object.keys(items).map((key) => {\n    return items[key];\n  });\n}\n\n/*\n  Return the sum of all items in the list.\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  45\n  >>> sum([])\n  0\n  */\nconst sum = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\n/*\n  Return the mean of all items in the list.\n  >>> mean([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  4.5\n  >>> mean([])\n  0\n  */\nconst mean = (array) => {\n  return sum(array) / array.length;\n}\n\n/*\n  Return a list of items that are the same as the first item in the list.\n  >>> same([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> same([])\n  []\n  */\nconst same = (array) => {\n  return array.slice(0, 1);\n}\n\n/*\n  Return the last item in the list, or the last item in the input array if it's not a list.\n  >>> last([1, 2, 3])\n  3\n  >>> last([])\n  undefined\n  */\nconst lastOrArray = (array) => {\n  if (Array.isArray(array)) {\n    return array[array.length - 1];\n  }\n  return array;\n}\n\n/*\n  Return a list of items that are the same as the first item in the list, or the last item in the input array if it's not a list.\n  >>> same([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> same([])\n  []\n  */\nconst sameOrArray = (array) => {\n  if (Array.isArray(array)) {\n    return array.slice(0, 1);\n  }\n  return array;\n}\n\n/*\n  Return a list of items that are not the same as the first item in the list, or the last item in the input array if it's not a list.\n  >>> notSame([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  >>> notSame([])\n  []\n  */\nconst notSame = (array) => {\n  return (array || []).filter((item) => item!== first(array));\n}\n\n/*\n  Return a list of items that are not the same as the first item in the list, or the last item in the input array if it's not a list.\n  >>> notSame([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  >>> notSame([])\n  []\n  */\nconst notSameOrArray = (array) => {\n  if (Array.isArray(array)) {\n    return (array || []).filter((item) => item!== first(array));\n  }\n  return array;\n}\n\n/*\n  Return a list of items that are the same as the first item in the list, or the first item in the input array if it's not a list.\n  >>> sameOrArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sameOrArray([])\n  [1]\n  */\nconst sameOrArrayOrArray = (array) => {\n  if (Array.isArray(array)) {\n    return (array || []).slice(0, 1);\n  }\n  return array;\n}\n\nmodule.exports = {\n  first,\n  last,\n  lastOrArray,\n  sum,\n  mean,"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  return l.filter(a => a > 0)\n}\n\n// const catchPositive = (l) => {\n//   return l.filter(a => a > 0)\n// }\n\nconst catchNegative = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchZero = (l) => {\n  return l.filter(a => a!== 0)\n}\n\nconst catchEmpty = (l) => {\n  return l.filter(a => a!== 0)\n}\n\nconst catchNonEmpty = (l) => {\n  return l.filter(a => a!== 0)\n}\n\nconst catchPositiveAndNonNegative = (l) => {\n  return l.filter(a => a >= 0)\n}\n\nconst catchNegativeAndNonPositive = (l) => {\n  return l.filter(a => a <= 0)\n}\n\nconst catchPositiveAndNonZero = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchNegativeAndNonZero = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonZero = (l) => {\n  return l.filter(a => a >= 0)\n}\n\nconst catchNegativeAndNonPositiveAndNonZero = (l) => {\n  return l.filter(a => a <= 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonZero = (l) => {\n  return l.filter(a => a >= 0)\n}\n\nconst catchNegativeAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a <= 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonNegative = (l) => {\n  return l.filter(a => a >= 0)\n}\n\nconst catchPositiveAndNonZeroAndNonNegative = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchNegativeAndNonZeroAndNonPositive = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonZeroAndNonPositive = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchNegativeAndNonZeroAndNonNegative = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonPositive = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchNegativeAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonPositive = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchNegativeAndNonNegativeAndNonPositive = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonNegative = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchNegativeAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchPositiveAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonPositive = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchNegativeAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonPositive = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchNegativeAndNonNegativeAndNonPositive = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonNegative = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchNegativeAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchPositiveAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchNegativeAndNonPositiveAndNonPositive = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonPositive = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchNegativeAndNonNegativeAndNonPositive = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchPositiveAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchNegativeAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonNegativeAndNonPositive = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchNegativeAndNonNegativeAndNonPositive = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a > 0)\n}\n\nconst catchNegativeAndNonPositiveAndNonNegative = (l) => {\n  return l.filter(a => a < 0)\n}\n\nconst catchPositiveAndNonPositiveAndNon"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  // Check for prime factors\n  const primeFactorization = primeFactors(n);\n  const primeNumbers = primeFactorization.filter(prime => prime > 1);\n  if (primeNumbers.length === 0) return false;\n  // Check if the number is prime\n  return (n % 1 === 0) && (primeNumbers.length === 1);\n};\n\n// Find all prime numbers up to 1000\nconst allPrimeNumbers = range(1, 1000).filter(isPremier);\n\n// Print out prime numbers\nallPrimeNumbers.forEach(primeNumber => console.log(primeNumber));\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  const n = len - 2\n  if (len % 2!== 0) {\n    return -1;\n  }\n  if (len === 1) {\n    return xs[0] / 2;\n  }\n  if (n < 0) {\n    return -1;\n  }\n  if (n === 0) {\n    return xs[0] / 2;\n  }\n  const x0 = xs[len - 1] / 2;\n  const x1 = xs[len - 2] / 2;\n  const poly0 = poly(xs.slice(0, len - 2), x0);\n  const poly1 = poly(xs.slice(1), x1);\n  return (x0 + x1) / 2 + (x1 - x0) * (x0 + x1) / 2 * poly0 - poly1;\n}\n\n// export\n\nexport {\n  poly,\n  findZero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = [],\n    index = 0;\n\n  while (index < l.length) {\n    if (l[index] % 3 === 0) {\n      sorted.push(l[index]);\n    }\n    else {\n      sorted.push(l[index]);\n      index++;\n    }\n  }\n\n  sorted.sort((a, b) => a - b);\n\n  return sorted;\n}\n\n/*\n  >>> sortThird([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> sortThird([5, 6, 7, 8, 9, 1, 2])\n  [1, 2, 5, 6, 7, 8, 9]\n  >>> sortThird([1, 3, 5, 7, 9, 2, 4, 6, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortThird2 = (l) => {\n  let sorted = [],\n    index = 0;\n\n  while (index < l.length) {\n    if (l[index] % 3 === 0) {\n      sorted.push(l[index]);\n    }\n    else {\n      sorted.push(l[index]);\n      index++;\n    }\n  }\n\n  sorted.sort((a, b) => b - a);\n\n  return sorted;\n}\n\nconst input = [5, 6, 3, 4, 8, 9, 1, 2];\n\nlet result = sortThird(input);\nconsole.log(result);\n\nlet result2 = sortThird2(input);\nconsole.log(result2);\n\n/*\n  Output:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i === 0) {\n      result.push(l[i]);\n    } else {\n      let min = result[0];\n      let index = 0;\n      for (let j = 0; j < result.length; j++) {\n        if (l[i] < min) {\n          min = l[i];\n          index = j;\n        }\n      }\n      result.splice(index, 1);\n      result.unshift(l[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = alone;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  return (l.reduce((acc, n) => Math.max(acc, n), -Infinity) + 1);\n};\n\n// Exports\nexports.soapElement = soapElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    let output = '';\n    for (let i = 1; i <= n; i++) {\n        if ((i % 3 === 0) && (i % 5 === 0)) {\n            output += 'FizzBuzz';\n        } else if (i % 3 === 0) {\n            output += 'Fizz';\n        } else if (i % 5 === 0) {\n            output += 'Buzz';\n        } else {\n            output += i;\n        }\n    }\n    return output;\n}\n\n//# sourceMappingURL=fizzbuzz.js.map<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let sorted = l.slice(0)\n  sorted.sort()\n  return sorted\n}\n\nmodule.exports = sortEven<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2, 3) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 3) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0] + group[2] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic4 function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 3) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(2, 4) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  encodes string with cyclic 4 algorithm\n  */\nexport function encodeCyclic4_enc(s) {\n  return encodeCyclic4(s);\n}\n\n/*\n  decodes string with cyclic 4 algorithm\n  */\nexport function decodeCyclic4_dec(s) {\n  return decodeCyclic4(s);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return (n % 2 == 0)? (premierFib(n - 1) + premierFib(n - 2)) : (premierFib(n - 1) + premierFib(n - 2) + premierFib(n - 3));\n};\n\nconsole.log(premierFib(1));\nconsole.log(premierFib(2));\nconsole.log(premierFib(3));\nconsole.log(premierFib(4));\nconsole.log(premierFib(5));\nconsole.log(premierFib(6));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  const a = l.reduce((acc, x) => x > 0? acc + x : acc, 0)\n  if (a === 0) return false\n  const b = l.reduce((acc, x) => x < 0? acc + x : acc, 0)\n  if (b === 0) return false\n  const c = l.reduce((acc, x) => x > 0? acc - x : acc, 0)\n  if (c === 0) return false\n  return (a + b + c) === 0\n}\n\nmodule.exports = {\n  tripleTotalToZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  const leftCars = new Array(n);\n  const rightCars = new Array(n);\n\n  for (let i = 0; i < n; i++) {\n    leftCars[i] = {\n      x: i,\n      y: 0,\n      vx: 0,\n      vy: 0\n    };\n    rightCars[n - 1 - i] = {\n      x: i,\n      y: 0,\n      vx: 0,\n      vy: 0\n    };\n  }\n\n  let leftCarIndex = 0;\n  let rightCarIndex = 0;\n  let currentCar = leftCars[leftCarIndex];\n\n  while (rightCarIndex < n) {\n    const rightCar = rightCars[rightCarIndex];\n\n    while (rightCar.x < currentCar.x) {\n      // This car is moving left.\n      currentCar.vx = 0;\n      rightCar.vx = currentCar.vx;\n      rightCar.x += currentCar.vx;\n    }\n\n    if (currentCar.vx > 0) {\n      // This car has reached the right side of the road.\n      currentCar.x = 0;\n      currentCar.vx = 0;\n      rightCarIndex++;\n    }\n\n    if (currentCar.vx < 0) {\n      // This car is moving right.\n      currentCar.vx = 0;\n      leftCarIndex++;\n    }\n  }\n\n  return leftCarIndex + rightCarIndex;\n};\n\n// -----------------------------------------------------------------------------\n// --SECTION--                                                    END-OF-FILE\n// -----------------------------------------------------------------------------\n\n// Local Variables:\n// mode: outline-minor\n// outline-regexp: \"/// @brief\\\\|/// @addtogroup\\\\|// --SECTION--\\\\|/// @page\\\\|/// @}\\\\|/\\\\*jslint\"\n// End:\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.concat(l.map((n) => n + 1));\n};\n\nexport default incrList;<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  if (l.length === 1) return false\n  let i = 1\n  let j = l.length - 1\n  let found = false\n  while (i < j) {\n    if (l[i] === 0 && l[j] === 0) {\n      found = true\n      break\n    }\n    if (l[i] < 0) i++\n    else if (l[j] < 0) j--\n    else if (l[i] + l[j] === 0) {\n      if (l[i]!== 0) i++\n      else j--\n    }\n    else {\n      j--\n    }\n  }\n  return found\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n    x = x.toString();\n    base = base.toString();\n    let r = '';\n    while (x.length) {\n        r = `${base}${x.slice(-base.length)}${r}`;\n        x = x.slice(0, -base.length);\n    }\n    return r;\n};\n\n/*\n  Convert the number to a string of variable length\n  representation of the number, with the most significant\n  digit in the first element.\n  >>> varietyStr(1000)\n  '100000'\n  >>> varietyStr(8)\n  '8'\n  >>> varietyStr(5)\n  '5'\n  >>> varietyStr(4)\n  '4'\n  >>> varietyStr(3)\n  '3'\n  >>> varietyStr(2)\n  '2'\n  >>> varietyStr(1)\n  '1'\n  >>> varietyStr(0)\n  '0'\n  >>> varietyStr(0.1)\n  '0'\n  >>> varietyStr(0.09)\n  '0'\n  >>> varietyStr(0.009)\n  '0'\n  >>> varietyStr(0.001)\n  '0'\n  >>> varietyStr(0.0009)\n  '0'\n  >>> varietyStr(0.0001)\n  '0'\n  >>> varietyStr(0.00009)\n  '0'\n  >>> varietyStr(0.00001)\n  '0'\n  >>> varietyStr(0.0000001)\n  '0'\n  >>> varietyStr(0.00000001)\n  '0'\n  >>> varietyStr(0.000000001)\n  '0'\n  >>> varietyStr(0.0000000001)\n  '0'\n  >>> varietyStr(0.00000000001)\n  '0'\n  >>> varietyStr(0.000000000001)\n  '0'\n  >>> varietyStr(0.0000000000001)\n  '0'\n  >>> varietyStr(0.00000000000001)\n  '0'\n  >>> varietyStr(0.000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> varietyStr(0.0000000000000001)\n  '0'\n  >>> variety"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return (a * h) / 2;\n};\n\nexport default triangulumArea;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 5\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(10))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let half = Math.floor(l.length / 2);\n  let result = l[half];\n  let mid = l.slice(half);\n  if (l.length % 2 === 1) {\n    return result;\n  } else {\n    return (Math.max(mid[0], mid[1]) + Math.min(mid[2], mid[3])) / 2;\n  }\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let i = 0\n    let j = text.length - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Tests if given number is a palindrome\n  >>> isPalindrome('')\n  false\n  >>> isPalindrome(1)\n  true\n  >>> isPalindrome(2)\n  true\n  >>> isPalindrome(3)\n  true\n  >>> isPalindrome(4)\n  false\n  >>> isPalindrome(12)\n  true\n  >>> isPalindrome(12)\n  true\n  >>> isPalindrome(24)\n  true\n  >>> isPalindrome(12)\n  false\n  */\nconst isPalindromeNumber = (number) => {\n    return number === parseInt(number)\n}\n\n/*\n  Checks if given number is prime\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  true\n  >>> isPrime(5)\n  true\n  >>> isPrime(6)\n  false\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  true\n  >>> isPrime(9)\n  true\n  >>> isPrime(10)\n  true\n  >>> isPrime(12)\n  false\n  >>> isPrime(14)\n  true\n  >>> isPrime(16)\n  true\n  >>> isPrime(20)\n  true\n  >>> isPrime(24)\n  true\n  >>> isPrime(30)\n  true\n  >>> isPrime(100)\n  false\n  >>> isPrime(1000)\n  true\n  */\nconst isPrime = (number) => {\n    if (number < 2) {\n        return false\n    }\n    for (let i = 2; i * i <= number; i++) {\n        if (number % i === 0) {\n            return false\n        }\n    }\n    return true\n}\n\n/*\n  Calculates the factorial of given number\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  >>> factorial(5)\n  120\n  >>> factorial(7)\n  5040\n  >>> factorial(8)\n  40320\n  >>> factorial(15)\n  69600\n  >>> factorial(18)\n  648000\n  >>> factorial(21)\n  656400\n  >>> factorial(100)\n  46188016736\n  */\nconst factorial = (number) => {\n    let total = 1\n    for (let i = 1; i <= number; i++) {\n        total *= i\n    }\n    return total\n}\n\n/*\n  Calculates the fibonacci number at given index\n  >>> fib(0)\n  0\n  >>> fib(1)\n  1\n  >>> fib(2)\n  1\n  >>> fib(3)\n  2\n  >>> fib(4)\n  3\n  >>> fib(5)\n  5\n  >>> fib(6)\n  8\n  >>> fib(7)\n  13\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  10946\n  >>> fib(22)\n  15517\n  >>> fib(23)\n  22279\n  >>> fib(24)\n  30586\n  >>> fib(25)\n  44654\n  >>> fib(26)\n  63741\n  >>> fib(27)\n  88172\n  >>> fib(28)\n  124615\n  >>> fib(29)\n  186594\n  >>> fib(30)\n  275627\n  >>> fib(31)\n  390814\n  >>> fib(32)\n  534229\n  >>> fib(33)\n  738461\n  >>> fib(34)\n  1015162\n  >>> fib(35)\n  1268767\n  >>> fib(36)\n  1597194\n  >>> fib(37)\n  2109727\n  >>> fib(38)\n  2679082\n  >>> fib(39)\n  3291445\n  >>> fib(40)\n  4232387\n  >>> fib(41)\n  4944328\n  >>> fib(42)\n  5955117\n  >>> fib(43)\n  6940487\n  >>> fib(44)\n  8174766\n  >>> fib(45)\n  9482445\n  >>> fib(46)\n  10898907\n  >>> fib(47)\n  12284426\n  >>> fib(48)\n  14027707\n  >>> fib(49)\n  15187536\n  >>> fib(50)\n  16857025\n  >>> fib(51)\n  18753534\n  >>> fib(52)\n  20733792\n  >>> fib(53)\n  23650021\n  >>> fib(54)\n  25708920\n  >>> fib(55)\n  27537409\n  >>> fib(56)\n  29042774\n  >>> fib(57)\n  30908447\n  >>> fib(58)\n  32944324\n  >>> fib(59)\n  34255637\n  >>> fib(60)\n  35664030\n  >>> fib(61)\n  37688815\n  >>> fib(62)\n  38805856\n  >>> fib(63)\n  "}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    let mod = 0;\n    while (n >= p) {\n        mod += n % p;\n        n -= n % p;\n    }\n    return mod;\n};\n\n/**\n  * Return p^e modulo p (be aware of numerics).\n  * @param {number} e\n  * @param {number} p\n  * @returns {number}\n  * @example\n  * modp(2, 4);\n  * // => 4\n  */\nconst modp2 = (e, p) => {\n    let mod = 1;\n    while (e > 0) {\n        mod = modp(mod, p);\n        e -= 1;\n    }\n    return mod;\n};\n\nconst getPrime = (min, max) => {\n    let max = max || 1e9;\n    let i = min;\n    while (true) {\n        let p = 2 * i + 1;\n        if (p > max) {\n            break;\n        }\n        if (modp2(p, i) == i) {\n            return p;\n        }\n        i++;\n    }\n};\n\nconst getPrimeFast = (min, max) => {\n    let max = max || 1e9;\n    let i = min;\n    while (true) {\n        let p = 2 * i + 1;\n        if (p > max) {\n            break;\n        }\n        if (modp2(p, i) == i) {\n            return p;\n        }\n        i++;\n    }\n};\n\nconst getPrimeFast2 = (min, max) => {\n    let max = max || 1e9;\n    let i = min;\n    while (true) {\n        let p = 2 * i + 1;\n        if (p > max) {\n            break;\n        }\n        if (modp2(p, i) == i) {\n            return p;\n        }\n        i++;\n    }\n};\n\nmodule.exports = {\n    getPrime,\n    getPrimeFast,\n    getPrimeFast2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  encodes every character in a string with encodeShift function.\n  */\nconst encode = (s) => encodeShift(s);\n\n/*\n  decodes every character in a string with decodeShift function.\n  */\nconst decode = (s) => decodeShift(s);\n\nconst get_base = (n) => {\n  return (n >= 1 && n <= 26)? n : 0;\n}\n\nconst get_base_dec = (n) => {\n  return (n >= 0 && n <= 25)? n : 0;\n}\n\nconst base_encode = (n, k) => {\n  return (get_base(n) + k - 1).toString(26);\n}\n\nconst base_decode = (n, k) => {\n  return (n.toString(26) + get_base_dec(k) - 1).toString(26);\n}\n\nconst get_encoded_str = (str, k) => {\n  return encode(str + k);\n}\n\nconst get_decoded_str = (str, k) => {\n  return decode(str.slice(0, str.length - k) + \"a\");\n}\n\nconst get_encoded_dec_str = (str, k) => {\n  return encode(str + k);\n}\n\nconst get_decoded_dec_str = (str, k) => {\n  return decode(str.slice(0, str.length - k) + \"a\");\n}\n\nconst get_encoded_dec_str_length = (str, k) => {\n  return encode(str + k).length;\n}\n\nconst get_decoded_dec_str_length = (str, k) => {\n  return decode(str.slice(0, str.length - k) + \"a\").length;\n}\n\nconst is_encoded_str = (str, k) => {\n  return encode(str + k).toString(26) === k.toString(26);\n}\n\nconst is_decoded_str = (str, k) => {\n  return decode(str.slice(0, str.length - k) + \"a\").toString(26) === k.toString(26);\n}\n\nconst is_encoded_dec_str = (str, k) => {\n  return encode(str + k).toString(26) === k.toString(26);\n}\n\nconst is_decoded_dec_str = (str, k) => {\n  return decode(str.slice(0, str.length - k) + \"a\").toString(26) === k.toString(26);\n}\n\nconst is_encoded_dec_str_length = (str, k) => {\n  return encode(str + k).length === k.toString(26).length;\n}\n\nconst is_decoded_dec_str_length = (str, k) => {\n  return decode(str.slice(0, str.length - k) + \"a\").length === k.toString(26).length;\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  get_base,\n  get_base_dec,\n  base_encode,\n  base_decode,\n  get_encoded_str,\n  get_decoded_str,\n  get_encoded_dec_str,\n  get_decoded_dec_str,\n  get_encoded_dec_str_length,\n  get_decoded_dec_str_length,\n  is_encoded_str,\n  is_decoded_str,\n  is_encoded_dec_str,\n  is_decoded_dec_str,\n  is_encoded_dec_str_length,\n  is_decoded_dec_str_length\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  if(!text) {\n    return text\n  }\n  return text.replace(/[AEIOUY]/g, '')\n}\n\n/*\n  getRidOfUppercase is a function that takes string and returns string without uppercase letters.\n  >>> getRidOfUppercase('')\n  ''\n  >>> getRidOfUppercase(\"abcdef\\nghijklm\")\n  'bcdf\\nghijklm'\n  >>> getRidOfUppercase('abcdef')\n  'abcdef'\n  >>> getRidOfUppercase('aaaaa')\n  ''\n  >>> getRidOfUppercase('aaBAA')\n  'BAA'\n  >>> getRidOfUppercase('zbcd')\n  'zbcd'\n  */\nconst getRidOfUppercase = (text) => {\n  if(!text) {\n    return text\n  }\n  return text.replace(/[A-Z]/g, '')\n}\n\n/*\n  getRidOfSpecialChars is a function that takes string and returns string without special characters.\n  >>> getRidOfSpecialChars('')\n  ''\n  >>> getRidOfSpecialChars(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> getRidOfSpecialChars('abcdef')\n  'abcdef'\n  >>> getRidOfSpecialChars('aaaaa')\n  ''\n  >>> getRidOfSpecialChars('aaBAA')\n  'BAA'\n  >>> getRidOfSpecialChars('zbcd')\n  'zbcd'\n  */\nconst getRidOfSpecialChars = (text) => {\n  if(!text) {\n    return text\n  }\n  return text.replace(/[^\\w]/g, '')\n}\n\n/*\n  isValidPassword is a function that takes string and returns boolean.\n  >>> isValidPassword('')\n  False\n  >>> isValidPassword(\"abcdef\\nghijklm\")\n  False\n  >>> isValidPassword('abcdef')\n  True\n  >>> isValidPassword('aaaaa')\n  False\n  >>> isValidPassword('aaBAA')\n  True\n  >>> isValidPassword('zbcd')\n  False\n  */\nconst isValidPassword = (text) => {\n  if(!text) {\n    return false\n  }\n  return /^[A-Za-z0-9_]{6,18}$/.test(text)\n}\n\n/*\n  getRidOfSpaces is a function that takes string and returns string without spaces.\n  >>> getRidOfSpaces('')\n  ''\n  >>> getRidOfSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> getRidOfSpaces('abcdef')\n  'abcdef'\n  >>> getRidOfSpaces('aaaaa')\n  ''\n  >>> getRidOfSpaces('aaBAA')\n  'aaBAA'\n  >>> getRidOfSpaces('zbcd')\n  'zbcd'\n  */\nconst getRidOfSpaces = (text) => {\n  if(!text) {\n    return text\n  }\n  return text.replace(/\\s+/g, '')\n}\n\n/*\n  getRidOfPunctuations is a function that takes string and returns string without punctuation.\n  >>> getRidOfPunctuations('')\n  ''\n  >>> getRidOfPunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> getRidOfPunctuations('abcdef')\n  'abcdef'\n  >>> getRidOfPunctuations('aaaaa')\n  ''\n  >>> getRidOfPunctuations('aaBAA')\n  'aaBAA'\n  >>> getRidOfPunctuations('zbcd')\n  'zbcd'\n  */\nconst getRidOfPunctuations = (text) => {\n  if(!text) {\n    return text\n  }\n  return text.replace(/[^a-zA-Z0-9_\\-]/g, '')\n}\n\n/*\n  getRidOfSpecialChars is a function that takes string and returns string without special characters.\n  >>> getRidOfSpecialChars('')\n  ''\n  >>> getRidOfSpecialChars(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> getRidOfSpecialChars('abcdef')\n  'abcdef'\n  >>> getRidOfSpecialChars('aaaaa')\n  ''\n  >>> getRidOfSpecialChars('aaBAA')\n  'aaBAA'\n  >>> getRidOfSpecialChars('zbcd')\n  'zbcd'\n  */\nconst getRidOfSpecialChars = (text) => {\n  if(!text) {\n    return text\n  }\n  return text.replace(/[^a-zA-Z0-9_\\-]/g, '')\n}\n\n/*\n  isValidPassword is a function that takes string and returns boolean.\n  >>> isValidPassword('')\n  False\n  >>> isValidPassword(\"abcdef\\nghijklm\")\n  False\n  >>> isValidPassword('abcdef')\n  True\n  >>> isValidPassword('aaaaa')\n  False\n  >>> isValidPassword('aaBAA')\n  True\n  >>> isValidPassword('zbcd')\n  False\n  */\nconst isValidPassword = (text) => {\n  if(!text) {\n    return false\n  }\n  return /^[A-Za"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  return l.every(n => n <= t);\n}\n\n/*\n  Given an array of integers, return a string containing all of the\n  numbers in the list in sorted order, separated by commas.\n  >>> toString([1, 2, 3, 5, 8, 13, 21])\n  '1, 2, 3, 5, 8, 13, 21'\n  >>> toString([2, 3, 4, 5, 8, 13, 21])\n  '2, 3, 4, 5, 8, 13, 21'\n  >>> toString([1, 2, 4, 5, 8, 13, 21])\n  '1, 2, 4, 5, 8, 13, 21'\n  >>> toString([1, 3, 5, 8, 13, 21])\n  '1, 3, 5, 8, 13, 21'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56, 21, 78])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56, 21, 78'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56, 21, 78, 12])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56, 21, 78, 12'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56, 21, 78, 12, 34, 56])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56, 21, 78, 12, 34, 56'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56, 21, 78, 12, 34, 56, 21, 78])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56, 21, 78, 12, 34, 56, 21, 78'\n  >>> toString([1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32, 34, 45, 21, 12, 34, 56, 21, 78, 12, 34, 56, 21, 78, 12])\n  '1, 2, 3, 4, 5, 6, 8, 13, 21, 34, 45, 34, 56, 21, 78, 12, 32, 32"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  if (x < y) {\n    return x + y - x % y;\n  } else {\n    return y + x - x % y;\n  }\n}\n\n/*\n  >>> lend(10, 7)\n  5\n  >>> lend(8, 6)\n  10\n  >>> lend(9, 8)\n  3\n  */\nconst multiply = (x, y) => {\n  return (x - 1) * (y - 1) % (x + y);\n}\n\n/*\n  >>> lend(10, 7)\n  5\n  >>> lend(8, 6)\n  10\n  >>> lend(9, 8)\n  3\n  */\nconst divide = (x, y) => {\n  if (x === 1) {\n    return 1;\n  } else {\n    return x * (y - 1) % y;\n  }\n}\n\n/*\n  >>> lend(10, 7)\n  5\n  >>> lend(8, 6)\n  10\n  >>> lend(9, 8)\n  3\n  */\nconst mod = (x, y) => {\n  return x % y;\n}\n\n/*\n  >>> lend(10, 7)\n  5\n  >>> lend(8, 6)\n  10\n  >>> lend(9, 8)\n  3\n  */\nconst sum = (x, y) => {\n  return x + y;\n}\n\nmodule.exports = {\n  lend,\n  multiply,\n  divide,\n  mod,\n  sum,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  const c0 = s0.split('').map((c) => c.charCodeAt(0));\n  const c1 = s1.split('').map((c) => c.charCodeAt(0));\n  const diff = Math.abs(c0.length - c1.length);\n  return (c0.length === c1.length) && (diff <= 1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1]!== \"<\") {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nexport default rightBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  const r = []\n  const a = l.reduce((a, b) => {\n    const x = a.length\n    if (b > a[x - 1]) {\n      return a.concat([b])\n    }\n    return a\n  }, [])\n  if (a.length === 1) {\n    return false\n  }\n  const d = a[0] - a[a.length - 1]\n  const l = a.length\n  for (let i = 1; i < l; i++) {\n    if (a[i] - a[i - 1]!== d) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = flat\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const r = []\n  const sorted = sortedUnique(l1)\n  for (let i = 0; i < sorted.length; i++) {\n    let e = sorted[i]\n    for (let j = 0; j < sorted.length; j++) {\n      let f = sorted[j]\n      if (e!= f) {\n        const m = Math.min(e, f)\n        if (l1.indexOf(m)!= -1) {\n          r.push(m)\n          break\n        }\n      }\n    }\n  }\n  return sortedUnique(r)\n}\n\nexport default coarse\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  // We choose the odd prime.\n  if (n % 2 === 0) {\n    return 2;\n  }\n  // We choose the prime.\n  let i = 3;\n  while (i < Math.sqrt(n)) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n};\n\nmodule.exports = bigChoiceFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumOfEvenAndOdd is a function that sums the odd and even numbers from 1 to n.\n  >>> sumOfEvenAndOdd(30)\n  45\n  >>> sumOfEvenAndOdd(100)\n  5050\n  >>> sumOfEvenAndOdd(5)\n  0\n  >>> sumOfEvenAndOdd(10)\n  40\n  >>> sumOfEvenAndOdd(1)\n  2\n  */\nconst sumOfEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  sumOfSquares is a function that sums the squares of the numbers from 1 to n.\n  >>> sumOfSquares(30)\n  945\n  >>> sumOfSquares(100)\n  50505\n  >>> sumOfSquares(5)\n  0\n  >>> sumOfSquares(10)\n  4665\n  >>> sumOfSquares(1)\n  1\n  */\nconst sumOfSquares = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  return sum;\n};\n\n/*\n  sumOfSquaresByTwo is a function that sums the squares of the numbers from 1 to n,\n  by using a multiplication table.\n  >>> sumOfSquaresByTwo(30)\n  945\n  >>> sumOfSquaresByTwo(100)\n  50505\n  >>> sumOfSquaresByTwo(5)\n  0\n  >>> sumOfSquaresByTwo(10)\n  4665\n  >>> sumOfSquaresByTwo(1)\n  1\n  */\nconst sumOfSquaresByTwo = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i;\n  }\n  return sum;\n};\n\n/*\n  sumByTwo is a function that sums the numbers from 1 to n by using a multiplication\n  table.\n  >>> sumByTwo(30)\n  945\n  >>> sumByTwo(100)\n  50505\n  >>> sumByTwo(5)\n  0\n  >>> sumByTwo(10)\n  4665\n  >>> sumByTwo(1)\n  1\n  */\nconst sumByTwo = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  return sum;\n};\n\n/*\n  sumByTwoWithBrackets is a function that sums the numbers from 1 to n by using a\n  multiplication table.\n  >>> sumByTwoWithBrackets(30)\n  945\n  >>> sumByTwoWithBrackets(100)\n  50505\n  >>> sumByTwoWithBrackets(5)\n  0\n  >>> sumByTwoWithBrackets(10)\n  4665\n  >>> sumByTwoWithBrackets(1)\n  1\n  */\nconst sumByTwoWithBrackets = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  return sum;\n};\n\n/*\n  sumOfSquaresAndProducts is a function that sums the squares of the numbers from 1 to n,\n  and also the products of the numbers from 1 to n.\n  >>> sumOfSquaresAndProducts(30)\n  945\n  >>> sumOfSquaresAndProducts(100)\n  50505\n  >>> sumOfSquaresAndProducts(5)\n  0\n  >>> sumOfSquaresAndProducts(10)\n  4665\n  >>> sumOfSquaresAndProducts(1)\n  1\n  */\nconst sumOfSquaresAndProducts = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  return sum;\n};\n\n/*\n  sumByTwoAndBrackets is a function that sums the numbers from 1 to n by using a multiplication\n  table, and also the products of the numbers from 1 to n.\n  >>> sumByTwoAndBrackets(30)\n  945\n  >>> sumByTwoAndBrackets(100)\n  50505\n  >>> sumByTwoAndBrackets(5)\n  0\n  >>> sumByTwoAndBrackets(10)\n  4665\n  >>> sumByTwoAndBrackets(1)\n  1\n  */\nconst sumByTwoAndBrackets = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  return sum;\n};\n\n/*\n  sumByTwoAndBracketsByTwo is a function that sums the numbers from 1 to n by using a multiplication\n  table, and also the products of the numbers from 1 to n, by using a multiplication table.\n  >>> sumByTwoAndBracketsByTwo(30)\n  945\n  >>> sumByTwoAndBracketsByTwo(100)\n  50505\n  >>> sumByTwoAndBracketsByTwo(5)\n  0\n  >>> sumByTwoAndBracketsByTwo(10)\n  4665\n  >>> sumByTwoAndBracketsByTwo(1)\n  1\n  */\nconst sumByTwoAndBracketsByTwo = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i;\n  }\n  return sum;\n};\n\n/*\n  sumByTwoAndBracketsByTwoWithBrackets is a function that sums the numbers from 1 to n by using a\n  multiplication table, and also the products of the numbers from 1 to n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const len = brackets.length\n  let i = 0\n  let isLeftOpen = false\n  while (i < len) {\n    if (isLeftOpen) {\n      if (brackets[i] === ')') {\n        isLeftOpen = false\n      }\n    } else {\n      if (brackets[i] === '(') {\n        isLeftOpen = true\n      }\n    }\n    i++\n  }\n  return isLeftOpen\n}\n\nexport default rightBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const [ x0, x1, x2 ] = xs\n  const d = [ x1, x2 ]\n  return d\n}\n\nexport default derivative\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib = 0, i = 0;\n  while (i < n) {\n    fib = fib + fib;\n    i++;\n  }\n  return fib;\n};\n\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let vowelCount = 0\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      vowelCount++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    vowelCount++\n  }\n  return vowelCount\n}\n\nexport default vowelReckon\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  if (shift < 1) return x.toString()\n  const digits = x.toString().split('')\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.push(digits.pop())\n  }\n  if (shift > digits.length) {\n    for (let i = digits.length - 1; i >= 0; i--) {\n      result.unshift(digits[i])\n    }\n  } else {\n    for (let i = shift - 1; i >= 0; i--) {\n      result.push(digits[i])\n    }\n  }\n  return result.join('')\n}\n\nconst isPalindrome = (x) => {\n  if (x === 0) return false\n  const digits = x.toString().split('')\n  const len = digits.length\n  for (let i = 0; i < len / 2; i++) {\n    if (digits[i]!== digits[len - 1 - i]) return false\n  }\n  return true\n}\n\n/*\n  Find the kth-smallest element in the given array.\n  Assume the array has n elements and k is at least 1.\n  >>> kthSmallest(4, [3, 2, 1, 3, 2, 3, 4, 5, 6, 4, 6, 6])\n  1\n  >>> kthSmallest(3, [3, 2, 1, 3, 2, 3, 4, 5, 6, 4, 6, 6])\n  2\n  >>> kthSmallest(4, [3, 2, 1, 3, 2, 3, 4, 5, 6, 4, 6, 6, 7, 8, 9])\n  3\n  >>> kthSmallest(2, [3, 2, 1, 3, 2, 3, 4, 5, 6, 4, 6, 6])\n  1\n  >>> kthSmallest(4, [3, 2, 1, 3, 2, 3, 4, 5, 6, 4, 6, 6, 7, 8, 9])\n  6\n  >>> kthSmallest(2, [3, 2, 1, 3, 2, 3, 4, 5, 6, 4, 6, 6, 7, 8, 9, 10, 11, 12])\n  10\n  >>> kthSmallest(5, [1, 2, 3, 4, 5])\n  1\n  >>> kthSmallest(2, [1, 2, 3, 4, 5])\n  1\n  >>> kthSmallest(6, [1, 2, 3, 4, 5])\n  1\n  >>> kthSmallest(0, [1, 2, 3, 4, 5])\n  1\n  >>> kthSmallest(0, [])\n  1\n  >>> kthSmallest(4, [1, 2, 3, 4, 5])\n  1\n  >>> kthSmallest(2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  1\n  >>> kthSmallest(4, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  4\n  >>> kthSmallest(4, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n  36\n  >>> kthSmallest(4, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n  36\n  >>> kthSmallest(4, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  return s.reduce((acc, c, i) => acc + c.toUpperCase().charCodeAt(0) - 32, 0);\n};\n\nconsole.log(fingerSum(\"a\"));\nconsole.log(fingerSum(\"ab\"));\nconsole.log(fingerSum(\"abc\"));\nconsole.log(fingerSum(\"helloE\"));\nconsole.log(fingerSum(\"woArBld\"));\nconsole.log(fingerSum(\"aAaaaXa\"));<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let numberOfApples = 0\n  let numberOfOranges = 0\n  let numberOfMango = 0\n  let total = 0\n  let count = 0\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"apples\") {\n      numberOfApples += 1\n    } else if (s[i] === \"oranges\") {\n      numberOfOranges += 1\n    } else if (s[i] === \"mango\") {\n      numberOfMango += 1\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"apples\") {\n      total += numberOfApples\n    } else if (s[i] === \"oranges\") {\n      total += numberOfOranges\n    } else if (s[i] === \"mango\") {\n      total += numberOfMango\n    }\n  }\n\n  count = n - total\n\n  return count\n}\n\nconsole.log(yieldDistribution(\"5 apples and 6 oranges\", 19))\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n    const arrSize = arr.length\n    const min = arr[0]\n    let index = 0\n    let result = []\n    for(let i = 1; i < arrSize; i++){\n        if(arr[i] % 2 === 0){\n            if(min > arr[i]){\n                min = arr[i]\n                index = i\n            }\n        }\n    }\n    if(arrSize === 1){\n        result.push([min, index])\n    }else{\n        result = result.concat([[min, index]])\n    }\n    return result\n}\n\n/*\n  \"Given an array representing a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle2 = (arr) => {\n    const arrSize = arr.length\n    const min = arr[0]\n    let index = 0\n    let result = []\n    for(let i = 1; i < arrSize; i++){\n        if(arr[i] < min){\n            min = arr[i]\n            index = i\n        }\n    }\n    if(arrSize === 1){\n        result.push([min, index])\n    }else{\n        result = result.concat([[min, index]])\n    }\n    return result\n}\n\nconst arr = [4,2,3]\n\nconsole.log(hustle(arr))\nconsole.log(hustle2(arr))<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  const [n, i] = [...lst].sort();\n  if (n === 0) return -1;\n  let max = n;\n  let [idx] = [i];\n  for (let i = i + 1; i < lst.length; i++) {\n    if (lst[i] === idx) {\n      if (lst[i] > max) {\n        [max, idx] = [lst[i], i];\n      }\n    } else {\n      idx = lst[i];\n      if (max < lst[i]) {\n        [max, idx] = [lst[i], i];\n      }\n    }\n  }\n  return max;\n};\n\nconst research = (lst) => {\n  const [n, i] = [...lst].sort();\n  if (n === 0) return -1;\n  let max = n;\n  let [idx] = [i];\n  for (let i = i + 1; i < lst.length; i++) {\n    if (lst[i] === idx) {\n      if (lst[i] > max) {\n        [max, idx] = [lst[i], i];\n      }\n    } else {\n      idx = lst[i];\n      if (max < lst[i]) {\n        [max, idx] = [lst[i], i];\n      }\n    }\n  }\n  return max;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n  return lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n};\n\n//\n//  TODO: Implement a more efficient merge sort algorithm\n//\n//  In order to implement a merge sort, I have to implement the algorithm\n//  in a way that allows me to merge the two sorted lists together.\n//\n//  I can use the merge function to do this, but I also need to use\n//  the merge function to merge the two sorted lists together.\n//\n//  I can use a helper function to do this, but I also need to use\n//  a helper function to do the merge together.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this, but I also need to\n//  implement the merge function.\n//\n//  I can implement a helper function to do this,"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const area = (a + b + c) / 2\n  const total = a + b + c\n  const s1 = total / 2\n  const s2 = s1 + c\n  const s3 = s1 + b\n  if (s2 < a || s3 < a || s2 > c || s3 > c) {\n    return -1\n  }\n  return Math.round(area * 2) / 2\n}\n\nexport default triangulumArea\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  if (!q ||!q.length) return false;\n\n  const sum = q.reduce((sum, elem) => sum + elem, 0);\n  return (sum <= w) && (q.length === sum) && (q.every(qelem => qelem === q[q.length - 1 - qelem]));\n};\n\nconsole.log(willItFlee([3, 2, 3], 1)); // false\nconsole.log(willItFlee([3, 2, 3], 9)); // true\nconsole.log(willItFlee([3], 5)); // true\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  const length = arr.length\n  let sum = 0\n  for (let i = 0; i < length; i++) {\n    sum += (arr[i] % 2)\n  }\n  if (sum % 2!== 0) {\n    return -1\n  }\n  let start = 0\n  let end = length - 1\n  while (start < end) {\n    if (arr[start]!== arr[end]) {\n      break\n    }\n    start++\n    end--\n  }\n  return end - start + 1\n}\n\nconst main = () => {\n  const arr = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 7, 8, 9]\n  console.log(smallChange(arr))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return lst1;\n\n  const intersection = [...lst1,...lst2];\n  const intersectSize = intersection.length;\n  const firstLength = lst1.length;\n  const secondLength = lst2.length;\n\n  if (firstLength === secondLength) {\n    return lst1;\n  }\n\n  if (firstLength < secondLength) {\n    const secondList = intersection.slice(firstLength);\n    return lst1.concat(secondList);\n  }\n\n  if (secondLength < firstLength) {\n    const firstList = intersection.slice(0, secondLength);\n    return firstList.concat(lst2);\n  }\n};\n\nmodule.exports = entireCatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const primes = [2, 3, 5]\n  let res = false\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Write a function that returns true if the given number is the multiplication of two prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3\n  */\nconst isMultiplyPrime2 = (a) => {\n  const primes = [2, 3]\n  let res = false\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime3 = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17]\n  let res = false\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Write a function that returns true if the given number is the multiplication of two prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3\n  */\nconst isMultiplyPrime4 = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let res = false\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime5 = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  let res = false\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\nconst numbers = [\n  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  return n * x === x * n;\n};\n\nconst isElementaryWorldPower2 = (x, n) => {\n  const divisor = n;\n  let remainder = x;\n  while (remainder!== 0) {\n    const quotient = remainder / divisor;\n    if (x === quotient * n) {\n      return true;\n    }\n    remainder = remainder % divisor;\n    divisor = divisor / 2;\n  }\n  return false;\n};\n\n//console.log(isElementaryWorldPower(8, 2));\n//console.log(isElementaryWorldPower(3, 2));\n//console.log(isElementaryWorldPower(3, 1));\n//console.log(isElementaryWorldPower(5, 3));\n//console.log(isElementaryWorldPower2(8, 2));\n//console.log(isElementaryWorldPower2(3, 2));\n//console.log(isElementaryWorldPower2(3, 1));\n//console.log(isElementaryWorldPower2(5, 3));\n\n//Write a program that computes the number of prime numbers less than 10000000\nconst isPrime = (x) => {\n  const divisor = 2;\n  let remainder = x;\n  while (remainder!== 0) {\n    const quotient = remainder / divisor;\n    if (x === quotient * divisor) {\n      return true;\n    }\n    remainder = remainder % divisor;\n    divisor = divisor + 1;\n  }\n  return false;\n};\n\n//console.log(isPrime(9999999));\n//console.log(isPrime(10));\n//console.log(isPrime(9));\n//console.log(isPrime(2));\n//console.log(isPrime(1));\n\n//Write a program that finds the smallest number that is not divisible by any number between 1 and 1000\nconst isPrimeBetween1And1000 = (x) => {\n  for (let i = 2; i <= 1000; i++) {\n    if (x % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//console.log(isPrimeBetween1And1000(100));\n//console.log(isPrimeBetween1And1000(999));\n//console.log(isPrimeBetween1And1000(1000));\n//console.log(isPrimeBetween1And1000(2));\n//console.log(isPrimeBetween1And1000(1));\n\n//Write a program that finds the smallest number that is divisible by any number between 1 and 1000\nconst isDivisibleByAnyNumberBetween1And1000 = (x) => {\n  for (let i = 2; i <= 1000; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n//console.log(isDivisibleByAnyNumberBetween1And1000(100));\n//console.log(isDivisibleByAnyNumberBetween1And1000(999));\n//console.log(isDivisibleByAnyNumberBetween1And1000(1000));\n//console.log(isDivisibleByAnyNumberBetween1And1000(2));\n//console.log(isDivisibleByAnyNumberBetween1And1000(1));\n\n//Write a program that finds the largest prime number that is divisible by any number between 1 and 1000\nconst isPrimeDivisibleByAnyNumberBetween1And1000 = (x) => {\n  let count = 0;\n  for (let i = 2; i <= 1000; i++) {\n    if (x % i === 0) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\n//console.log(isPrimeDivisibleByAnyNumberBetween1And1000(100));\n//console.log(isPrimeDivisibleByAnyNumberBetween1And1000(999));\n//console.log(isPrimeDivisibleByAnyNumberBetween1And1000(1000));\n//console.log(isPrimeDivisibleByAnyNumberBetween1And1000(2));\n//console.log(isPrimeDivisibleByAnyNumberBetween1And1000(1));\n\n//Write a program that finds the smallest number that is not divisible by any prime numbers between 1 and 1000\nconst isNotDivisibleByAnyPrimeNumberBetween1And1000 = (x) => {\n  let count = 0;\n  for (let i = 2; i <= 1000; i++) {\n    if (isPrimeDivisibleByAnyNumberBetween1And1000(i)) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\n//console.log(isNotDivisibleByAnyPrimeNumberBetween1And1000(100));\n//console.log(isNotDivisibleByAnyPrimeNumberBetween1And1000(999));\n//console.log(isNotDivisibleByAnyPrimeNumberBetween1And1000(1000));\n//console.log(isNotDivisibleByAnyPrimeNumberBetween1And1000(2));\n//console.log(isNotDivisibleByAnyPrimeNumberBetween1And1000(1));\n\n//Write a program that finds the smallest number that is divisible by any prime numbers between 1 and 1000\nconst isDivisibleByAnyPrimeNumberBetween1And1000 = (x) => {\n  let count = 0;\n  for (let i = 2; i <= 1000; i++) {\n    if (isPrimeDivisibleByAnyNumberBetween1And1000(i)) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\n//console.log(isDivisibleByAnyPrimeNumberBetween1And1000(100));\n//console.log(isDivisibleByAnyPrimeNumberBetween1And1000"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a <= 0? false : a % 6 === 0 && a % 12 === 0 && a % 18 === 0;\n};\n\nconsole.log(iscube(6));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const numStr = num.toUpperCase();\n  const hexKeyStr = [];\n  for (let i = 0; i < numStr.length; i++) {\n    hexKeyStr.push(numStr.charCodeAt(i));\n  }\n  return hexKeyStr;\n};\n\nlet result = 0;\n\nconst prime = (key) => {\n  for (let i = 2; i < Math.sqrt(key); i++) {\n    if (key % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst primes = (key) => {\n  let primeKey = [];\n  let i;\n  for (i = 0; i < key.length; i++) {\n    if (prime(key[i])) {\n      primeKey.push(key[i]);\n    }\n  }\n  return primeKey;\n};\n\nconst isPrime = (num) => {\n  let i;\n  let primeKey = primes(num);\n  for (i = 0; i < primeKey.length; i++) {\n    if (num % primeKey[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst hexNum = (num) => {\n  const numStr = num.toUpperCase();\n  const hexNumStr = [];\n  for (let i = 0; i < numStr.length; i++) {\n    hexNumStr.push(numStr.charCodeAt(i));\n  }\n  return hexNumStr;\n};\n\nconst isPrimeHex = (num) => {\n  let i;\n  let primeKey = primes(num);\n  for (i = 0; i < primeKey.length; i++) {\n    if (num % primeKey[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst hexSum = (num1, num2) => {\n  const num1Str = hexNum(num1);\n  const num2Str = hexNum(num2);\n  return num1Str.concat(num2Str);\n};\n\nconst hexMultiply = (num1, num2) => {\n  let i;\n  let num1Str = [];\n  let num2Str = [];\n  for (i = 0; i < num1.length; i++) {\n    num1Str.push(num1.charCodeAt(i));\n    num2Str.push(num2.charCodeAt(i));\n  }\n  return num1Str.concat(num2Str);\n};\n\nconst hexDigits = (num) => {\n  const numStr = num.toUpperCase();\n  const hexDigitsStr = [];\n  for (let i = 0; i < numStr.length; i++) {\n    hexDigitsStr.push(numStr.charCodeAt(i));\n  }\n  return hexDigitsStr;\n};\n\nconst hexToDecimal = (num) => {\n  const numStr = num.toUpperCase();\n  const numDecimalStr = [];\n  for (let i = 0; i < numStr.length; i++) {\n    numDecimalStr.push(numStr.charCodeAt(i));\n  }\n  return numDecimalStr;\n};\n\nconst hexToHex = (num) => {\n  const numStr = num.toUpperCase();\n  const numHexStr = [];\n  for (let i = 0; i < numStr.length; i++) {\n    numHexStr.push(numStr.charCodeAt(i));\n  }\n  return numHexStr;\n};\n\nconst countDigits = (num) => {\n  const numStr = num.toUpperCase();\n  const numDigitsStr = [];\n  for (let i = 0; i < numStr.length; i++) {\n    numDigitsStr.push(numStr.charCodeAt(i));\n  }\n  return numDigitsStr.length;\n};\n\nconst hexToDecimal = (num) => {\n  const numStr = num.toUpperCase();\n  const numDecimalStr = [];\n  for (let i = 0; i < numStr.length; i++) {\n    numDecimalStr.push(numStr.charCodeAt(i));\n  }\n  return numDecimalStr;\n};\n\nconst hexToHex = (num) => {\n  const numStr = num.toUpperCase();\n  const numHexStr = [];\n  for (let i = 0; i < numStr.length; i++) {\n    numHexStr.push(numStr.charCodeAt(i));\n  }\n  return numHexStr;\n};\n\nconst countDigits = (num) => {\n  const numStr = num.toUpperCase();\n  const numDigitsStr = [];\n  for (let i = 0; i < numStr.length; i++) {\n    numDigitsStr.push(numStr.charCodeAt(i));\n  }\n  return numDigitsStr.length;\n};\n\nconst hexSum = (num1, num2) => {\n  const num1Str"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return Array(Integer.parseInt(decimal.toString().substring(1)) + 1).join('1').slice(0, -1);\n}\n\nconst convertToDecimal = (binary) => {\n  return (((binary.length - 1) / 2) - 1) * 2 + binary.charAt(0) - '1';\n}\n\nconst binaryToDecimal = (binary) => {\n  return (Math.pow(2, binary.length) - 1) + binary.charAt(0);\n}\n\nconst convertToBinary = (decimal) => {\n  const binary = Array(Math.pow(2, decimal.toString().length)).join('0').slice(0, -decimal.toString().length);\n  return '1' + binary;\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToBinary = (decimal) => {\n  const binary = Array(Math.pow(2, decimal.toString().length)).join('0').slice(0, -decimal.toString().length);\n  return binary;\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToBinary = (decimal) => {\n  const binary = Array(Math.pow(2, decimal.toString().length)).join('0').slice(0, -decimal.toString().length);\n  return binary;\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToBinary = (decimal) => {\n  const binary = Array(Math.pow(2, decimal.toString().length)).join('0').slice(0, -decimal.toString().length);\n  return binary;\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToBinary = (decimal) => {\n  const binary = Array(Math.pow(2, decimal.toString().length)).join('0').slice(0, -decimal.toString().length);\n  return binary;\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToBinary = (decimal) => {\n  const binary = Array(Math.pow(2, decimal.toString().length)).join('0').slice(0, -decimal.toString().length);\n  return binary;\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToBinary = (decimal) => {\n  const binary = Array(Math.pow(2, decimal.toString().length)).join('0').slice(0, -decimal.toString().length);\n  return binary;\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToBinary = (decimal) => {\n  const binary = Array(Math.pow(2, decimal.toString().length)).join('0').slice(0, -decimal.toString().length);\n  return binary;\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToDecimal = (binary) => {\n  const decimal = binary.split('1');\n  return decimal.reverse().reduce((previous, current) => previous + current, 0);\n}\n\nconst convertToBinary = (decimal) => {\n  const binary = Array"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  const diff = s.indexOf(s[0], 1)\n  const diff2 = s.indexOf(s[1], 2)\n  const diff3 = s.indexOf(s[2], 3)\n  if (diff == -1 || diff2 == -1 || diff3 == -1) return false\n  return (len >= 3 && diff!= diff2 && diff!= diff3 && diff2!= diff3)\n}\n\nconst isHappy = (s) => {\n  const num = {},\n    len = s.length\n  for (let i = 0; i < len; i++) {\n    if (!num[s[i]]) {\n      num[s[i]] = 1\n      if (isFelicitous(s)) {\n        return s\n      }\n    } else {\n      num[s[i]]++\n      if (isFelicitous(s)) {\n        return s\n      }\n    }\n  }\n  return false\n}\n\n/*\n  Given a string s, write a function to return true if s is a valid Sudoku puzzle,\n  and false otherwise.\n\n  A valid Sudoku board must be a 9x9 2D array containing the digits '1'-'9' in a 3x3 rectangle.\n  The order of the digits in the array is not important.\n  Example:\n  1\n  4\n  7\n  2\n  5\n  6\n  3\n  9\n  8\n  The 1st row contains the digits 1,2,3,4,5,6,7,8,9.\n  The 2nd row contains the digits 2,3,4,5,6,7,8,9,1.\n  The 3rd row contains the digits 3,4,5,6,7,8,9,1,2.\n  The 4th row contains the digits 4,5,6,7,8,9,1,2,3.\n  The 5th row contains the digits 5,6,7,8,9,1,2,3,4.\n  The 6th row contains the digits 6,7,8,9,1,2,3,4,5.\n  The 7th row contains the digits 7,8,9,1,2,3,4,5,6.\n  The 8th row contains the digits 8,9,1,2,3,4,5,6,7.\n  The 9th row contains the digits 9,1,2,3,4,5,6,7,8.\n  */\nconst isSudoku = (s) => {\n  const len = s.length\n  if (len!= 9) return false\n  const row = s.split('')\n  const col = s.split('')\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      const digit = row[3 * i + j]\n      if (digit!== '1' && digit!== '2' && digit!== '3' && digit!== '4' &&\n        digit!== '5' && digit!== '6' && digit!== '7' && digit!== '8' &&\n        digit!== '9') return false\n    }\n  }\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      const digit = col[3 * i + j]\n      if (digit!== '1' && digit!== '2' && digit!== '3' && digit!== '4' &&\n        digit!== '5' && digit!== '6' && digit!== '7' && digit!== '8' &&\n        digit!== '9') return false\n    }\n  }\n  return true\n}\n\nconst isHappy = (s) => {\n  const num = {},\n    len = s.length\n  for (let i = 0; i < len; i++) {\n    if (!num[s[i]]) {\n      num[s[i]] = 1\n      if (isFelicitous(s)) {\n        return s\n      }\n    } else {\n      num[s[i]]++\n      if (isFelicitous(s)) {\n        return s\n      }\n    }\n  }\n  return false\n}\n\nconst isSudoku = (s) => {\n  const len = s.length\n  if (len!= 9) return false\n  const row = s.split('')\n  const col = s.split('')\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      const digit = row[3 * i + j]\n      if (digit!== '1' && digit!== '2' && digit!== '3' && digit!== '4' &&\n        digit!== '5' && digit!== '6' && digit!== '7' && digit!== '8' &&\n        digit!== '9') return false\n    }\n  }\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      const digit = col[3 * i + j]\n      if (digit!== '1' && digit!== '2' && digit!== '3' && digit!== '4' &&\n        digit!== '5' && digit!== '6' && digit!== '7' && digit!== '8' &&\n        digit!== '9') return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  isHappy: isHappy,\n  isSudoku: isSudoku\n}\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  let output = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      output.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      output.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      output.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      output.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      output.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      output.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      output.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      output.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      output.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      output.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      output.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      output.push(\"D-\");\n    } else {\n      output.push(\"E\");\n    }\n  }\n  return output;\n};\n\nconsole.log(numericLetterGrade([4.0, 3, 1.7, 2, 3.5])); //=> ['A+', 'B', 'C-', 'C', 'A-']\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n  GPA       |    Letter grade\n    4.0                A+\n  > 3.7                A\n  > 3.3                A-\n  > 3.0                B+\n  > 2.7                B\n  > 2.3                B-\n  > 2.0                C+\n  > 1.7                C\n  > 1.3                C-\n  > 1.0                D+\n  > 0.7                D\n  > 0.0                D-\n    0.0                E\n\n\n  Example:\n  letterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst letterGrade = (grades) => {\n  let output = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      output.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      output.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      output.push(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      output.push(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      output.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n      output.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      output.push(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      output.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n      output.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      output.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      output.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      output.push(\"D-\");\n    } else {\n      output.push(\"E\");\n    }\n  }\n  return output;\n};\n\nconsole.log(letterGrade([4.0, 3, 1.7, 2, 3.5])); //=> ['A+', 'B', 'C-', 'C', 'A-']\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n    if (typeof string!=='string') {\n        return false;\n    }\n    let arr = [];\n    for (let i = 0; i < string.length; i++) {\n        let val = string[i].charCodeAt();\n        arr.push(val);\n    }\n    let max = arr.reduce((a, b) => a * b, 1);\n    let prime = false;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            return false;\n        }\n        if (arr[i] % max === 0) {\n            prime = true;\n        }\n    }\n    return prime;\n};\n\nmodule.exports = premierDistance;<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let result = 0\n  for (let i = 1; i <= n; i++) {\n    result += i.toString().length === n? 1 : 0\n  }\n  return result\n}\n\nconsole.log(beginOneEnd(10))\nconsole.log(beginOneEnd(100))\nconsole.log(beginOneEnd(1000))\nconsole.log(beginOneEnd(10000))\nconsole.log(beginOneEnd(100000))\nconsole.log(beginOneEnd(1000000))\nconsole.log(beginOneEnd(10000000))\nconsole.log(beginOneEnd(100000000))\nconsole.log(beginOneEnd(1000000000))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  const result = \"\";\n  for (let i = 0; i <= N; i++) {\n    result += (N % 2 === 1)? '1' : '0';\n    N = N / 2;\n  }\n  return result;\n};\n\n//resolve(1001);\n//resolve(15);\n//resolve(147);\n//console.log(resolve(1000));\n\nconsole.log(resolve(150));\nconsole.log(resolve(10));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      res.push(lst[i])\n    }\n  }\n  return res\n}\n\nconst test = () => {\n  console.log(lend([4, 2, 6, 7]))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const list = s.split(' ');\n  const result = [];\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let sorted = '';\n  for (let i = 0; i < list.length; i++) {\n    sorted += list[i].charAt(0);\n  }\n\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted.charAt(i) ==='') {\n      if (i!== sorted.length - 1) {\n        result.push(sorted.charAt(i + 1));\n      }\n    } else {\n      result.push(chars[sorted.charCodeAt(i) - 97]);\n    }\n  }\n  return result.join(' ');\n};\n\nconsole.log(antiShuffle('Hi')); // returns 'Hi'\nconsole.log(antiShuffle('hello')); // returns 'ehllo'\nconsole.log(antiShuffle('Hello World!!!')); // returns 'Hello!!!Wdlor'\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  let res = []\n  const len = lst.length\n\n  lst.forEach(row => {\n    row.forEach((v, i) => {\n      if (i === 0) {\n        res.push((x, i))\n      } else {\n        res.push((v, i - 1))\n      }\n    })\n  })\n  return res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return 1\n    } else if (a[0] > b[0]) {\n      return -1\n    } else {\n      if (a[1] < b[1]) {\n        return -1\n      } else if (a[1] > b[1]) {\n        return 1\n      } else {\n        return 0\n      }\n    }\n  })\n}\n\nconst catchRow2 = (lst, x) => {\n  let res = []\n  const len = lst.length\n\n  lst.forEach(row => {\n    row.forEach((v, i) => {\n      if (i === 0) {\n        res.push((x, i))\n      } else {\n        res.push((v, i - 1))\n      }\n    })\n  })\n  return res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return 1\n    } else if (a[0] > b[0]) {\n      return -1\n    } else {\n      if (a[1] < b[1]) {\n        return -1\n      } else if (a[1] > b[1]) {\n        return 1\n      } else {\n        return 0\n      }\n    }\n  })\n}\n\nmodule.exports = catchRow2\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if(array.length === 1) {\n    return array\n  }\n  let last = array[0]\n  let result = array.slice(1)\n  for(let i = 0; i < result.length; i++) {\n    if(result[i] > last) {\n      result[i] = last\n      last = result[i]\n    }\n  }\n  return result.concat(array.slice(0, -1).sort((a, b) => a - b))\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let length = s.length\n  let rot = s.split('')\n  let result = rot[0] + rot[1] + rot[2]\n  let resultLength = result.length\n  for (let i = 3; i < length; i++) {\n    rot.shift()\n    rot.unshift(rot.pop())\n    rot.unshift(rot.pop())\n    result += rot.join('')\n    if (result.length === resultLength) {\n      break\n    }\n  }\n  return result\n}\n\n// Tests\nconst tests = [\n  ['abcdefghijklmnopqrstuvwxyz', 'uvwxyzabcdmnoerqstxkz'],\n  ['asdfghjkl', 'nopqrstxkz'],\n  ['gf', 'kj'],\n  ['et', 'ix'],\n  ['hi', 'lm']\n]\n\ntests.forEach(({ s, result }) => {\n  console.log(encrypt(s))\n  console.log(s)\n  console.log(result)\n})\n\n/*\nconst encrypt = (s) => {\n  let length = s.length\n  let rot = s.split('')\n  let result = rot[0] + rot[1] + rot[2]\n  let resultLength = result.length\n  rot.shift()\n  rot.unshift(rot.pop())\n  rot.unshift(rot.pop())\n  result += rot.join('')\n  return result\n}\n\nconsole.log(encrypt('abcdefghijklmnopqrstuvwxyz'))\n*/<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let smallest = lst[0]\n  let i = 1\n  let len = lst.length\n  while (i < len) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n    i++\n  }\n  return smallest\n}\n\n/*\n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  const arr = S.split(\".\")\n  if(arr[0] === \"I\")\n    return arr.length - 1\n  return 0\n}\n\nconst countBlase = (S) => {\n  const arr = S.split(\".\")\n  return arr.length - 1\n}\n\nconst isBlaseCount = (S) => {\n  const arr = S.split(\".\")\n  if(arr[0] === \"I\")\n    return arr.length - 1\n  return 0\n}\n\nconst main = () => {\n  const input = readLine()\n  const S = input\n  const res = countBlase(S)\n  print(res)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') return false;\n  return x === y + z || x === z + y || y === x + z || y === z + x || z === x + y || z === y + x;\n};\n\n/* Create a function that returns true if a number is divisible by another number.\n  Examples\n  divisibleBy(6, 2) ➞ true\n  divisibleBy(8, 3) ➞ false\n  divisibleBy(2, 2) ➞ true\n  */\nconst divisibleBy = (num, divisor) => {\n  if (typeof num!== 'number' || typeof divisor!== 'number') return false;\n  return num % divisor === 0;\n};\n\n/* Create a function that returns true if a number is less than another number.\n  Examples\n  lessThan(9, 5) ➞ true\n  lessThan(7, 8) ➞ false\n  lessThan(7, 9) ➞ true\n  */\nconst lessThan = (num, num2) => {\n  if (typeof num!== 'number' || typeof num2!== 'number') return false;\n  return num < num2;\n};\n\n/* Create a function that returns true if a number is greater than another number.\n  Examples\n  greaterThan(3, 2) ➞ true\n  greaterThan(8, 2) ➞ false\n  greaterThan(9, 3) ➞ true\n  */\nconst greaterThan = (num, num2) => {\n  if (typeof num!== 'number' || typeof num2!== 'number') return false;\n  return num > num2;\n};\n\n/* Create a function that returns true if a number is equal to another number.\n  Examples\n  equalTo(7, 7) ➞ true\n  equalTo(7, 9) ➞ false\n  */\nconst equalTo = (num, num2) => {\n  if (typeof num!== 'number' || typeof num2!== 'number') return false;\n  return num === num2;\n};\n\n/* Create a function that returns true if a number is less than or equal to another number.\n  Examples\n  lessThanOrEqualTo(7, 8) ➞ true\n  lessThanOrEqualTo(7, 9) ➞ false\n  lessThanOrEqualTo(7, 7) ➞ true\n  */\nconst lessThanOrEqualTo = (num, num2) => {\n  if (typeof num!== 'number' || typeof num2!== 'number') return false;\n  return num <= num2;\n};\n\n/* Create a function that returns true if a number is greater than or equal to another number.\n  Examples\n  greaterThanOrEqualTo(7, 8) ➞ true\n  greaterThanOrEqualTo(7, 9) ➞ false\n  greaterThanOrEqualTo(7, 7) ➞ true\n  */\nconst greaterThanOrEqualTo = (num, num2) => {\n  if (typeof num!== 'number' || typeof num2!== 'number') return false;\n  return num >= num2;\n};\n\n/* Create a function that returns true if a number is a perfect number.\n  Examples\n  perfectNumber(2) ➞ true\n  perfectNumber(8) ➞ false\n  perfectNumber(6) ➞ false\n  */\nconst perfectNumber = (num) => {\n  if (typeof num!== 'number') return false;\n  return num % 1 === 0;\n};\n\n/* Create a function that returns the sum of a number and a number.\n  Examples\n  add(5, 3) ➞ 8\n  add(2, 8) ➞ 10\n  add(9, 2) ➞ 11\n  */\nconst add = (num, num2) => {\n  if (typeof num!== 'number' || typeof num2!== 'number') return false;\n  return num + num2;\n};\n\n/* Create a function that returns the difference of two numbers.\n  Examples\n  difference(2, 8) ➞ 6\n  */\nconst difference = (num, num2) => {\n  if (typeof num!== 'number' || typeof num2!== 'number') return false;\n  return num - num2;\n};\n\n/* Create a function that returns the product of two numbers.\n  Examples\n  product(5, 2) ➞ 25\n  product(8, 4) ➞ 64\n  */\nconst product = (num, num2) => {\n  if (typeof num!== 'number' || typeof num2!== 'number') return false;\n  return num * num2;\n};\n\n/* Create a function that returns the quotient of two numbers.\n  Examples\n  quotient(5, 2) ➞ 2\n  quotient(8, 4) ➞ 2\n  */\nconst quotient = (num, num2) => {\n  if (typeof num!== 'number' || typeof num2!== 'number') return false;\n  return num / num2;\n};\n\n/* Create a function that returns the sum of the squares of two numbers.\n  Examples\n  sumOfSquares(5, 2) ➞ 25\n  sumOfSquares(8, 4) ➞ 64\n  sumOfSquares(9, 3) ➞ 81\n  */\nconst sumOfSquares = (num, num2) => {\n  if (typeof num!== 'number' || typeof num2!== 'number') return false;\n  return num * num + num2 * num2;\n};\n\n/* Create a function that returns the difference of the squares of two numbers.\n  Examples\n"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let new_message = message.toLowerCase()\n    let vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for (let i = 0; i < vowels.length; i++) {\n        let vowel = vowels[i]\n        let next_vowel = vowels[i + 1]\n        let new_message_substring = new_message.substr(0, 2)\n        new_message_substring = new_message_substring.concat(next_vowel)\n        new_message_substring = new_message_substring.concat(vowel)\n        new_message = new_message.replace(new_message_substring, next_vowel)\n    }\n    return new_message\n}\n\nconst message = encode(\"This is a message\")\nconsole.log(message)\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let result = 0,\n    max = 0,\n    isPrime = false,\n    temp = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    isPrime = false;\n    temp = lst[i];\n    while (!isPrime) {\n      if (temp % 10 === 0) {\n        isPrime = true;\n      } else {\n        temp = temp * 10 + (Math.floor(temp / 10));\n      }\n    }\n    result += temp;\n    if (result > max) {\n      max = result;\n    }\n  }\n  return max;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (typeof dict[key]!== \"string\" && dict[key]!== undefined) {\n      return false;\n    }\n    if (typeof dict[key] === \"string\" && dict[key].toUpperCase()!== dict[key].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getUser = (id) => {\n  return dispatch => {\n    dispatch({\n      type: \"REQUEST_USER\"\n    });\n    axios.get(\"http://localhost:3000/users/\" + id)\n     .then(response => {\n        console.log(response);\n        dispatch({\n          type: \"RESPONSE_USER\",\n          response\n        });\n      })\n     .catch(error => {\n        console.log(error);\n        dispatch({\n          type: \"RESPONSE_ERROR\",\n          error\n        });\n      });\n  };\n};\n\nconst getUsers = () => {\n  return dispatch => {\n    axios.get(\"http://localhost:3000/users\")\n     .then(response => {\n        console.log(response);\n        dispatch({\n          type: \"RESPONSE_USER\",\n          response\n        });\n      })\n     .catch(error => {\n        console.log(error);\n        dispatch({\n          type: \"RESPONSE_ERROR\",\n          error\n        });\n      });\n  };\n};\n\nconst postUser = (user) => {\n  return dispatch => {\n    axios.post(\"http://localhost:3000/users\", user)\n     .then(response => {\n        console.log(response);\n        dispatch({\n          type: \"RESPONSE_USER\",\n          response\n        });\n      })\n     .catch(error => {\n        console.log(error);\n        dispatch({\n          type: \"RESPONSE_ERROR\",\n          error\n        });\n      });\n  };\n};\n\nconst deleteUser = (user) => {\n  return dispatch => {\n    axios.delete(\"http://localhost:3000/users/\" + user.id)\n     .then(response => {\n        console.log(response);\n        dispatch({\n          type: \"RESPONSE_USER\",\n          response\n        });\n      })\n     .catch(error => {\n        console.log(error);\n        dispatch({\n          type: \"RESPONSE_ERROR\",\n          error\n        });\n      });\n  };\n};\n\nconst getUserById = (id) => {\n  return dispatch => {\n    axios.get(\"http://localhost:3000/users/\" + id)\n     .then(response => {\n        console.log(response);\n        dispatch({\n          type: \"RESPONSE_USER\",\n          response\n        });\n      })\n     .catch(error => {\n        console.log(error);\n        dispatch({\n          type: \"RESPONSE_ERROR\",\n          error\n        });\n      });\n  };\n};\n\nconst updateUser = (user) => {\n  return dispatch => {\n    axios.put(\"http://localhost:3000/users\", user)\n     .then(response => {\n        console.log(response);\n        dispatch({\n          type: \"RESPONSE_USER\",\n          response\n        });\n      })\n     .catch(error => {\n        console.log(error);\n        dispatch({\n          type: \"RESPONSE_ERROR\",\n          error\n        });\n      });\n  };\n};\n\nexport default {\n  getUser,\n  getUsers,\n  postUser,\n  deleteUser,\n  getUserById,\n  updateUser\n};<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  const arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\nGiven an array of numbers and an integer k, return the kth element from the top of the\narray. For example:\nConsider kthElement([1,2,3,4,5], 3) => 4\nConsider kthElement([1,2,3,4,5], 10) => 5\nConsider kthElement([1,2,3,4,5], 0) => 1\nConsider kthElement([1,2,3,4,5], -1) => undefined\nConsider kthElement([1,2,3,4,5], 5) => undefined\n*/\nconst kthElement = (arr, k) => {\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (index === k) {\n      return arr[i];\n    }\n    index += 1;\n  }\n  return undefined;\n};\n\n/*\nGiven an array of numbers, return the number of the elements that are multiples of 3 or 5.\nFor example:\nConsider multiples([1,2,3,4,5,6,7,8,9,10]) => 4\nConsider multiples([1,2,3,4,5,6,7,8,9,10,11,12]) => 6\n*/\nconst multiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\nGiven an array of numbers, return the largest number in the array.\nFor example:\nConsider largest([1,2,3,4]) => 4\n*/\nconst largest = (arr) => {\n  let largest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n\n/*\nGiven an array of numbers, return the largest multiples in the array.\nFor example:\nConsider largestMultiples([1,2,3,4,5,6,7,8,9,10]) => [4,15,20]\n*/\nconst largestMultiples = (arr) => {\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  let largest = largest(arr2);\n  return largestMultiples(arr2);\n};\n\n/*\nGiven an array of numbers, return the smallest number in the array.\nFor example:\nConsider smallest([1,2,3,4]) => 1\n*/\nconst smallest = (arr) => {\n  let smallest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  return smallest;\n};\n\n/*\nGiven an array of numbers, return the smallest multiples in the array.\nFor example:\nConsider smallestMultiples([1,2,3,4,5,6,7,8,9,10]) => [1,2,3,5,10]\n*/\nconst smallestMultiples = (arr) => {\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  let smallest = smallest(arr2);\n  return smallestMultiples(arr2);\n};\n\n/*\nGiven an array of numbers, return the sum of the numbers in the array.\nFor example:\nConsider sum([1,2,3,4,5,6,7,8,9,10]) => 45\n*/\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\nGiven an array of numbers, return the sum of the multiples of the numbers in the array.\nFor example:\nConsider sumMultiples([1,2,3,4,5,6,7,8,9,10]) => 45\n*/\nconst sumMultiples = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\nGiven an array of numbers, return the sum of the multiples of the numbers in the array.\nFor example:\nConsider sumMultiples([1,2,3,4,5,6,7,8,9,10]) => 45\n*/\nconst sumOfMultiples = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 5 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\nGiven an array of numbers, return the sum of the multiples of the numbers in the array.\nFor example:\nConsider sumMultiples([1,2,3,4,5"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  let x = parseInt(a)\n  let y = parseInt(b)\n  let product = 0\n  let index = 0\n  let digit = 0\n  while(x!== 0 && y!== 0) {\n    digit = x % 10\n    product += digit * y\n    x = x / 10\n    y = y / 10\n    index++\n  }\n  while(x!== 0) {\n    digit = x % 10\n    product += digit * y\n    x = x / 10\n    index++\n  }\n  while(y!== 0) {\n    digit = y % 10\n    product += digit * x\n    y = y / 10\n    index++\n  }\n  return product\n}\n\nbreed(20, 1851)\n\nbreed(28, 1851)\n\nbreed(12, 12)\n\nbreed(14, 15)\n\nbreed(12, 14)\n\nbreed(1851, 2020)\n\nbreed(2020, 1851)\n\nbreed(0, 1851)\n\nbreed(9, 1851)\n\nbreed(9, 10)\n\nbreed(9, 11)\n\nbreed(0, 11)\n\nbreed(20, 11)\n\nbreed(11, 20)\n\nbreed(11, 12)\n\nbreed(12, 11)\n\nbreed(20, 10)\n\nbreed(11, 20)\n\nbreed(11, 0)\n\nbreed(11, -1)\n\nbreed(11, -2)\n\nbreed(11, -3)\n\nbreed(11, -4)\n\nbreed(11, -5)\n\nbreed(11, -6)\n\nbreed(11, -7)\n\nbreed(11, -8)\n\nbreed(11, -9)\n\nbreed(11, -10)\n\nbreed(11, -11)\n\nbreed(11, -12)\n\nbreed(11, -13)\n\nbreed(11, -14)\n\nbreed(11, -15)\n\nbreed(11, -16)\n\nbreed(11, -17)\n\nbreed(11, -18)\n\nbreed(11, -19)\n\nbreed(11, -20)\n\nbreed(11, -21)\n\nbreed(11, -22)\n\nbreed(11, -23)\n\nbreed(11, -24)\n\nbreed(11, -25)\n\nbreed(11, -26)\n\nbreed(11, -27)\n\nbreed(11, -28)\n\nbreed(11, -29)\n\nbreed(11, -30)\n\nbreed(11, -31)\n\nbreed(11, -32)\n\nbreed(11, -33)\n\nbreed(11, -34)\n\nbreed(11, -35)\n\nbreed(11, -36)\n\nbreed(11, -37)\n\nbreed(11, -38)\n\nbreed(11, -39)\n\nbreed(11, -40)\n\nbreed(11, -41)\n\nbreed(11, -42)\n\nbreed(11, -43)\n\nbreed(11, -44)\n\nbreed(11, -45)\n\nbreed(11, -46)\n\nbreed(11, -47)\n\nbreed(11, -48)\n\nbreed(11, -49)\n\nbreed(11, -50)\n\nbreed(11, -51)\n\nbreed(11, -52)\n\nbreed(11, -53)\n\nbreed(11, -54)\n\nbreed(11, -55)\n\nbreed(11, -56)\n\nbreed(11, -57)\n\nbreed(11, -58)\n\nbreed(11, -59)\n\nbreed(11, -60)\n\nbreed(11, -61)\n\nbreed(11, -62)\n\nbreed(11, -63)\n\nbreed(11, -64)\n\nbreed(11, -65)\n\nbreed(11, -66)\n\nbreed(11, -67)\n\nbreed(11, -68)\n\nbreed(11, -69)\n\nbreed(11, -70)\n\nbreed(11, -71)\n\nbreed(11, -72)\n\nbreed(11, -73)\n\nbreed(11, -74)\n\nbreed(11, -75)\n\nbreed(11, -76)\n\nbreed(11, -77)\n\nbreed(11, -78)\n\nbreed(11, -79)\n\nbreed(11, -80)\n\nbreed(11, -81)\n\nbreed(11, -82)\n\nbreed(11, -83)\n\nbreed(11, -84)\n\nbreed(11, -85)\n\nbreed(11, -86)\n\nbreed(11, -87)\n\nbreed(11, -88)\n\nbreed(11, -89)\n\nbreed(11, -90)\n\nbreed(11, -91)\n\nbreed(11, -92)\n\nbreed(11, -93)\n\nbreed(11, -94)\n\nbreed(11, -95)\n\nbreed(11, -96)\n\nbreed(11, -97)\n\nbreed(11, -98)\n\nbreed(11, -99)\n\nbreed(11, -100)\n\nbreed(11, -101)\n\nbreed(11, -102)\n\nbreed(11, -103)\n\nbreed(11, -104)\n\nbreed(11, -105)\n\nbreed(11, -106)\n\nbreed(11, -107)\n\nbreed(11, -108)\n\nbreed(11, -"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n  let a = [];\n  for(let i = 0; i < s.length; i++){\n    if(s[i].toUpperCase() === s[i]){\n      a.push(s[i]);\n    }\n  }\n  return a.length;\n};\n\n// tests\nexports.string = (s) => {\n  let a = [];\n  for(let i = 0; i < s.length; i++){\n    if(s[i].toUpperCase() === s[i]){\n      a.push(s[i]);\n    }\n  }\n  return a.length;\n};\n\nexports.string2 = (s) => {\n  let a = [];\n  for(let i = 0; i < s.length; i++){\n    if(s[i].toUpperCase() === s[i]){\n      a.push(s[i]);\n    }\n  }\n  return a.length;\n};\n\nexports.array = (s) => {\n  let a = [];\n  for(let i = 0; i < s.length; i++){\n    if(s[i].toUpperCase() === s[i]){\n      a.push(s[i]);\n    }\n  }\n  return a.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  let num = parseInt(value);\n  let int = num | 0;\n  let dec = num - int;\n  let absInt = Math.abs(int);\n  let absDec = Math.abs(dec);\n  if (absInt < absDec) {\n    return int;\n  } else {\n    return int + dec;\n  }\n};\n\nexport default closeInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  return [\n   ...Array(n + 1).fill(1),\n   ...Array(n + 1).fill(2)\n  ];\n};\n\nconst holdAPile = (n) => {\n  return [\n   ...Array(n + 1).fill(1),\n   ...Array(n + 1).fill(2)\n  ];\n};\n\nconst holdAPile = (n) => {\n  return [\n   ...Array(n + 1).fill(1),\n   ...Array(n + 1).fill(2)\n  ];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n    let words = s.split(/\\s+/);\n    return words.filter((s, i) => i < words.length - 1);\n};\n\n/*\n  You will be given an array of strings. Your task is to find out if there is a string\n  in the array that can be split into two strings and return true or false.\n  \n  For example:\n  isBible(\"Hi, my name is John\", \"Hi, my name is\") == false\n  isBible(\"Hi, my name is John\", \"Hi, my name is James\") == true\n  */\nconst isBible = (s1, s2) => {\n    const s = bibleString(s1);\n    if (s.length!== 2) return false;\n    const s2 = bibleString(s2);\n    if (s2.length!== 2) return false;\n    return (s[0] === s2[0] && s[1] === s2[1]) ||\n           (s[0] === s2[1] && s[1] === s2[0]);\n};\n\nmodule.exports = {\n    bibleString,\n    isBible\n};\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n    let m = Math.floor((x + y) / 2);\n    let n = (x + y) % 2;\n\n    if (n === 0) {\n        return m;\n    } else {\n        return -1;\n    }\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nn = n + (m - n) / 2;\n  const mm = n + (m - n) / 2;\n  if (nn > m) return -1;\n  const roundedN = Math.round(nn);\n  const roundedM = Math.round(mm);\n  return `0b${(((roundedM - roundedN) + 1) * (roundedM - roundedN + 1)) >> 1}`;\n}\n\nmodule.exports = roundedAvg;<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  if (!x) return [];\n  \n  let nums = x.filter(num => num % 2 == 0);\n  let sorted = nums.sort((a, b) => a - b);\n  return sorted.filter(n => n!== 0);\n};\n\n/*\n  Given a number n, return the sum of the digits of n.\n  \n  For example:\n  >>> sumDigits(9)\n  9\n  >>> sumDigits(12)\n  3\n  >>> sumDigits(12.5)\n  5\n  */\nconst sumDigits = n => {\n  return n.toString().split('').reduce((sum, char) => {\n    return sum + char.charCodeAt(0);\n  });\n};\n\n/*\n  Given a string s, return the number of distinct characters in s.\n  \n  For example:\n  >>> countDistinctChars('abc')\n  3\n  >>> countDistinctChars('abcd')\n  4\n  >>> countDistinctChars('aabc')\n  2\n  */\nconst countDistinctChars = (s) => {\n  if (!s) return 0;\n  return s.split('').reduce((a, b) => {\n    if (a.indexOf(b) === -1) a.push(b);\n    return a;\n  }, []).length;\n};\n\n/*\n  Given a string s, return the number of unique characters in s.\n  \n  For example:\n  >>> countUniqueChars('abc')\n  3\n  >>> countUniqueChars('aabcd')\n  4\n  >>> countUniqueChars('aabc')\n  2\n  */\nconst countUniqueChars = (s) => {\n  if (!s) return 0;\n  return s.split('').reduce((a, b) => {\n    if (a.indexOf(b) === -1) a.push(b);\n    return a;\n  }, []).length;\n};\n\n/*\n  Given a string s, return the number of non-empty strings of length 1\n  that can be formed by replacing a character with itself in s.\n  \n  For example:\n  >>> countOneChar('abc')\n  3\n  >>> countOneChar('aabc')\n  4\n  >>> countOneChar('ab')\n  1\n  >>> countOneChar('a')\n  1\n  */\nconst countOneChar = (s) => {\n  if (!s) return 0;\n  return s.split('').reduce((a, b) => {\n    if (a.indexOf(b) === -1) a.push(b);\n    return a;\n  }, []).length;\n};\n\n/*\n  Given a string s, return the number of permutations of s.\n  \n  For example:\n  >>> countPermutations('abc')\n  3\n  >>> countPermutations('abcd')\n  9\n  >>> countPermutations('aabc')\n  2\n  >>> countPermutations('a')\n  1\n  */\nconst countPermutations = (s) => {\n  if (!s) return 0;\n  return s.split('').reduce((a, b) => {\n    if (a.indexOf(b) === -1) a.push(b);\n    return a;\n  }, []).length;\n};\n\n/*\n  Given a string s, return the number of permutations of s that can be\n  formed by removing a character.\n  \n  For example:\n  >>> countPermutations('abc')\n  3\n  >>> countPermutations('abcd')\n  9\n  >>> countPermutations('aabc')\n  2\n  >>> countPermutations('a')\n  1\n  */\nconst countPermutations2 = (s) => {\n  if (!s) return 0;\n  return s.split('').reduce((a, b) => {\n    if (a.indexOf(b) === -1) a.push(b);\n    return a;\n  }, []).length;\n};\n\nexport {\n  aloneDigit,\n  sumDigits,\n  countDistinctChars,\n  countUniqueChars,\n  countPermutations,\n  countPermutations2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n    let n = arr.length;\n    if(n === 0) return [];\n    let d = arr.sort((a, b) => {\n        return a - b;\n    });\n    d = d.reverse();\n    let s = d.map((x) => {\n        return (x === 1)? \"One\" : (x === 2)? \"Two\" : (x === 3)? \"Three\" : (x === 4)? \"Four\" : (x === 5)? \"Five\" : (x === 6)? \"Six\" : (x === 7)? \"Seven\" : (x === 8)? \"Eight\" : \"Nine\";\n    });\n    return s;\n};\n\nconst byRating = (arr) => {\n    let n = arr.length;\n    if(n === 0) return [];\n    let d = arr.sort((a, b) => {\n        return a - b;\n    });\n    d = d.reverse();\n    let s = d.map((x) => {\n        return (x === 1)? \"One\" : (x === 2)? \"Two\" : (x === 3)? \"Three\" : (x === 4)? \"Four\" : (x === 5)? \"Five\" : (x === 6)? \"Six\" : (x === 7)? \"Seven\" : (x === 8)? \"Eight\" : \"Nine\";\n    });\n    return s;\n};\n\nconst byCombo = (arr) => {\n    let n = arr.length;\n    if(n === 0) return [];\n    let d = arr.sort((a, b) => {\n        return a - b;\n    });\n    d = d.reverse();\n    let s = d.map((x) => {\n        return (x === 1)? \"One\" : (x === 2)? \"Two\" : (x === 3)? \"Three\" : (x === 4)? \"Four\" : (x === 5)? \"Five\" : (x === 6)? \"Six\" : (x === 7)? \"Seven\" : (x === 8)? \"Eight\" : \"Nine\";\n    });\n    return s;\n};\n\nconst byYear = (arr) => {\n    let n = arr.length;\n    if(n === 0) return [];\n    let d = arr.sort((a, b) => {\n        return a - b;\n    });\n    d = d.reverse();\n    let s = d.map((x) => {\n        return (x === 1)? \"One\" : (x === 2)? \"Two\" : (x === 3)? \"Three\" : (x === 4)? \"Four\" : (x === 5)? \"Five\" : (x === 6)? \"Six\" : (x === 7)? \"Seven\" : (x === 8)? \"Eight\" : \"Nine\";\n    });\n    return s;\n};\n\nconst byYearRating = (arr) => {\n    let n = arr.length;\n    if(n === 0) return [];\n    let d = arr.sort((a, b) => {\n        return a - b;\n    });\n    d = d.reverse();\n    let s = d.map((x) => {\n        return (x === 1)? \"One\" : (x === 2)? \"Two\" : (x === 3)? \"Three\" : (x === 4)? \"Four\" : (x === 5)? \"Five\" : (x === 6)? \"Six\" : (x === 7)? \"Seven\" : (x === 8)? \"Eight\" : \"Nine\";\n    });\n    return s;\n};\n\nconst byYearCombo = (arr) => {\n    let n = arr.length;\n    if(n === 0) return [];\n    let d = arr.sort((a, b) => {\n        return a - b;\n    });\n    d = d.reverse();\n    let s = d.map((x) => {\n        return (x === 1)? \"One\" : (x === 2)? \"Two\" : (x === 3)? \"Three\" : (x === 4)? \"Four\" : (x === 5)? \"Five\" : (x === 6)? \"Six\" : (x === 7)? \"Seven\" : (x === 8)? \"Eight\" : \"Nine\";\n    });\n    return s;\n};\n\nconst byGenre = (arr) => {\n    let n = arr.length;\n    if(n === 0) return [];\n    let d = arr.sort((a, b) => {\n        return a - b;\n    });\n    d = d.reverse();\n    let s = d.map((x) => {\n        return (x === 1)? \"One\" : (x === 2)? \"Two\" : (x === 3)? \"Three\" : (x === 4)? \"Four\" : (x === 5)? \"Five\" : (x === 6)? \"Six\" : (x === 7)? \"Seven\" : (x === 8)? \"Eight\" : \"Nine\";\n    });\n    return s;\n};\n\nconst byGenreRating = (arr) => {\n    let n = arr.length;\n    if(n === 0) return [];\n    let d = arr.sort((a, b) => {\n        return a - b;\n    });\n    d = d.reverse();\n    let s = d.map"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(((i % 2 === 0)? i : i * f(i - 1)));\n  }\n  return result;\n};\n\nconst expected = [1, 2, 6, 24, 15];\nconst actual = f(5);\n\nconsole.log(\"Actual: \" + actual);\nconsole.log(\"Expected: \" + expected);\n\n// console.log(actual.join(\", \"));\n// console.log(expected.join(\", \"));\nassert(actual.equals(expected));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        count += 1;\n      } else {\n        count -= 1;\n      }\n    }\n  }\n  return [count, count - 1];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  const arr = arr.filter(x => x > 0)\n  const positive = arr.filter(x => x % 10 === 0)\n  const negative = arr.filter(x => x % 10 === -1)\n\n  const count = positive.length + negative.length\n\n  return count\n}\n\nmodule.exports = considerNums\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let flag = false;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            flag = false;\n            break;\n        } else {\n            arr.splice(left, 1);\n            arr.splice(right, 1);\n            left++;\n            right--;\n        }\n    }\n    return flag;\n};\n\nconst affectOneTestis2 = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let flag = false;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            flag = false;\n            break;\n        } else {\n            arr.splice(left, 1);\n            arr.splice(right, 1);\n            right--;\n        }\n    }\n    return flag;\n};\n\nconst affectOneTestis3 = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let flag = false;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            flag = false;\n            break;\n        } else {\n            arr.splice(right, 1);\n            arr.splice(left, 1);\n            left++;\n            right--;\n        }\n    }\n    return flag;\n};\n\nconst affectOneTestis4 = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let flag = false;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            flag = false;\n            break;\n        } else {\n            arr.splice(left, 1);\n            arr.splice(right, 1);\n            left++;\n            right--;\n        }\n    }\n    return flag;\n};\n\nconst affectOneTestis5 = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let flag = false;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            flag = false;\n            break;\n        } else {\n            arr.splice(left, 1);\n            arr.splice(right, 1);\n            right--;\n        }\n    }\n    return flag;\n};\n\nconst affectOneTestis6 = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let flag = false;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            flag = false;\n            break;\n        } else {\n            arr.splice(left, 1);\n            arr.splice(right, 1);\n            left++;\n            right--;\n        }\n    }\n    return flag;\n};\n\nconst affectOneTestis7 = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let flag = false;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            flag = false;\n            break;\n        } else {\n            arr.splice(right, 1);\n            arr.splice(left, 1);\n            right--;\n        }\n    }\n    return flag;\n};\n\nconst affectOneTestis8 = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let flag = false;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            flag = false;\n            break;\n        } else {\n            arr.splice(left, 1);\n            arr.splice(right, 1);\n            left++;\n            right--;\n        }\n    }\n    return flag;\n};\n\nconst affectOneTestis9 = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let flag = false;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            flag = false;\n            break;\n        } else {\n            arr.splice(left, 1);\n            arr.splice(right, 1);\n            left++;\n            right--;\n        }\n    }\n    return flag;\n};\n\nconst affectOneTestis10 = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let flag = false;\n    while (left <= right) {\n        if (arr[left] > arr[right]) {\n            flag = false;\n            break;\n        } else {\n            arr.splice(left, 1);\n            arr.splice(right, 1);\n            right--;\n        }\n    }\n    return flag;\n};\n\nconst affectOneTestis11 = (arr) => {\n    let left = 0;\n    let right = arr.length - 1;\n    let"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  let lst1Length = lst1.length;\n  let lst2Length = lst2.length;\n  if (lst1Length > lst2Length) {\n    return central(lst2, lst1);\n  }\n  if (lst1.length!== lst2.length) {\n    return 'NO';\n  }\n  const diff = Math.abs(lst1Length - lst2Length);\n  let diffCnt = 0;\n  while (diffCnt < diff) {\n    let sum = 0;\n    for (let i = 0; i < lst1Length; i++) {\n      if (lst1[i] % 2 === 0) {\n        sum += lst1[i];\n      }\n    }\n    if (sum % 2 === 0) {\n      return 'YES';\n    }\n    diffCnt++;\n  }\n  return 'NO';\n};\n\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]));\nconsole.log(central([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split('');\n  let dict = {};\n  let count = 0;\n  \n  //Count the repetition\n  for (let i = 0; i < letters.length; i++) {\n    if (dict[letters[i]] === undefined) {\n      dict[letters[i]] = 1;\n    } else {\n      dict[letters[i]]++;\n    }\n  }\n  \n  //Return the one with the highest repetition\n  for (let i = 0; i < letters.length; i++) {\n    if (dict[letters[i]] > count) {\n      count = dict[letters[i]];\n    }\n  }\n  \n  //Return the dict\n  return dict;\n};\n\nexport {histogram};<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  let res = s;\n  for (let i = 0; i < c.length; i++) {\n    let index = res.indexOf(c[i]);\n    if (index!== -1) {\n      res = res.slice(0, index) + res.slice(index + 1);\n    }\n  }\n  return [res, s.startsWith(res)];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  return lst.reduce((res, num) => {\n    let oddDigits = 0;\n    let digitCount = 0;\n    for (let i = 0; i < num.length; i++) {\n      digitCount++;\n      if (num[i] % 2 === 1) {\n        oddDigits++;\n      }\n    }\n    res.push(`the number of odd elements ${oddDigits} in the str4ng ${digitCount} of the ${digitCount}put.`);\n    return res;\n  }, []);\n};\n\n/*\nGiven a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount2 = (lst) => {\n  return lst.reduce((res, num) => {\n    let evenDigits = 0;\n    let digitCount = 0;\n    for (let i = 0; i < num.length; i++) {\n      digitCount++;\n      if (num[i] % 2 === 0) {\n        evenDigits++;\n      }\n    }\n    res.push(`the number of even elements ${evenDigits} in the str4ng ${digitCount} of the ${digitCount}put.`);\n    return res;\n  }, []);\n};\n\nmodule.exports = curiousCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  let sum = 0\n  let minSum = Infinity\n\n  let minSumIndex = -1\n  let minSumNums = []\n\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = sum + nums[i]\n\n    if (currentSum < 0) {\n      currentSum = 0\n    }\n\n    sum = currentSum\n\n    if (sum < minSum) {\n      minSum = sum\n      minSumIndex = i\n      minSumNums = [minSum]\n    } else if (sum === minSum) {\n      minSumNums.push(minSum)\n    }\n  }\n\n  return minSumNums\n}\n\nconsole.log(minuteSubArraySum([-1, -2, -3]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < grid.length) {\n    while (j < grid[i].length) {\n      if (grid[i][j] === 1) {\n        count++;\n        grid[i][j] = 0;\n        if (count === capacity) {\n          return count;\n        }\n      }\n      j++;\n    }\n    j = 0;\n    i++;\n  }\n  return count;\n};\n\nconsole.log(soapFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1));\nconsole.log(soapFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2));\nconsole.log(soapFill([[0,0,0], [0,0,0]], 5));\nconsole.log(soapFill([[0,0,0], [0,0,0]], 10));\nconsole.log(soapFill([[0,0,0], [0,0,0], [1,1,1], [1,1,1], [0,0,0], [0,0,0], [1,1,1], [1,1,1], [0,0,0], [0,0,0]], 20));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortMethod = (arr, method) => {\n    if (method === 'binary') {\n      return sortBinaryArray(arr);\n    } else {\n      return sortDecimalArray(arr);\n    }\n  }\n\n  return sortMethod(arr, 'binary');\n};\n\nconst sortBinaryArray = (arr) => {\n  let tempArr = [];\n  let resultArr = [];\n  let i;\n  let j;\n  let current;\n  let currentIndex = 0;\n  let currentLength;\n  let sortedArr = [];\n\n  for (i = 0; i < arr.length; i++) {\n    current = arr[i];\n    currentIndex = Math.floor(current);\n    currentLength = current.toString().length;\n    tempArr = tempArr.concat([currentIndex]);\n  }\n\n  for (i = 0; i < tempArr.length; i++) {\n    if (tempArr[i] === 0) {\n      tempArr[i] = 1;\n    }\n  }\n\n  for (i = 0; i < tempArr.length; i++) {\n    resultArr = resultArr.concat(tempArr.slice(i, i + currentLength));\n  }\n\n  return resultArr;\n};\n\nconst sortDecimalArray = (arr) => {\n  let tempArr = [];\n  let resultArr = [];\n  let i;\n  let j;\n  let current;\n  let currentIndex;\n  let currentLength;\n  let sortedArr = [];\n\n  for (i = 0; i < arr.length; i++) {\n    current = parseInt(arr[i], 10);\n    currentIndex = current;\n    currentLength = current.toString().length;\n    tempArr = tempArr.concat([currentIndex]);\n  }\n\n  for (i = 0; i < tempArr.length; i++) {\n    if (tempArr[i] === 0) {\n      tempArr[i] = 1;\n    }\n  }\n\n  for (i = 0; i < tempArr.length; i++) {\n    resultArr = resultArr.concat(tempArr.slice(i, i + currentLength));\n  }\n\n  return resultArr;\n};\n\nconsole.log('Sort Array:', sortArray([1, 5, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  let output = []\n  let counter = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[^A-Za-z]+/)) {\n      counter++\n    }\n    if (counter === n) {\n      output.push(s.substr(i, s.length))\n      counter = 0\n    }\n  }\n  return output\n}\n\nconsole.log(choiceDiscussion(\"Mary had a little lamb\", 4))\nconsole.log(choiceDiscussion(\"Mary had a little lamb\", 3))\nconsole.log(choiceDiscussion(\"simple white space\", 2))\nconsole.log(choiceDiscussion(\"Hello world\", 4))\nconsole.log(choiceDiscussion(\"Uncle sam\", 3))\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  const letters = word.split(\"\");\n  for (let i = letters.length - 2; i >= 0; i--) {\n    if (isVowel(letters[i]) && isConsonant(letters[i + 1])) {\n      return letters[i + 1];\n    }\n  }\n  return \"\";\n}\n\nfunction isVowel(letter) {\n  return (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\");\n}\n\nfunction isConsonant(letter) {\n  return (letter === \"b\" || letter === \"c\" || letter === \"d\" || letter === \"f\" || letter === \"g\" || letter === \"h\" || letter === \"j\" || letter === \"k\" || letter === \"l\" || letter === \"m\" || letter === \"n\" || letter === \"p\" || letter === \"q\" || letter === \"r\" || letter === \"s\" || letter === \"t\" || letter === \"v\" || letter === \"w\" || letter === \"x\" || letter === \"y\" || letter === \"z\");\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  const l = lst.length\n  let i = 0\n  let c = 0\n\n  const match = (l, i) => {\n    const j = l - 1\n\n    while (i < j) {\n      if (lst[i] === '(' && lst[j] === ')') {\n        i++\n        j--\n      } else if (lst[i] === ')' && lst[j] === '(') {\n        i++\n        j--\n      } else {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  while (i < l) {\n    if (lst[i] === '(') {\n      if (!match(l, i)) {\n        return false\n      }\n      i++\n    } else {\n      if (lst[i] === ')') {\n        if (!match(l, i)) {\n          return false\n        }\n        i++\n      }\n    }\n  }\n\n  return true\n}\n\nconsole.log(catchParens(['(())()', ')']))\nconsole.log(catchParens(['())', '()']))\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  if (arr.length === 0) {\n    return []\n  }\n  let result = []\n  for (let i = 0; i < arr.length; i += 1) {\n    result.push(arr[i])\n    if (result.length === k) {\n      break\n    }\n  }\n  return result\n}\n\nconst maximal2 = (arr, k) => {\n  let res = []\n  let length = arr.length\n  let len = k\n  if (k > length) {\n    return res\n  }\n  let i = 0\n  while (i < length) {\n    res.push(arr[i])\n    i += 1\n  }\n  for (let i = i + 1; i < length; i += 1) {\n    let num = arr[i]\n    let index = 0\n    while (index < res.length && res[index] < num) {\n      index += 1\n    }\n    if (index === res.length) {\n      res.push(num)\n    }\n  }\n  return res\n}\n\nconst maximal3 = (arr, k) => {\n  let res = []\n  let len = arr.length\n  let len2 = k\n  if (len2 > len) {\n    return res\n  }\n  for (let i = 0; i < len2; i += 1) {\n    res.push(arr[i])\n  }\n  let index = 0\n  for (let i = 0; i < len; i += 1) {\n    let num = arr[i]\n    while (index < res.length && res[index] < num) {\n      index += 1\n    }\n    if (index === res.length) {\n      res.push(num)\n    }\n  }\n  return res\n}\n\nexport default maximal\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1])); // 12\nconsole.log(solution([3, 3, 3, 3, 3])); // 9\nconsole.log(solution([30, 13, 24, 321])); //0<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n    if (arr.length <= k) return 0;\n    const lastElement = arr[arr.length - 1];\n    const result = 0;\n    const arr2 = arr.slice(0, k - 1);\n    const nums = arr2.map(i => i - lastElement);\n    const sum = nums.reduce((a, b) => a + b);\n    return sum;\n};\n\nexport {lendElement};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  let result = [];\n  let cur = n;\n  while (cur > 1) {\n    if (cur % 2 === 1) {\n      cur = (cur - 1) / 2;\n      result.push(cur);\n    } else {\n      cur = 3 * cur + 1;\n      result.push(cur);\n    }\n  }\n  result.push(cur);\n  return result;\n};\n\nmodule.exports = catchOddCollatz;<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) return false\n  const dateArray = date.split(\"-\")\n  const days = dateArray[2].split(\"/\")\n  const months = dateArray[1].split(\"/\")\n\n  const validDate = months[1] === \"01\" && months[2] === \"01\"\n  const validMonth = months[0] === \"01\" || months[0] === \"04\" || months[0] === \"06\" || months[0] === \"09\" || months[0] === \"11\"\n  const validDay = days[0] === \"01\" || days[0] === \"02\" || days[0] === \"03\" || days[0] === \"04\" || days[0] === \"05\" || days[0] === \"06\" || days[0] === \"07\" || days[0] === \"08\" || days[0] === \"09\" || days[0] === \"10\" || days[0] === \"11\" || days[0] === \"12\" || days[0] === \"13\" || days[0] === \"14\" || days[0] === \"15\" || days[0] === \"16\" || days[0] === \"17\" || days[0] === \"18\" || days[0] === \"19\" || days[0] === \"20\" || days[0] === \"21\" || days[0] === \"22\" || days[0] === \"23\" || days[0] === \"24\" || days[0] === \"25\" || days[0] === \"26\" || days[0] === \"27\" || days[0] === \"28\" || days[0] === \"29\" || days[0] === \"30\" || days[0] === \"31\"\n  return validDate && validDay && validMonth\n}\n\n/*\n  You have to write a function which validates a given password string and\n  returns true if the password is valid otherwise false.\n  The password is valid if it meets the following rules:\n  1. The password should be more than 8 characters long.\n  2. All the characters in the password should be upper case letters.\n  3. All the characters in the password should be lower case letters.\n  4. All the characters in the password should be numbers.\n  5. The character '*' can be used to match multiple characters.\n  6. The character '-' can be used to match multiple characters.\n  7. The character '_' can be used to match multiple characters.\n  8. The character '.' can be used to match multiple characters.\n  9. The character '!' can be used to match multiple characters.\n  10. The character '@' can be used to match multiple characters.\n  11. The character '#' can be used to match multiple characters.\n  12. The character '$' can be used to match multiple characters.\n  13. The character '%' can be used to match multiple characters.\n  14. The character '^' can be used to match multiple characters.\n  15. The character '&' can be used to match multiple characters.\n  16. The character '(' can be used to match multiple characters.\n  17. The character ')' can be used to match multiple characters.\n  18. The character '?' can be used to match multiple characters.\n  19. The character '+' can be used to match multiple characters.\n  20. The character '{' can be used to match multiple characters.\n  21. The character '}' can be used to match multiple characters.\n  22. The character '|' can be used to match multiple characters.\n  23. The character '~' can be used to match multiple characters.\n  24. The character '=', ':', ';', '!', '@', '#', '$', '%', '^', '&', '(', ')', '?', '+', '{', '}', '|', '~', '.' and '_' can not be used to match a character.\n  24. The character'' can not be used to match a character.\n  25. The character '\\\"' can not be used to match a character.\n  26. The character '\\'' can not be used to match a character.\n  27. The character ',' can not be used to match a character.\n  28. The character '<' can not be used to match a character.\n  29. The character '>' can not be used to match a character.\n  30. The character '@' can not be used to match a character.\n  31. The character '?' can not be used to match a character.\n  32. The character '\\'' can not be used to match a character.\n  33. The character '\\\"' can not be used to match a character.\n  34. The character ',' can not be used to match a character.\n  35. The character '.' can not be used to match a character.\n  36. The character ';' can not be used to match a character.\n  37. The character '!' can not be used to match a character.\n  38. The character '@' can not be used to match a character.\n  39. The character '#' can not be used to match a character.\n  40. The character '$' can not be used to match a character.\n  41. The character '%' can not be used to match a character.\n  42. The character '^' can not be used to match a character.\n  43. The character '&' can not be used to match a character.\n  44. The character '(' can not be used to match a"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  const words = txt.split(/\\s+/).filter((w) => w.length > 0)\n  const map = new Map()\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 1) {\n      map.set(words[i], i)\n    }\n  }\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const wordNum = map.get(word)\n    if (wordNum) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst connectedWords = (txt) => {\n  const words = txt.split(/\\s+/).filter((w) => w.length > 0)\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 1) {\n      result.push(words[i])\n    }\n  }\n  return result\n}\n\nexport {\n  connectedWords,\n  disconnectedWords\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  if (lst.length === 1) return true;\n  return lst.reduce((acc, curr, idx) => {\n    if (acc && curr!== acc[idx - 1]) return false;\n    return acc === curr;\n  }, true);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  //if interval1 is empty, the overlap is false\n  if (interval1[0] === undefined || interval1[1] === undefined) {\n    return 'NO'\n  }\n  //if interval2 is empty, the overlap is false\n  if (interval2[0] === undefined || interval2[1] === undefined) {\n    return 'NO'\n  }\n\n  //if both intervals are not empty, we know they overlap\n  if (interval1[0] <= interval2[1] && interval2[0] <= interval1[1]) {\n    return 'YES'\n  }\n\n  //if not, check if the length of overlap is a prime number\n  //if not, return 'NO'\n  if (!isPrime(Math.abs(interval1[0] - interval2[1]))) {\n    return 'NO'\n  }\n  if (!isPrime(Math.abs(interval2[0] - interval1[1]))) {\n    return 'NO'\n  }\n}\n\n/*\n  [input/output] samples:\n  overlap((-2, -1), (-2, 0)) ==> \"YES\"\n  overlap((-3, -1), (-3, 0)) ==> \"YES\"\n  overlap((-4, -3), (-3, -2)) ==> \"YES\"\n  overlap((-3, -1), (-2, -1)) ==> \"YES\"\n  overlap((-3, -1), (-2, 0)) ==> \"YES\"\n  overlap((-4, -3), (-3, -2)) ==> \"YES\"\n  overlap((-4, -3), (-3, -2)) ==> \"YES\"\n  overlap((-2, -1), (-3, -1)) ==> \"YES\"\n  overlap((-2, -1), (-1, 0)) ==> \"YES\"\n  overlap((-3, -1), (-2, -1)) ==> \"YES\"\n  overlap((-3, -1), (-2, -1)) ==> \"YES\"\n  overlap((-4, -3), (-2, -1)) ==> \"YES\"\n  overlap((-2, -1), (-3, -1)) ==> \"YES\"\n  overlap((-4, -3), (-3, -2)) ==> \"YES\"\n  overlap((-2, -1), (-3, -1)) ==> \"YES\"\n  overlap((-4, -3), (-3, -2)) ==> \"YES\"\n  overlap((-2, -1), (-3, -1)) ==> \"YES\"\n  overlap((-4, -3), (-2, -1)) ==> \"YES\"\n  overlap((-3, -1), (-3, -2)) ==> \"YES\"\n  overlap((-4, -3), (-3, -2)) ==> \"YES\"\n  overlap((-2, -1), (-2, 0)) ==> \"YES\"\n  overlap((-3, -1), (-2, -1)) ==> \"YES\"\n  overlap((-2, 0), (-3, -1)) ==> \"YES\"\n  overlap((-2, 0), (-3, -1)) ==> \"YES\"\n  overlap((-2, -1), (-2, -1)) ==> \"YES\"\n  overlap((-3, -1), (-2, 0)) ==> \"YES\"\n  overlap((-2, -1), (-3, -1)) ==> \"YES\"\n  overlap((-2, -1), (-3, -1)) ==> \"YES\"\n  overlap((-2, 0), (-2, -1)) ==> \"YES\"\n  overlap((-2, -1), (-2, -1)) ==> \"YES\"\n  overlap((-3, -1), (-2, -1)) ==> \"YES\"\n  overlap((-4, -3), (-2, -1)) ==> \"YES\"\n  overlap((-2, -1), (-4, -3)) ==> \"YES\"\n  overlap((-2, -1), (-4, -3)) ==> \"YES\"\n  overlap((-2, 0), (-4, -3)) ==> \"YES\"\n  overlap((-2, 0), (-4, -3)) ==> \"YES\"\n  overlap((-2, -1), (-4, -3)) ==> \"YES\"\n  overlap((-2, -1), (-4, -3)) ==> \"YES\"\n  overlap((-2, -1), (-4, -3)) ==> \"YES\"\n  overlap((-2, 0), (-4, -3)) ==> \"YES\"\n  overlap((-4, -3), (-2, -1)) ==> \"YES\"\n  overlap((-4, -3), (-2, 0)) ==> \"YES\"\n  overlap((-4, -3), (-2, -1)) ==> \"YES\"\n  overlap((-4, -3), (-2, -1)) ==> \"YES\"\n  overlap((-4, -3), (-2, -1)) ==> \"YES\"\n  overlap((-4, -3), (-2, -1)) ==> \"YES\"\n  overlap((-2, -1), (-4, -3)) ==>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map((item) => {\n    const sign = 1\n    if (item < 0) {\n      sign = -1\n    }\n    return sign\n  })\n  const result = signs.reduce((sum, item) => {\n    return sum + Math.abs(item)\n  }, 0)\n  return result\n}\n\nmodule.exports = goadSigns\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const N = grid.length\n  const [n, m] = grid[0].length\n  const map = {}\n  const lst = []\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      let value = grid[i][j]\n      if (!map.hasOwnProperty(value)) {\n        map[value] = []\n      }\n      map[value].push([i, j])\n    }\n  }\n\n  let index = 1\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      let v = grid[i][j]\n      if (index <= k) {\n        lst.push(v)\n        for (let [i, j] of map[v]) {\n          map[v][index].push([i, j])\n          index++\n        }\n      }\n    }\n  }\n\n  return lst\n}\n\nexport { minutePath }\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri1 = () => {\n    let a = 1\n    let b = 1\n    return a\n  }\n  const tri2 = (n) => {\n    if (n % 2 === 0) {\n      return tri1(n / 2)\n    } else {\n      let a = tri1(n / 2)\n      let b = tri1(n / 2 + 1)\n      return [a, b, b + a]\n    }\n  }\n  return tri2(n)\n}\n\nconst tri = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      c = b + a\n      b = a\n      a = c\n    } else {\n      d = a + b + c\n      b = c\n      a = d\n    }\n  }\n  return [a, b, c, d]\n}\n\nconst tri = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      c = b + a\n      b = a\n      a = c\n      f = d + e\n      d = e\n      e = f\n    } else {\n      d = a + b + c\n      b = c\n      a = d\n      f = e + d + b\n      e = f\n    }\n  }\n  return [a, b, c, d, e, f]\n}\n\ntri(4)<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  return n%2? n : 0;\n}\n\ndigit(1)\ndigit(4)\ndigit(235)\ndigit(23)\ndigit(1)\ndigit(1)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23)\ndigit(235)\ndigit(23"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = new Set()\n  const result = []\n  let current = string\n  while (current.length > 0) {\n    let next = current[0]\n    if (brackets.has(next)) {\n      current = current.slice(1)\n      continue\n    }\n    brackets.add(next)\n    result.push(next)\n    current = current.slice(1)\n  }\n  return result.length > 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  return lst.map(n => Math.round(Math.pow(n,2))).reduce((a,b) => a+b,0);\n};\n\nconsole.log(summarizeSquare([-2.4,1,1]));\n\n/*\n  You are given two lists of numbers.\n  Each list contains the numbers of one set.\n  The output should be the sum of the numbers in the second list,\n  rounded to the upper int(Ceiling) first.\n  Examples:\n  For lst1 = [1,2,3] and lst2 = [1,4,9] the output should be 14\n  For lst1 = [1,3,5,7] and lst2 = [1,4,9] the output should be 84\n  For lst1 = [1,3,5,7] and lst2 = [1,4,9,9] the output should be 54\n  For lst1 = [1,3,5,7] and lst2 = [1,4,9,9,9] the output should be 28\n  For lst1 = [1.4,4.2,0] and lst2 = [1,4,9] the output should be 29\n  For lst1 = [-2.4,1,1] and lst2 = [1,4,9] the output should be 6\n  */\nconst summarizePair = (lst1,lst2) => {\n  return lst2.map(n => Math.round(Math.pow(n,2))).reduce((a,b) => a+b,0);\n};\n\nconsole.log(summarizePair([1,2,3],[1,4,9]));\nconsole.log(summarizePair([1,3,5,7],[1,4,9]));\nconsole.log(summarizePair([1,3,5,7],[1,4,9,9]));\nconsole.log(summarizePair([1,3,5,7],[1,4,9,9,9]));\nconsole.log(summarizePair([1.4,4.2,0],[1,4,9]));\nconsole.log(summarizePair([-2.4,1,1],[1,4,9]));\n\n\n/*\n  You are given two lists of numbers.\n  Each list contains the numbers of one set.\n  The output should be the sum of the squares of the numbers in the second list,\n  rounded to the upper int(Ceiling) first.\n  Examples:\n  For lst1 = [1,2,3] and lst2 = [1,4,9] the output should be 14\n  For lst1 = [1,3,5,7] and lst2 = [1,4,9,9] the output should be 54\n  For lst1 = [1,3,5,7] and lst2 = [1,4,9,9,9] the output should be 28\n  For lst1 = [1.4,4.2,0] and lst2 = [1,4,9] the output should be 29\n  For lst1 = [-2.4,1,1] and lst2 = [1,4,9] the output should be 6\n  */\nconst summarizeSquarePair = (lst1,lst2) => {\n  return lst2.map(n => Math.round(Math.pow(n,2))).reduce((a,b) => a+b,0);\n};\n\nconsole.log(summarizeSquarePair([1,2,3],[1,4,9]));\nconsole.log(summarizeSquarePair([1,3,5,7],[1,4,9,9]));\nconsole.log(summarizeSquarePair([1,3,5,7],[1,4,9,9,9]));\nconsole.log(summarizeSquarePair([1.4,4.2,0],[1,4,9]));\nconsole.log(summarizeSquarePair([-2.4,1,1],[1,4,9]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (isAlphabet(lastChar)) {\n    return isWord(txt.slice(0, -1)) === false;\n  }\n  return false;\n};\n\n/**\n  Determine if a given string has a word boundary at the specified position.\n  Examples:\n  hasWordBoundary(\"\") ➞ false\n  hasWordBoundary(\"apple pie\") ➞ false\n  hasWordBoundary(\"apple pie \") ➞ false\n  hasWordBoundary(\"apple pie \") ➞ true\n  */\nconst hasWordBoundary = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (isAlphabet(lastChar)) {\n    return isWord(txt.slice(0, -1)) === true;\n  }\n  return false;\n};\n\nconst hasLetters = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlphabet(lastChar);\n};\n\n/**\n  Determine if a given string has a number at the specified position.\n  Examples:\n  hasNumber(\"\") ➞ false\n  hasNumber(\"apple pie\") ➞ false\n  hasNumber(\"apple pie \") ➞ false\n  hasNumber(\"apple pie \") ➞ false\n  hasNumber(\"3\") ➞ true\n  hasNumber(\"3a\") ➞ true\n  */\nconst hasNumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (isNumeric(lastChar)) {\n    return true;\n  }\n  return false;\n};\n\n/**\n  Determine if a given string has a space at the specified position.\n  Examples:\n  hasSpace(\"\") ➞ false\n  hasSpace(\"apple pie\") ➞ false\n  hasSpace(\"apple pie \") ➞ true\n  */\nconst hasSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar === \" \";\n};\n\n/**\n  Determine if a given string has a space at the specified position.\n  Examples:\n  hasSpace(\"\") ➞ false\n  hasSpace(\"apple pie\") ➞ false\n  hasSpace(\"apple pie \") ➞ true\n  */\nconst hasCapitalLetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isCapital(lastChar);\n};\n\n/**\n  Determine if a given string has a capital letter at the specified position.\n  Examples:\n  hasCapitalLetter(\"\") ➞ false\n  hasCapitalLetter(\"apple pie\") ➞ false\n  hasCapitalLetter(\"apple pie \") ➞ true\n  */\nconst hasLowerCaseLetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isLowerCase(lastChar);\n};\n\n/**\n  Determine if a given string has an uppercase letter at the specified position.\n  Examples:\n  hasUpperCaseLetter(\"\") ➞ false\n  hasUpperCaseLetter(\"apple pie\") ➞ false\n  hasUpperCaseLetter(\"apple pie \") ➞ false\n  */\nconst hasUpperCaseLetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isUpperCase(lastChar);\n};\n\n/**\n  Determine if a given string has an alphabetical character at the specified position.\n  Examples:\n  hasAlphabeticalChar(\"\") ➞ false\n  hasAlphabeticalChar(\"apple pie\") ➞ false\n  hasAlphabeticalChar(\"apple pie \") ➞ true\n  */\nconst hasAlphabeticalChar = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlphabet(lastChar);\n};\n\n/**\n  Determine if a given string has a word at the specified position.\n  Examples:\n  hasWord(\"\") ➞ false\n  hasWord(\"apple pie\") ➞ true\n  hasWord(\"apple pie \") ➞ false\n  */\nconst hasWord = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isWord(txt.slice(0, -1));\n};\n\n/**\n  Determine if a given string has a word boundary at the specified position.\n  Examples:\n  hasWordBoundary(\"\") ➞ false\n  hasWordBoundary(\"apple pie\") ➞ false\n  hasWordBoundary(\"apple pie \") ➞ false\n  hasWordBoundary(\"apple pie \") ➞ true\n  */\nconst hasWordBoundary = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isWord(txt.slice(0, -1));\n};\n\n/**\n  Determine if a given string has a letter at the specified position.\n  Examples:\n  hasLetter(\"\") ➞ false\n  hasLetter(\"apple pie\") ➞ true\n  hasLetter(\"apple pie \") ➞ false\n  */\nconst hasLetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isLetter(lastChar);\n};\n\n/**\n  Determine if a given string has a numeric character at the specified position.\n  Examples:\n  hasNumber(\"\") ➞ false\n  hasNumber(\"apple pie\") ➞ false\n  hasNumber(\"apple pie \") ➞ false\n  hasNumber(\"3\") ➞ true\n  hasNumber(\"3a\") ➞ true\n  */\nconst hasNumericChar = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isNumeric(lastChar);\n};\n\n/**\n  Determine if a given string has a space at the specified position."}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  if (arr.length === 1) {\n    return -1\n  }\n\n  let low = 0\n  let high = arr.length - 1\n\n  while (low < high) {\n    const middle = Math.floor((low + high) / 2)\n    const val = arr[middle]\n\n    if (val < arr[middle - 1]) {\n      high = middle - 1\n    } else if (val > arr[middle + 1]) {\n      low = middle + 1\n    } else {\n      return middle\n    }\n  }\n  return -1\n}\n\nexport default canStage\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  let max = 0\n  let min = Number.MAX_VALUE\n  for (let elem of lst) {\n    if (elem > max) max = elem\n    if (elem < min) min = elem\n  }\n  if (max < 0) max = 0\n  if (min > 0) min = 0\n  return [min, max]\n}\n\nmodule.exports = {\n  bigSmallIntegers\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  const type = typeof a\n  if (type === 'number') {\n    if (typeof b === 'number') {\n      return a > b? a : b\n    } else {\n      return null\n    }\n  } else if (type ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b\n    } else {\n      return null\n    }\n  } else if (type === 'boolean') {\n    return a > b? a : b\n  } else {\n    return null\n  }\n}\n\nconst compareTwo = (a, b) => {\n  const type = typeof a\n  if (type === 'number') {\n    if (typeof b === 'number') {\n      return a > b? a : b\n    } else {\n      return b > a? b : a\n    }\n  } else if (type ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b\n    } else {\n      return b > a? b : a\n    }\n  } else if (type === 'boolean') {\n    return a > b? a : b\n  } else {\n    return null\n  }\n}\n\nexport { compareOne, compareTwo }\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  const sum = n;\n  const numEven = (n / 2) | 0;\n  const numOdd = n - numEven;\n  const sumEven = sum - numEven;\n  const sumOdd = sum - numOdd;\n\n  return sumEven === sumOdd;\n};\n\nexport default isAdequateToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  if (n < 0) {\n    return 0;\n  } else if (n === 0 || n === 1) {\n    return 1;\n  }\n\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n\n  return sum;\n}\n\nconst factorial = (n) => {\n  if (n < 0) {\n    return 0;\n  } else if (n === 0 || n === 1) {\n    return 1;\n  }\n\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum *= i;\n  }\n\n  return sum;\n}\n\nconst isPrime = (n) => {\n  if (n <= 0) {\n    return false;\n  } else if (n === 1 || n === 2) {\n    return true;\n  }\n\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n\n  return true;\n}\n\nconst isPalindrome = (n) => {\n  let s = n + '';\n  return n === s.split('').reverse().join('');\n}\n\nconst sumDigits = (n) => {\n  return n.toString(10).split('').reduce((a, b) => a + b, 0);\n}\n\nconst gcd = (n, m) => {\n  if (m === 0) {\n    return n;\n  }\n\n  return gcd(m, n % m);\n}\n\nconst lcm = (n, m) => {\n  return n / gcd(n, m) * m;\n}\n\nconst findGreatestCommonDivisor = (n, m) => {\n  return gcd(n, m);\n}\n\nconst findGreatestCommonDivisor2 = (n, m) => {\n  const a = n;\n  const b = m;\n  const c = 1;\n\n  let max = 0;\n\n  while (a > 0 && b > 0) {\n    if (a > b) {\n      c = b;\n      b = a % b;\n    } else {\n      c = a;\n      a = b % a;\n    }\n\n    if (c > max) {\n      max = c;\n    }\n  }\n\n  return max;\n}\n\nconst isPowerOfTwo = (n) => {\n  return (n & (n - 1)) === 0;\n}\n\nconst sumDigits2 = (n) => {\n  let s = n.toString(10);\n  const len = s.length;\n  let res = 0;\n  for (let i = len - 1; i >= 0; i--) {\n    res += s[i] - '0';\n  }\n\n  return res;\n}\n\nconst nextPowerOfTwo = (n) => {\n  if (isPowerOfTwo(n)) {\n    return n;\n  }\n\n  return n > 0? (n + 1) : 1;\n}\n\nconst findSquareRoot = (n) => {\n  let i = 1;\n  let sqrt = 0;\n\n  while (n > 1) {\n    sqrt += i;\n    n = n - i * i;\n    i++;\n  }\n\n  return sqrt;\n}\n\nconst findCubeRoot = (n) => {\n  let i = 1;\n  let cbrt = 0;\n\n  while (n > 1) {\n    cbrt += i;\n    n = n - i * i * i;\n    i++;\n  }\n\n  return cbrt;\n}\n\nconst findPowOfTen = (n) => {\n  let i = 1;\n  let pow = 0;\n\n  while (n > 1) {\n    pow += i;\n    n = n - i * i * i * i;\n    i++;\n  }\n\n  return pow;\n}\n\nconst findPowOfFive = (n) => {\n  let i = 1;\n  let pow = 0;\n\n  while (n > 1) {\n    pow += i;\n    n = n - i * i * i * i * i;\n    i++;\n  }\n\n  return pow;\n}\n\nconst isPowOfFive = (n) => {\n  return n > 0 && n % 5 === 0;\n}\n\nconst isPowOfTen = (n) => {\n  return n > 0 && n % 10 === 0;\n}\n\nconst isPowOfTwo = (n) => {\n  return n > 0 && n % 2 === 0;\n}\n\nconst isPowOfTenPowTwo = (n) => {\n  return n > 0 && n % 10 === 0 && n % 2 === 0;\n}\n\nconst isPowOfFivePowTwo = (n) => {\n  return n > 0 && n % 5 === 0 && n % 2 === 0;\n}\n\nconst isPowOfTenPowThree = (n) => {\n  return n > 0 && n % 10 === 0 && n % 3 === 0;\n}\n\nconst isPowOfFivePowThree = (n) => {\n  return n > 0 && n % 5 === 0 && n % 3 === 0;\n}\n\nconst isPowOfTenPowFive = (n) => {\n  return n > 0 && n % 10 === 0 && n % 5 === 0;\n}\n\nconst isPowOfFivePowFive = (n) => {\n  return n > 0 && n % 5 === 0 && n % 5 === 0;\n}\n\nconst isPowOfTenPowSix = (n) => {\n  return n > 0 && n % 10 === 0 && n % 6 === 0;\n}\n\nconst isPowOfFivePowSix = (n) => {\n  return n > 0 && n % 5 === 0 && n % 6 === 0;\n}\n\nconst isPowOfTenPowSeven = (n"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/-+/g, '-')\n    text = text.replace(/\\s+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpace(\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example1\"\n  fixSpace(\" Example 2\") == \"Example2\"\n  fixSpace(\" Example   3\") == \"Example3\"\n  fixSpace(\"Example 2\") == \"Example_2\"\n  fixSpace(\" Example   3\") == \"Example_3\"\n  fixSpace(\"Example 2\") == \"Example-2\"\n  fixSpace(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpace = (text) => {\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/-+/g, '-')\n    text = text.replace(/\\s+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpace(\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example1\"\n  fixSpace(\" Example 2\") == \"Example2\"\n  fixSpace(\" Example   3\") == \"Example3\"\n  fixSpace(\"Example 2\") == \"Example_2\"\n  fixSpace(\" Example   3\") == \"Example_3\"\n  fixSpace(\"Example 2\") == \"Example-2\"\n  fixSpace(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaceAndReplace = (text) => {\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/-+/g, '-')\n    text = text.replace(/\\s+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpace(\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example1\"\n  fixSpace(\" Example 2\") == \"Example2\"\n  fixSpace(\" Example   3\") == \"Example3\"\n  fixSpace(\"Example 2\") == \"Example_2\"\n  fixSpace(\" Example   3\") == \"Example_3\"\n  fixSpace(\"Example 2\") == \"Example-2\"\n  fixSpace(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaceAndReplace2 = (text) => {\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/-+/g, '-')\n    text = text.replace(/\\s+/g, '_')\n    return text\n}\n\nconst fixSpaceAndReplace3 = (text) => {\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/-+/g, '-')\n    text = text.replace(/\\s+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpace(\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example1\"\n  fixSpace(\" Example 2\") == \"Example2\"\n  fixSpace(\" Example   3\") == \"Example3\"\n  fixSpace(\"Example 2\") == \"Example_2\"\n  fixSpace(\" Example   3\") == \"Example_3\"\n  fixSpace(\"Example 2\") == \"Example-2\"\n  fixSpace(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaceAndReplace4 = (text) => {\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/-+/g, '-')\n    text = text.replace(/\\s+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpace(\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example1\"\n  fixSpace(\" Example 2\") == \"Example2\"\n  fixSpace(\" Example   3\") == \"Example3\"\n  fixSpace(\"Example 2\") == \"Example_2\"\n  fixSpace(\" Example   3\") == \"Example_3\"\n  fixSpace(\"Example 2\") == \"Example-2\"\n  fixSpace(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaceAndReplace5 = (text) => {\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/-+/g, '-')\n    text = text.replace(/\\s+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpace(\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example1\"\n  fixSpace(\" Example 2\") == \"Example2\"\n  fixSpace(\" Example   3\") == \"Example3\"\n  fixSpace(\"Example 2\") == \"Example_2\"\n  fixSpace(\" Example   3\") == \"Example_3\"\n  fixSpace(\"Example 2\") == \"Example-2\"\n  fixSpace(\" Example   3\") == \"Example-3\"\n"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let invalid_chars = /[^a-zA-Z0-9.]/\n  if(file_name.length > 3) return 'No'\n  if(file_name.indexOf('.') == -1) return 'No'\n  if(file_name.match(invalid_chars) == null) return 'Yes'\n  return 'No'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  let invalid_chars = /[^a-zA-Z0-9.]/\n  if(file_name.length > 3) return 'No'\n  if(file_name.indexOf('.') == -1) return 'No'\n  if(file_name.match(invalid_chars) == null) return 'Yes'\n  return 'No'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  let invalid_chars = /[^a-zA-Z0-9.]/\n  if(file_name.length > 3) return 'No'\n  if(file_name.indexOf('.') == -1) return 'No'\n  if(file_name.match(invalid_chars) == null) return 'Yes'\n  return 'No'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck4 = (file_name) => {\n  let invalid_chars = /[^a-zA-Z0-9.]/\n  if(file_name.length > 3) return 'No'\n  if(file_name.indexOf('.') == -1) return 'No'\n  if(file_name.match(invalid_chars) == null) return 'Yes'\n  return 'No'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck5 = (file_"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  if(lst.length === 0) {\n    return 0;\n  }\n  \n  let sum = 0;\n  \n  lst.forEach( (e) => {\n    if(Math.floor(e) % 3 === 0 && Math.floor(e) % 4!== 0) {\n      sum += e*e;\n    }\n  });\n  \n  return sum;\n};\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall append \"i\" to the string entry. The \n  function shall then return the string entry with all \"i\"s appended. \n  \n  Examples:\n  For lst = [\"The\",\"quick\",\"red\",\"fox\",\"jumped\"] the output should be \"Thequickredfoxjumped\"\n  For lst = [\"The\",\"quick\",\"red\",\"fox\",\"jumped\"] the output should be \"Thequickredfoxjumped\"\n  For lst = [\"The\",\"quick\",\"red\",\"fox\",\"jumped\"] the output should be \"Thequickredfoxjumped\"\n  */\nconst summarizeString = (lst) => {\n  if(lst.length === 0) {\n    return \"\";\n  }\n  \n  let sum = \"\";\n  \n  lst.forEach( (e) => {\n    sum += e + \"i\";\n  });\n  \n  return sum;\n};\n\n// tests\ndescribe(\"summarize\", function () {\n  it(\"should return a list of squares\", function () {\n    let list = [1,2,3];\n    \n    let sum = summarizeSquare(list);\n    expect(sum).toEqual(6);\n  });\n  \n  it(\"should return a list of cubes\", function () {\n    let list = [1,2,3];\n    \n    let sum = summarizeCube(list);\n    expect(sum).toEqual(18);\n  });\n  \n  it(\"should return a list of cubes\", function () {\n    let list = [1,2,3];\n    \n    let sum = summarizeString(list);\n    expect(sum).toEqual(\"Thequickredfoxjumped\");\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  let words = sentence.split(' ')\n  let result = []\n  let lengths = []\n\n  words.forEach(word => {\n    let length = word.length\n    lengths.push(length)\n    if (lengths.indexOf(length) === -1) {\n      result.push(word)\n    }\n  })\n  return result\n}\n\nmodule.exports = bibleInPrisonTerm\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = [x, n];\n  const i = numerator.indexOf('/');\n  const [n1, n2] = [numerator.slice(0, i), numerator.slice(i + 1)];\n  const f = parseInt(n1, 10) / parseInt(n2, 10);\n  return f === 0 || f === 1? false : f;\n};\n\n// console.log(simplify(\"1/5\", \"5/1\"));\n// console.log(simplify(\"1/6\", \"2/1\"));\n// console.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  let sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    sorted.push(nums[i]);\n  }\n  sorted = sorted.sort(function(a, b) {\n    let asum = a + a, bsum = b + b;\n    let aNum = Math.floor(asum), bNum = Math.floor(bsum);\n    if (aNum === bNum) {\n      return a - b;\n    }\n    return aNum - bNum;\n  });\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  const output = [];\n  for (let i = 0; i < nums.length; i += 1) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 3) {\n      output.push(nums[i]);\n    }\n  }\n  return output.length;\n};\n\nconsole.log(extraFilter([15, -73, 14, -15]));\nconsole.log(extraFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n\n  const maxTriples = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          maxTriples++;\n        }\n      }\n    }\n  }\n  return maxTriples;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let p1 = planets[planet1.toLowerCase()];\n  let p2 = planets[planet2.toLowerCase()];\n  let sorted = [];\n  let i = 0;\n  while (i < p1.length && i < p2.length) {\n    if (p1[i].distance > p2[i].distance) {\n      sorted.push(p1[i]);\n      i++;\n    } else if (p2[i].distance > p1[i].distance) {\n      sorted.push(p2[i]);\n      i++;\n    } else {\n      sorted.push(p1[i]);\n      i++;\n      sorted.push(p2[i]);\n      i++;\n    }\n  }\n  while (i < p1.length) {\n    sorted.push(p1[i]);\n    i++;\n  }\n  while (i < p2.length) {\n    sorted.push(p2[i]);\n    i++;\n  }\n  return sorted;\n};\n\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log("}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n    let sum = 0;\n    for(let i=0; i<lst.length; i++) {\n        sum += lst[i].length;\n    }\n    let result = [];\n    for(let i=0; i<lst.length; i++) {\n        if(sum % 2) {\n            result.push(lst[i]);\n        }\n        sum = sum - lst[i].length;\n    }\n    return result;\n}\nconsole.log(screenTiltSum([\n    \"aa\", \"a\", \"aaa\",\n    \"ab\", \"a\", \"aaa\",\n    \"ab\", \"a\", \"aaa\",\n    \"cd\",\n]));\n\n/*\n  Write a function that takes an array of strings as an input,\n  and a function as an argument that checks if a string contains a given word.\n  Return an array of the strings that do not contain the word.\n  The function should take a string and a function as arguments,\n  and return an array of strings.\n  The function should return an array of strings, and it should not modify the input array.\n  The function should be case insensitive.\n  Example:\n  assert doesNotContain(\"apple\", containsWord) => []\n  assert doesNotContain(\"apple\", containsWord) => []\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"apple\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"apple\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"apple\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]\n  assert doesNotContain(\"apple\", containsWord) => [\"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"]"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n}\n\nconst testPrimeNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627,"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  const { sum, _ } = getSumOfSquares(lst);\n  return sum;\n};\n\nconst getSumOfSquares = (lst) => {\n  const sum = sumOfSquares(lst);\n  return { sum, _: sum };\n};\n\nconst sumOfSquares = (lst) => {\n  return sumOfSquaresRec(lst, 0);\n};\n\nconst sumOfSquaresRec = (lst, sum) => {\n  if (lst.length === 0) return sum;\n\n  const { _, sumOfSquares } = getSumOfSquares(lst);\n\n  return sum + sumOfSquares;\n};\n\nconst sumOfSquaresDeviation = (lst) => {\n  const sum = sumOfSquaresDeviationRec(lst, 0);\n  return sum;\n};\n\nconst sumOfSquaresDeviationRec = (lst, sum) => {\n  if (lst.length === 0) return sum;\n\n  const sumOfSquares = sumOfSquaresDeviationRec(lst.slice(1), sumOfSquaresDeviationRec(lst.slice(0, 1), sum));\n\n  return sum + sumOfSquares;\n};\n\nconst getDeviation = (lst) => {\n  const sum = sumOfSquaresDeviationRec(lst, 0);\n  return sum;\n};\n\nconst getDeviationRec = (lst, sum) => {\n  if (lst.length === 0) return sum;\n\n  const { _, sumOfSquares } = getSumOfSquares(lst);\n\n  return sum + sumOfSquaresDeviationRec(lst.slice(1), sumOfSquaresDeviationRec(lst.slice(0, 1), sum));\n};\n\n//console.log(sumOfSquaresDeviation([1, 3, 2, 0]), sumOfSquaresDeviationDeviation([1, 3, 2, 0]));\n//console.log(sumOfSquaresDeviation([1, 3, 2, 0]), getDeviation([1, 3, 2, 0]));\n//console.log(sumOfSquaresDeviation([1, 3, 2, 0]), getDeviationRec([1, 3, 2, 0]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n\n  if (gameLength!== guessLength) return [0, 0, 0, 0, 0, 0]\n  const gameSum = game.reduce((a, b) => a + b)\n  const guessSum = guess.reduce((a, b) => a + b)\n  const absDiff = Math.abs(guessSum - gameSum)\n\n  return [0, 0, 0, 0, 0, absDiff]\n}\n\nconst compare2 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n\n  if (gameLength!== guessLength) return [0, 0, 0, 0, 0, 0]\n  const gameSum = game.reduce((a, b) => a + b)\n  const guessSum = guess.reduce((a, b) => a + b)\n  const absDiff = Math.abs(guessSum - gameSum)\n\n  if (guessSum === gameSum) return [0, 0, 0, 0, 0, 0]\n\n  let diff = 0\n  if (guessSum < gameSum) {\n    diff = gameSum - guessSum\n  } else if (guessSum > gameSum) {\n    diff = guessSum - gameSum\n  }\n\n  return [0, 0, 0, 0, 0, diff]\n}\n\nconst compare3 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n\n  if (gameLength!== guessLength) return [0, 0, 0, 0, 0, 0]\n  const gameSum = game.reduce((a, b) => a + b)\n  const guessSum = guess.reduce((a, b) => a + b)\n  const absDiff = Math.abs(guessSum - gameSum)\n\n  if (guessSum === gameSum) return [0, 0, 0, 0, 0, 0]\n\n  if (guessSum < gameSum) {\n    const diff = gameSum - guessSum\n    return [0, 0, 0, 0, 0, diff]\n  }\n\n  if (guessSum > gameSum) {\n    const diff = guessSum - gameSum\n    return [0, 0, 0, 0, 0, diff]\n  }\n}\n\nconst compare4 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n\n  if (gameLength!== guessLength) return [0, 0, 0, 0, 0, 0]\n  const gameSum = game.reduce((a, b) => a + b)\n  const guessSum = guess.reduce((a, b) => a + b)\n  const absDiff = Math.abs(guessSum - gameSum)\n\n  if (guessSum === gameSum) return [0, 0, 0, 0, 0, 0]\n\n  if (guessSum < gameSum) {\n    const diff = gameSum - guessSum\n    return [0, 0, 0, 0, 0, diff]\n  }\n\n  if (guessSum > gameSum) {\n    const diff = guessSum - gameSum\n    return [0, 0, 0, 0, 0, diff]\n  }\n}\n\nconst compare5 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n\n  if (gameLength!== guessLength) return [0, 0, 0, 0, 0, 0]\n  const gameSum = game.reduce((a, b) => a + b)\n  const guessSum = guess.reduce((a, b) => a + b)\n  const absDiff = Math.abs(guessSum - gameSum)\n\n  if (guessSum === gameSum) return [0, 0, 0, 0, 0, 0]\n\n  if (guessSum < gameSum) {\n    const diff = gameSum - guessSum\n    return [0, 0, 0, 0, 0, diff]\n  }\n\n  if (guessSum > gameSum) {\n    const diff = guessSum - gameSum\n    return [0, 0, 0, 0, 0, diff]\n  }\n}\n\nconst compare6 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n\n  if (gameLength!== guessLength) return [0, 0, 0, 0, 0, 0]\n  const gameSum = game.reduce((a, b) => a + b)\n  const guessSum = guess.reduce((a, b) => a + b)\n  const absDiff = Math.abs(guessSum - gameSum)\n\n  if (guessSum === gameSum) return [0, 0, 0, 0, 0, 0]\n\n  if (guessSum < gameSum) {\n    const diff = gameSum - guessSum\n    return [0, 0, 0, 0, 0, diff]\n  }\n\n  if (guessSum > gameSum) {\n    const diff = guessSum - gameSum\n    return [0, 0, 0, 0, 0, diff]\n  }\n}\n\nconst compare7 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n\n  if (gameLength!== guessLength) return [0, 0, 0, 0, 0, 0]\n  const gameSum = game.reduce((a, b) => a + b)\n  "}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n    const strength = {}\n    extensions.forEach(extension => {\n        const cap = extension.toUpperCase().length\n        const lc = extension.toLowerCase().length\n        strength[extension] = (cap - lc)\n    })\n    const best = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop()\n    return `${class_name}.${best}`\n}\n\nmodule.exports = hardExtension<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n    const pattern = a + b;\n    const index = a.length - b.length;\n    const subStr = b.split('');\n    const valid = subStr.every((s, i) => subStr.indexOf(s) === i + index);\n    return valid;\n};\n\nconsole.log(cycpatternCheck(\"abcdef\", \"abd\"));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if (num < 0) {\n    throw new Error('number should be positive')\n  }\n\n  const num = +num\n  let evenDigitCount = 0\n  let oddDigitCount = 0\n\n  while (num > 0) {\n    const d = num % 10\n    num = num / 10\n    if (d % 2 === 0) {\n      evenDigitCount++\n    } else {\n      oddDigitCount++\n    }\n  }\n\n  return [evenDigitCount, oddDigitCount]\n}\n\nmodule.exports = evenOddCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  number = number.toString()\n  const l = number.length\n  const roman = new Map([\n    [1, 'I'],\n    [4, 'IV'],\n    [5, 'V'],\n    [9, 'IX'],\n    [10, 'X'],\n    [40, 'XL'],\n    [50, 'L'],\n    [90, 'XC'],\n    [100, 'C'],\n    [400, 'CD'],\n    [500, 'D'],\n    [900, 'CM'],\n    [1000, 'M'],\n  ])\n\n  return roman.get(number) || `0${number}`\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) >= 0)\n}\n\n/*\n Given the lengths of the two opposite sides of a right-angled triangle.\n  Return the length of the hypotenuse of the triangle.\n  Example:\n  hypotenuse(1, 2) == sqrt(1^2 + 2^2) = 3\n  */\nconst hypotenuse = (a, b) => {\n    return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n}\n\nconst main = () => {\n    console.log(goodSlantTriangle(3, 4, 5))\n    console.log(goodSlantTriangle(1, 2, 3))\n    console.log(hypotenuse(1, 2))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  if(words.length < 1) {\n    return \"\";\n  }\n\n  let max = words[0];\n  let count = 1;\n\n  words.forEach((word, index) => {\n    if(word.length > max.length) {\n      max = word;\n      count = 1;\n    } else if(word.length === max.length) {\n      if(word > max) {\n        max = word;\n        count = 1;\n      } else if(word === max) {\n        count++;\n      }\n    }\n  });\n\n  return max;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Return the string with highest number\n  of unique characters. If multiple strings have highest number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst receiveMaxByLen = (words) => {\n  if(words.length < 1) {\n    return \"\";\n  }\n\n  let max = words[0];\n  let count = 1;\n\n  words.forEach((word, index) => {\n    if(word.length > max.length) {\n      max = word;\n      count = 1;\n    } else if(word.length === max.length) {\n      if(word > max) {\n        max = word;\n        count = 1;\n      } else if(word === max) {\n        count++;\n      }\n    }\n  });\n\n  return max;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Return the string with highest number\n  of unique characters. If multiple strings have highest number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst receiveMaxByCount = (words) => {\n  if(words.length < 1) {\n    return \"\";\n  }\n\n  let max = words[0];\n  let count = 1;\n\n  words.forEach((word, index) => {\n    if(word.length > max.length) {\n      max = word;\n      count = 1;\n    } else if(word.length === max.length) {\n      if(word > max) {\n        max = word;\n        count = 1;\n      } else if(word === max) {\n        count++;\n      }\n    }\n  });\n\n  return max;\n};\n\nconst words = [\"name\", \"of\", \"string\", \"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\", \"aaaaaaaaaaa\", \"aaaaaaaaaaaa\", \"aaaaaaaaaaaaa\", \"aaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  if (number <= need) {\n    return [need, remaining];\n  } else {\n    return [number - need, remaining];\n  }\n};\n\nfeed(5, 6, 10);\nfeed(4, 8, 9);\nfeed(1, 10, 10);\nfeed(2, 11, 5);\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  // make sure both lists are valid\n  if (operator.length < operand.length) {\n    throw new Error('operator list must be longer than operand list');\n  }\n  if (operator.length === 0) {\n    throw new Error('operator list must contain at least one element');\n  }\n  if (operand.length < 2) {\n    throw new Error('operand list must contain at least two elements');\n  }\n  let result = operand[0];\n  let operatorList = operator.slice();\n  let operandList = operand.slice();\n  for (let i = 1; i < operand.length; i++) {\n    let currentOperand = operandList.shift();\n    let operator = operatorList.shift();\n    result = (operator === '+'? result + currentOperand : operator === '-'? result - currentOperand : operator === '*'? result * currentOperand : operator === '/'? result / currentOperand : operator === '**'? Math.pow(result, currentOperand) : result)\n  }\n  return result;\n};\n\nmodule.exports = {\n  sufficientAlgebra\n};<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  if(!s || s.length === 0)\n    return s\n  let res = \"\"\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      res += s.charAt(i).toUpperCase()\n    }\n    else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      res += s.charAt(i).toLowerCase()\n    }\n    else {\n      res += s.charAt(i)\n    }\n  }\n  return res\n}\n\nexport { resolve }\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  const md5 = require('md5')\n  const md5sum = md5(text || '')\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha256('Hello world') == '2e48cd8d39c3b18a3e0a8b5cebffb9b5f8b0d9b9a4b05d4b6af4a5e5ce7f1'\n  */\nconst bowedStringedInstrumentToSha256 = (text) => {\n  const sha256 = require('sha256')\n  const sha256sum = sha256(text || '')\n  return sha256sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToSha512('Hello world') == 'f1c7cfb7acf6b8d0f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef8f45e8a6f2e8a5d082b07e8a3b5d0f3d0d3e4b1f5d1f7a4f1f4a9d1b6be44b2ee5e5b55d6e5c9f3e4b087b1bef"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  const num = a < b? b - a : a - b;\n  const result = [];\n\n  for (let i = 0; i < num; i++) {\n    result.push(a + i);\n  }\n\n  return result;\n};\n\ndescribe('renderInteger', () => {\n  it('should return an array of two elements', () => {\n    const a = 2;\n    const b = 8;\n    const result = renderInteger(a, b);\n\n    expect(result).toEqual([2, 4, 6, 8]);\n  });\n\n  it('should return an empty array if a is greater than b', () => {\n    const a = 10;\n    const b = 8;\n    const result = renderInteger(a, b);\n\n    expect(result).toEqual([]);\n  });\n});\n<|endoftext|>"}
