{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n    const closeNumbers = [];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                closeNumbers.push(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return closeNumbers.length > 0;\n};\n\nexport default receiveCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  paren_string = paren_string.replace(/\\s+/g, '');\n  let last_string = '';\n  let current_string = '';\n  let stack = [];\n  paren_string.split('').forEach(c => {\n    if (c === '(') {\n      stack.push(c);\n    }\n    if (c === ')') {\n      while (stack.length) {\n        current_string += stack.pop();\n      }\n      if (last_string!== current_string) {\n        last_string = current_string;\n        current_string = '';\n      }\n    }\n    current_string += c;\n  });\n  while (stack.length) {\n    current_string += stack.pop();\n  }\n  return current_string.split('').filter(c => c!== '');\n};\n\nexport default freestandingParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decimalPart = number - intPart;\n\n  if (decimalPart <= 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given an integer, return the number of digits.\n  >>> numDigits(42)\n  7\n  >>> numDigits(42.0)\n  1\n  >>> numDigits(0.42)\n  1\n  >>> numDigits(0.42 - 0.5)\n  1\n  >>> numDigits(42 - 0.5)\n  7\n  >>> numDigits(0)\n  0\n  */\nconst numDigits = (number) => {\n  return Math.floor(Math.log(number + 1) / Math.log(10)) + 1;\n};\n\n/* Given an integer, return the number of leading zeros.\n  >>> numLeadingZeros(42)\n  1\n  >>> numLeadingZeros(42.0)\n  1\n  >>> numLeadingZeros(0.42)\n  1\n  >>> numLeadingZeros(0.42 - 0.5)\n  2\n  >>> numLeadingZeros(42 - 0.5)\n  7\n  >>> numLeadingZeros(0)\n  0\n  */\nconst numLeadingZeros = (number) => {\n  let numberDigits = numDigits(number);\n\n  return numberDigits - Math.floor(Math.log(number) / Math.log(10));\n};\n\n/* Given an integer, return the number of trailing zeros.\n  >>> numTrailingZeros(42)\n  2\n  >>> numTrailingZeros(42.0)\n  0\n  >>> numTrailingZeros(0.42)\n  2\n  >>> numTrailingZeros(0.42 - 0.5)\n  1\n  >>> numTrailingZeros(42 - 0.5)\n  7\n  >>> numTrailingZeros(0)\n  0\n  */\nconst numTrailingZeros = (number) => {\n  let numberDigits = numDigits(number);\n\n  return Math.floor(Math.log(number) / Math.log(10)) - numberDigits;\n};\n\n/* Given a positive floating point number, return the number of trailing zeros\n  after the decimal point.\n  >>> numTrailingZeros(3.5)\n  1\n  >>> numTrailingZeros(42.0)\n  0\n  >>> numTrailingZeros(0.42)\n  1\n  >>> numTrailingZeros(0.42 - 0.5)\n  2\n  >>> numTrailingZeros(42 - 0.5)\n  7\n  >>> numTrailingZeros(0)\n  0\n  */\nconst numTrailingZerosAfterDecimal = (number) => {\n  let decimalDigits = numDigits(number) - 1;\n\n  return Math.log(number) / Math.log(10) - decimalDigits;\n};\n\n/* Given a positive floating point number, return the number of leading zeros\n  before the decimal point.\n  >>> numLeadingZerosBeforeDecimal(3.5)\n  1\n  >>> numLeadingZerosBeforeDecimal(42.0)\n  0\n  >>> numLeadingZerosBeforeDecimal(0.42)\n  1\n  >>> numLeadingZerosBeforeDecimal(0.42 - 0.5)\n  2\n  >>> numLeadingZerosBeforeDecimal(42 - 0.5)\n  7\n  >>> numLeadingZerosBeforeDecimal(0)\n  0\n  */\nconst numLeadingZerosBeforeDecimal = (number) => {\n  let decimalDigits = numDigits(number) - 1;\n\n  return Math.log(number) / Math.log(10) + decimalDigits;\n};\n\n/* Given a positive floating point number, return the number of digits before\n  the decimal point.\n  >>> numDigitsBeforeDecimal(3.5)\n  2\n  >>> numDigitsBeforeDecimal(42.0)\n  1\n  >>> numDigitsBeforeDecimal(0.42)\n  2\n  >>> numDigitsBeforeDecimal(0.42 - 0.5)\n  2\n  >>> numDigitsBeforeDecimal(42 - 0.5)\n  7\n  >>> numDigitsBeforeDecimal(0)\n  0\n  */\nconst numDigitsBeforeDecimal = (number) => {\n  let decimalDigits = numDigits(number) - 1;\n\n  return Math.log(number) / Math.log(10) + decimalDigits;\n};\n\n/* Given a positive floating point number, return the number of digits after\n  the decimal point.\n  >>> numDigitsAfterDecimal(3.5)\n  1\n  >>> numDigitsAfterDecimal(42.0)\n  0\n  >>> numDigitsAfterDecimal(0.42)\n  1\n  >>> numDigitsAfterDecimal(0.42 - 0.5)\n  1\n  >>> numDigitsAfterDecimal(42 - 0.5)\n  7\n  >>> numDigitsAfterDecimal(0)\n  0\n  */\nconst numDigitsAfterDecimal = (number) => {\n  let decimalDigits = numDigits(number) - 1;\n\n  return Math.log(number) / Math.log(10) + decimalDigits;\n};\n\n/* Given a positive floating point number, return the number of digits after\n  the decimal point.\n  >>> numTrailingZeros(3.5)\n  1\n  >>> numTrailingZeros(42.0)\n  0\n  >>> numTrailingZeros(0.42)\n  1\n  >>> numTrailingZeros(0.42 - 0.5)\n  2\n  >>> numTrailingZeros(42 - 0.5)\n  7\n  >>> numTrailingZeros(0)\n  0\n  */\nconst numTrailingZerosBeforeDecimal = (number) => {\n  let decimalDigits = numDigits(number) - 1;\n\n  return Math.log(number) /"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const total = sum(operations)\n  const sumOfDigits = (num) => {\n    return num.toString().split('').reduce((acc, c) => acc + Number(c), 0)\n  }\n  let previous = 0\n  for (let i = 0; i < operations.length; i++) {\n    const current = sumOfDigits(operations[i])\n    if (current < previous) {\n      return true\n    }\n    previous = current\n  }\n  return false\n}\n\nexport { belowZero }\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const getMean = (arr) => {\n    const len = arr.length\n    return arr.reduce((a, b) => a + b) / len\n  }\n\n  const getAbsoluteDeviation = (arr, mean) => {\n    const len = arr.length\n    return arr.reduce((a, b) => {\n      const abs = Math.abs(b - mean)\n      return a + abs\n    }, 0) / len\n  }\n\n  const absDev = (x, mean) => Math.abs(x - mean)\n\n  const MAD = (numbers) => getMean(numbers)\n\n  const getAbsDev = (numbers, mean) => getAbsoluteDeviation(numbers, mean)\n\n  return {\n    MAD,\n    getMean,\n    getAbsDev\n  }\n}\n\n/* For a given list of input numbers, calculate Variance\n  >>> entailVariance([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst entailVariance = (numbers) => {\n  const getMean = (arr) => {\n    const len = arr.length\n    return arr.reduce((a, b) => a + b) / len\n  }\n\n  const getDeviation = (arr, mean) => {\n    const len = arr.length\n    return arr.reduce((a, b) => {\n      const d = b - mean\n      return a + d * d\n    }, 0) / len\n  }\n\n  const variance = (numbers) => getDeviation(numbers, getMean(numbers))\n\n  return {\n    variance\n  }\n}\n\n/* For a given list of input numbers, calculate Standard Deviation\n  >>> entailStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailStandardDeviation = (numbers) => {\n  const getMean = (arr) => {\n    const len = arr.length\n    return arr.reduce((a, b) => a + b) / len\n  }\n\n  const getDeviation = (arr, mean) => {\n    const len = arr.length\n    return arr.reduce((a, b) => {\n      const d = b - mean\n      return a + d * d\n    }, 0) / len\n  }\n\n  const standardDeviation = (numbers) => getDeviation(numbers, getMean(numbers))\n\n  return {\n    standardDeviation\n  }\n}\n\n/* For a given list of input numbers, calculate Mode\n  >>> entailMode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailMode = (numbers) => {\n  const getMode = (arr) => {\n    const len = arr.length\n    const result = arr[0]\n    for (let i = 0; i < len; i++) {\n      if (arr[i] > result) {\n        result = arr[i]\n      }\n    }\n    return result\n  }\n\n  const mode = (numbers) => getMode(numbers)\n\n  return {\n    mode\n  }\n}\n\n/* For a given list of input numbers, calculate Median\n  >>> entailMedian([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailMedian = (numbers) => {\n  const getMedian = (arr) => {\n    const len = arr.length\n    const result = arr[len / 2]\n    if (len % 2 === 1) {\n      return result\n    }\n    return (result + arr[len / 2 - 1]) / 2\n  }\n\n  const median = (numbers) => getMedian(numbers)\n\n  return {\n    median\n  }\n}\n\n/* For a given list of input numbers, calculate Mode\n  >>> entailMode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailMode = (numbers) => {\n  const getMode = (arr) => {\n    const len = arr.length\n    const result = arr[0]\n    for (let i = 0; i < len; i++) {\n      if (arr[i] > result) {\n        result = arr[i]\n      }\n    }\n    return result\n  }\n\n  const mode = (numbers) => getMode(numbers)\n\n  return {\n    mode\n  }\n}\n\n/* For a given list of input numbers, calculate Mode\n  >>> entailMode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailMode = (numbers) => {\n  const getMode = (arr) => {\n    const len = arr.length\n    const result = arr[0]\n    for (let i = 0; i < len; i++) {\n      if (arr[i] > result) {\n        result = arr[i]\n      }\n    }\n    return result\n  }\n\n  const mode = (numbers) => getMode(numbers)\n\n  return {\n    mode\n  }\n}\n\n/* For a given list of input numbers, calculate Mode\n  >>> entailMode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailMode = (numbers) => {\n  const getMode = (arr) => {\n    const len = arr.length\n    const result = arr[0]\n    for (let i = 0; i < len; i++) {\n      if (arr[i] > result) {\n        result = arr[i]\n      }\n    }\n    return result\n  }\n\n  const mode = (numbers) => getMode(numbers)\n\n  return {\n    mode\n  }\n}\n\n/* For a given list of input numbers, calculate Mode\n  >>> entailMode([1.0, 2.0, 3.0, 4.0])\n  2"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  return Array.isArray(numbers)?\n    numbers.reduce((acc, num) => {\n      acc.unshift(num);\n      return acc;\n    }, [])\n   .reduce((acc, num) => {\n      acc.push(num);\n      return acc;\n    }, [])\n   .slice(0, -1)\n   .join(delimeter) :\n    null;\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  */\nconst strip = string => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n  * @param {string} string\n  * @param {string} char\n  * @return {string}\n  */\nconst repeat = (string, char) => {\n  return new Array(string.length + 1).join(char);\n};\n\nmodule.exports = {\n  intersperse,\n  strip,\n  repeat\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  // Add the first level of parentheses to the stack\n  paren_stack = [paren_string]\n\n  // While there are parentheses in the stack,\n  while (paren_stack.length > 0) {\n    // Find the deepest level of parentheses\n    const deepest_level_of_nesting = paren_stack[0].split(' ').reduce((current_max, current_level) => {\n      return current_level.split('(').reduce((current_max, current_element) => {\n        if (current_element.length > current_max) {\n          current_max = current_element.length\n        }\n        return current_max\n      }, 0)\n    }, 0)\n\n    // Pop the current level off the stack\n    paren_stack.shift()\n\n    // Add the level to the stack\n    paren_stack.push(`${paren_string.substr(0, deepest_level_of_nesting)} (${paren_string.substr(deepest_level_of_nesting)})`)\n  }\n\n  return paren_stack\n}\n\nmodule.exports = parseNestedParens\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n    return strings.filter(str => str.includes(substring));\n};\n\nmodule.exports = {\n    filterBySubstring,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  let product = 1\n  let sum = 0\n  let i = 0\n  while (i < numbers.length) {\n    let current = numbers[i]\n    let currentProduct = current\n    sum += current\n    while (i < numbers.length) {\n      let next = numbers[i]\n      if (next > current) {\n        currentProduct *= next\n      }\n      i += 1\n    }\n    product *= currentProduct\n  }\n  return [sum, product]\n}\n\nmodule.exports = kernelIntersection\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  return numbers.reduce((acc, curr) => {\n    if (acc.length < curr) {\n      return [...acc, curr];\n    } else {\n      return [...acc.slice(-curr), curr];\n    }\n  }, []);\n};\n\nexport default rolledMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('') + string.split('').reverse().join('');\n}\n\n/* Test if two strings are equal */\nconst isEqual = (string1, string2) => {\n  return string1 == string2;\n}\n\n/* Test if string has unique characters */\nconst isUnique = (string) => {\n  return string.split('').every(x => {\n    return string.indexOf(x) === x;\n  });\n}\n\n/* Test if string has no duplicates */\nconst isUnique2 = (string) => {\n  return string.split('').every(x => {\n    return string.indexOf(x) === string.lastIndexOf(x);\n  });\n}\n\n/* Test if string has at least one of each of the letters in a supplied string */\nconst hasLetter = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter2 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter3 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter4 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter5 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter6 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter7 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter8 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter9 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter10 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter11 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter12 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter13 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter14 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter15 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter16 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter17 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in a supplied string */\nconst hasLetter18 = (string, letters) => {\n  return string.split('').every(x => {\n    return letters.indexOf(x)!== -1;\n  });\n}\n\n/* Test if string has at least one of the letters in"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n    const result = [];\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === '1' && b[i] === '1') {\n            result.push('1');\n        } else if (a[i] === '1' && b[i] === '0') {\n            result.push('0');\n        } else if (a[i] === '0' && b[i] === '1') {\n            result.push('1');\n        } else {\n            result.push('0');\n        }\n    }\n    return result.join('');\n};\n\n/*\n  * Solution 2\n  *\n  * This method uses an array to store the last two values and then\n  * iterates through the input string. If the current character is 1,\n  * then it will be appended to the last two values. If the current\n  * character is 0, then the first value will be removed from the\n  * array.\n  *\n  * This method is used because it is a simple and clear solution\n  * without the need for any complicated code to handle multiple\n  * values.\n  *\n  * Note:\n  *\n  * For the XOR to work properly, the input strings must be the same\n  * length.\n  *\n  * Examples:\n  *\n  * For the input string '010101' the output should be '110011'\n  *\n  * For the input string '0101' the output should be '0011'\n  *\n  * For the input string '010' the output should be '011'\n  *\n  * For the input string '101' the output should be '100'\n  *\n  * */\nconst xorArray = (a, b) => {\n    const result = [];\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === '1' && b[i] === '1') {\n            result.push('1');\n        } else if (a[i] === '1' && b[i] === '0') {\n            result.push('0');\n        } else if (a[i] === '0' && b[i] === '1') {\n            result.unshift('1');\n        } else {\n            result.unshift('0');\n        }\n    }\n    return result.join('');\n};\n\n/*\n  * Solution 3\n  *\n  * This method uses a for loop to iterate through the input string\n  * and update the output string.\n  *\n  * This method is used because it is a simple and clear solution\n  * without the need for any complicated code to handle multiple\n  * values.\n  *\n  * Note:\n  *\n  * For the XOR to work properly, the input strings must be the same\n  * length.\n  *\n  * Examples:\n  *\n  * For the input string '010101' the output should be '110011'\n  *\n  * For the input string '0101' the output should be '0011'\n  *\n  * For the input string '010' the output should be '011'\n  *\n  * For the input string '101' the output should be '100'\n  *\n  * */\nconst xorString = (a, b) => {\n    const result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === '1' && b[i] === '1') {\n            result += '1';\n        } else if (a[i] === '1' && b[i] === '0') {\n            result += '0';\n        } else if (a[i] === '0' && b[i] === '1') {\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n};\n\nconsole.log(xorArray('010101', '110011'));\nconsole.log(xorArray('0101', '0011'));\nconsole.log(xorArray('010', '011'));\nconsole.log(xorArray('101', '100'));\nconsole.log(xorString('010101', '110011'));\nconsole.log(xorString('0101', '0011'));\nconsole.log(xorString('010', '011'));\nconsole.log(xorString('101', '100'));\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n    let len = 0;\n    let i = 0;\n    let lenStr = 0;\n    let j = 0;\n    let tmp = 0;\n    let result = 0;\n    let string = 0;\n    let next = 0;\n    let char = 0;\n    let resultStr = '';\n    strings.forEach((item, index) => {\n        len = item.length;\n        if (len > lenStr) {\n            lenStr = len;\n            i = index;\n            string = item;\n        }\n    });\n    if (lenStr === 0) {\n        return null;\n    }\n    next = strings[i + 1];\n    for (j = 0; j < lenStr; j += 1) {\n        char = string[j];\n        tmp = 0;\n        if (next === char) {\n            tmp = 1;\n        }\n        if (j + 1 === lenStr) {\n            result = result + char;\n            if (tmp === 0) {\n                result = result + char;\n            }\n            result = result + string[j + 1];\n        }\n        if (tmp === 1) {\n            result = result + char;\n            result = result + string[j + 1];\n        }\n    }\n    return result;\n};\n\n//export { farseeing };\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n    while (b) {\n        const remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n}\n\nconst capitalCoarseDivisorTest = (a, b) => {\n    console.log(`${capitalCoarseDivisor(a, b)}`);\n}\n\ncapitalCoarseDivisorTest(10, 5);\ncapitalCoarseDivisorTest(25, 15);\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  if (typeof string!=='string') throw new TypeError('Input must be a string');\n  if (string.length === 0) throw new Error('Input string must not be empty');\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    let prefix = string.substr(0, i + 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'ac', 'bc']\n  */\nconst allSuffix = (string) => {\n  if (typeof string!=='string') throw new TypeError('Input must be a string');\n  if (string.length === 0) throw new Error('Input string must not be empty');\n  let suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    let suffix = string.substr(i, string.length - i);\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all the words in the input string\n  >>> allWords('abc')\n  ['abc']\n  */\nconst allWords = (string) => {\n  if (typeof string!=='string') throw new TypeError('Input must be a string');\n  if (string.length === 0) throw new Error('Input string must not be empty');\n  let words = [];\n  let index = 0;\n  while (index < string.length) {\n    let word = string.substr(index, string.indexOf(' ', index) - index);\n    index = string.indexOf(' ', index);\n    if (words.indexOf(word) === -1) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\n/* Return a list of all the words from the input string\n  >>> allWords('abc')\n  ['abc']\n  >>> allWords('a b c')\n  ['a', 'b', 'c']\n  */\nconst allWordsWithSpace = (string) => {\n  if (typeof string!=='string') throw new TypeError('Input must be a string');\n  if (string.length === 0) throw new Error('Input string must not be empty');\n  let words = [];\n  let index = 0;\n  while (index < string.length) {\n    let word = string.substr(index, string.indexOf(' ', index) - index);\n    index = string.indexOf(' ', index);\n    if (words.indexOf(word) === -1) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\n/* Return list of all the distinct words in the input string\n  >>> allDistinctWords('abc')\n  []\n  >>> allDistinctWords('a b c')\n  ['a', 'b', 'c']\n  */\nconst allDistinctWords = (string) => {\n  if (typeof string!=='string') throw new TypeError('Input must be a string');\n  if (string.length === 0) throw new Error('Input string must not be empty');\n  let words = [];\n  let index = 0;\n  while (index < string.length) {\n    let word = string.substr(index, string.indexOf(' ', index) - index);\n    index = string.indexOf(' ', index);\n    if (words.indexOf(word) === -1) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\n/* Return list of all the distinct words in the input string with space\n  >>> allDistinctWords('a b c')\n  ['a', 'b', 'c']\n  */\nconst allDistinctWordsWithSpace = (string) => {\n  if (typeof string!=='string') throw new TypeError('Input must be a string');\n  if (string.length === 0) throw new Error('Input string must not be empty');\n  let words = [];\n  let index = 0;\n  while (index < string.length) {\n    let word = string.substr(index, string.indexOf(' ', index) - index);\n    index = string.indexOf(' ', index);\n    if (words.indexOf(word) === -1) {\n      words.push(word);\n    }\n  }\n  return words;\n};\n\nmodule.exports = {\n  allPrefix,\n  allSuffix,\n  allWords,\n  allWordsWithSpace,\n  allDistinctWords,\n  allDistinctWordsWithSpace\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i + 1} `;\n  }\n  return result.slice(0, -1);\n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> boxedStringedInstrumentSuccession(0)\n  '0'\n  >>> boxedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst boxedStringedInstrumentSuccession = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i + 1} `;\n  }\n  return `${result.slice(0, -1)} `;\n};\n\nconst getInstrumentSuccession = (n) => {\n  if (n < 0) {\n    return undefined;\n  }\n  switch (n) {\n    case 0:\n      return '0';\n    case 1:\n      return '1';\n    case 2:\n      return '2';\n    case 3:\n      return '3';\n    case 4:\n      return '4';\n    case 5:\n      return '5';\n    case 6:\n      return '6';\n    case 7:\n      return '7';\n    case 8:\n      return '8';\n    case 9:\n      return '9';\n    default:\n      return `${bowedStringedInstrumentSuccession(n)} ${boxedStringedInstrumentSuccession(n)}`;\n  }\n};\n\nconst isInteger = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return n % 1 === 0;\n};\n\nconst isOdd = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return n % 2!== 0;\n};\n\nconst isEven = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return n % 2 === 0;\n};\n\nconst isEvenOrOdd = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return n % 2 === 0 || n % 2!== 0;\n};\n\nconst isPrime = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isOdd(n)?!isEven(n) : isEven(n);\n};\n\nconst isPrimeNumber = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrime(n) && isInteger(n);\n};\n\nconst isPrimeNumberNotLessThanTen = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && isOdd(n);\n};\n\nconst isPrimeNumberNotGreaterThanTen = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && isEven(n);\n};\n\nconst isPrimeNumberNotGreaterThanFive = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n < 5;\n};\n\nconst isPrimeNumberNotLessThanFive = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n > 5;\n};\n\nconst isPrimeNumberNotLessThanFiveThousand = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n < 5_000;\n};\n\nconst isPrimeNumberNotGreaterThanFiveThousand = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n > 5_000;\n};\n\nconst isPrimeNumberNotLessThanFiveThousand = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n < 5_000;\n};\n\nconst isPrimeNumberNotGreaterThanOneHundred = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n < 100;\n};\n\nconst isPrimeNumberNotLessThanOneHundred = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n > 100;\n};\n\nconst isPrimeNumberNotLessThanOneHundredThousand = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n < 1_000_000;\n};\n\nconst isPrimeNumberNotGreaterThanOneHundredThousand = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n > 1_000_000;\n};\n\nconst isPrimeNumberNotLessThanOneHundredThousand = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n < 1_000_000;\n};\n\nconst isPrimeNumberNotGreaterThanFiveThousand = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrimeNumber(n) && n > 5_000;\n};\n\nconst isPrimeNumberNotLessThanFiveThousand = (n) => {\n  if (typeof n!== 'number') {\n    return false;\n  }\n  return isPrime"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  let chars = {};\n  string.split('').forEach(char => {\n    if (chars[char] === undefined) {\n      chars[char] = 1;\n    } else {\n      chars[char]++;\n    }\n  });\n  return Object.keys(chars).length;\n};\n\n// TEST\ndescribe('Given a string, find out how many distinct characters (regardless of case) does it consist of', () => {\n  it('XYZXYZ', () => {\n    expect(considerClearcutCharacters('XYZXYZ')).toEqual(3);\n  });\n  it('Jerry', () => {\n    expect(considerClearcutCharacters('Jerry')).toEqual(4);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    return music_string.split(' ').map(note => {\n        if (note.length > 1) {\n            return { note: note.charAt(0), duration: parseNote(note) };\n        } else {\n            return { note: note, duration: 1 };\n        }\n    });\n};\n\n/*\n  Given a string representing a musical note in ASCII format, return the number of beats it lasts.\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n  '.' - eighth note, lasts one beat\n\n  >>> parseNote('o o|.| o| o|.|.|.|.| o o')\n  4\n  >>> parseNote('o')\n  1\n  >>> parseNote('.')\n  1\n  >>> parseNote('x')\n  0\n  >>> parseNote('o|')\n  2\n  >>> parseNote('o|o')\n  1\n  */\nconst parseNote = (note_string) => {\n    const result = {\n        'o': 4,\n        'o|': 2,\n        '.': 1,\n        '|': 1\n    };\n\n    if (note_string in result) {\n        return result[note_string];\n    } else {\n        return 0;\n    }\n};\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {\n\tcout << \"Test \" << testNum << \": [\" << p0;\n\tcout << \"]\" << endl;\n\tint answer;\n\tstring result;\n\tstring remaining;\n\tParseMusic(p0, result, remaining);\n\tif (hasAnswer) {\n\t\tcout << \"Desired answer:\" << endl;\n\t\tcout << \"\\t\" << p1 << endl;\n\t}\n\tcout << \"Your answer:\" << endl;\n\tcout << \"\\t\" << answer << endl;\n\tif (hasAnswer) {\n\t\tif (answer!= p1) {\n\t\t\tcout << \"DOESN'T MATCH!!!!\" << endl;\n\t\t} else if (remaining!= p0) {\n\t\t\tcout << \"DOESN'T MATCH!!!!\" << endl;\n\t\t} else {\n\t\t\tcout << \"Match :-)\" << endl;\n\t\t}\n\t} else {\n\t\tcout << \"OK, but is it right?\" << endl;\n\t}\n\tcout << \"\" << endl;\n\treturn hasAnswer;\n}\nint main() {\n\tbool all_right;\n\tbool disabled;\n\tbool tests_disabled;\n\tall_right = true;\n\ttests_disabled = false;\n\t\n\tstring p0;\n\tint p1;\n\t\n\t// ----- test 0 -----\n\tdisabled = false;\n\tp0 = \"o o|.| o| o|.|.|.|.| o o\";\n\tp1 = 4;\n\tall_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 1 -----\n\tdisabled = false;\n\tp0 = \"o o|.| o| o|.|.|.|.| o o\";\n\tp1 = 2;\n\tall_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 2 -----\n\tdisabled = false;\n\tp0 = \"o o|.| o| o|.|.|.|.| o o\";\n\tp1 = 1;\n\tall_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\tif (all_right) {\n\t\tif (tests_disabled) {\n\t\t\tcout << \"You're a stud (but some test cases were disabled)!\" << endl;\n\t\t} else {\n\t\t\tcout << \"You're a stud (at least on given cases)!\" << endl;\n\t\t}\n\t} else {\n\t\tcout << \"Some of the test cases had errors.\" << endl;\n\t}\n\treturn 0;\n}\n// END KAWIGIEDIT TESTING\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let num = 0;\n  for (let i = 0; i < string.length; i++) {\n    let j = 0;\n    for (; j < substring.length; j++) {\n      if (string[i + j]!== substring[j]) {\n        break;\n      }\n    }\n    if (j === substring.length) {\n      num++;\n    }\n  }\n  return num;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sorted = []\n  for (let i = 0; i < numbers.length; i++) {\n    const value = parseInt(numbers[i], 10)\n    sorted.push(value)\n  }\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted.join('')\n}\n\n/*\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const sorted = []\n  for (let i = 0; i < numbers.length; i++) {\n    const value = parseInt(numbers[i], 10)\n    sorted.push(value)\n  }\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted.join('')\n}\n\nmodule.exports = {\n  sortNumbers,\n  sortNumbersReverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  const elements = [...numbers].sort((a, b) => a - b);\n  const [a, b] = elements.slice(0, 2);\n  return [a, b];\n};\n\nconst calculateGroups = (groups) => {\n  const isUnique = (arr) => arr.every((v, i) => arr.indexOf(v) === i);\n  const uniqueArr = groups.filter((group) => isUnique(group));\n  const uniqueGroups = uniqueArr.map((group) => {\n    const groupArr = group.map((el) => el.toString());\n    const uniqueStrings = groupArr.filter((v, i) => groupArr.indexOf(v) === i);\n    const uniqueString = uniqueStrings.join('');\n    return uniqueString;\n  });\n  return uniqueGroups;\n};\n\nconst calculateGroupSizes = (groups) => {\n  const groupSizes = {};\n  groups.forEach((group) => {\n    const groupSize = group.length;\n    groupSizes[group] = groupSize;\n  });\n  return groupSizes;\n};\n\nconst getGroupSizes = (groups) => {\n  return calculateGroupSizes(groups);\n};\n\nconst calculateGroupNames = (groups) => {\n  const groupNames = {};\n  groups.forEach((group) => {\n    const groupName = group.join('');\n    groupNames[group] = groupName;\n  });\n  return groupNames;\n};\n\nconst getGroupNames = (groups) => {\n  return calculateGroupNames(groups);\n};\n\nconst calculateGroupElement = (groups) => {\n  const groupElements = {};\n  groups.forEach((group) => {\n    const groupSize = group.length;\n    const groupElements = {};\n    group.forEach((el, i) => {\n      const groupElement = el.toString();\n      groupElements[groupElement] = groupSize;\n    });\n  });\n  return groupElements;\n};\n\nconst getGroupElements = (groups) => {\n  return calculateGroupElement(groups);\n};\n\nconst calculateGroupMolecule = (groups) => {\n  const groupMolecules = {};\n  groups.forEach((group) => {\n    const groupSize = group.length;\n    const groupMolecules = {};\n    group.forEach((el, i) => {\n      const groupElement = el.toString();\n      groupMolecules[groupElement] = groupSize;\n    });\n  });\n  return groupMolecules;\n};\n\nconst getGroupMolecules = (groups) => {\n  return calculateGroupMolecule(groups);\n};\n\nconst calculateGroupNumber = (groups) => {\n  const groupNumbers = {};\n  groups.forEach((group) => {\n    const groupSize = group.length;\n    const groupNumbers = {};\n    group.forEach((el, i) => {\n      const groupNumber = el.toString();\n      groupNumbers[groupNumber] = groupSize;\n    });\n  });\n  return groupNumbers;\n};\n\nconst getGroupNumbers = (groups) => {\n  return calculateGroupNumber(groups);\n};\n\nconst calculateGroupNumberOfElements = (groups) => {\n  const groupNumberOfElements = {};\n  groups.forEach((group) => {\n    const groupSize = group.length;\n    const groupNumberOfElements = {};\n    group.forEach((el, i) => {\n      const groupNumberOfElement = el.toString();\n      groupNumberOfElements[groupNumberOfElement] = groupSize;\n    });\n  });\n  return groupNumberOfElements;\n};\n\nconst getGroupNumberOfElements = (groups) => {\n  return calculateGroupNumberOfElements(groups);\n};\n\nconst calculateGroupMolecularWeight = (groups) => {\n  const groupMolecularWeights = {};\n  groups.forEach((group) => {\n    const groupSize = group.length;\n    const groupMolecularWeights = {};\n    group.forEach((el, i) => {\n      const groupElement = el.toString();\n      groupMolecularWeights[groupElement] = groupSize;\n    });\n  });\n  return groupMolecularWeights;\n};\n\nconst getGroupMolecularWeights = (groups) => {\n  return calculateGroupMolecularWeight(groups);\n};\n\nconst calculateGroupNumberOfMolecules = (groups) => {\n  const groupNumberOfMolecules = {};\n  groups.forEach((group) => {\n    const groupSize = group.length;\n    const groupNumberOfMolecules = {};\n    group.forEach((el, i) => {\n      const groupNumberOfMolecule = el.toString();\n      groupNumberOfMolecules[groupNumberOfMolecule] = groupSize;\n    });\n  });\n  return groupNumberOfMolecules;\n};\n\nconst getGroupNumberOfMolecules = (groups) => {\n  return calculateGroupNumberOfMolecules(groups);\n};\n\nconst calculateGroupFormula = (groups) => {\n  const groupFormulas = {};\n  groups.forEach((group) => {\n    const groupSize = group.length;\n    const groupFormula = group.join('');\n    groupFormulas[groupFormula] = groupSize;\n  });\n  return groupFormulas;\n};\n\nconst getGroupFormulas = (groups) => {\n  return calculateGroupFormula(groups);\n};\n\nconst calculateGroupRadicalCount = (groups) => {\n  const groupRadicalCount = {};\n  groups.forEach((group) => {\n    const groupSize = group.length;\n    const groupRadicalCount = {"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const rescaled = [min, min + (max - min) / (numbers.length - 1), max];\n    return rescaled;\n};\n\n/** Given a list of numbers, returns a list of numbers\n  that is the same length but contains only the integer values.\n  >>> rescaleToInt([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1, 2, 3, 4, 5]\n  */\nconst rescaleToInt = (numbers) => {\n    const rescaled = [...new Set(numbers).values()];\n    return rescaled;\n};\n\n/** Given a list of numbers, returns a list of the same length with the smallest number\n  that is greater than the largest number in the list\n  >>> rescaleToHigher( [1.0, 2.0, 3.0, 4.0, 5.0])\n  [2.0, 3.0, 4.0, 5.0, 6.0]\n  */\nconst rescaleToHigher = (numbers) => {\n    const rescaled = [...new Set(numbers).values()];\n    return rescaled.reverse();\n};\n\n/** Given a list of numbers, returns a list of the same length with the largest number\n  that is less than the largest number in the list\n  >>> rescaleToLower( [1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst rescaleToLower = (numbers) => {\n    const rescaled = [...new Set(numbers).values()];\n    return rescaled;\n};\n\n/** Given a list of numbers, returns a list of the same length with the smallest number\n  that is less than the smallest number in the list\n  >>> rescaleToLower( [1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst rescaleToLowerBound = (numbers) => {\n    const rescaled = [...new Set(numbers).values()];\n    return rescaled;\n};\n\n/** Given a list of numbers, returns a list of the same length with the largest number\n  that is less than the smallest number in the list\n  >>> rescaleToHigherBound( [1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst rescaleToHigherBound = (numbers) => {\n    const rescaled = [...new Set(numbers).values()];\n    return rescaled;\n};\n\n/** Given a list of numbers, returns a list of the same length with the smallest number\n  that is greater than the smallest number in the list\n  >>> rescaleToHigherBound( [1.0, 2.0, 3.0, 4.0, 5.0])\n  [2.0, 3.0, 4.0, 5.0, 6.0]\n  */\nconst rescaleToHigherBoundInclusive = (numbers) => {\n    const rescaled = [...new Set(numbers).values()];\n    return rescaled;\n};\n\n/** Given a list of numbers, returns a list of the same length with the largest number\n  that is less than the largest number in the list\n  >>> rescaleToHigherBound( [1.0, 2.0, 3.0, 4.0, 5.0])\n  [2.0, 3.0, 4.0, 5.0, 6.0]\n  */\nconst rescaleToHigherBoundInclusive = (numbers) => {\n    const rescaled = [...new Set(numbers).values()];\n    return rescaled;\n};\n\n/** Given a list of numbers, returns a list of the same length with the smallest number\n  that is less than the largest number in the list\n  >>> rescaleToHigherBound( [1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst rescaleToHigherBoundExclusive = (numbers) => {\n    const rescaled = [...new Set(numbers).values()];\n    return rescaled;\n};\n\n/** Given a list of numbers, returns a list of the same length with the largest number\n  that is less than the largest number in the list\n  >>> rescaleToHigherBound( [1.0, 2.0, 3.0, 4.0, 5.0])\n  [2.0, 3.0, 4.0, 5.0, 6.0]\n  */\nconst rescaleToHigherBoundExclusive = (numbers) => {\n    const rescaled = [...new Set(numbers).values()];\n    return rescaled;\n};\n\nmodule.exports = {\n    rescaleToUnit,\n    rescaleToInt,\n    rescaleToHigher,\n    rescaleToLower,\n    rescaleToHigherBound,\n    rescaleToHigherBoundInclusive,\n    rescaleToHigherBoundExclusive,\n    rescaleToLowerBound,\n    rescaleToLowerBoundInclusive,\n    rescaleToLowerBoundExclusive,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n  const isInteger = (value) => typeof value === 'number' && isInteger(value.toString());\n  for (const value of values) {\n    if (isInteger(value)) {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value ==='string') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value === 'boolean') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter given list of any python values only for numbers and booleans\n  >>> filterAll(['a', 3.14, 5])\n  [5]\n  >>> filterAll([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterAll = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value === 'number' || typeof value === 'boolean') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter given list of any python values only for numbers and booleans\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter given list of any python values only for booleans and numbers\n  >>> filterNumbersAndBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterNumbersAndBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbersAndBooleans = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value === 'number' || typeof value === 'boolean') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter given list of any python values only for booleans and strings\n  >>> filterNumbersAndStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterNumbersAndStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterNumbersAndStrings = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value ==='string' || typeof value === 'number') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter given list of any python values only for booleans, strings and numbers\n  >>> filterAll(['a', 3.14, 5])\n  [5]\n  >>> filterAll([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterAll = (values) => {\n  const result = [];\n  for (const value of values) {\n    if (typeof value === 'number' || typeof value === 'boolean' || typeof value ==='string') {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nexport default {\n  filterIntegers,\n  filterStrings,\n  filterBooleans,\n  filterNumbers,\n  filterNumbersAndBooleans,\n  filterNumbersAndStrings,\n  filterAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen(1)\n  Traceback (most recent call last):\n     ...\n  TypeError: strlen expected a string, got number\n  >>> strlen(1.1)\n  Traceback (most recent call last):\n     ...\n  TypeError: strlen expected a string, got number\n  >>> strlen([])\n  Traceback (most recent call last):\n     ...\n  TypeError: strlen expected a string, got list\n  >>> strlen({})\n  Traceback (most recent call last):\n     ...\n  TypeError: strlen expected a string, got dict\n  >>> strlen(None)\n  Traceback (most recent call last):\n     ...\n  TypeError: strlen expected a string, got null\n  >>> strlen(True)\n  Traceback (most recent call last):\n     ...\n  TypeError: strlen expected a string, got boolean\n  >>> strlen({1:2})\n  Traceback (most recent call last):\n     ...\n  TypeError: strlen expected a string, got dict-like\n  >>> strlen([1,2])\n  Traceback (most recent call last):\n     ...\n  TypeError: strlen expected a string, got list-like\n  >>> strlen(['a', 'b', 'c'])\n  3\n  >>> strlen('abc')\n  3\n  >>> strlen('a')\n  1\n  >>> strlen('\\n')\n  1\n  >>> strlen('\\n\\n')\n  2\n  >>> strlen('\\n\\n\\n')\n  3\n  >>> strlen('\\u2028')\n  1\n  >>> strlen('\\u2029')\n  1\n  >>> strlen('a\\u2028b\\u2028c\\u2029')\n  4\n  >>> strlen('a\\u2028b\\u2028c\\u2029d')\n  5\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029d')\n  6\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029d')\n  7\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029d')\n  8\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  9\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  10\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  11\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  12\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  13\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  14\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  15\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  16\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  17\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  18\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  19\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  20\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029d')\n  21\n  >>> strlen('a\\u2028b\\u2028c\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\u2029\\"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  let i = 2, largest = n, remainder;\n  while (i < n) {\n    remainder = n % i;\n    if (remainder === 0) {\n      largest = i;\n    }\n    i += 1;\n  }\n  return largest;\n}\n\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// but larger than its previous divisor\nconst nextBigDivisor = (n) => {\n  let i = 2, largest = n, remainder;\n  while (i < n) {\n    remainder = n % i;\n    if (remainder === 0) {\n      largest = i;\n    }\n    i += 1;\n  }\n  return largest;\n}\n\n// Given an integer n, return the largest number that divides evenly into it.\n// For example, largestPrimeFactor(12) -> 3\nconst largestPrimeFactor = (n) => {\n  let prime = 0, i = 0, isPrime = 0;\n  if (n < 1) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  while (i < n) {\n    prime = n % i;\n    isPrime = false;\n    for (let j = 2; j < prime; j++) {\n      if (prime % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime) {\n      break;\n    }\n    i += 1;\n  }\n  return prime;\n}\n\n// Given an integer n, return the smallest number that divides evenly into it.\n// For example, smallestPrimeFactor(12) -> 2\nconst smallestPrimeFactor = (n) => {\n  let i = 2, smallestPrimeFactor = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      smallestPrimeFactor = i;\n      break;\n    }\n    i += 1;\n  }\n  return smallestPrimeFactor;\n}\n\n// Given an integer n, return the sum of the digits of the number.\n// For example, numberDigitSum(12) -> 2\nconst numberDigitSum = (n) => {\n  let i = 0, sum = 0;\n  if (n < 1) {\n    return 0;\n  }\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n// Given an integer n, return the sum of the digits of the number squared.\n// For example, numberDigitSumSquared(12) -> 2\nconst numberDigitSumSquared = (n) => {\n  let i = 0, sum = 0;\n  if (n < 1) {\n    return 0;\n  }\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum * sum;\n}\n\n// Given an integer n, return the sum of the digits of the number cubed.\n// For example, numberDigitSumCubed(12) -> 2\nconst numberDigitSumCubed = (n) => {\n  let i = 0, sum = 0;\n  if (n < 1) {\n    return 0;\n  }\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum * sum * sum;\n}\n\n// Given an integer n, return the sum of the digits of the number squared.\n// For example, numberDigitSumSquared(12) -> 2\nconst numberDigitSumSquaredCubed = (n) => {\n  let i = 0, sum = 0;\n  if (n < 1) {\n    return 0;\n  }\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum * sum * sum;\n}\n\n// Given an integer n, return the sum of the digits of the number cubed.\n// For example, numberDigitSumCubed(12) -> 2\nconst numberDigitSumCubedSquared = (n) => {\n  let i = 0, sum = 0;\n  if (n < 1) {\n    return 0;\n  }\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum * sum * sum;\n}\n\n// Given an integer n, return the sum of the digits of the number squared.\n// For example, numberDigitSumSquared(12) -> 2\nconst numberDigitSumCubedSquared = (n) => {\n  let i = 0, sum = 0;\n  if (n < 1) {\n    return 0;\n  }\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum * sum * sum;\n}\n\n// Given an integer n, return the sum of the digits of the number cubed.\n// For example, numberDigitSumCubed(12) -> 2\nconst numberDigitSumSquaredCubed = (n) => {\n  let i = 0, sum = 0;\n  if (n < 1) {\n    return 0;\n  }\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum * sum * sum;\n}\n\n// Given an integer n, return the sum of the digits of the number squared.\n// For example, numberDigitSumSquared(12) -> 2\nconst numberDigitSumCubedSquared = (n) => {\n  let i = 0, sum = 0;\n  if (n < 1) {\n    return 0;\n  }\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return sum * sum * sum;\n}\n\n// Given an integer n, return the sum of the digits of the number cubed.\n// For example, numberDigitSumCubed(12) -> 2\nconst numberDigitSumSquaredCubed = (n) => {\n  let i = 0, sum = 0;\n  if (n < 1) {\n    return 0;\n  "}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  // get a list of factors\n  const factors = _.chain(factorize.primeFactors(n))\n    // sort them in ascending order\n   .sortBy((factor) => factor)\n    // flatten the list\n   .flatten()\n    // filter out the ones with the largest prime\n   .filter((factor) => factor === n)\n    // map the factors to the number of times they appear\n   .map((factor) => [factor, _.times(factor, n / factor)]);\n\n  // return the result\n  return factors;\n};\n\n// list of prime numbers\nconst PRIME_NUMBERS = [\n  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1133, 1147, 1151, 1159, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2509, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const arr = [];\n  const tmp = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const count = 1;\n    if (tmp.indexOf(numbers[i]) === -1) {\n      tmp.push(numbers[i]);\n    } else {\n      count++;\n    }\n    arr.push(count);\n  }\n  return arr;\n};\n\n/*\n  From a list of numbers, return a list of the sum of the numbers.\n  >>> sum([1,2,3,4,5])\n  [1+2+3+4+5]\n  >>> sum([1,2,3,4,5,6])\n  [1+2+3+4+5+6]\n  >>> sum([])\n  []\n  >>> sum([1,2,3,4,5,6,7])\n  [1+2+3+4+5+6+7]\n  */\nconst sum = (numbers) => {\n  const sum = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sum.push(numbers[i]);\n    for (let j = i + 1; j < numbers.length; j++) {\n      sum.push(numbers[i] + numbers[j]);\n    }\n  }\n  return sum;\n};\n\n/*\n  From a list of numbers, return a list of the difference of the numbers.\n  >>> difference([1,2,3,4,5])\n  [1-2-3-4-5]\n  >>> difference([1,2,3,4,5,6])\n  [1-2-3-4-5-6]\n  >>> difference([])\n  []\n  >>> difference([1,2,3,4,5,6,7])\n  [1-2-3-4-5-6-7]\n  */\nconst difference = (numbers) => {\n  const difference = [];\n  for (let i = 0; i < numbers.length; i++) {\n    difference.push(numbers[i] - numbers[i + 1]);\n  }\n  return difference;\n};\n\n/*\n  Given a list of numbers, return a list of the product of the numbers.\n  >>> product([1,2,3,4,5])\n  [1*2*3*4*5]\n  >>> product([])\n  []\n  >>> product([1,2,3,4,5,6])\n  [1*2*3*4*5*6]\n  */\nconst product = (numbers) => {\n  const product = [];\n  for (let i = 0; i < numbers.length; i++) {\n    product.push(numbers[i] * numbers[i + 1]);\n  }\n  return product;\n};\n\n/*\n  Given a list of numbers, return a list of the average of the numbers.\n  >>> average([1,2,3,4,5])\n  [2.0]\n  >>> average([])\n  []\n  >>> average([1,2,3,4,5,6])\n  [2.5]\n  */\nconst average = (numbers) => {\n  const avg = [];\n  for (let i = 0; i < numbers.length; i++) {\n    avg.push((numbers[i] + numbers[i + 1]) / 2);\n  }\n  return avg;\n};\n\n/*\n  Given a list of numbers, return a list of the median of the numbers.\n  >>> median([1,2,3,4,5])\n  [2.0]\n  >>> median([1,2,3,4,5,6])\n  [2.5]\n  >>> median([])\n  []\n  >>> median([1,2,3,4,5,6,7])\n  [2.5]\n  */\nconst median = (numbers) => {\n  const sorted = sorted(numbers);\n  if (sorted.length % 2) {\n    return sorted[(sorted.length - 1) / 2];\n  } else {\n    const middle = sorted.length / 2;\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  }\n};\n\nmodule.exports = {\n  getRidOfDuplicate,\n  sum,\n  difference,\n  product,\n  average,\n  median,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  const result = string.toUpperCase().replace(/^([a-z])|([A-Z])/g, function (match) {\n    return match.toLowerCase();\n  });\n  return result;\n};\n\nconst capitalize = (string) => {\n  const result = string.replace(/^([a-z])|([A-Z])/g, function (match) {\n    return match.toUpperCase();\n  });\n  return result;\n};\n\nconst getNumber = (string) => {\n  let number = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].isNumeric()) {\n      number = number + string[i];\n    }\n  }\n  return number;\n};\n\n/*\n  Get the number of unique elements in an array.\n  >>> getUniqueElements([1, 2, 3, 4, 5, 3])\n  3\n  >>> getUniqueElements([1, 2, 3, 4, 5, 3, 1, 2])\n  4\n  */\nconst getUniqueElements = (array) => {\n  const uniqueElements = [];\n  const uniqueArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (uniqueElements.indexOf(array[i]) === -1) {\n      uniqueElements.push(array[i]);\n      uniqueArray.push(array[i]);\n    }\n  }\n  return uniqueElements.length;\n};\n\nconst isEven = (number) => {\n  return number % 2 === 0;\n};\n\nconst isOdd = (number) => {\n  return number % 2 === 1;\n};\n\nconst getAverage = (array) => {\n  return sum(array) / array.length;\n};\n\nconst sum = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum = sum + array[i];\n  }\n  return sum;\n};\n\nconst isNumeric = (string) => {\n  return string.match(/^[0-9]*$/);\n};\n\nconst isAlphanumeric = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isAlpha = (string) => {\n  return string.match(/^[a-zA-Z]+$/);\n};\n\nconst isAlphaNumeric = (string) => {\n  return string.match(/^[a-zA-Z0-9]+$/);\n};\n\nconst isCapitalized = (string) => {\n  return string.match(/^[A-Z]+$/);\n};\n\nconst isPunctuated = (string) => {\n  return string.match(/^[A-Za-z]+$/);\n};\n\nconst isWhitespace = (string) => {\n  return string.match(/^[\\s]+$/);\n};\n\nconst isVowel = (string) => {\n  return string.match(/^[AEIOU]{1}$/);\n};\n\nconst isSorted = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort();\n  for (let i = 0; i < sortedArray.length - 1; i++) {\n    if (sortedArray[i + 1] < sortedArray[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isSortedDescending = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort(function (a, b) {\n    return b - a;\n  });\n  for (let i = 0; i < sortedArray.length - 1; i++) {\n    if (sortedArray[i + 1] > sortedArray[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isSameString = (string1, string2) => {\n  if (string1 === string2) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSameStringIgnoreCase = (string1, string2) => {\n  if (impudentCase(string1) === impudentCase(string2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSameStringIgnoreCaseCase = (string1, string2) => {\n  if (impudentCase(string1) === impudentCase(string2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isInRange = (number, start, end) => {\n  return number >= start && number <= end;\n};\n\nmodule.exports = {\n  capitalize,\n  getAverage,\n  getUniqueElements,\n  isEven,\n  isOdd,\n  getNumber,\n  isAlpha,\n  isAlphanumeric,\n  isAlphaNumeric,\n  isNumeric,\n  isCapitalized,\n  isPunctuated,\n  isWhitespace,\n  isVowel,\n  isSorted,\n  isSortedDescending,\n  isSameString,\n  isSameStringIgnoreCase,\n  isInRange\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((prev, current) => prev + current, '')\n}\n\n/*\n  # Count number of occurrences of character in string\n  >>> count('Hello World', 'Hello')\n  1\n  >>> count('Hello World', 'hello')\n  2\n  >>> count('Hello World', 'Hello world')\n  1\n  >>> count('Hello World', 'He')\n  1\n  >>> count('Hello World', 'Hello World')\n  1\n  >>> count('Hello World', 'World')\n  1\n  >>> count('Hello World', 'World')\n  1\n  >>> count('Hello World', 'World')\n  1\n  >>> count('Hello World', 'Hello World')\n  1\n  >>> count('Hello World', 'Hello World', 'Hello')\n  1\n  >>> count('Hello World', 'Hello World', 'Hello')\n  1\n  >>> count('Hello World', 'Hello World', 'World')\n  1\n  >>> count('Hello World', 'Hello World', 'World')\n  1\n  >>> count('Hello World', 'Hello World', 'World')\n  1\n  >>> count('Hello World', 'Hello World', 'World')\n  1\n  */\nconst count = (string, character) => {\n  return string.split(character).filter(Boolean).length\n}\n\n/*\n  # Find the longest string in a list of strings\n  >>> longest([])\n  ''\n  >>> longest(['Hello', 'World', 'Hello', 'World'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', 'World', 'Hello', 'World', 'Hello'])\n  'Hello'\n  >>> longest(['Hello', '"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * @param {string} string\n  * @param {string} substring\n  * @returns {boolean}\n  * @example\n  *\n  * Given 'abcdefg' and 'bcdefg', return false.\n  * Given 'abcdefg' and 'defg', return false.\n  * Given 'abcdefg' and 'cdefg', return false.\n  * Given 'abcdefg' and 'efg', return true.\n  * Given 'abcdefg' and 'efgh', return true.\n  * Given 'abcdefg' and 'gh', return false.\n  * Given 'abcdefg' and 'fgh', return false.\n  * Given 'abcdefg' and 'defgh', return true.\n  * Given 'abcdefg' and 'efghi', return true.\n  * Given 'abcdefg' and 'fghi', return false.\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n  * @param {string} string\n  * @param {string} substring\n  * @returns {boolean}\n  * @example\n  *\n  * Given 'abcdefg' and 'defg', return false.\n  * Given 'abcdefg' and 'cdefg', return false.\n  * Given 'abcdefg' and 'efg', return true.\n  * Given 'abcdefg' and 'efgh', return true.\n  * Given 'abcdefg' and 'gh', return false.\n  * Given 'abcdefg' and 'fgh', return false.\n  * Given 'abcdefg' and 'defgh', return true.\n  * Given 'abcdefg' and 'efghi', return true.\n  * Given 'abcdefg' and 'fghi', return false.\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n  * @param {string} string\n  * @param {string} substring\n  * @returns {boolean}\n  * @example\n  *\n  * Given 'abcdefg' and 'defg', return false.\n  * Given 'abcdefg' and 'cdefg', return false.\n  * Given 'abcdefg' and 'efg', return true.\n  * Given 'abcdefg' and 'efgh', return true.\n  * Given 'abcdefg' and 'gh', return false.\n  * Given 'abcdefg' and 'fgh', return false.\n  * Given 'abcdefg' and 'defgh', return true.\n  * Given 'abcdefg' and 'efghi', return true.\n  * Given 'abcdefg' and 'fghi', return false.\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n  * @param {string} string\n  * @param {string} substring\n  * @returns {boolean}\n  * @example\n  *\n  * Given 'abcdefg' and 'defg', return false.\n  * Given 'abcdefg' and 'cdefg', return false.\n  * Given 'abcdefg' and 'efg', return true.\n  * Given 'abcdefg' and 'efgh', return true.\n  * Given 'abcdefg' and 'gh', return false.\n  * Given 'abcdefg' and 'fgh', return false.\n  * Given 'abcdefg' and 'defgh', return true.\n  * Given 'abcdefg' and 'efghi', return true.\n  * Given 'abcdefg' and 'fghi', return false.\n  */\nconst isSubstringOf = (string, substring) => {\n  return string.startsWith(substring);\n};\n\nexport {\n  filterByPrefix,\n  startsWith,\n  contains,\n  endsWith,\n  isSubstringOf\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n// TEST\nconsole.log(catchPositive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  if (n === 0) return false\n  if (n === 1) return true\n  let x = Math.sqrt(n)\n  for (let i = 2; i <= x; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/**\n * @function prime\n * @description Return the prime numbers in a given range\n * @param {Number} lowerBound\n * @param {Number} upperBound\n * @returns {Array}\n */\nconst prime = (lowerBound, upperBound) => {\n  let primeArray = []\n  for (let i = lowerBound; i < upperBound; i++) {\n    if (isPremier(i)) {\n      primeArray.push(i)\n    }\n  }\n  return primeArray\n}\n\n/**\n * @function isPrime\n * @description Return if a given number is prime or not\n * @param {Number} n\n * @returns {Boolean}\n */\nconst isPrime = (n) => {\n  if (n === 0) return false\n  if (n === 1) return true\n  let x = Math.sqrt(n)\n  for (let i = 2; i <= x; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nexport {prime, isPrime}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let min = xs[n - 1];\n  let max = xs[0];\n  let i = 0;\n  while (i < n) {\n    let x = xs[i];\n    if (x > max) {\n      max = x;\n    } else if (x < min) {\n      min = x;\n    }\n    i++;\n  }\n  if (max == min) {\n    // all coefficients are zero\n    return -min;\n  }\n  let k = n / 2;\n  let x0 = -(min + max) / 2;\n  let x1 = -(min - max) / 2;\n  let d = x1 - x0;\n  if (Math.abs(d) < 1e-15) {\n    // zero found\n    return x0;\n  }\n  let num = 1;\n  let den = 1;\n  for (i = 1; i <= k; i++) {\n    num *= i;\n    den *= n - i;\n  }\n  let diff = poly(x0) - poly(x1);\n  let a = num / den;\n  let b = poly(x0) - a * poly(x1);\n  let c = poly(x1) - a * poly(x0);\n  let diff2 = Math.pow(diff, 2) + Math.pow(b, 2) - 4 * a * c;\n  if (diff2 > 0) {\n    return x0;\n  } else if (diff2 == 0) {\n    // two solutions\n    return -b / (2 * a);\n  } else {\n    // no solution\n  }\n}\n\n/*\n  x is an interval.\n  We assume that a is a list of coefficients of polynomial x^n + a_0x^(n-1) + a_1x^(n-2) +....\n  x = findRoot(x, a, b, precision) returns only one point of the interval.\n  If there are many possible points, one of them is returned.\n  We are given a and b are the interval boundaries.\n  We need only to consider interval with length at least one.\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 2)\n  [-1.0, 2.0]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 3)\n  [-1.0, 1.0]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 4)\n  [-1.0, 0.5]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 5)\n  [-1.0, 0.25]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 6)\n  [-1.0, 0.125]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 7)\n  [-1.0, 0.0625]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 8)\n  [-1.0, 0.03125]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 9)\n  [-1.0, 0.0225]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 10)\n  [-1.0, 0.0156]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 11)\n  [-1.0, 0.0129]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 12)\n  [-1.0, 0.0109]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 13)\n  [-1.0, 0.0093]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 14)\n  [-1.0, 0.0078]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 15)\n  [-1.0, 0.0068]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 16)\n  [-1.0, 0.0058]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 17)\n  [-1.0, 0.0049]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 18)\n  [-1.0, 0.0041]\n  >>> findRoot([1, 2, 3], [0, 1, 3], [2, 4, 3], 19)\n  [-1.0,"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3 - b % 3)\n  const sortedList = []\n  for (let i = 0; i < sorted.length; i += 3) {\n    sortedList.push(sorted[i + 1], sorted[i + 2])\n  }\n  return sortedList\n}\n\n// TEST\nconst test = (t) => {\n  t.equal(sortThird([1, 2, 3]), [1, 2, 3], \"should return the list sorted\")\n  t.equal(sortThird([5, 6, 3, 4, 8, 9, 2]), [2, 6, 3, 4, 8, 9, 5], \"should return the list sorted\")\n  t.end()\n}\n\nexports.sortThird = sortThird\nexports.test = test\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  const ret = []\n  for (let i = 0, len = l.length; i < len; i++) {\n    if (l[i] === l[i + 1]) {\n      ret.push(l[i])\n      i++\n    }\n  }\n  return ret\n}\n\n/*\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst pair = (l) => {\n  const ret = []\n  for (let i = 0, len = l.length; i < len; i++) {\n    if (l[i]!== l[i + 1]) {\n      ret.push([l[i], l[i + 1]])\n    }\n  }\n  return ret\n}\n\nmodule.exports = {\n  alone,\n  pair\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Given a list of lists, return the list of lists that have their sum equal to the given sum.\n  >>> soapSum([[1, 2, 3], [2, 3, 4], [4, 5, 6], [5, 6, 7]])\n  [[1, 2, 3, 4, 5, 6, 7]]\n  >>> soapSum([[1, 2, 3], [2, 3, 4], [4, 5, 6], [5, 6, 7], [8, 9, 10], [9, 10, 11], [10, 11, 12]])\n  [[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12]]\n  >>> soapSum([[1, 2, 3], [2, 3, 4], [4, 5, 6], [5, 6, 7], [8, 9, 10], [9, 10, 11], [10, 11, 12], [13, 14, 15], [14, 15, 16], [15, 16, 17]])\n  [[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17]]\n  >>> soapSum([[1, 2, 3], [2, 3, 4], [4, 5, 6], [5, 6, 7], [8, 9, 10], [9, 10, 11], [10, 11, 12], [13, 14, 15], [14, 15, 16], [15, 16, 17], [18, 19, 20], [19, 20, 21], [20, 21, 22], [21, 22, 23], [22, 23, 24], [23, 24, 25], [24, 25, 26], [25, 26, 27], [26, 27, 28], [27, 28, 29], [28, 29, 30], [29, 30, 31], [30, 31, 32]])\n  [[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31], [32]]\n  >>> soapSum([[1, 2, 3], [2, 3, 4], [4, 5, 6], [5, 6, 7], [8, 9, 10], [9, 10, 11], [10, 11, 12], [13, 14, 15], [14, 15, 16], [15, 16, 17], [18, 19, 20], [19, 20, 21], [20, 21, 22], [21, 22, 23], [22, 23, 24], [23, 24, 25], [24, 25, 26], [25, 26, 27], [26, 27, 28], [27, 28, 29], [28, 29, 30], [29, 30, 31], [30, 31, 32], [33, 34, 35], [34, 35, 36], [35, 36, 37], [36, 37, 38], [37, 38, 39], [38, 39, 40], [39, 40, 41], [40, 41, 42], [41, 42, 43], [42, 43, 44], [43, 44, 45], [44, 45, 46], [45, 46, 47], [46, 47, 48], [47, 48, 49], [48, 49, 50], [49, 50, 51], [50, 51, 52], [51, 52, 53], [52, 53, 54], [53, 54, 55], [54, 55, 56], [55, 56, 57], [56, 57, 58], [57, 58, 59], [58, 59, 60], [59, 60, 61], [60, 61, 62], [61, 62, 63], [62, 63, 64], [63, 64, 65], [64, 65, 66], [65, 66, 67], [66, 67, 68], [67, 68, 69], [68, 69, 70], [69, 70, 71], [70, 71, 72], [71, 72, 73], [72, 73, 74], [73, 74, 75], [74, 75, 76], [75, 76, 77], [76, 77, 78], [77, 78, 79], [78, 79, 80], [79, 80, 81], [80, 81, 82], [81, 82, 83], [82, 83, 84], [83, 84, 85], [84, 85, 86], [85, 86, 87], [86, 87, 88], [87, 88, 89], [88, 89, 90], [89, 90, 91], [90, 91, 92], [91, 92, 93], [92, 93, 94], [93, 94, 95], [94, 95, 96], [95, 96, 97], [96, 97, 98], [97, 98, 99], [98, 99, 100]])\n  [[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31], [32]]\n  */\nconst soapSum = (l) => {\n  let result = [];\n  let currentSum = 0;\n  for (let i = 0; i < l.length; i++) {\n    currentSum += l[i];\n    if (currentSum === sum) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n}\n\n/*\n  >>> isSum([1, 2, 3, 4, 5, 6, 7])\n  True\n  >>> isSum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  False\n  >>> isSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  False\n  >>> isSum([1, 2, 3, 4, 5, 6"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const d7 = div(n, 11);\n  const d13 = div(n, 13);\n  const result = [\n    (d7 == 0? n : 'Fizz'),\n    (d7 == 1? n : 'Buzz'),\n    (d7 == 2? n : 'Fizz'),\n    (d7 == 3? n : 'Buzz'),\n    (d13 == 0? n : 'Fizz'),\n    (d13 == 1? n : 'Buzz'),\n    (d13 == 2? n : 'Fizz'),\n    (d13 == 3? n : 'Buzz'),\n  ];\n  return result;\n};\n\n/*Return a string of the numbers from 1 to n.\n  >>> fizzBuzz(10)\n  '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10'\n  >>> fizzBuzz(15)\n  '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15'\n  */\nconst fizzBuzz = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i.toString());\n  }\n  return result.join('\\n');\n};\n\nmodule.exports = {\n  fizzBuzz,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sortEven = (a, b) => {\n    if (a % 2!== b % 2) {\n      return a < b? -1 : 1;\n    }\n    return 0;\n  };\n  const l1 = l.slice(0, l.length / 2);\n  const l2 = l.slice(l.length / 2);\n  return l1.concat(sortEven(l2, l1).map(x => l1[x - 1]));\n};\n\n/**\n  Given a list l, return a list r such that r is the same as l but in sorted order.\n  >>> sort([2, 5, 1, 4, 6, 3, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> sort([2, 5, 1, 4, 6, 3, 7])\n  [2, 3, 4, 5, 6, 7, 1]\n  >>> sort([5, 1, 4, 6, 3, 7, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst sort = (l) => {\n  const sort = (a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  };\n  const l1 = l.slice(0);\n  const l2 = l.slice(1);\n  return sort(l1, l2).map(x => l1[x - 1]);\n};\n\n/**\n  Given a list l, return a list r such that r is the same as l but in reverse sorted order.\n  >>> sortReverse([2, 5, 1, 4, 6, 3, 7])\n  [7, 6, 5, 4, 3, 2, 1]\n  >>> sortReverse([2, 5, 1, 4, 6, 3, 7])\n  [7, 6, 5, 4, 3, 2, 1]\n  >>> sortReverse([5, 1, 4, 6, 3, 7, 2])\n  [7, 6, 5, 4, 3, 2, 1]\n  */\nconst sortReverse = (l) => {\n  const sort = (a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  };\n  const l1 = l.slice(0);\n  const l2 = l.slice(1);\n  return sort(l2, l1).reverse().map(x => l1[x - 1]);\n};\n\nexport {\n  sort,\n  sortReverse,\n  sortEven,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 2)\n      groups2.push(group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups2) {\n    if (group.length == 3)\n      groups.push(group.slice(0, 1) + group[2]);\n    else\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode = (s) => {\n  let groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups2.push(group.slice(2, 3) + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups2) {\n    if (group.length == 2)\n      groups.push(group.slice(1, 2) + group[1]);\n    else\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\nconst decode2 = (s) => {\n  let groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 2)\n      groups2.push(group.slice(1, 2) + group[1]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups2) {\n    if (group.length == 2)\n      groups.push(group.slice(1, 2) + group[0]);\n    else\n      groups.push(group);\n  }\n  return groups.join('');\n}\n\nexport default {\n  encodeCyclic,\n  decodeCyclic,\n  decode,\n  decode2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n    let a = 1, b = 1, count = 0;\n    while(count < n){\n        let a = b, b = a + b;\n        if(isPrime(b)) count++;\n    }\n    return b;\n};\n\n//console.log(premierFib(10));\n//console.log(premierFib(50));\n//console.log(premierFib(100));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n        let j = i + 1;\n        if (l[i] === 0 && l[j] === 0) {\n            count++;\n        }\n    }\n    return count === 3;\n};\n\nexport {\n    tripleTotalToZero,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(0)\n  }\n  for (let i = 0; i < n; i++) {\n    cars[i] = i\n  }\n  cars.push(n)\n\n  let collisions = 0\n  let car1 = 0\n  let car2 = 0\n  let car3 = 0\n  let car4 = 0\n  let car5 = 0\n  let car6 = 0\n  let car7 = 0\n  let car8 = 0\n  let car9 = 0\n  let car10 = 0\n  let car11 = 0\n  let car12 = 0\n  let car13 = 0\n  let car14 = 0\n  let car15 = 0\n  let car16 = 0\n  while (cars[car1] < cars[car2]) {\n    car3 = cars[car1]\n    car4 = cars[car2]\n    car5 = (car3 + 1) % n\n    car6 = (car4 + 1) % n\n    car7 = (car5 + 1) % n\n    car8 = (car6 + 1) % n\n    car9 = (car7 + 1) % n\n    car10 = (car8 + 1) % n\n    car11 = (car9 + 1) % n\n    car12 = (car10 + 1) % n\n    car13 = (car11 + 1) % n\n    car14 = (car12 + 1) % n\n    car15 = (car13 + 1) % n\n    car16 = (car14 + 1) % n\n    if (cars[car3] < cars[car4]) {\n      cars[car1] = car4\n      cars[car2] = car3\n      collisions++\n    }\n    if (cars[car5] < cars[car6]) {\n      cars[car1] = car6\n      cars[car2] = car5\n      collisions++\n    }\n    if (cars[car7] < cars[car8]) {\n      cars[car1] = car8\n      cars[car2] = car7\n      collisions++\n    }\n    if (cars[car9] < cars[car10]) {\n      cars[car1] = car10\n      cars[car2] = car9\n      collisions++\n    }\n    if (cars[car11] < cars[car12]) {\n      cars[car1] = car12\n      cars[car2] = car11\n      collisions++\n    }\n    if (cars[car13] < cars[car14]) {\n      cars[car1] = car14\n      cars[car2] = car13\n      collisions++\n    }\n    if (cars[car15] < cars[car16]) {\n      cars[car1] = car16\n      cars[car2] = car15\n      collisions++\n    }\n    car1 = (car1 + 1) % n\n    car2 = (car2 + 1) % n\n  }\n  return collisions\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((item) => item + 1)\n}\n\n/* Return sum of list.\n  >>> sumList([1, 2, 3, 4, 5])\n  15\n  >>> sumList([-1, 1, 2, -1, 5, -1, 9])\n  -1\n  >>> sumList([])\n  0\n  */\nconst sumList = (l) => {\n  return l.reduce((a, b) => a + b)\n}\n\n/* Return maximum of list.\n  >>> maxList([-1, -1, -1, 0, 1])\n  1\n  >>> maxList([-1, -1, -1, 0, 1, 2])\n  2\n  >>> maxList([-1, -1, -1, 0, 1, 2, 3, 4, 5])\n  5\n  */\nconst maxList = (l) => {\n  return Math.max(...l)\n}\n\n/* Return minimum of list.\n  >>> minList([-1, -1, -1, 0, 1])\n  -1\n  >>> minList([-1, -1, -1, 0, 1, 2])\n  -1\n  >>> minList([-1, -1, -1, 0, 1, 2, 3, 4, 5])\n  0\n  */\nconst minList = (l) => {\n  return Math.min(...l)\n}\n\n/* Return a list with the elements in the interval [start, end].\n  >>> listRange(0, 2, 2)\n  [0, 1]\n  >>> listRange(0, 2, 1)\n  [0]\n  >>> listRange(0, 2, 0)\n  []\n  >>> listRange(0, 2, -1)\n  []\n  >>> listRange(0, 2, -2)\n  []\n  >>> listRange(0, 2, -3)\n  []\n  >>> listRange(0, 2, 3)\n  []\n  */\nconst listRange = (start, end, step) => {\n  const list = []\n  for (let i = start; i <= end; i += step) {\n    list.push(i)\n  }\n  return list\n}\n\n/* Return a list of numbers starting with start, ending with end.\n  >>> listNumbers(0, 1, 2)\n  [0, 1, 2]\n  >>> listNumbers(0, 1, 1)\n  []\n  >>> listNumbers(0, 1, 0)\n  []\n  >>> listNumbers(0, 1, -1)\n  []\n  >>> listNumbers(0, 1, -2)\n  []\n  >>> listNumbers(0, 1, -3)\n  []\n  */\nconst listNumbers = (start, end, step) => {\n  const list = []\n  for (let i = start; i <= end; i += step) {\n    list.push(i)\n  }\n  return list\n}\n\n/* Return a list of strings starting with start, ending with end.\n  >>> listStrings(0, 1, 2)\n  ['0', '1', '2']\n  >>> listStrings(0, 1, 1)\n  []\n  >>> listStrings(0, 1, 0)\n  []\n  >>> listStrings(0, 1, -1)\n  []\n  >>> listStrings(0, 1, -2)\n  []\n  >>> listStrings(0, 1, -3)\n  []\n  */\nconst listStrings = (start, end, step) => {\n  const list = []\n  for (let i = start; i <= end; i += step) {\n    list.push(String(i))\n  }\n  return list\n}\n\n/* Return a list of booleans starting with start, ending with end.\n  >>> listBools(0, 1, 2)\n  [false, true, true]\n  >>> listBools(0, 1, 1)\n  []\n  >>> listBools(0, 1, 0)\n  []\n  >>> listBools(0, 1, -1)\n  []\n  >>> listBools(0, 1, -2)\n  []\n  >>> listBools(0, 1, -3)\n  []\n  */\nconst listBools = (start, end, step) => {\n  const list = []\n  for (let i = start; i <= end; i += step) {\n    list.push(i % 2 == 1)\n  }\n  return list\n}\n\n/* Return a list of characters starting with start, ending with end.\n  >>> listChars(0, 1, 2)\n  ['0', '1', '2']\n  >>> listChars(0, 1, 1)\n  []\n  >>> listChars(0, 1, 0)\n  []\n  >>> listChars(0, 1, -1)\n  []\n  >>> listChars(0, 1, -2)\n  []\n  >>> listChars(0, 1, -3)\n  []\n  */\nconst listChars = (start, end, step) => {\n  const list = []\n  for (let i = start; i <= end; i += step) {\n    list.push(String.fromCharCode(i))\n  }\n  return list\n}\n\n/* Return a list of the first n elements of a list.\n  >>> listFirst(0, 0, 0, [])\n  []\n  >>> listFirst(0, 0, 0, [1, 2, 3])\n  []\n  >>> listFirst(0, 0, 0, [1])\n  [1]\n  >>> listFirst(0, 0, 0, [1, 2, 3])\n  [1]\n  >>> listFirst(0, 0, 0, [1, 2, 3, 4])\n  [1, 2, 3]\n  >>> listFirst(0, 0, 0, [1, 2, 3, 4, 5])\n  [1, 2, 3]\n  >>> listFirst(0, 0, 1, [1, 2, 3])\n  [1]\n  >>> listFirst(0,"}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n    let i, j, k, c, ln, u = 0;\n    for (i = 0, ln = l.length; i < ln; i += 1) {\n        for (j = 0, u += l[i]; j < ln; j += 1) {\n            if (l[i] + l[j] === 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\nexport {copulateUnionToZero};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n    if (x < 0) {\n        throw new Error(`Cannot convert ${x} to base ${base}`);\n    }\n    if (x == 0) {\n        return '0';\n    }\n\n    let res = '';\n    let m = Math.pow(base, x.length);\n    for (let i = x.length - 1; i >= 0; i--) {\n        res += x[i] + (x[i] == 1? '' : (m * base));\n    }\n    return res;\n}\n\n//TODO: write a function to convert a number in base b to number in base a\nconst convertBase = (x, b, a) => {\n    return x * Math.pow(a, x.length) % b;\n}\n\n//TODO: write a function to convert a number in base b to number in base a\nconst convertBaseBack = (x, a, b) => {\n    return (x * Math.pow(b, x.length)) % a;\n}\n\n//TODO: write a function to convert a number in base b to number in base a\nconst convertBaseBackByRecur = (x, a, b) => {\n    if (x === 0) {\n        return 0;\n    }\n    return convertBaseBack(convertBase(x, b, a), a, b);\n}\n\n//TODO: write a function to convert a number in base b to number in base a\nconst convertBaseByRecur = (x, b, a) => {\n    if (x === 0) {\n        return 0;\n    }\n    return convertBase(convertBaseBack(x, a, b), a, b);\n}\n\nconst baseConvert = (x, base) => {\n    if (base === 2) {\n        return varietyBase(x, 2);\n    }\n    if (base === 3) {\n        return varietyBase(x, 3);\n    }\n    if (base === 4) {\n        return varietyBase(x, 4);\n    }\n    if (base === 5) {\n        return varietyBase(x, 5);\n    }\n    if (base === 6) {\n        return varietyBase(x, 6);\n    }\n    if (base === 7) {\n        return varietyBase(x, 7);\n    }\n    if (base === 8) {\n        return varietyBase(x, 8);\n    }\n    if (base === 9) {\n        return varietyBase(x, 9);\n    }\n    if (base === 10) {\n        return varietyBase(x, 10);\n    }\n}\n\nconst variety = (x) => {\n    if (x === 0) {\n        return '0';\n    }\n    return baseConvert(x, 2) + '1' + baseConvert(convertBaseBackByRecur(x, 2, 3), 3, 2);\n}\n\nconst varietyBack = (x) => {\n    return convertBaseBackByRecur(x, 3, 2);\n}\n\nconst varietyBackByRecur = (x) => {\n    if (x === 0) {\n        return 0;\n    }\n    return varietyBack(convertBaseBackByRecur(x, 3, 2));\n}\n\nconst varietyByRecur = (x) => {\n    if (x === 0) {\n        return 0;\n    }\n    return variety(convertBaseBackByRecur(x, 3, 2));\n}\n\nconsole.log(variety(2));\nconsole.log(varietyBack(2));\nconsole.log(varietyBackByRecur(2));\nconsole.log(varietyByRecur(2));\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n    return (a * h) / 2;\n};\n\nexport {\n    triangulumArea\n};<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const fib1 = fib1\n  const fib2 = fib2\n  if(n === 0) {\n    return 0\n  } else if(n === 1) {\n    return 0\n  } else if(n === 2) {\n    return 2\n  } else if(n === 3) {\n    return 0\n  } else if(n === 4) {\n    return 2 + fib1(5)\n  } else if(n === 5) {\n    return fib2(4) + fib1(3)\n  } else if(n === 6) {\n    return fib2(5) + fib1(4)\n  } else if(n === 7) {\n    return fib2(6) + fib1(5)\n  } else if(n === 8) {\n    return fib2(7) + fib1(6)\n  } else if(n === 9) {\n    return fib2(8) + fib1(7)\n  } else if(n === 10) {\n    return fib2(9) + fib1(8)\n  } else if(n === 11) {\n    return fib2(10) + fib1(9)\n  } else if(n === 12) {\n    return fib2(11) + fib1(10)\n  } else if(n === 13) {\n    return fib2(12) + fib1(11)\n  } else if(n === 14) {\n    return fib2(13) + fib1(12)\n  } else if(n === 15) {\n    return fib2(14) + fib1(13)\n  } else if(n === 16) {\n    return fib2(15) + fib1(14)\n  } else if(n === 17) {\n    return fib2(16) + fib1(15)\n  } else if(n === 18) {\n    return fib2(17) + fib1(16)\n  } else if(n === 19) {\n    return fib2(18) + fib1(17)\n  } else if(n === 20) {\n    return fib2(19) + fib1(18)\n  } else if(n === 21) {\n    return fib2(20) + fib1(19)\n  } else if(n === 22) {\n    return fib2(21) + fib1(20)\n  } else if(n === 23) {\n    return fib2(22) + fib1(21)\n  } else if(n === 24) {\n    return fib2(23) + fib1(22)\n  } else if(n === 25) {\n    return fib2(24) + fib1(23)\n  } else if(n === 26) {\n    return fib2(25) + fib1(24)\n  } else if(n === 27) {\n    return fib2(26) + fib1(25)\n  } else if(n === 28) {\n    return fib2(27) + fib1(26)\n  } else if(n === 29) {\n    return fib2(28) + fib1(27)\n  } else if(n === 30) {\n    return fib2(29) + fib1(28)\n  } else if(n === 31) {\n    return fib2(30) + fib1(29)\n  } else if(n === 32) {\n    return fib2(31) + fib1(30)\n  } else if(n === 33) {\n    return fib2(32) + fib1(31)\n  } else if(n === 34) {\n    return fib2(33) + fib1(32)\n  } else if(n === 35) {\n    return fib2(34) + fib1(33)\n  } else if(n === 36) {\n    return fib2(35) + fib1(34)\n  } else if(n === 37) {\n    return fib2(36) + fib1(35)\n  } else if(n === 38) {\n    return fib2(37) + fib1(36)\n  } else if(n === 39) {\n    return fib2(38) + fib1(37)\n  } else if(n === 40) {\n    return fib2(39) + fib1(38)\n  } else if(n === 41) {\n    return fib2(40) + fib1(39)\n  } else if(n === 42) {\n    return fib2(41) + fib1(40)\n  } else if(n === 43) {\n    return fib2(42) + fib1(41)\n  } else if(n === 44) {\n    return fib2(43) + fib1(42)\n  } else if(n === 45) {\n    return fib2(44) + fib1(43)\n  } else if(n === 46) {\n    return fib2(45) + fib1(44)\n  } else if(n === 47) {\n    return fib2(46) + fib1(45)\n  } else if(n === 48) {\n    return fib2(47) + fib1(46)\n  } else if(n === 49) {\n    return fib2(48) + fib1(47)\n  } else if(n === 50) {\n    return fib2(49) + fib1(48)\n  } else if(n === 51) {\n    return fib2(50) + fib1(49)\n  } else if(n === 52) {\n    return fib2(51) + fib1(50)\n  } else if(n === 53) {\n    return fib2(52) + fib1(51)\n  } else if(n === 54) {\n    return fib2(53) + fib1(52)\n  } else if(n === 55) {\n    "}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n    const a = l.slice(0, l.length / 2);\n    const b = l.slice(l.length / 2, l.length);\n    return (a.length === 0 || b.length === 0)? 0 : (a[0] + b[0]) / 2;\n};\n\n// Tests\n\nconst test_cases = [\n    [[1, 2, 3, 4], 3],\n    [[1, 2, 3, 4], 2],\n    [[1, 2, 3, 4], 1],\n    [[1, 2, 3, 4], 0],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9], 7],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9], 6],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9], 5],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9], 4],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9], 3],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9], 2],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9], 1],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9], 0]\n];\n\ntest_cases.forEach((test_case) => {\n    console.log('Testing: ', test_case);\n    console.log('Result: ', median(test_case[0]));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const len = text.length;\n    let i = 0;\n    let j = len - 1;\n    while (i <= j) {\n        while (text[i]!== text[j]) {\n            i++;\n            j--;\n        }\n        i++;\n        j--;\n    }\n    return i === j;\n};\n\nexport default isPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const n1 = n - 1;\n  let i = 2;\n  while (i <= n1) {\n    if (n % i == 0) {\n      return p * (n / i) % p;\n    }\n    i++;\n  }\n  return n;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n// encode the given string into a base26\nconst encode = (s) => {\n  let encoded = \"\";\n  for(let i = 0; i < s.length; i++) {\n    encoded += encodeShift(s[i]);\n  }\n  return encoded;\n}\n\n// decode the given string from base26\nconst decode = (s) => {\n  let decoded = \"\";\n  for(let i = 0; i < s.length; i++) {\n    decoded += decodeShift(s[i]);\n  }\n  return decoded;\n}\n\nconst testEncode = (s, expected) => {\n  let encoded = encode(s);\n  if(encoded === expected) {\n    console.log(\"Encode Test Successful\");\n  } else {\n    console.log(\"Encode Test Failed\");\n  }\n}\n\nconst testDecode = (s, expected) => {\n  let decoded = decode(s);\n  if(decoded === expected) {\n    console.log(\"Decode Test Successful\");\n  } else {\n    console.log(\"Decode Test Failed\");\n  }\n}\n\n// encode and decode strings\ntestEncode(\"Hello world\", \"b3a1\");\ntestDecode(\"b3a1\", \"Hello world\");\ntestEncode(\"Hello world\", \"g4h5\");\ntestDecode(\"g4h5\", \"Hello world\");\ntestEncode(\"\", \"\");\ntestDecode(\"\", \"\");\ntestEncode(\" \", \"\");\ntestDecode(\" \", \"\");\ntestEncode(\" \", \" \");\ntestDecode(\" \", \" \");\ntestEncode(\" \", \" \");\ntestDecode(\" \", \" \");\n\n// encode strings using encode_shift\ntestEncode(\"Hello world\", \"g3h3\");\ntestDecode(\"g3h3\", \"Hello world\");\ntestEncode(\"Hello world\", \"g5h5\");\ntestDecode(\"g5h5\", \"Hello world\");\ntestEncode(\"\", \"\");\ntestDecode(\"\", \"\");\ntestEncode(\" \", \"\");\ntestDecode(\" \", \"\");\ntestEncode(\" \", \" \");\ntestDecode(\" \", \" \");\ntestEncode(\" \", \" \");\ntestDecode(\" \", \" \");\n\n// encode strings using encode_shift\ntestEncode(\"Hello world\", \"g4h5\");\ntestDecode(\"g4h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"g5h5\");\ntestDecode(\"g5h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h3g5\");\ntestDecode(\"h3g5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h5g5\");\ntestDecode(\"h5g5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h4g5\");\ntestDecode(\"h4g5\", \"Hello world\");\n\n// encode strings using encode_shift\ntestEncode(\"Hello world\", \"g4h5\");\ntestDecode(\"g4h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"g5h5\");\ntestDecode(\"g5h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h3g5\");\ntestDecode(\"h3g5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h5g5\");\ntestDecode(\"h5g5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h4g5\");\ntestDecode(\"h4g5\", \"Hello world\");\n\n// encode strings using encode_shift\ntestEncode(\"Hello world\", \"g4h5\");\ntestDecode(\"g4h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"g5h5\");\ntestDecode(\"g5h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h3g5\");\ntestDecode(\"h3g5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h5g5\");\ntestDecode(\"h5g5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h4g5\");\ntestDecode(\"h4g5\", \"Hello world\");\n\n// encode strings using encode_shift\ntestEncode(\"Hello world\", \"g4h5\");\ntestDecode(\"g4h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"g5h5\");\ntestDecode(\"g5h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h3g5\");\ntestDecode(\"h3g5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h5g5\");\ntestDecode(\"h5g5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h4g5\");\ntestDecode(\"h4g5\", \"Hello world\");\n\n// encode strings using encode_shift\ntestEncode(\"Hello world\", \"g4h5\");\ntestDecode(\"g4h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"g5h5\");\ntestDecode(\"g5h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h3g5\");\ntestDecode(\"h3g5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h5g5\");\ntestDecode(\"h5g5\", \"Hello world\");\ntestEncode(\"Hello world\", \"h4g5\");\ntestDecode(\"h4g5\", \"Hello world\");\n\n// encode strings using encode_shift\ntestEncode(\"Hello world\", \"g4h5\");\ntestDecode(\"g4h5\", \"Hello world\");\ntestEncode(\"Hello world\", \"g5h5\");\ntestDecode(\"g5h5\", \"Hello world\");\ntestEncode(\"Hello world"}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  const a = 'aeiouAEIOU';\n  const b = 'AEIOUaeiouAEIOU';\n  let text_array = text.split('');\n  let result = '';\n\n  for (let i = 0; i < text_array.length; i++) {\n    if (a.indexOf(text_array[i]) < 0 && b.indexOf(text_array[i]) < 0) {\n      result += text_array[i];\n    }\n  }\n\n  return result;\n};\n\nexport default getRidOfVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > t) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  returns the list of all the numbers below threshold\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  [1, 2, 4, 10]\n  >>> belowDoorway([1, 2, 4, 10], 5)\n  []\n  */\nconst belowDoorway2 = (l, t) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n}\n\nconst belowDoorway3 = (l, t) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > t) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Returns the list of the numbers in the list l that are below\n  threshold t, and the sum of these numbers is less than threshold\n  t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  [1, 2, 4, 10]\n  >>> belowDoorway([1, 2, 4, 10], 5)\n  []\n  >>> belowDoorway([1, 2, 4, 10], 20)\n  [1, 2, 4, 10]\n  */\nconst belowDoorway4 = (l, t) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n}\n\nmodule.exports = {\n  belowDoorway,\n  belowDoorway2,\n  belowDoorway3,\n  belowDoorway4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  if(x === 0) return y;\n  if(y === 0) return x;\n  let l = x % y;\n  if(l === 0) return y;\n  return lend(y, l);\n}\n\n/*Return the least common multiple of x and y\n  >>> lcm(4, 12)\n  12\n  >>> lcm(3, 7)\n  21\n  >>> lcm(5, 7)\n  35\n  >>> lcm(5, 0)\n  0\n  */\nconst lcm = (x, y) => {\n  return x * y / lend(x, y);\n}\n\n/*Return the greatest common divisor of x and y\n  >>> gcd(4, 12)\n  4\n  >>> gcd(3, 7)\n  1\n  >>> gcd(5, 7)\n  5\n  >>> gcd(5, 0)\n  0\n  */\nconst gcd = (x, y) => {\n  while(y) {\n    let r = x % y;\n    x = y;\n    y = r;\n  }\n  return x;\n}\n\n/*Return the smallest number divisible by x\n  >>> div(4, 12)\n  4\n  >>> div(3, 7)\n  0\n  >>> div(5, 7)\n  1\n  >>> div(5, 0)\n  0\n  */\nconst div = (x, y) => {\n  return y / gcd(x, y) * x;\n}\n\n/*Return the smallest number not divisible by x\n  >>> mod(4, 12)\n  8\n  >>> mod(3, 7)\n  3\n  >>> mod(5, 7)\n  6\n  >>> mod(5, 0)\n  0\n  */\nconst mod = (x, y) => {\n  return x - y * div(x, y);\n}\n\n/*Return the absolute value of x\n  >>> abs(-4)\n  4\n  >>> abs(4)\n  4\n  >>> abs(-1)\n  1\n  */\nconst abs = x => {\n  if(x >= 0) return x;\n  return -x;\n}\n\n/*Return x**y mod n\n  >>> pow(3, 2)\n  9\n  >>> pow(3, 2, 12)\n  9\n  >>> pow(3, 2, 12, 17)\n  9\n  >>> pow(3, 2, 12, 17, 19)\n  9\n  */\nconst pow = (x, y, n, m = 1) => {\n  if(y === 0) return 1;\n  let res = pow(x, y - 1, n, m * x);\n  if(y % 2 === 0) return res;\n  return n - res;\n}\n\n/*Return x**y mod n\n  >>> pow(3, 2, 12, 17)\n  9\n  */\nconst powInt = (x, y, n, m = 1) => {\n  if(y === 0) return 1;\n  let res = pow(x, y - 1, n, m * x);\n  if(y % 2 === 0) return res;\n  return n - res;\n}\n\n/*Return x**y mod n\n  >>> pow(3, 2, 12, 17, 19)\n  9\n  */\nconst powInt2 = (x, y, n, m = 1) => {\n  if(y === 0) return 1;\n  let res = pow(x, y - 1, n, m * x);\n  if(y % 2 === 0) return res;\n  return n - res;\n}\n\n/*Return x**y mod n\n  >>> pow(3, 2, 12, 17, 19)\n  9\n  */\nconst powInt3 = (x, y, n, m = 1) => {\n  if(y === 0) return 1;\n  let res = pow(x, y - 1, n, m * x);\n  if(y % 2 === 0) return res;\n  return n - res;\n}\n\nmodule.exports = {\n  lend,\n  lcm,\n  gcd,\n  div,\n  mod,\n  abs,\n  pow,\n  powInt,\n  powInt2,\n  powInt3\n}<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  const s0_length = s0.length;\n  const s1_length = s1.length;\n  if (s0_length!== s1_length) {\n    return false;\n  }\n  let i;\n  for (i = 0; i < s0_length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport {likeChars};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    return (n <= 1)? n : fib(n-1) + fib(n-2);\n};\n\n//console.log(fib(10));\n\n/* Return sum of Fibonacci numbers below n.\n  >>> fibSum(10)\n  55\n  >>> fibSum(1)\n  1\n  >>> fibSum(8)\n  21\n  */\nconst fibSum = (n) => {\n  return (n <= 1)? n : fibSum(n-1) + fibSum(n-2);\n};\n\n//console.log(fibSum(10));\n\n/* Return the number of primes below n.\n  >>> primeCount(10)\n  2\n  >>> primeCount(1)\n  0\n  >>> primeCount(8)\n  3\n  */\nconst primeCount = (n) => {\n  return (n <= 1)? 0 : primeCount(n-1) + primeCount(n-2);\n};\n\n//console.log(primeCount(10));\n\n/* Return the sum of all primes below n.\n  >>> primeSum(10)\n  55\n  >>> primeSum(1)\n  1\n  >>> primeSum(8)\n  21\n  */\nconst primeSum = (n) => {\n  return (n <= 1)? n : primeSum(n-1) + primeSum(n-2);\n};\n\n//console.log(primeSum(10));\n\n/* Return the sum of all primes below n.\n  >>> sumPrimes(10)\n  55\n  >>> sumPrimes(1)\n  1\n  >>> sumPrimes(8)\n  21\n  */\nconst sumPrimes = (n) => {\n  return (n <= 1)? n : sumPrimes(n-1) + sumPrimes(n-2);\n};\n\n//console.log(sumPrimes(10));\n\n/* Return the sum of all primes below n.\n  >>> sumPrimes2(10)\n  55\n  >>> sumPrimes2(1)\n  1\n  >>> sumPrimes2(8)\n  21\n  */\nconst sumPrimes2 = (n) => {\n  return (n <= 1)? n : sumPrimes2(n-1) + sumPrimes2(n-2);\n};\n\n//console.log(sumPrimes2(10));\n\n/* Return the sum of all primes below n.\n  >>> sumPrimes3(10)\n  55\n  >>> sumPrimes3(1)\n  1\n  >>> sumPrimes3(8)\n  21\n  */\nconst sumPrimes3 = (n) => {\n  return (n <= 1)? n : sumPrimes3(n-1) + sumPrimes3(n-2);\n};\n\n//console.log(sumPrimes3(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const open = brackets[0];\n  const close = brackets[brackets.length - 1];\n  for (let i = 0; i < brackets.length - 1; i++) {\n    if (brackets[i] == open) {\n      if (brackets[i + 1]!= close) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isBalanced(\"<>\")\n  true\n  >>> isBalanced(\"<><<<>>\")\n  true\n  >>> isBalanced(\"<><<<>><\")\n  false\n  >>> isBalanced(\"<><<<>><>\")\n  false\n  >>> isBalanced(\"<><<<>><>\")\n  false\n  >>> isBalanced(\"<<<>>\")\n  false\n  >>> isBalanced(\"<<<>>\")\n  false\n  >>> isBalanced(\"<<<>>\")\n  false\n  >>> isBalanced(\"<<<>\")\n  false\n  >>> isBalanced(\"<<<>\")\n  false\n  >>> isBalanced(\"<<<<>>\")\n  false\n  >>> isBalanced(\"<<<<>>\")\n  false\n  >>> isBalanced(\"<<<<>>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<\")\n  false\n  >>> isBalanced(\"<<<<\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<\")\n  false\n  >>> isBalanced(\"<<<<<\")\n  false\n  >>> isBalanced(\"<<<<<\")\n  false\n  >>> isBalanced(\"<<<<<>\")\n  false\n  >>> isBalanced(\"<<<<<>\")\n  false\n  >>> isBalanced(\"<<<<\")\n  false\n  >>> isBalanced(\"<<<<<>\")\n  false\n  >>> isBalanced(\"<<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<<\")\n  false\n  >>> isBalanced(\"<<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<<<<>\")\n  false\n  >>> isBalanced(\"<"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  const arr = Array.from(l);\n  let last = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < last) return false;\n    last = arr[i];\n  }\n  return true;\n};\n\n/*\n  * Return true if every element of a list is in b.\n  *\n  * NOTE: Doesn't work with string.\n  *\n  * Example:\n  *   >>> list_contains_all([1, 2, 3, 4, 5], [3, 4, 5])\n  *   true\n  *   >>> list_contains_all([1, 2, 3, 4, 5], [1, 2, 3])\n  *   false\n  */\nconst list_contains_all = (a, b) => {\n  const arr = Array.from(a);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== b[i]) return false;\n  }\n  return true;\n};\n\n/*\n  * Return true if every element of a list is in b.\n  *\n  * Example:\n  *   >>> list_contains_all([1, 2, 3, 4, 5], [3, 4, 5])\n  *   true\n  *   >>> list_contains_all([1, 2, 3, 4, 5], [1, 2, 3])\n  *   false\n  */\nconst list_contains_all_s = (a, b) => {\n  const arr = Array.from(a);\n  const arr_s = Array.from(b);\n  for (let i = 0; i < arr_s.length; i++) {\n    if (arr[i]!== arr_s[i]) return false;\n  }\n  return true;\n};\n\n/*\n  * Return true if every element of a list is in b.\n  *\n  * Example:\n  *   >>> list_contains_all_s([1, 2, 3, 4, 5], [3, 4, 5])\n  *   true\n  *   >>> list_contains_all_s([1, 2, 3, 4, 5], [1, 2, 3])\n  *   false\n  */\nconst list_contains_all_s_s = (a, b) => {\n  const arr = Array.from(a);\n  const arr_s = Array.from(b);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr_s[i]) return false;\n  }\n  return true;\n};\n\n/*\n  * Return true if every element of a list is in b.\n  *\n  * NOTE: Doesn't work with string.\n  *\n  * Example:\n  *   >>> list_contains_all_s_s([1, 2, 3, 4, 5], [3, 4, 5])\n  *   true\n  *   >>> list_contains_all_s_s([1, 2, 3, 4, 5], [1, 2, 3])\n  *   false\n  */\nconst list_contains_all_s_s_s = (a, b) => {\n  const arr = Array.from(a);\n  const arr_s = Array.from(b);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr_s[i]) return false;\n  }\n  return true;\n};\n\n/*\n  * Return true if every element of a list is in b.\n  *\n  * NOTE: Doesn't work with string.\n  *\n  * Example:\n  *   >>> list_contains_all_s_s_s([1, 2, 3, 4, 5], [3, 4, 5])\n  *   true\n  *   >>> list_contains_all_s_s_s([1, 2, 3, 4, 5], [1, 2, 3])\n  *   false\n  */\nconst list_contains_all_s_s_s_s = (a, b) => {\n  const arr = Array.from(a);\n  const arr_s = Array.from(b);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr_s[i]) return false;\n  }\n  return true;\n};\n\nmodule.exports = {\n  list_contains_all,\n  list_contains_all_s,\n  list_contains_all_s_s,\n  list_contains_all_s_s_s\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const sorted = [...new Set(l1.concat(l2))]\n  const sortedUnique = sorted.sort()\n  return sortedUnique.filter(n =>!(...sortedUnique.slice(0, n)).every(n => n === sorted[n]))\n}\n\nexport default coarse\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  const factors = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const factors2 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  let res = 1\n  let factor = 2\n  while (n > 1) {\n    for (let i = 0; i < factors.length; i++) {\n      if (n % factors[i] === 0) {\n        res = factors[i]\n        n = n / res\n        break\n      }\n    }\n    if (n > 1) {\n      factor = bigChoiceFactor(factor)\n      if (factor in factors2) {\n        res *= factor\n        n = n / res\n      }\n    }\n  }\n  return res\n}\n\nconst primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\nexport default bigChoiceFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nexport default summarizeToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n\n  return brackets.reduce((prev, curr) => {\n    if (curr === ')') {\n      return prev;\n    }\n\n    return prev && curr === '('? false : prev;\n  }, true);\n};\n\nexport default rightBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const coeff = [1];\n  const derivative = [];\n  for (let i = 1; i < n; i++) {\n    derivative.push(xs[i] * coeff[i - 1]);\n    coeff.push(xs[i] * coeff[i - 1]);\n  }\n  return derivative;\n};\n\n/**\n  Returns number of roots of a polynomial.\n  >>> root([3, 1, 2, 4, 5])\n  2\n  >>> root([1, 2, 3])\n  0\n  >>> root([1, 2, 3, 4])\n  1\n  >>> root([1, 2, 3, 4, 5])\n  2\n  >>> root([1, 2, 3, 4, 5, 6])\n  3\n  */\nconst root = (xs) => {\n  const n = xs.length;\n  const isZero = (x) => x === 0;\n  const isOne = (x) => x === 1;\n  const isNegative = (x) => x < 0;\n  const isPositive = (x) => x > 0;\n  let sign = 1;\n  let zero = 0;\n  let i;\n  for (i = 0; i < n; i++) {\n    if (isNegative(xs[i])) {\n      sign = -1;\n      break;\n    }\n    if (isZero(xs[i])) {\n      zero++;\n      if (zero > 1) {\n        sign = -1;\n        break;\n      }\n    }\n  }\n  if (zero === n) {\n    return 0;\n  }\n  const y = sign * xs[n - 1];\n  const derivative = derivative(xs);\n  let discriminant = 0;\n  for (i = 0; i < n - 1; i++) {\n    discriminant = discriminant + y * derivative[i];\n  }\n  if (isZero(discriminant)) {\n    return 0;\n  }\n  let nr = n - 1;\n  let nc = 1;\n  let nr2 = nr * nr;\n  let nc2 = nc * nc;\n  let a = 0;\n  let b = 0;\n  let i;\n  for (i = 0; i < nr2; i++) {\n    if (isOne(a)) {\n      break;\n    }\n    a = a + 1;\n  }\n  for (i = 0; i < nr; i++) {\n    if (isOne(b)) {\n      break;\n    }\n    b = b + 1;\n  }\n  if (isOne(b)) {\n    return n - a - 1;\n  }\n  if (isOne(a)) {\n    return n - b - 1;\n  }\n  return n - a - b - 1;\n};\n\nexport default {\n  derivative,\n  root\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  let fib1 = 0;\n  let fib2 = 1;\n  let f = fib1;\n  while (f < n) {\n    f = fib2 + fib1;\n    fib1 = fib2;\n    fib2 = f;\n  }\n  return f;\n}\n\nconsole.log(fibfib(3));\nconsole.log(fibfib(10));\nconsole.log(fibfib(20));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  const vowel_set = ['a', 'e', 'i', 'o', 'u']\n  const vowels = []\n  for (let i = 0; i < s.length; i++) {\n    if (vowel_set.includes(s[i])) {\n      vowels.push(s[i])\n    }\n  }\n  if (vowels.length === 1) {\n    if (vowels[0] === s[s.length - 1]) {\n      return vowels.length + 1\n    }\n    return vowels.length\n  }\n  return vowels.length\n}\n\n/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon2 = (s) => {\n  const vowel_set = ['a', 'e', 'i', 'o', 'u']\n  const vowels = []\n  for (let i = 0; i < s.length; i++) {\n    if (vowel_set.includes(s[i])) {\n      vowels.push(s[i])\n    }\n  }\n  return vowels.length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  const digits = x.toString().split('')\n  let i = 0\n  const result = []\n  while (i < shift) {\n    result.push(digits[i])\n    i++\n  }\n  if (shift < digits.length) {\n    const j = digits.length - 1\n    while (i <= j) {\n      result.push(digits[i])\n      i++\n    }\n  }\n  return result.reverse().join('')\n}\n\nconst getShiftedValue = (x, shift) => {\n  if (shift === 0) {\n    return x\n  }\n  return roundShift(x, shift)\n}\n\nconst multiply = (a, b) => {\n  const r = a * b\n  if (a === 0) {\n    return 0\n  } else if (b === 0) {\n    return 0\n  }\n  return r\n}\n\nconst checkValue = (value) => {\n  if (value > 100) {\n    return 100\n  } else if (value < 0) {\n    return 0\n  } else {\n    return value\n  }\n}\n\nconst addValue = (a, b) => {\n  return checkValue(a + b)\n}\n\nconst subtractValue = (a, b) => {\n  return checkValue(a - b)\n}\n\nconst subtract = (a, b) => {\n  return subtractValue(a, b)\n}\n\nconst divide = (a, b) => {\n  return subtractValue(a, multiply(a, b))\n}\n\nconst add = (a, b) => {\n  return addValue(a, b)\n}\n\nconst getNumber = (value) => {\n  const parsedValue = parseInt(value, 10)\n  return parsedValue\n}\n\nconst multiplyNumber = (x, y) => {\n  return multiply(getNumber(x), getNumber(y))\n}\n\nconst roundToDecimal = (x) => {\n  const roundedValue = parseInt(x, 10)\n  const decimalValue = parseInt(x.toString().split('').reverse().join(''), 10)\n  return roundedValue + '.' + decimalValue\n}\n\nconst divideNumber = (x, y) => {\n  const dividedValue = divide(x, y)\n  return roundToDecimal(dividedValue)\n}\n\nconst addNumber = (x, y) => {\n  return add(x, y)\n}\n\nconst multiplyNumber = (x, y) => {\n  return multiplyNumber(x, y)\n}\n\nmodule.exports = {\n  getShiftedValue,\n  checkValue,\n  addValue,\n  subtractValue,\n  subtract,\n  divide,\n  add,\n  getNumber,\n  multiplyNumber,\n  roundToDecimal,\n  divideNumber,\n  addNumber,\n  multiplyNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  const uppercaseLetters = s.split('').filter(char => char.toUpperCase() === char);\n  return uppercaseLetters.reduce((sum, letter) => sum + letter.charCodeAt(0), 0);\n}\n\nconsole.log(fingerSum(\"abcCd\"));\nconsole.log(fingerSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let string = s.toLowerCase();\n  let total = 0;\n  let count = 0;\n  let arr = string.split(\" \");\n  let x = parseInt(arr[0]);\n  let y = parseInt(arr[1]);\n  total = x * y;\n  count = n;\n  for (let i = 0; i < count; i++) {\n    if (string.includes(\"apples\")) {\n      total--;\n    } else if (string.includes(\"oranges\")) {\n      total--;\n    } else if (string.includes(\"mango\")) {\n      total--;\n    }\n  }\n  return total;\n};\n\nmodule.exports = yieldDistribution;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n\n    let min = arr[0];\n    let minIndex = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n\n    let result = [min, minIndex];\n    let i = 1;\n    while (arr[i] % 2 === 0) {\n        result.push(arr[i]);\n        i++;\n    }\n\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter = 1;\n            result = lst[i];\n        } else if (lst[i] > 0 && lst[i] === result) {\n            counter++;\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research2 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research3 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research4 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research5 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research6 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research7 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research8 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research9 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research10 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research11 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research12 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n\nconst research13 = (lst) => {\n    let result = -1;\n    let counter = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > result) {\n            counter++;\n            result = lst[i];\n        }\n    }\n    return (counter >= lst.length)? -1 : result;\n};\n"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n  const sorted = lst.slice(0);\n  const sortedLength = sorted.length;\n\n  for (let i = 0; i < sortedLength; i++) {\n    const min = sorted[0];\n    let index = 0;\n    for (let j = 0; j < sortedLength; j++) {\n      if (sorted[j] < min) {\n        min = sorted[j];\n        index = j;\n      }\n    }\n    sorted.splice(index, 1);\n    sorted.unshift(min);\n  }\n\n  return sorted;\n};\n\nconst main = () => {\n  const lst = [3, 5, 2, 4, 1, 3, 7, 2, 1, 1, 7, 9, 9, 8, 1, 8, 2, 1, 3];\n  console.log(foreignSortList(lst));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1\n  }\n  return Math.abs((a * b) / 2 - (c * c) / 2 + (a * c) / 2)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const len = q.length;\n  const max = (Math.pow(10, len) - 1);\n  let result = false;\n  let sum = 0;\n\n  for (let i = 0; i < len; i++) {\n    sum += q[i];\n  }\n\n  if (sum <= max && (sum % 2) === 0) {\n    result = true;\n  }\n\n  return result;\n};\n\n//console.log(willItFlee([3, 2, 3], 9));\n//console.log(willItFlee([3, 2, 3], 5));\n//console.log(willItFlee([1, 2, 3], 9));\n//console.log(willItFlee([1, 2, 3], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n//console.log(willItFlee([1, 2, 3, 4, 5, 6, 7, 8, 9], 9));\n//console.log(willItFlee([1,"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  const len = arr.length\n  let changed = 0\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      arr[i + 1] = arr[i]\n      changed++\n    }\n  }\n  return changed\n}\n\nconst smallChangeTest = () => {\n  const arr = [1, 2, 3, 4, 3, 2, 2]\n  console.log(smallChange(arr))\n  console.log(smallChange(arr))\n  console.log(smallChange(arr))\n  console.log(smallChange(arr))\n}\n\nsmallChangeTest()\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  return lst1.filter(x => lst2.filter(y => x.length === y.length && x === y).length === 0);\n}\n\nconst entireCatchTest = () => {\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hI', 'Hi']), ['hI', 'Hi']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['4'], ['1', '2', '3', '4', '5']), ['4']);\n  assert.deepEqual(entireCatch(['hi'], ['1', '2', '3', '4', '5']), ['hi']);\n  assert.deepEqual(entireCatch(['hi', 'admin', 'hi'], ['1', '2', '3', '4', '5']), ['hi', 'admin', 'hi']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin', 'hi'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']), ['hi', 'admin']);\n  assert.deepEqual(entireCatch(['hi"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns the sum of all numbers in the range\n  [start, end].\n  Example:\n  getSum(1, 3) == 6\n  */\nconst getSum = (start, end) => {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst isPrime = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*Write a function that returns true if the number is a prime and false otherwise.\n  Example:\n  isPrime(30) == true\n  */\nconst isPrime2 = (a) => {\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns the sum of the squares of all numbers in the range\n  [start, end].\n  Example:\n  getSumOfSquares(1, 3) == 13\n  */\nconst getSumOfSquares = (start, end) => {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i * i;\n  }\n  return sum;\n};\n\n/*Write a function that returns the product of the squares of all numbers in the range\n  [start, end].\n  Example:\n  getProductOfSquares(1, 3) == 81\n  */\nconst getProductOfSquares = (start, end) => {\n  let sum = 1;\n  for (let i = start; i <= end; i++) {\n    sum *= i * i;\n  }\n  return sum;\n};\n\nconst isPalindrome = (a) => {\n  let a_reverse = '';\n  for (let i = a.length - 1; i >= 0; i--) {\n    a_reverse += a[i];\n  }\n  return a === a_reverse;\n};\n\nconst isPalindrome2 = (a) => {\n  let i = 0;\n  while (a.length > 0) {\n    let j = 0;\n    while (a[i] === a[j]) {\n      i++;\n      j++;\n    }\n    if (i === a.length) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nconst isPalindrome3 = (a) => {\n  let reversed = a.split('').reverse().join('');\n  return a === reversed;\n};\n\n/*Write a function that returns true if the number is an even number and false otherwise.\n  Example:\n  isEven(20) == true\n  */\nconst isEven = (a) => {\n  return (a % 2 === 0);\n};\n\nconst isEven2 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven3 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven4 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven5 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven6 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven7 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven8 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven9 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven10 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven11 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven12 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven13 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven14 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven15 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven16 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven17 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven18 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven19 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven20 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven21 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven22 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven23 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven24 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven25 = (a) => {\n  return (a % 2 === 0)? true : false;\n};\n\nconst isEven26"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (n === 1) return x === 1\n  if (n === 2) return x === 2\n  if (n === 3) return x === 4\n  if (n === 4) return x === 8\n  return Math.pow(n, x) === x\n}\n\n// tag::declaration[]\nconst isElementaryWorldPower1 = (x, n) => {\n  if (n === 1) return x === 1\n  if (n === 2) return x === 2\n  if (n === 3) return x === 4\n  if (n === 4) return x === 8\n  return Math.pow(n, x) === x\n}\n\n// end::declaration[]\n\n// tag::test[]\nisElementaryWorldPower(1, 4) // => true\nisElementaryWorldPower(2, 2) // => true\nisElementaryWorldPower(8, 2) // => true\nisElementaryWorldPower(3, 2) // => false\nisElementaryWorldPower(3, 1) // => false\nisElementaryWorldPower(5, 3) // => false\n// end::test[]\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return (a > 0 && a % a === 0)\n}\n\nexport default iscube\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  if (!num) return result;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] >= 'A' && num[i] <= 'F') result += 1;\n    if (num[i] >= '0' && num[i] <= '9') result += 1;\n  }\n  return result;\n};\n\nconst checkPrime = (num) => {\n  let prime = 1;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      prime = 0;\n      break;\n    }\n  }\n  return prime;\n};\n\nmodule.exports = (num) => {\n  let hexNum = parseInt(num, 16);\n  let result = hexKey(num);\n  let prime = checkPrime(hexNum);\n  if (prime) {\n    if (prime === 1) result += 1;\n    if (prime === 2) result += 2;\n    if (prime === 3) result += 3;\n    if (prime === 5) result += 4;\n    if (prime === 7) result += 5;\n    if (prime === 11) result += 6;\n    if (prime === 13) result += 7;\n    if (prime === 17) result += 8;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return (decimal << 1)\n   .toString(2)\n   .replace(/0/g, 'b')\n   .replace(/1/g, 'b')\n   .replace(/b/g, '0')\n   .replace(/d/g, '1');\n};\n\nconst binaryToDecimal = (binary) => {\n  return (parseInt(binary, 2) >> 1) + 1;\n};\n\nmodule.exports = {\n  decimalToBinary: decimalToBinary,\n  binaryToDecimal: binaryToDecimal\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  const letters = s.split('')\n  let n = letters.length\n  if (n < 3) return false\n  let prev = letters[0]\n  let i = 1\n  while (i < n) {\n    const current = letters[i]\n    if (current === prev) {\n      return false\n    }\n    prev = current\n    i++\n  }\n  return true\n}\n\nconsole.log(isFelicitous('abcdefg'))\nconsole.log(isFelicitous('abcdefg'))\nconsole.log(isFelicitous('abcdefg'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  const num = grades.map(grade => parseFloat(grade.toString()))\n  let grades_list = []\n  for (let i = 0; i < num.length - 1; i++) {\n    if (num[i] > num[i + 1]) {\n      grades_list.push(num[i + 1])\n    }\n  }\n  if (num[num.length - 1] > num[num.length - 2]) {\n    grades_list.push(num[num.length - 2])\n  }\n  return grades_list\n}\n\n/*\n  Given an array of strings, return the average of the grades.\n  Example:\n  gradesArray = ['4.0', '3.7', '3.3', '3.0', '2.7', '2.3', '2.0', '1.7', '1.3', '1.0', '0.7', '0.0']\n  Average = 4.1\n  */\nconst average = (gradesArray) => {\n  let avg = 0\n  for (let i = 0; i < gradesArray.length; i++) {\n    avg += parseFloat(gradesArray[i])\n  }\n  return avg / gradesArray.length\n}\n\nconst main = () => {\n  let num = [4.0, 3, 1.7, 2, 3.5]\n  console.log(numericLetterGrade(num))\n  console.log(average(gradesArray))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n  const lower = string.toLowerCase();\n  let i = 0;\n  while (i < lower.length) {\n    if (i === 0) {\n      if (!isPrime(lower[i])) {\n        return false;\n      }\n      i += 1;\n    }\n    else {\n      if (i < lower.length - 1) {\n        if (!isPrime(lower[i])) {\n          return false;\n        }\n        i += 1;\n      }\n      else {\n        if (!isPrime(lower[i])) {\n          return false;\n        }\n        i += 1;\n      }\n    }\n  }\n  return true;\n};\n\nconsole.log(premierDistance('Hello'));\nconsole.log(premierDistance('abcdcba'));\nconsole.log(premierDistance('kittens'));\nconsole.log(premierDistance('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count += numberOfOneStart(i)\n  }\n  return count\n}\n\nconsole.log(beginOneEnd(1))\nconsole.log(beginOneEnd(2))\nconsole.log(beginOneEnd(3))\nconsole.log(beginOneEnd(4))\nconsole.log(beginOneEnd(5))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  if (N === 0) return '0'\n  \n  let sum = 0\n  let digits = N.toString().split('')\n  \n  while (N--) {\n    sum += digits[N].toString().length\n  }\n  \n  return sum\n}\n\nconsole.log(resolve(1000))\nconsole.log(resolve(150))\nconsole.log(resolve(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n    let result = [],\n        index = 1,\n        i = 0;\n    for (i = 0; i < lst.length; i++) {\n        if (index % 2 === 1) {\n            result.push(lst[i]);\n        }\n        index++;\n    }\n    return result;\n}\n\nconsole.log(lend([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArray = s.split('')\n  let i = 0\n  const len = sArray.length\n  const newString = []\n\n  while (i < len) {\n    let j = i + 1\n    while (j < len) {\n      const char1 = sArray[i]\n      const char2 = sArray[j]\n      const char3 = sArray[i + 1]\n      const char4 = sArray[j + 1]\n      const result = [char1, char2, char3, char4]\n      const max = Math.max(result)\n      let k = j + 1\n      while (k < len) {\n        const char5 = sArray[k]\n        if (result[0] < max) {\n          sArray[k] = result[0]\n          sArray[k - 1] = result[1]\n          sArray[k + 1] = result[2]\n          sArray[k + 2] = result[3]\n          k -= 1\n        } else {\n          sArray[k] = result[3]\n          sArray[k - 1] = result[2]\n          sArray[k + 1] = result[1]\n          sArray[k + 2] = result[0]\n          k -= 1\n        }\n        k += 1\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return sArray.join('')\n}\n\n/*\n  Write a function that takes a string and returns a new string\n  where all the words are replaced by a new word where all the\n  characters are in ascending order.\n\n  For example:\n  sort('Hello World!!!') returns 'hEllO wORld!!!'\n  sort('Hello World!!!') returns 'HeO wOrld!!!'\n  sort('Hello World!!!') returns 'helloworld!!!'\n  */\nconst sort = (s) => {\n  const sArray = s.split('')\n  const newString = []\n  const len = sArray.length\n\n  while (len > 0) {\n    let max = 0\n    let k = 0\n    while (k < len) {\n      const char = sArray[k]\n      const result = char > max? char : max\n      newString.push(result)\n      k += 1\n      max = char > max? char : max\n    }\n    len -= 1\n  }\n  return newString.join('')\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  words in the string.\n\n  For example:\n  countWords('Hello World!!!') returns 5\n  countWords('Hello World!!!') returns 5\n  countWords('Hello World!!!') returns 5\n  */\nconst countWords = (s) => {\n  const sArray = s.split('')\n  const count = 0\n  const len = sArray.length\n  const len1 = 0\n\n  while (len1 < len) {\n    if (sArray[len1]!=='') {\n      count += 1\n    }\n    len1 += 1\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the length\n  of the longest substring that contains all the letters\n  from the alphabet.\n\n  For example:\n  longestSubString('Hello World!!!') returns 'ello'\n  longestSubString('Hello World!!!') returns 'ello'\n  longestSubString('Hello World!!!') returns 'ello'\n  */\nconst longestSubString = (s) => {\n  const sArray = s.split('')\n  let len = 0\n  let max = 0\n  const len1 = 0\n\n  while (len1 < sArray.length) {\n    if (sArray[len1]!=='') {\n      len = len + 1\n      if (len > max) {\n        max = len\n      }\n    }\n    len1 += 1\n  }\n  return max\n}\n\n/*\n  Write a function that takes a string and returns the length\n  of the longest substring that contains all the numbers\n  from the alphabet.\n\n  For example:\n  longestSubString('Hello World!!!') returns 'll'\n  longestSubString('Hello World!!!') returns 'll'\n  longestSubString('Hello World!!!') returns 'll'\n  */\nconst longestSubStringNumbers = (s) => {\n  const sArray = s.split('')\n  let len = 0\n  let max = 0\n  const len1 = 0\n\n  while (len1 < sArray.length) {\n    if (sArray[len1]!=='') {\n      len = len + 1\n      if (len > max) {\n        max = len\n      }\n    }\n    len1 += 1\n  }\n  return max\n}\n\n/*\n  Write a function that takes a string and returns the length\n  of the longest substring that contains all the alphabet\n  characters.\n\n  For example:\n  longestSubString('Hello World!!!') returns 'ello'\n  longestSubString('Hello World!!!') returns 'ello'\n  longestSubString('Hello World!!!') returns 'ello'\n  */\nconst longestSubStringAlpha = (s) => {\n  const sArray = s.split('')\n  let len = 0\n  let max = 0\n  const len1 = 0\n\n  while (len1 < sArray.length) {\n    if (sArray[len1]!=='') {\n      len = len + 1\n      if (len > max) {\n        max = len\n      }\n    }\n    len1 += 1\n  }\n  return max\n}\n\n/*\n  Write a function that takes a string and returns the length\n  of the longest substring that contains all the numbers\n  characters.\n\n  For example:\n  longestSubString('Hello World!!!') returns 'llo'\n  long"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  const result = [];\n  \n  // row is sorted ascending\n  const row = [...lst];\n  row.sort((a, b) => a - b);\n  \n  // column is sorted descending\n  const col = [...lst].reverse();\n  col.sort((a, b) => a - b);\n  \n  // loop through the list\n  for (let row of lst) {\n    // loop through the rows\n    for (let col of row) {\n      // add coordinates\n      result.push((col, row));\n    }\n  }\n  \n  // sort the result by row\n  result.sort((a, b) => a[0] - b[0]);\n  \n  // remove the first coordinate\n  return result.slice(1);\n};\n\nconst catchRow = (lst, x) => {\n  const result = [];\n  \n  // row is sorted ascending\n  const row = [...lst];\n  row.sort((a, b) => a - b);\n  \n  // column is sorted descending\n  const col = [...lst].reverse();\n  col.sort((a, b) => a - b);\n  \n  // loop through the list\n  for (let row of lst) {\n    // loop through the rows\n    for (let col of row) {\n      // add coordinates\n      result.push((col, row));\n    }\n  }\n  \n  // sort the result by row\n  result.sort((a, b) => a[0] - b[0]);\n  \n  // remove the first coordinate\n  return result.slice(1);\n};\n\nconst catchRow = (lst, x) => {\n  const result = [];\n  \n  // row is sorted ascending\n  const row = [...lst];\n  row.sort((a, b) => a - b);\n  \n  // column is sorted descending\n  const col = [...lst].reverse();\n  col.sort((a, b) => a - b);\n  \n  // loop through the list\n  for (let row of lst) {\n    // loop through the rows\n    for (let col of row) {\n      // add coordinates\n      result.push((col, row));\n    }\n  }\n  \n  // sort the result by row\n  result.sort((a, b) => a[0] - b[0]);\n  \n  // remove the first coordinate\n  return result.slice(1);\n};\n\nconst catchRow = (lst, x) => {\n  const result = [];\n  \n  // row is sorted ascending\n  const row = [...lst];\n  row.sort((a, b) => a - b);\n  \n  // column is sorted descending\n  const col = [...lst].reverse();\n  col.sort((a, b) => a - b);\n  \n  // loop through the list\n  for (let row of lst) {\n    // loop through the rows\n    for (let col of row) {\n      // add coordinates\n      result.push((col, row));\n    }\n  }\n  \n  // sort the result by row\n  result.sort((a, b) => a[0] - b[0]);\n  \n  // remove the first coordinate\n  return result.slice(1);\n};\n\nconst catchRow = (lst, x) => {\n  const result = [];\n  \n  // row is sorted ascending\n  const row = [...lst];\n  row.sort((a, b) => a - b);\n  \n  // column is sorted descending\n  const col = [...lst].reverse();\n  col.sort((a, b) => a - b);\n  \n  // loop through the list\n  for (let row of lst) {\n    // loop through the rows\n    for (let col of row) {\n      // add coordinates\n      result.push((col, row));\n    }\n  }\n  \n  // sort the result by row\n  result.sort((a, b) => a[0] - b[0]);\n  \n  // remove the first coordinate\n  return result.slice(1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const length = array.length\n  const half = Math.floor(length / 2)\n  const sortedArray = [].concat(array)\n  const firstHalf = sortedArray.slice(0, half)\n  const secondHalf = sortedArray.slice(half)\n  const sortedFirstHalf = sortArray(firstHalf)\n  const sortedSecondHalf = sortArray(secondHalf)\n  if (sortedFirstHalf.length === 0 && sortedSecondHalf.length === 0) {\n    return array\n  } else if (sortedFirstHalf.length === 0) {\n    return sortedSecondHalf\n  } else if (sortedSecondHalf.length === 0) {\n    return sortedFirstHalf\n  } else {\n    const firstSortedArray = [].concat(sortedFirstHalf)\n    const secondSortedArray = [].concat(sortedSecondHalf)\n    if (sum(firstSortedArray) % 2 === 0) {\n      return firstSortedArray.concat(secondSortedArray)\n    } else {\n      return secondSortedArray.concat(firstSortedArray)\n    }\n  }\n}\n\nconst sum = (array) => {\n  return array.reduce((accumulator, current) => accumulator + current, 0)\n}\n\nconst test = () => {\n  const array = [1, 3, 2, 0, 4, 5]\n  const sortedArray = sortArray(array)\n  console.log(sortedArray)\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let x = 0\n  let y = 0\n  let res = ''\n\n  for (let i = 0; i < s.length; i++) {\n    x = s.charCodeAt(i)\n    y = x + (x << 1)\n    res += String.fromCharCode(y % 26)\n  }\n\n  return res\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let x = 0\n  let y = 0\n  let res = ''\n\n  for (let i = 0; i < s.length; i++) {\n    x = s.charCodeAt(i)\n    y = x - (x << 1)\n    res += String.fromCharCode(y % 26)\n  }\n\n  return res\n}\n\n/*Create a function that takes a string and returns the reverse\n  of the string. For example:\n  reverse('hi') returns 'hih'\n  reverse('abcdef') returns 'fedcba'\n  reverse('xyz') returns 'zyxwv'\n  */\nconst reverse = (s) => {\n  let res = ''\n  let len = s.length\n\n  for (let i = 0; i < len / 2; i++) {\n    res += s.charAt(i)\n    res += s.charAt(len - 1 - i)\n  }\n\n  return res\n}\n\n/*Create a function that takes a string and returns the\n  string reversed in the same order as the alphabet.\n  For example:\n  rotate('abcdef') returns 'efcdab'\n  rotate('abcd') returns 'dcba'\n  rotate('hi') returns 'ih'\n  rotate('x') returns 'x'\n  */\nconst rotate = (s) => {\n  let res = ''\n  let len = s.length\n\n  for (let i = 0; i < len; i++) {\n    res += s.charAt(i)\n  }\n\n  return res\n}\n\n/*Create a function that takes a string and returns the \n  string reversed in a new order, but using the alphabet\n  that is rotated by one place.\n  For example:\n  rotate('abcdef') returns 'fedcba'\n  rotate('abcd') returns 'dcba'\n  rotate('hi') returns 'ih'\n  rotate('x') returns 'x'\n  */\nconst rotate2 = (s) => {\n  let res = ''\n  let len = s.length\n\n  for (let i = 0; i < len; i++) {\n    res += s.charAt(i)\n  }\n\n  return res\n}\n\n/*Create a function that takes a string and returns the \n  string reversed in a new order, but using the alphabet\n  that is rotated by two places.\n  For example:\n  rotate('abcdef') returns 'ijklmn'\n  rotate('abcd') returns 'cdb'\n  rotate('hi') returns 'hi'\n  rotate('x') returns 'x'\n  */\nconst rotate3 = (s) => {\n  let res = ''\n  let len = s.length\n\n  for (let i = 0; i < len; i++) {\n    res += s.charAt(i)\n  }\n\n  return res\n}\n\n/*Create a function that takes a string and returns the \n  string reversed in a new order, but using the alphabet\n  that is rotated by three places.\n  For example:\n  rotate('abcdef') returns 'vwxyz'\n  rotate('abcd') returns 'ab'\n  rotate('hi') returns 'hi'\n  rotate('x') returns 'x'\n  */\nconst rotate4 = (s) => {\n  let res = ''\n  let len = s.length\n\n  for (let i = 0; i < len; i++) {\n    res += s.charAt(i)\n  }\n\n  return res\n}\n\n/*Create a function that takes a string and returns the \n  string reversed in a new order, but using the alphabet\n  that is rotated by four places.\n  For example:\n  rotate('abcdef') returns 'zwxyv'\n  rotate('abcd') returns 'a'\n  rotate('hi') returns 'hi'\n  rotate('x') returns 'x'\n  */\nconst rotate5 = (s) => {\n  let res = ''\n  let len = s.length\n\n  for (let i = 0; i < len; i++) {\n    res += s.charAt(i)\n  }\n\n  return res\n}\n\n/*Create a function that takes a string and returns the \n  string reversed in a new order, but using the alphabet\n  that is rotated by five places.\n  For example:\n  rotate('abcdef') returns 'zvwxy'\n  rotate('abcd') returns 'ab'\n  rotate('hi') returns 'hi'\n  rotate('x') returns 'x'\n  */\nconst rotate6 = (s) => {\n  let res = ''\n  let len = s.length\n\n  for (let i = 0; i < len; i++) {\n    res += s.charAt(i)\n  }\n\n  return res\n}\n\n/*Create a function that takes a string and returns the \n  string reversed in a new order, but using the alphabet\n  that is rotated by six places.\n  For example:\n  rotate('abcdef') returns 'yvwxy'\n  rotate('abcd') returns 'zwxy'\n  rot"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  const len = lst.length;\n  let index = len - 1;\n  while (index >= 0) {\n    if (index >= 0) {\n      if (lst[index] < lst[index - 1]) {\n        return lst[index - 1];\n      }\n    }\n    index--;\n  }\n  return null;\n}\n\n//\n// nextSmallest([1, 2, 3, 4, 5]) == 2\n// nextSmallest([5, 1, 4, 3, 2]) == 2\n// nextSmallest([]) == null\n// nextSmallest([1, 1]) == null\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n    let start = S.charAt(0)\n    let end = S.charAt(S.length - 1)\n    let isb = S.slice(0, -1).includes(start)\n    let ise = S.slice(1, -1).includes(end)\n    if(isb && ise) return 1\n    return 0\n}\n\n/*\n  This function returns a list of words from a string.\n \n  For example:\n  >>> findWords(\"Hello world, how are you? I love this weather\")\n  [\"Hello world\", \"How are you?\", \"I love this weather\"]\n  */\nconst findWords = (S) => {\n    let words = []\n    for(let i = 0; i < S.length; i++){\n        if(S.charAt(i) === '.' || S.charAt(i) === '?' || S.charAt(i) === '!'){\n            let word = S.slice(0, i)\n            words.push(word)\n        }\n    }\n    return words\n}\n\n/*\n  This function returns a list of sentences from a string.\n \n  For example:\n  >>> findSentences(\"Hello world, how are you? I love this weather\")\n  [\"Hello world\", \"How are you?\", \"I love this weather\"]\n  */\nconst findSentences = (S) => {\n    let sentences = []\n    for(let i = 0; i < S.length; i++){\n        if(S.charAt(i) === '.' || S.charAt(i) === '?' || S.charAt(i) === '!'){\n            let sentence = S.slice(0, i + 1)\n            sentences.push(sentence)\n        }\n    }\n    return sentences\n}\n\n/*\n  This function returns a list of words from a string, split by\n  the character '.'\n \n  For example:\n  >>> findWordsWithDots(\"Hello world, how are you? I love this weather\")\n  [\"Hello world\", \"How are you?\", \"I love this weather\"]\n  */\nconst findWordsWithDots = (S) => {\n    let words = []\n    for(let i = 0; i < S.length; i++){\n        if(S.charAt(i) === '.'){\n            let word = S.slice(0, i)\n            words.push(word)\n        }\n    }\n    return words\n}\n\n/*\n  This function returns a list of sentences from a string, split by\n  the character '.'\n \n  For example:\n  >>> findSentencesWithDots(\"Hello world, how are you? I love this weather\")\n  [\"Hello world\", \"How are you?\", \"I love this weather\"]\n  */\nconst findSentencesWithDots = (S) => {\n    let sentences = []\n    for(let i = 0; i < S.length; i++){\n        if(S.charAt(i) === '.'){\n            let sentence = S.slice(0, i + 1)\n            sentences.push(sentence)\n        }\n    }\n    return sentences\n}\n\n/*\n  This function returns a list of words from a string, split by\n  the character '?'\n \n  For example:\n  >>> findWordsWithQs(\"Hello world, how are you? I love this weather\")\n  [\"Hello world\", \"How are you?\", \"I love this weather\"]\n  */\nconst findWordsWithQs = (S) => {\n    let words = []\n    for(let i = 0; i < S.length; i++){\n        if(S.charAt(i) === '?'){\n            let word = S.slice(0, i)\n            words.push(word)\n        }\n    }\n    return words\n}\n\n/*\n  This function returns a list of sentences from a string, split by\n  the character '?'\n \n  For example:\n  >>> findSentencesWithQs(\"Hello world, how are you? I love this weather\")\n  [\"Hello world\", \"How are you?\", \"I love this weather\"]\n  */\nconst findSentencesWithQs = (S) => {\n    let sentences = []\n    for(let i = 0; i < S.length; i++){\n        if(S.charAt(i) === '?'){\n            let sentence = S.slice(0, i + 1)\n            sentences.push(sentence)\n        }\n    }\n    return sentences\n}\n\n/*\n  This function returns a list of words from a string, split by\n  the character '!'\n \n  For example:\n  >>> findWordsWithQs(\"Hello world, how are you? I love this weather\")\n  [\"Hello world\", \"How are you?\", \"I love this weather\"]\n  */\nconst findWordsWithBs = (S) => {\n    let words = []\n    for(let i = 0; i < S.length; i++){\n        if(S.charAt(i) === '!'){\n            let word = S.slice(0, i)\n            words.push(word)\n        }\n    }\n    return words\n}\n\n/*\n  This function returns a list of sentences from a string, split by\n  the character '!'\n \n  For example:\n  >>> findSentencesWithBs(\"Hello world, how are you? I love this weather\")\n  [\"Hello world\", \"How are you?\", \"I love this weather\"]\n  */\nconst findSentencesWithBs = (S) => {\n    let sentences = []\n    for(let i = 0; i < S.length; i++){\n        if(S.charAt(i) === '!'){\n            let sentence = S.slice(0, i + 1)\n            sentences.push(sentence)\n        }\n    }\n    return sentences\n}\n\n/*\n  This function returns the number of boredoms in a string\n \n  For example:\n  >>> numberOfBlase(\"Hello world, how are you? I love"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z && x === y || x === z + y && x === z || x === y - z && x === y || x === z - y && x === z;\n}\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.replace(/\\w/g, (w) => {\n    const r = Math.random() * 26\n    return String.fromCharCode(r + w.charCodeAt(0) - 97)\n  })\n}\n\nconst decode = (message) => {\n  return message.replace(/(\\w)+/, (x) => {\n    const r = Math.random() * 26\n    return String.fromCharCode(r + x.charCodeAt(0) - 97)\n  })\n}\n\nconst message = decode(encode(randomString(15)))\nconsole.log(message)\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largest = 0;\n  let sum = 0;\n  let i = 0;\n  lst.forEach((elem, index) => {\n    largest = largest < elem? elem : largest;\n    sum += parseInt(elem, 10);\n    i++;\n  });\n  return largest * 10 + sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n    if (dict.length === 0) {\n        return false;\n    }\n    return Object.keys(dict).every((key) => {\n        return (\n            key.toLowerCase() === key ||\n            key.toUpperCase() === key\n        );\n    });\n}\n\nconst isValidEmail = (email) => {\n    const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    return regex.test(email);\n}\n\nconst isValidName = (name) => {\n    const regex = /^[a-zA-Z0-9._-]+$/;\n    return regex.test(name);\n}\n\nconst isValidPassword = (password) => {\n    const regex = /^[a-zA-Z0-9]+$/;\n    return regex.test(password);\n}\n\nconst isValidPhone = (phone) => {\n    const regex = /^\\d{3}-\\d{3}-\\d{4}$/;\n    return regex.test(phone);\n}\n\nconst isValidDate = (date) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(date);\n}\n\nconst isValidDateTime = (dateTime) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;\n    return regex.test(dateTime);\n}\n\nconst isValidHexColor = (hexColor) => {\n    const regex = /^#[a-fA-F0-9]{6}$/;\n    return regex.test(hexColor);\n}\n\nconst isValidPasswordConfirm = (passwordConfirm) => {\n    const regex = /^[a-zA-Z0-9]+$/;\n    return regex.test(passwordConfirm);\n}\n\nconst isValidZipCode = (zipCode) => {\n    const regex = /^\\d{5}$/;\n    return regex.test(zipCode);\n}\n\nconst isValidState = (state) => {\n    const regex = /^[a-zA-Z]{2}$/;\n    return regex.test(state);\n}\n\nconst isValidZipCode = (zipCode) => {\n    const regex = /^\\d{5}$/;\n    return regex.test(zipCode);\n}\n\nconst isValidTime = (time) => {\n    const regex = /^\\d{2}:\\d{2}:\\d{2}$/;\n    return regex.test(time);\n}\n\nconst isValidId = (id) => {\n    const regex = /^[a-zA-Z0-9]+$/;\n    return regex.test(id);\n}\n\nconst isValidIp = (ip) => {\n    const regex = /^(\\d{1,3}\\.){3}(\\d{1,3})\\:(\\d{1,2}\\.){2}(\\d{1,2})$/;\n    return regex.test(ip);\n}\n\nconst isValidUrl = (url) => {\n    const regex = /^(https?:\\/\\/)([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/i;\n    return regex.test(url);\n}\n\nconst isValidEmail = (email) => {\n    const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    return regex.test(email);\n}\n\nconst isValidName = (name) => {\n    const regex = /^[a-zA-Z0-9._-]+$/;\n    return regex.test(name);\n}\n\nconst isValidPassword = (password) => {\n    const regex = /^[a-zA-Z0-9]+$/;\n    return regex.test(password);\n}\n\nconst isValidPhone = (phone) => {\n    const regex = /^\\d{3}-\\d{3}-\\d{4}$/;\n    return regex.test(phone);\n}\n\nconst isValidDate = (date) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(date);\n}\n\nconst isValidDateTime = (dateTime) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;\n    return regex.test(dateTime);\n}\n\nconst isValidHexColor = (hexColor) => {\n    const regex = /^#[a-fA-F0-9]{6}$/;\n    return regex.test(hexColor);\n}\n\nconst isValidPasswordConfirm = (passwordConfirm) => {\n    const regex = /^[a-zA-Z0-9]+$/;\n    return regex.test(passwordConfirm);\n}\n\nconst isValidZipCode = (zipCode) => {\n    const regex = /^\\d{5}$/"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  let primes = [2, 3]\n  for (let i = 4; i < n; i++) {\n    let candidate = Math.floor(Math.sqrt(i))\n    while (primes.indexOf(candidate)!== -1) {\n      if (i % candidate === 0) break\n      candidate++\n    }\n    if (candidate * candidate > i) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconsole.log(considerUpTo(100))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  let res = 0;\n  while (a!== 0) {\n    let r = a % 10;\n    res = res * 10 + r;\n    a = Math.floor(a / 10);\n  }\n  while (b!== 0) {\n    let r = b % 10;\n    res = res * 10 + r;\n    b = Math.floor(b / 10);\n  }\n  return res;\n};\n\nconsole.log(breed(148, 412));\nconsole.log(breed(19, 28));\nconsole.log(breed(2020, 1851));\nconsole.log(breed(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  considerLower('aBCdEf') returns 1\n  considerLower('abcdefg') returns 0\n  considerLower('dBBE') returns 0\n  */\nconst considerLower = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  considerAll('aBCdEf') returns 1\n  considerAll('abcdefg') returns 0\n  considerAll('dBBE') returns 0\n  */\nconst considerAll = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  considerAll('aBCdEf') returns 1\n  considerAll('abcdefg') returns 0\n  considerAll('dBBE') returns 0\n  */\nconst considerLowercase = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUppercase = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  considerAll('aBCdEf') returns 1\n  considerAll('abcdefg') returns 0\n  considerAll('dBBE') returns 0\n  */\nconst considerVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  considerAll('aBCdEf') returns 1\n  considerAll('abcdefg') returns 0\n  considerAll('dBBE') returns 0\n  */\nconst considerConsonants = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconst test = {\n    considerAll: considerAll,\n    considerUpper: considerUpper,\n    considerLower: considerLower,\n    considerVowels: considerVowels,\n    considerConsonants: considerConsonants,\n    considerLowercase: considerLowercase,\n    considerUppercase: considerUppercase\n};\n\nconsole.log(\n    test.considerAll('aBCdEf')\n);\nconsole.log(\n    test.considerAll('abcdefg')\n);\nconsole.log(\n    test.considerAll('dBBE')\n);\nconsole.log(\n    test.considerAll('A')\n);\nconsole.log(\n    test.considerAll('B')\n);\nconsole.log(\n    test.considerAll('C')\n);\nconsole.log(\n    test.considerAll('D')\n);\nconsole.log(\n    test.considerAll('E')\n);\nconsole.log(\n    test.considerAll('F')\n);\nconsole.log(\n    test.considerAll('G')\n);\nconsole.log(\n    test.considerAll('H')\n);\nconsole.log(\n    test.considerAll('I')\n);\nconsole.log(\n    test.considerAll('J')\n);\nconsole.log(\n    test.considerAll('K')\n);\nconsole.log(\n    test.considerAll('L')\n);\nconsole.log(\n    test.considerAll('M')\n);\nconsole.log(\n    test.considerAll('N')\n);\nconsole.log(\n    test.considerAll('O')\n);\nconsole.log(\n    test.considerAll('P')\n);\nconsole.log(\n    test.considerAll('Q')\n);\nconsole.log(\n    test.considerAll('R')\n);\nconsole.log(\n    test.considerAll('S')\n);\nconsole.log(\n    test.considerAll('T')\n);\nconsole.log(\n    test.considerAll('U')\n);\nconsole.log(\n    test.considerAll('V')\n);\nconsole.log(\n    test.considerAll('W')\n);\nconsole.log(\n    test.considerAll('X')\n);\nconsole.log(\n    test.considerAll('"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  const split = value.split(\".\")\n  if (split.length === 1) {\n    return parseInt(value)\n  }\n  const intPart = split[0]\n  const decPart = split[1]\n  const intPartLength = intPart.length\n  const decPartLength = decPart.length\n  const intPartIsNeg = intPart.charAt(0) === '-'\n  const decPartIsNeg = decPart.charAt(0) === '-'\n\n  // If the decimal part is longer than the integer part,\n  // make the integer part longer\n  if (decPartLength > intPartLength) {\n    const lengthDiff = decPartLength - intPartLength\n    const zeroes = lengthDiff - 1\n    for (let i = 0; i < zeroes; i++) {\n      intPart = `0${intPart}`\n    }\n    decPart = decPart.substring(1)\n  }\n\n  // If the decimal part is shorter than the integer part,\n  // make the integer part longer\n  if (decPartLength < intPartLength) {\n    const lengthDiff = intPartLength - decPartLength\n    const zeroes = lengthDiff - 1\n    for (let i = 0; i < zeroes; i++) {\n      decPart = `.0${decPart}`\n    }\n  }\n\n  // Add the decimal part to the integer part\n  let newIntPart = intPart\n  for (let i = 0; i < decPartLength; i++) {\n    newIntPart += decPart\n  }\n\n  // If the decimal part was negative, remove the leading zero\n  if (decPartIsNeg) {\n    newIntPart = newIntPart.substring(1)\n  }\n\n  // If the integer part was negative, remove the leading zero\n  if (intPartIsNeg) {\n    newIntPart = newIntPart.substring(1)\n  }\n\n  // Return the number\n  return parseInt(newIntPart)\n}\n\nexport default closeInteger\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const stones = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      stones.push(i);\n    } else {\n      stones.push(i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, return the number of levels of stones in the\n  pile.\n\n  Examples:\n  >>> holdAPile(3)\n  3\n  >>> holdAPile(4)\n  2\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2));\n};\n\nmodule.exports = {\n  holdAPile,\n  numberOfLevels\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  const words = s.split(/(\\s|,)/)\n  return words.map(word => word.trim())\n}\n\nconsole.log(bibleString(\"Hi, my name is John\"))\nconsole.log(bibleString(\"One, two, three, four, five, six\"))\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n    let result = x;\n    let counter = x;\n    let counter_2 = y;\n    while (counter_2 > 0) {\n        if (counter % 2 === 0) {\n            result = counter;\n        }\n        counter--;\n        counter_2--;\n    }\n    return result;\n};\n\nconst chooseNum_2 = (x, y) => {\n    let result = -1;\n    let counter = x;\n    let counter_2 = y;\n    while (counter_2 > 0) {\n        if (counter % 2 === 0) {\n            result = counter;\n        }\n        counter--;\n        counter_2--;\n    }\n    return result;\n};\n\nconst chooseNum_3 = (x, y) => {\n    let result = -1;\n    let counter = x;\n    let counter_2 = y;\n    let counter_3 = x;\n    while (counter_2 > 0) {\n        if (counter % 2 === 0) {\n            result = counter;\n        }\n        counter--;\n        counter_2--;\n        counter_3--;\n    }\n    return result;\n};\n\nconst chooseNum_4 = (x, y) => {\n    let result = -1;\n    let counter = x;\n    let counter_2 = y;\n    let counter_3 = x;\n    let counter_4 = y;\n    while (counter_2 > 0) {\n        if (counter % 2 === 0) {\n            result = counter;\n        }\n        counter--;\n        counter_2--;\n        counter_3--;\n        counter_4--;\n    }\n    return result;\n};\n\nconst chooseNum_5 = (x, y) => {\n    let result = -1;\n    let counter = x;\n    let counter_2 = y;\n    let counter_3 = x;\n    let counter_4 = y;\n    let counter_5 = x;\n    while (counter_2 > 0) {\n        if (counter % 2 === 0) {\n            result = counter;\n        }\n        counter--;\n        counter_2--;\n        counter_3--;\n        counter_4--;\n        counter_5--;\n    }\n    return result;\n};\n\nconst chooseNum_6 = (x, y) => {\n    let result = -1;\n    let counter = x;\n    let counter_2 = y;\n    let counter_3 = x;\n    let counter_4 = y;\n    let counter_5 = x;\n    let counter_6 = y;\n    while (counter_2 > 0) {\n        if (counter % 2 === 0) {\n            result = counter;\n        }\n        counter--;\n        counter_2--;\n        counter_3--;\n        counter_4--;\n        counter_5--;\n        counter_6--;\n    }\n    return result;\n};\n\nconst chooseNum_7 = (x, y) => {\n    let result = -1;\n    let counter = x;\n    let counter_2 = y;\n    let counter_3 = x;\n    let counter_4 = y;\n    let counter_5 = x;\n    let counter_6 = y;\n    let counter_7 = x;\n    while (counter_2 > 0) {\n        if (counter % 2 === 0) {\n            result = counter;\n        }\n        counter--;\n        counter_2--;\n        counter_3--;\n        counter_4--;\n        counter_5--;\n        counter_6--;\n        counter_7--;\n    }\n    return result;\n};\n\nconst chooseNum_8 = (x, y) => {\n    let result = -1;\n    let counter = x;\n    let counter_2 = y;\n    let counter_3 = x;\n    let counter_4 = y;\n    let counter_5 = x;\n    let counter_6 = y;\n    let counter_7 = x;\n    let counter_8 = y;\n    while (counter_2 > 0) {\n        if (counter % 2 === 0) {\n            result = counter;\n        }\n        counter--;\n        counter_2--;\n        counter_3--;\n        counter_4--;\n        counter_5--;\n        counter_6--;\n        counter_7--;\n        counter_8--;\n    }\n    return result;\n};\n\nconst chooseNum_9 = (x, y) => {\n    let result = -1;\n    let counter = x;\n    let counter_2 = y;\n    let counter_3 = x;\n    let counter_4 = y;\n    let counter_5 = x;\n    let counter_6 = y;\n    let counter_7 = x;\n    let counter_8 = y;\n    let counter_9 = x;\n    while (counter_2 > 0) {\n        if (counter % 2 === 0) {\n            result = counter;\n        }\n        counter--;\n        counter_2--;\n        counter_3--;\n        counter_4--;\n        counter_5--;\n        counter_6--;\n        counter_7--;\n        counter_8--;\n        counter_9--;\n    }\n    return result;\n};\n\nconst chooseNum_10 = (x, y) => {\n    let result = -1;\n    let counter = x;\n    let counter_2 = y;\n    let counter_3 = x;\n    let counter_4 = y;\n    let counter_5 = x;\n    let counter_6 = y;\n    let counter_7 = x;\n    let counter_8 = y;\n    let counter_9 = x;\n    let counter_10 = y;\n    while (counter_2 > 0) {\n        if (counter % 2 === 0) {\n            result = counter;\n        }\n        counter--;\n        counter_2--;\n        counter_3--;\n        counter_4--;\n        counter_5--;\n        counter_6--"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2;\n  const rounded = Math.floor(avg);\n  const binary = rounded.toString(2);\n  return binary;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  const nums = x.toString().split('')\n  let num = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === '0') {\n      num = 0\n    } else {\n      num += parseInt(nums[i], 10)\n    }\n  }\n  let sorted = []\n  while (num > 0) {\n    sorted.push(num)\n    num -= Math.floor(num / 2)\n  }\n  return sorted\n}\n\nconst test = require('ava')\n\nconst aloneDigit = (x) => {\n  const nums = x.toString().split('')\n  let num = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === '0') {\n      num = 0\n    } else {\n      num += parseInt(nums[i], 10)\n    }\n  }\n  let sorted = []\n  while (num > 0) {\n    sorted.push(num)\n    num -= Math.floor(num / 2)\n  }\n  return sorted\n}\n\ntest('Test 1', function(t) {\n  t.deepEqual(aloneDigit([15, 33, 1422, 1]), [1, 15, 33])\n  t.end()\n})\n\ntest('Test 2', function(t) {\n  t.deepEqual(aloneDigit([152, 323, 1422, 10]), [])\n  t.end()\n})\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  if (!arr.length) {\n    return []\n  }\n\n  arr.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n\n  let out = []\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i]\n    let name = Number(number).toString()\n    out.push(name)\n    count += 1\n\n    if (count === 9) {\n      break\n    }\n  }\n\n  arr.reverse()\n  return out\n}\n\nconsole.log(byDuration([2, 1, 1, 4, 5, 8, 2, 3]))\n\n// ==========\n// Test Cases\n// ==========\n\nconsole.log(byDuration([8, 5, 4, 3, 2, 2, 1, 1]))\nconsole.log(byDuration([55]))\nconsole.log(byDuration([1]))\nconsole.log(byDuration([0]))\nconsole.log(byDuration([5, -1]))\nconsole.log(byDuration([1, -1]))\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  return (n === 0 || n === 1)? [1] : (n === 2)? [1, 1] : (n === 3)? [1, 2, 1] : (n === 4)? [1, 2, 3, 1] : (n === 5)? [1, 2, 6, 24, 15] : (n === 6)? [1, 2, 3, 4, 5, 1] : (n === 7)? [1, 2, 3, 4, 7, 4, 1] : (n === 8)? [1, 2, 3, 4, 5, 6, 1, 1] : (n === 9)? [1, 2, 3, 4, 6, 9, 8, 5, 1] : (n === 10)? [1, 2, 3, 4, 5, 6, 7, 5, 3, 1] : (n === 11)? [1, 2, 3, 4, 6, 9, 11, 10, 6, 5, 1] : (n === 12)? [1, 2, 3, 4, 6, 8, 9, 12, 11, 10, 6, 5, 1] : (n === 13)? [1, 2, 3, 4, 6, 8, 10, 12, 13, 11, 10, 6, 5, 1] : (n === 14)? [1, 2, 3, 4, 6, 9, 11, 13, 14, 13, 11, 10, 6, 5, 1] : (n === 15)? [1, 2, 3, 4, 6, 8, 11, 14, 15, 14, 13, 11, 10, 6, 5, 1] : (n === 16)? [1, 2, 3, 4, 7, 8, 9, 12, 15, 16, 15, 14, 13, 11, 10, 6, 5, 1] : (n === 17)? [1, 2, 3, 4, 7, 9, 11, 14, 16, 17, 16, 15, 14, 13, 11, 10, 6, 5, 1] : (n === 18)? [1, 2, 3, 4, 7, 9, 11, 14, 17, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 1] : (n === 19)? [1, 2, 3, 4, 7, 9, 11, 14, 17, 19, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 1] : (n === 20)? [1, 2, 3, 4, 7, 9, 11, 14, 17, 19, 20, 19, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 1] : (n === 21)? [1, 2, 3, 4, 8, 9, 11, 14, 18, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 22)? [1, 2, 3, 4, 8, 9, 11, 14, 18, 22, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 23)? [1, 2, 3, 4, 8, 11, 14, 18, 22, 23, 22, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 24)? [1, 2, 3, 4, 8, 9, 11, 14, 18, 22, 23, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 25)? [1, 2, 3, 5, 7, 9, 11, 14, 17, 20, 23, 24, 25, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 26)? [1, 2, 3, 5, 7, 9, 11, 14, 17, 20, 23, 24, 25, 25, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 27)? [1, 2, 3, 5, 7, 9, 11, 14, 17, 20, 23, 24, 25, 25, 25, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 28)? [1, 2, 3, 5, 7, 9, 11, 14, 17, 20, 23, 24, 25, 25, 25, 25, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 29)? [1, 2, 3, 6, 8, 9, 11, 14, 17, 20, 23, 24, 25, 25, 25, 25, 25, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 30)? [1, 2, 3, 6, 8, 9, 11, 14, 17, 20, 23, 24, 25, 25, 25, 25, 25, 25, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 31)? [1, 2, 3, 6, 8, 9, 11, 14, 17, 20, 23, 24, 25, 25, 25, 25, 25, 25, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13, 11, 10, 6, 5, 4, 1] : (n === 32)? [1, 2, 3, 6, 8, 9, 11, 14, 17, 20, 23, 24, 25, 25, 25, 25, 25, 25, 25, 24, 23, 21, 20, 18, 17, 16, 15, 14, 13,"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evens = []\n  const odds = []\n  for (let i = 1; i <= n; i++) {\n    const odd = isPalindrome(i)\n    if (odd) {\n      odds.push(i)\n    } else {\n      evens.push(i)\n    }\n  }\n  return {\n    odds: odds,\n    evens: evens\n  }\n}\n\n/**\n  * @param {number} n\n  * @return {boolean}\n  * @example\n  * isPalindrome(12)\n  * // => true\n  * isPalindrome(8)\n  * // => false\n  */\nconst isPalindrome = (n) => {\n  let str = '' + n\n  while (str.length) {\n    str = str.slice(1) + str[0]\n  }\n  return str === n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      let digitSum = arr[i] % 10;\n      if (digitSum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(considerNums([-1, 11, -11])); // 1\nconsole.log(considerNums([1, 1, 2])); // 3\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  let flag = false;\n  let start = 0;\n  while (arr[start] <= arr[start + 1]) {\n    if (start === arr.length - 1) {\n      flag = true;\n      break;\n    }\n    start++;\n  }\n  if (flag) {\n    return true;\n  }\n  let max = arr[0];\n  let min = arr[arr.length - 1];\n  let k = 1;\n  while (k < arr.length - 1) {\n    if (arr[k] <= max && arr[k + 1] <= min) {\n      max = arr[k];\n      min = arr[k + 1];\n    } else if (arr[k] <= max && arr[k + 1] > min) {\n      max = arr[k];\n    } else if (arr[k] > max && arr[k + 1] <= min) {\n      min = arr[k + 1];\n    }\n    k++;\n  }\n  if (arr[arr.length - 1] <= max && arr[arr.length - 2] <= min) {\n    flag = true;\n  }\n  return flag;\n};\n\nexport default affectOneTestis;\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  let res = false;\n  let i, j;\n\n  if (lst1.length > 0 && lst2.length > 0) {\n    let center = lst1.length / 2;\n    let left = lst1.slice(0, center);\n    let right = lst1.slice(center);\n\n    let center2 = lst2.length / 2;\n    let left2 = lst2.slice(0, center2);\n    let right2 = lst2.slice(center2);\n\n    let center1 = lst1.length - center;\n    let center2 = lst2.length - center2;\n\n    if (left.length == right.length) {\n      for (i = 0; i < left.length; i++) {\n        if (lst2[center2 + i] == lst1[i]) {\n          res = true;\n          break;\n        }\n      }\n    }\n\n    if (right2.length == left2.length) {\n      for (i = 0; i < right2.length; i++) {\n        if (lst1[center1 + i] == lst2[i]) {\n          res = true;\n          break;\n        }\n      }\n    }\n\n    return res;\n  }\n};\n\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(central([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const count = {};\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (count[letter] === undefined) {\n      count[letter] = 1;\n    } else {\n      count[letter]++;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      if (s.charAt(i + 1) === c.charAt(1)) {\n        if (s.charAt(i + 2) === c.charAt(2)) {\n          if (s.charAt(i + 3) === c.charAt(3)) {\n            if (s.charAt(i + 4) === c.charAt(4)) {\n              if (s.charAt(i + 5) === c.charAt(5)) {\n                if (s.charAt(i + 6) === c.charAt(6)) {\n                  if (s.charAt(i + 7) === c.charAt(7)) {\n                    if (s.charAt(i + 8) === c.charAt(8)) {\n                      if (s.charAt(i + 9) === c.charAt(9)) {\n                        if (s.charAt(i + 10) === c.charAt(10)) {\n                          if (s.charAt(i + 11) === c.charAt(11)) {\n                            if (s.charAt(i + 12) === c.charAt(12)) {\n                              if (s.charAt(i + 13) === c.charAt(13)) {\n                                if (s.charAt(i + 14) === c.charAt(14)) {\n                                  if (s.charAt(i + 15) === c.charAt(15)) {\n                                    if (s.charAt(i + 16) === c.charAt(16)) {\n                                      if (s.charAt(i + 17) === c.charAt(17)) {\n                                        if (s.charAt(i + 18) === c.charAt(18)) {\n                                          if (s.charAt(i + 19) === c.charAt(19)) {\n                                            if (s.charAt(i + 20) === c.charAt(20)) {\n                                              if (s.charAt(i + 21) === c.charAt(21)) {\n                                                if (s.charAt(i + 22) === c.charAt(22)) {\n                                                  if (s.charAt(i + 23) === c.charAt(23)) {\n                                                    if (s.charAt(i + 24) === c.charAt(24)) {\n                                                      if (s.charAt(i + 25) === c.charAt(25)) {\n                                                        if (s.charAt(i + 26) === c.charAt(26)) {\n                                                          if (s.charAt(i + 27) === c.charAt(27)) {\n                                                            if (s.charAt(i + 28) === c.charAt(28)) {\n                                                              if (s.charAt(i + 29) === c.charAt(29)) {\n                                                              if (s.charAt(i + 30) === c.charAt(30)) {\n                                                                if (s.charAt(i + 31) === c.charAt(31)) {\n                                                                  if (s.charAt(i + 32) === c.charAt(32)) {\n                                                                    if (s.charAt(i + 33) === c.charAt(33)) {\n                                                                      if (s.charAt(i + 34) === c.charAt(34)) {\n                                                                        if (s.charAt(i + 35) === c.charAt(35)) {\n                                                                          if (s.charAt(i + 36) === c.charAt(36)) {\n                                                                            if (s.charAt(i + 37) === c.charAt(37)) {\n                                                                              if (s.charAt(i + 38) === c.charAt(38)) {\n                                                                                if (s.charAt(i + 39) === c.charAt(39)) {\n                                                                                   if (s.charAt(i + 40) === c.charAt(40)) {\n                                                                                    if (s.charAt(i + 41) === c.charAt(41)) {\n                                                                                      if (s.charAt(i + 42) === c.charAt(42)) {\n                                                                                        if (s.charAt(i + 43) === c.charAt(43)) {\n                                                                                          if (s.charAt(i + 44) === c.charAt(44)) {\n                                                                                            if (s.charAt(i + 45) === c.charAt(45)) {\n                                                                                             if (s.charAt(i + 46) === c.charAt(46)) {\n                                                                                               if (s.charAt(i + 47) === c.charAt(47)) {\n                                                                                                if (s.charAt(i + 48) === c.charAt(48)) {\n                                                                                                  if (s.charAt(i + 49) === c.charAt(49)) {\n                                                                                                    if (s.charAt(i + 50) === c.charAt(50)) {\n                                                                                                      if (s.charAt(i + 51) === c.charAt(51)) {\n                                                                                                          if (s.charAt(i + 52) === c.charAt(52)) {\n                                                                                                            if (s.charAt("}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  const n = lst.length\n  let oddCount = 0\n\n  for (let i = 0; i < n; i++) {\n    const num = parseInt(lst[i], 10)\n    if (num % 2!== 0) {\n      oddCount++\n    }\n  }\n\n  return oddCount\n   .toString()\n   .replace(/n/g, 'n')\n   .replace(/str/g,'str')\n   .replace(/the/g, 'the')\n   .replace(/odd/g, 'odd')\n   .replace(/numbers/g, 'numbers')\n   .split('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Number.MAX_VALUE;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n}\n\nmodule.exports = minuteSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  const gridLength = grid.length\n  const gridWidth = grid[0].length\n  let count = 0\n\n  for (let i = 0; i < gridLength; i++) {\n    for (let j = 0; j < gridWidth; j++) {\n      if (grid[i][j] === 0) {\n        grid[i][j] = 1\n        count++\n        const bucket = grid[i][j]\n        if (bucket < capacity) {\n          while (grid[i][j] > 0 && count < capacity) {\n            grid[i][j]--\n            count++\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill2 = (grid, capacity) => {\n  const gridLength = grid.length\n  const gridWidth = grid[0].length\n  let count = 0\n  let i = 0\n  let j = 0\n  const bucket = grid[i][j]\n  while (bucket > 0 && count < capacity) {\n    if (grid[i][j] === 1) {\n      grid[i][j] = 0\n      count++\n    }\n    if (j < gridWidth - 1) {\n      j++\n    } else if (i < gridLength - 1) {\n      i++\n      j = 0\n    } else {\n      return count\n    }\n  }\n  return count\n}\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill3 = (grid, capacity) => {\n  const gridLength = grid.length\n  const gridWidth = grid[0].length\n  let count = 0\n  let i = 0\n  let j = 0\n  let bucket = grid[i][j]\n  while (bucket > 0 && count < capacity) {\n    if (grid[i][j] === 1) {\n      grid[i][j] = 0\n      count++\n    }\n    if (j < gridWidth - 1) {\n      j++\n    } else if (i < gridLength - 1) {\n      i++\n      j = 0\n    } else {\n      return count\n    }\n  }\n  return count\n}\n\nmodule.exports = {\n  soapFill,\n  soapFill2,\n  soapFill3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  // Sort based on number of ones in binary representation.\n  arr.sort((a, b) => {\n    const aAsBinary = Number(a).toString(2);\n    const bAsBinary = Number(b).toString(2);\n    return aAsBinary.length - bAsBinary.length;\n  });\n\n  // Sort based on decimal value.\n  arr.sort((a, b) => Number(a) - Number(b));\n};\n\nexport { sortArray };\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n    let words = s.split(\" \")\n    const count = {}\n    words.forEach(word => {\n        let countOfConsonant = 0\n        for(let i = 0; i < word.length; i++) {\n            if(word[i].match(/[bcdfghjklmnpqrstvwxyz]/)) {\n                countOfConsonant++\n            }\n        }\n        if(countOfConsonant === n) {\n            count[word] = true\n        }\n    })\n    const result = Object.keys(count).sort().filter(x => count[x])\n    return result\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choice = (s, n) => {\n    const words = s.split(\" \")\n    const count = {}\n    words.forEach(word => {\n        for(let i = 0; i < word.length; i++) {\n            if(word[i].match(/[bcdfghjklmnpqrstvwxyz]/)) {\n                if(!count[word]) {\n                    count[word] = 0\n                }\n                count[word]++\n            }\n        }\n    })\n    const result = Object.keys(count).sort().filter(x => count[x] === n)\n    return result\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choice2 = (s, n) => {\n    const words = s.split(\" \")\n    const count = {}\n    words.forEach(word => {\n        for(let i = 0; i < word.length; i++) {\n            if(word[i].match(/[bcdfghjklmnpqrstvwxyz]/)) {\n                count[word] = true\n            }\n        }\n    })\n    const result = Object.keys(count).sort().filter(x => count[x] === n)\n    return result\n}\n\nconst main = (s, n) => {\n    const result = choice(s, n)\n    console.log(result)\n}\n\nconst main2 = (s, n) => {\n    const result = choice2(s, n)\n    console.log(result)\n}\n\nmain(\"Mary had a little lamb\", 4)\nmain2(\"Mary had a little lamb\", 4)\nmain2(\"Mary had a little lamb\", 3)\nmain2(\"simple white space\", 2)\nmain2(\"Hello world\", 4)\nmain2(\"Uncle sam\", 3)\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  const length = word.length\n  const currentVowel = word[length - 1]\n\n  for (let i = length - 2; i >= 0; i--) {\n    const vowel = word[i]\n\n    if (vowel === currentVowel) {\n      return vowel\n    }\n\n    if (vowel.toLowerCase() === vowel.toUpperCase()) {\n      return vowel\n    }\n  }\n\n  return \"\"\n}\n\nconsole.log(catchClosestVowel(\"yogurt\"))\nconsole.log(catchClosestVowel(\"FULL\"))\nconsole.log(catchClosestVowel(\"quick\"))\nconsole.log(catchClosestVowel(\"ab\"))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  const parens = {'(': ')', '[': ']', '{': '}'};\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(' || lst[i] === ')') {\n      stack.push(lst[i]);\n    } else {\n      const p = stack.pop();\n      if (parens[p]!== lst[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(catchParens(['()', ')', '(']));\nconsole.log(catchParens(['()', ')', ')']));\nconsole.log(catchParens(['()', ')', '{', '}', '[']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  const len = arr.length\n  const sortedArr = arr.slice()\n  const max = sortedArr[len - k]\n  let maxIdx = len - k\n  let maxIdxIdx = len - 1\n  while (maxIdxIdx >= 0) {\n    if (sortedArr[maxIdxIdx] === max) {\n      maxIdx--\n      maxIdxIdx--\n    } else {\n      break\n    }\n  }\n  sortedArr.splice(maxIdxIdx + 1, 0, max)\n  return sortedArr\n}\n\nconsole.log(maximal([-3, -4, 5], 3))\nconsole.log(maximal([4, -4, 4], 2))\nconsole.log(maximal([-3, 2, 1, 2, -1, -2, 1], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((pre, curr, index) => {\n    if(index % 2 === 0) {\n      return pre + curr\n    } else {\n      return pre + curr\n    }\n  }, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length\n  const result = 0\n  for (let i = 0; i < len; i++) {\n    if (i < k) {\n      result += arr[i]\n    } else {\n      break\n    }\n  }\n  return result\n}\n\nexport {lendElement}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  return [...new Array(n).fill().map((x, index) => index % 2 === 1? x : Math.pow(x, 2) + 1)];\n};\n\nconsole.log(catchOddCollatz(5));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) return false\n  const year = parseInt(date.substring(0, 4))\n  const month = parseInt(date.substring(5, 7))\n  const day = parseInt(date.substring(8, 10))\n  if (isNaN(year) || isNaN(month) || isNaN(day)) return false\n  const monthLength = [1,3,5,7,8,10,12]\n  const dayLength = [1,3,5,7,9,11]\n  if (month < 1 || month > 12) return false\n  if (day < 1 || day > monthLength[month - 1]) return false\n  if (day < 1 || day > dayLength[month - 1]) return false\n  if (month === 2 && day === 29 &&!(year % 400 === 0 || (year % 4 === 0 && year % 100!== 0))) return false\n  if (month === 2 && day === 30 &&!(year % 100 === 0)) return false\n  if (month === 2 && day === 31 &&!(year % 400 === 0 || (year % 4 === 0 && year % 100!== 0))) return false\n  return true\n}\n\nconst date = new Date(date)\nconsole.log(`The number of days in ${date.getFullYear()} is ${date.getDaysInYear()}`)\nconsole.log(`The number of days in ${date.getMonth()} is ${date.getDaysInMonth()}`)\nconsole.log(`The number of days in ${date.getDate()} is ${date.getDate()}`)\nconsole.log(`The number of days in ${date.getMonth()} is ${date.getDate()}`)\n\n// const date = new Date(date)\n// console.log(`The number of days in ${date.getFullYear()} is ${date.getDaysInYear()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDaysInMonth()}`)\n// console.log(`The number of days in ${date.getDate()} is ${date.getDate()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDate()}`)\n// const date = new Date('2000-06-05')\n// console.log(`The number of days in ${date.getFullYear()} is ${date.getDaysInYear()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDaysInMonth()}`)\n// console.log(`The number of days in ${date.getDate()} is ${date.getDate()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDate()}`)\n// const date = new Date('2013-04-28')\n// console.log(`The number of days in ${date.getFullYear()} is ${date.getDaysInYear()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDaysInMonth()}`)\n// console.log(`The number of days in ${date.getDate()} is ${date.getDate()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDate()}`)\n// const date = new Date('2000-01-01')\n// console.log(`The number of days in ${date.getFullYear()} is ${date.getDaysInYear()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDaysInMonth()}`)\n// console.log(`The number of days in ${date.getDate()} is ${date.getDate()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDate()}`)\n// const date = new Date('2030-07-31')\n// console.log(`The number of days in ${date.getFullYear()} is ${date.getDaysInYear()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDaysInMonth()}`)\n// console.log(`The number of days in ${date.getDate()} is ${date.getDate()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDate()}`)\n// const date = new Date('2000-01-01')\n// console.log(`The number of days in ${date.getFullYear()} is ${date.getDaysInYear()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDaysInMonth()}`)\n// console.log(`The number of days in ${date.getDate()} is ${date.getDate()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${date.getDate()}`)\n// const date = new Date('2000-07-31')\n// console.log(`The number of days in ${date.getFullYear()} is ${date.getDaysInYear()}`)\n// console.log(`The number of days in ${date.getMonth()} is ${"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  const s = txt.split('');\n  let i = 0;\n  let j = 0;\n  const l = s.length;\n  const result = [];\n  while (i < l) {\n    j = i + 1;\n    while (j < l) {\n      if (s[i] === s[j]) {\n        i++;\n        j++;\n      } else if (s[i].match(/\\s/)) {\n        i++;\n      } else {\n        break;\n      }\n    }\n    if (j - i > 1) {\n      result.push(s.slice(i, j));\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst connectedWords = (txt) => {\n  const s = txt.split('');\n  let i = 0;\n  let j = 0;\n  const l = s.length;\n  const result = [];\n  while (i < l) {\n    j = i + 1;\n    while (j < l) {\n      if (s[i] === s[j]) {\n        result.push(s.slice(i, j + 1));\n        i++;\n        j++;\n      } else if (s[i].match(/\\s/)) {\n        j++;\n      } else {\n        break;\n      }\n    }\n    if (j - i > 1) {\n      result.push(s.slice(i, j));\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt => connectedWords(txt);\n\nconst words = txt => disconnectedWords(txt);\n\nconst connectedWords = txt"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  const length = lst.length\n  const values = lst.reduce((arr, value, index) => {\n    if (index === 0) return arr.concat([value])\n    if (arr[arr.length - 1]!== value) return arr.concat([value])\n    return arr\n  }, [])\n\n  const sorted = values.sort((a, b) => a - b)\n\n  return length === sorted.length\n}\n\nconsole.log(isScreen([5]))\nconsole.log(isScreen([1, 2, 3, 4, 5]))\nconsole.log(isScreen([1, 3, 2, 4, 5]))\nconsole.log(isScreen([1, 2, 3, 4, 5, 6]))\nconsole.log(isScreen([1, 2, 3, 4, 5, 6, 7]))\nconsole.log(isScreen([1, 2, 3, 4, 5, 6, 7, 8]))\nconsole.log(isScreen([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nconsole.log(isScreen([1, 2, 2, 3, 3, 4]))\nconsole.log(isScreen([1, 2, 2, 2, 3, 4]))\nconsole.log(isScreen([1, 2, 2, 2, 2, 3, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  if (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n    return 'NO';\n  }\n  const length = interval1[1] - interval1[0] + 1;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\n// [OK]\n// [input/output] samples:\n// overlap((1, 2), (2, 3)) ==> \"NO\"\n// overlap((-1, 1), (0, 4)) ==> \"NO\"\n// overlap((-3, -1), (-5, 5)) ==> \"YES\"\n//\n// [input/output] samples:\n// overlap((1, 2), (1, 2)) ==> \"NO\"\n// overlap((-1, 1), (1, 2)) ==> \"NO\"\n// overlap((-3, -1), (3, -2)) ==> \"NO\"\n// overlap((-3, -1), (3, -1)) ==> \"NO\"\n// overlap((-3, -1), (3, 0)) ==> \"NO\"\n// overlap((-3, -1), (3, 1)) ==> \"NO\"\n// overlap((-3, -1), (3, 2)) ==> \"NO\"\n// overlap((-3, -1), (3, 3)) ==> \"YES\"\n//\n// [input/output] samples:\n// overlap((-1, 2), (0, 2)) ==> \"NO\"\n// overlap((-1, 2), (0, 1)) ==> \"NO\"\n// overlap((-1, 2), (1, 2)) ==> \"NO\"\n// overlap((-1, 2), (2, 3)) ==> \"YES\"\n// overlap((-1, 2), (3, 4)) ==> \"YES\"\n// overlap((-1, 2), (4, 5)) ==> \"YES\"\n//\n// [input/output] samples:\n// overlap((-1, 1), (0, 2)) ==> \"NO\"\n// overlap((-1, 1), (0, 1)) ==> \"NO\"\n// overlap((-1, 1), (1, 2)) ==> \"YES\"\n// overlap((-1, 1), (2, 3)) ==> \"YES\"\n// overlap((-1, 1), (3, 4)) ==> \"YES\"\n// overlap((-1, 1), (4, 5)) ==> \"YES\"\n//\n// [input/output] samples:\n// overlap((0, 1), (1, 2)) ==> \"NO\"\n// overlap((0, 1), (2, 3)) ==> \"YES\"\n// overlap((0, 1), (3, 4)) ==> \"YES\"\n// overlap((0, 1), (4, 5)) ==> \"YES\"\n//\n// [input/output] samples:\n// overlap((-1, 1), (-2, 2)) ==> \"NO\"\n// overlap((-1, 1), (-2, -1)) ==> \"NO\"\n// overlap((-1, 1), (-1, 2)) ==> \"NO\"\n// overlap((-1, 1), (-1, 1)) ==> \"NO\"\n// overlap((-1, 1), (0, 2)) ==> \"YES\"\n// overlap((-1, 1), (0, 1)) ==> \"YES\"\n// overlap((-1, 1), (1, 2)) ==> \"YES\"\n// overlap((-1, 1), (1, 1)) ==> \"NO\"\n// overlap((-1, 1), (2, 3)) ==> \"NO\"\n// overlap((-1, 1), (3, 4)) ==> \"NO\"\n// overlap((-1, 1), (4, 5)) ==> \"NO\"\n//\n// [input/output] samples:\n// overlap((-3, -1), (-2, 0)) ==> \"NO\"\n// overlap((-3, -1), (-2, -1)) ==> \"YES\"\n// overlap((-3, -1), (-1, 0)) ==> \"NO\"\n// overlap((-3, -1), (-1, 1)) ==> \"NO\"\n// overlap((-3, -1), (0, 2)) ==> \"YES\"\n// overlap((-3, -1), (0, 1)) ==> \"YES\"\n// overlap((-3, -1), (1, 2)) ==> \"YES\"\n// overlap((-3, -1), (1, 1)) ==> \"NO\"\n// overlap((-3, -1), (2, 3)) ==> \"NO\"\n// overlap((-3, -1), (3, 4)) ==> \"NO\"\n// overlap((-3, -1), (4, 5)) ==> \"NO\"\n//\n// [input/output] samples:\n// overlap((-3, -1), (-3, -2)) ==> \"YES\"\n// overlap((-3, -1), (-3, -1)) ==> \"YES\"\n// overlap((-3, -1), (-2, -1)) ==> \"YES\"\n// overlap((-3, -1), (-1, -1)) ==> \"YES\"\n// overlap((-3, -1), (-1, 0)) ==> \"NO\"\n// overlap((-3, -1), (-1, 1)) ==> \"YES\"\n// overlap((-3, -1), (0, 2)) ==> \""}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n\n  let signs = 0\n  let sum = 0\n\n  for (let i = 0; i < arr.length; i++) {\n    let sign = (arr[i] > 0)? 1 : -1\n    signs += sign\n    sum += sign * arr[i]\n  }\n\n  return sum * signs\n}\n\nexport default goadSigns\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const rowLen = grid.length\n  const colLen = grid[0].length\n  let minPath = [0]\n  let count = 0\n\n  for (let i = 0; i < rowLen; i++) {\n    for (let j = 0; j < colLen; j++) {\n      if (grid[i][j] > 0) {\n        const lst = [grid[i][j]]\n        for (let ii = i - 1; ii >= 0 && count <= k; ii--) {\n          if (grid[ii][j] > 0) {\n            lst.unshift(grid[ii][j])\n            count++\n          }\n        }\n        for (let jj = j + 1; jj < colLen && count <= k; jj++) {\n          if (grid[i][jj] > 0) {\n            lst.push(grid[i][jj])\n            count++\n          }\n        }\n        if (count <= k) {\n          minPath.unshift(...lst)\n        }\n      }\n    }\n  }\n  return minPath\n}\n\nexport default minutePath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 0) {\n    return [];\n  }\n  let arr = [1];\n  for (let i = 1; i < n; i++) {\n    let last = arr[i - 1];\n    arr.push(last + (last % 2 === 0? 1 : 2));\n  }\n  return arr;\n};\n\nconst triangle = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(tri(i));\n  }\n  return arr;\n};\n\nexport default triangle;<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let product = 1;\n  while (n--) {\n    if (n % 2) {\n      product *= n;\n    }\n  }\n  return product;\n}\n\nconst sum = (n) => {\n  let sum = 0;\n  while (n--) {\n    sum += n;\n  }\n  return sum;\n}\n\nconst digitProduct = (n) => {\n  return sum(digit(n));\n}\n\nconst product = (n) => {\n  return sum(digit(n) * digit(n));\n}\n\nconst isPrime = (n) => {\n  let i = 0;\n  while (digitProduct(n) < sum(digit(n))) {\n    i++;\n    n = sum(digit(n));\n  }\n  return i === 0;\n}\n\nconsole.log(isPrime(2147483647)); // true\nconsole.log(isPrime(2147483648)); // false\nconsole.log(isPrime(2147483649)); // false\nconsole.log(isPrime(2147483650)); // false\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const str = string.split('');\n  let i = 0;\n  let j = 0;\n  while (i < str.length) {\n    if (str[i] === '[') {\n      if (str[i + 1] === '[') {\n        i += 2;\n        j = 1;\n      } else {\n        i++;\n      }\n    } else if (str[i] === ']') {\n      if (j === 1) {\n        i++;\n      } else {\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return i === str.length;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return a boolean that indicates whether the string is a valid\n  subsequence of a valid bracketed string.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ true\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isBracketed = (string) => {\n  const str = string.split('');\n  let i = 0;\n  while (i < str.length) {\n    if (str[i] === '[') {\n      if (str[i + 1] === '[') {\n        i += 2;\n      } else if (str[i + 1] === ']') {\n        i++;\n      }\n    } else if (str[i] === ']') {\n      if (str[i - 1] === '[') {\n        i--;\n      } else if (str[i - 1] === ']') {\n        i--;\n      } else {\n        return false;\n      }\n    } else {\n      i++;\n    }\n  }\n  return i === str.length;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return a boolean that indicates whether the string is a valid\n  subsequence of a valid bracketed string.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ true\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isValid = (string) => {\n  const str = string.split('');\n  let i = 0;\n  while (i < str.length) {\n    if (str[i] === '[') {\n      if (str[i + 1] === '[') {\n        i += 2;\n      } else if (str[i + 1] === ']') {\n        i++;\n      }\n    } else if (str[i] === ']') {\n      if (str[i - 1] === '[') {\n        i--;\n      } else if (str[i - 1] === ']') {\n        i--;\n      } else {\n        return false;\n      }\n    } else {\n      i++;\n    }\n  }\n  return i === str.length;\n};\n\nconst validate = (string) => {\n  const str = string.split('');\n  let i = 0;\n  while (i < str.length) {\n    if (str[i] === '[') {\n      if (str[i + 1] === '[') {\n        i += 2;\n      } else if (str[i + 1] === ']') {\n        i++;\n      }\n    } else if (str[i] === ']') {\n      if (str[i - 1] === '[') {\n        i--;\n      } else if (str[i - 1] === ']') {\n        i--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return i === str.length;\n};\n\nconsole.log(isNest('[[]]'));\nconsole.log(isNest('[]]]]]]][[[[[]'));\nconsole.log(isNest('[][]'));\nconsole.log(isNest('[]'));\nconsole.log(isNest('[[][]]'));\nconsole.log(isNest('[[]][['));\n\nconsole.log(isBracketed('[[]]'));\nconsole.log(isBracketed('[]]]]]]][[[[[]'));\nconsole.log(isBracketed('[][]'));\nconsole.log(isBracketed('[]'));\nconsole.log(isBracketed('[[][]]'));\nconsole.log(isBracketed('[[]][['));\n\nconsole.log(isValid('[[]]'));\nconsole.log(isValid('[]]]]]]][[[[[]'));\nconsole.log(isValid('[][]'));\nconsole.log(isValid('[]'));\nconsole.log(isValid('[[][]]'));\nconsole.log(isValid('[[]][['));\n\nconst test = (string) => {\n  const str = string.split('');\n  let i = 0;\n  while (i < str.length) {\n    if (str[i] === '[') {\n      if (str[i + 1] === '[') {\n        i += 2;\n      } else if (str[i + 1] === ']') {\n        i++;\n      }\n    } else if (str[i] === ']') {\n      if (str[i - 1] === '[') {\n        i--;\n      "}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  const lstSize = lst.length;\n  let sum = 0;\n  for (let i = 0; i < lstSize; i++) {\n    sum += Math.pow(Math.floor(lst[i] + 0.5), 2);\n  }\n  return sum;\n};\n\nmodule.exports = summarizeSquare;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  return txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&!txt.match(/[a-zA-Z0-9 ]+\\b/)\n}\n\n/*\n  Create a function that returns true if the last two characters\n  of a given string are an alphabetical pair and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharPairConstituteALetter = (txt) => {\n  return txt.charAt(txt.length - 2).match(/[a-zA-Z]/) && txt.charAt(txt.length - 1).match(/[a-zA-Z]/)\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"1 apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"1 apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"1 apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteANumber = (txt) => {\n  return txt.charAt(txt.length - 1).match(/[0-9]/)\n}\n\n/*\n  Create a function that returns true if the last two characters\n  of a given string are a number pair, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"1 apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"1 apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"1 apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharPairConstituteANumber = (txt) => {\n  return txt.charAt(txt.length - 2).match(/[0-9]/) && txt.charAt(txt.length - 1).match(/[0-9]/)\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a special character, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"% apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"% apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"% apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteASpecial = (txt) => {\n  return txt.charAt(txt.length - 1).match(/[%]/)\n}\n\n/*\n  Create a function that returns true if the last two characters\n  of a given string are a special pair, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"% apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"% apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"% apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharPairConstituteASpecial = (txt) => {\n  return txt.charAt(txt.length - 2).match(/[%]/) && txt.charAt(txt.length - 1).match(/[%]/)\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a special character or number,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"% apple pie\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"% apple pi e\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"% apple pi e \") ➞ true\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteASpecialOrNumber = (txt) => {\n  return txt.charAt(txt.length - 1).match(/[%]|[0-9]/)\n}\n\n/*\n  Create a function that returns true if the last two characters\n  of a given string are a special pair or number pair,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"% apple pie\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"% apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"% apple pi e \") ➞ true\n  d"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const current = arr[i];\n    for (let j = 0; j < result.length; j++) {\n      if (result[j] <= current) {\n        result.splice(j, 1);\n        break;\n      }\n    }\n    if (j === result.length) {\n      result.push(current);\n    }\n  }\n  if (result.length === 0) return -1;\n  return result[result.length - 1];\n};\n\n// Tests\nconsole.log(canStage([1,2,3,4,5]));\nconsole.log(canStage([1,2,3,4]));\nconsole.log(canStage([1,2,3]));\nconsole.log(canStage([1,2]));\nconsole.log(canStage([1]));\nconsole.log(canStage([]));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  const largestNegative = getLargestNegative(lst)\n  const smallestPositive = getSmallestPositive(lst)\n\n  if (largestNegative === null) {\n    return (null, smallestPositive)\n  } else if (smallestPositive === null) {\n    return (largestNegative, null)\n  } else {\n    return (largestNegative, smallestPositive)\n  }\n}\n\nexport default bigSmallIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if(a === b) return null;\n  if(typeof a ==='string') a = parseFloat(a);\n  if(typeof b ==='string') b = parseFloat(b);\n\n  if(a > b) return a;\n  if(a < b) return b;\n  return null;\n};\n\nconst compareTwo = (a, b) => {\n  if(a === b) return null;\n  if(typeof a ==='string') a = parseFloat(a);\n  if(typeof b ==='string') b = parseFloat(b);\n\n  if(a > b) return b;\n  if(a < b) return a;\n  return null;\n};\n\nconst compareThree = (a, b, c) => {\n  if(a === b && b === c) return null;\n  if(typeof a ==='string') a = parseFloat(a);\n  if(typeof b ==='string') b = parseFloat(b);\n  if(typeof c ==='string') c = parseFloat(c);\n\n  if(a > b) {\n    if(a > c) return c;\n  } else {\n    if(b > c) return c;\n  }\n\n  return null;\n};\n\nconst compareFour = (a, b, c, d) => {\n  if(a === b && b === c && c === d) return null;\n  if(typeof a ==='string') a = parseFloat(a);\n  if(typeof b ==='string') b = parseFloat(b);\n  if(typeof c ==='string') c = parseFloat(c);\n  if(typeof d ==='string') d = parseFloat(d);\n\n  if(a > b) {\n    if(a > c) {\n      if(a > d) return d;\n    } else {\n      if(c > d) return d;\n    }\n  } else {\n    if(b > c) {\n      if(b > d) return d;\n    } else {\n      if(c > d) return d;\n    }\n  }\n\n  return null;\n};\n\nconst compareFive = (a, b, c, d, e) => {\n  if(a === b && b === c && c === d && d === e) return null;\n  if(typeof a ==='string') a = parseFloat(a);\n  if(typeof b ==='string') b = parseFloat(b);\n  if(typeof c ==='string') c = parseFloat(c);\n  if(typeof d ==='string') d = parseFloat(d);\n  if(typeof e ==='string') e = parseFloat(e);\n\n  if(a > b) {\n    if(a > c) {\n      if(a > d) {\n        if(a > e) return e;\n      } else {\n        if(c > d) return d;\n      }\n    } else {\n      if(b > c) {\n        if(b > d) {\n          if(b > e) return e;\n        } else {\n          if(c > d) return d;\n        }\n      } else {\n        if(c > d) {\n          if(c > e) return e;\n        } else {\n          if(d > e) return e;\n        }\n      }\n    }\n  } else {\n    if(b > c) {\n      if(b > d) {\n        if(b > e) return e;\n      } else {\n        if(c > d) return d;\n      }\n    } else {\n      if(c > d) {\n        if(c > e) return e;\n      } else {\n        if(d > e) return e;\n      }\n    }\n  }\n\n  return null;\n};\n\nconst compareSix = (a, b, c, d, e, f) => {\n  if(a === b && b === c && c === d && d === e && e === f) return null;\n  if(typeof a ==='string') a = parseFloat(a);\n  if(typeof b ==='string') b = parseFloat(b);\n  if(typeof c ==='string') c = parseFloat(c);\n  if(typeof d ==='string') d = parseFloat(d);\n  if(typeof e ==='string') e = parseFloat(e);\n  if(typeof f ==='string') f = parseFloat(f);\n\n  if(a > b) {\n    if(a > c) {\n      if(a > d) {\n        if(a > e) {\n          if(a > f) return f;\n        } else {\n          if(c > d) return d;\n        }\n      } else {\n        if(b > d) {\n          if(b > e) return e;\n        } else {\n          if(c > d) return d;\n        }\n      }\n    } else {\n      if(b > c) {\n        if(b > d) {\n          if(b > e) {\n            if(b > f) return f;\n          } else {\n            if(c > d) return d;\n          }\n        } else {\n          if(c > d) {\n            if(c > e) return e;\n          } else {\n            if(d > e) return e;\n          }\n        }\n      } else {\n        if(c > d) {\n          if(c > e) {\n            if(c > f) return f;\n          } else {\n            if(d > e) return e;\n          }\n        } else {\n          if(d > e) {\n            if(d > f) return f;\n          } else {\n            if(e > f) return f;\n          }\n        }\n"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const sum = arr.reduce((a, b) => a + b);\n  return n === sum || n === sum + 2 || n === sum + 4 || n === sum + 6;\n};\n\nexport default isAdequateToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n\n  let result = 1;\n  let factorial = 1;\n\n  while (n > 1) {\n    result *= n;\n    factorial *= n - 1;\n    n -= 1;\n  }\n\n  return result * factorial;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n  const spaces = /\\s+/g\n  const words = /\\w+/g\n  return text.replace(spaces, '_').replace(words, (word) => {\n    if (word.length > 2) {\n      return `${word[0]}${word.slice(1).replace(spaces, '-')}`\n    }\n    return word\n  })\n}\n\n/*\n  Given a string text, split the text by words, \n  replace all spaces with underscores, and then join the words again.\n  \n  splitText(\"Example\") == \"Example\"\n  splitText(\"Example 1\") == \"Example_1\"\n  splitText(\" Example 2\") == \"Example_2\"\n  splitText(\" Example   3\") == \"Example_3\"\n  */\nconst splitText = (text) => {\n  const words = /\\w+/g\n  return text.replace(words, (word) => {\n    return word.replace(/\\s+/g, '_')\n  })\n}\n\n/*\n  Given a string text, trim the first and last spaces, \n  and then return the trimmed string.\n  \n  trim(\"Example\") == \"Example\"\n  trim(\"Example 1\") == \"Example 1\"\n  trim(\" Example 2\") == \"Example 2\"\n  trim(\" Example   3\") == \"Example 3\"\n  */\nconst trim = (text) => {\n  return text.replace(/^\\s+|\\s+$/g, '')\n}\n\n/*\n  Given a string text, replace all - in the string with spaces.\n  \n  replace(\"Example-3\") == \"Example 3\"\n  */\nconst replace = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all - in the string with -.\n  \n  replace(\"Example-3\") == \"Example3\"\n  */\nconst replace2 = (text) => {\n  return text.replace(/-/g, '-')\n}\n\n/*\n  Given a string text, replace all - in the string with a single space.\n  \n  replace(\"Example-3\") == \"Example 3\"\n  */\nconst replace3 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all spaces with -.\n  \n  replace(\"Example 1\") == \"Example 1\"\n  */\nconst replace4 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces with -.\n  \n  replace(\"Example 1\") == \"Example 1\"\n  */\nconst replace5 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\n/*\n  Given a string text, remove the first and last spaces.\n  \n  remove(\"Example 1\") == \"Example 1\"\n  */\nconst remove = (text) => {\n  return text.replace(/^\\s+|\\s+$/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove2 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove3 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove4 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove5 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove6 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove7 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove8 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove9 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove10 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove11 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") == \"Example 3\"\n  */\nconst remove12 = (text) => {\n  return text.replace(/-/g, '')\n}\n\n/*\n  Given a string text, remove all - in the string.\n  \n  remove(\"Example-3\") =="}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    let is_valid = true\n    if (file_name.length === 0) {\n        is_valid = false\n    }\n    else if (file_name.length > 3) {\n        is_valid = false\n    }\n    else if (file_name.indexOf('.') === -1) {\n        is_valid = false\n    }\n    else if (file_name.indexOf('.') > 0) {\n        let dot = file_name.indexOf('.')\n        let before_dot = file_name.substring(0, dot)\n        if (before_dot.length === 0) {\n            is_valid = false\n        }\n        else {\n            let start_char = before_dot.charAt(0)\n            if (!(start_char >= 'a' && start_char <= 'z') &&!(start_char >= 'A' && start_char <= 'Z')) {\n                is_valid = false\n            }\n        }\n        let after_dot = file_name.substring(dot)\n        if (after_dot!== 'txt' && after_dot!== 'exe' && after_dot!== 'dll') {\n            is_valid = false\n        }\n    }\n    return is_valid\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than four digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll', 'tar']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    let is_valid = true\n    if (file_name.length === 0) {\n        is_valid = false\n    }\n    else if (file_name.length > 4) {\n        is_valid = false\n    }\n    else if (file_name.indexOf('.') === -1) {\n        is_valid = false\n    }\n    else if (file_name.indexOf('.') > 0) {\n        let dot = file_name.indexOf('.')\n        let before_dot = file_name.substring(0, dot)\n        if (before_dot.length === 0) {\n            is_valid = false\n        }\n        else {\n            let start_char = before_dot.charAt(0)\n            if (!(start_char >= 'a' && start_char <= 'z') &&!(start_char >= 'A' && start_char <= 'Z')) {\n                is_valid = false\n            }\n        }\n        let after_dot = file_name.substring(dot)\n        if (after_dot!== 'txt' && after_dot!== 'exe' && after_dot!== 'dll' && after_dot!== 'tar') {\n            is_valid = false\n        }\n    }\n    return is_valid\n}\n\nconst fileNameCheck = (file_name) => {\n    let is_valid = true\n    if (file_name.length === 0) {\n        is_valid = false\n    }\n    else if (file_name.length > 4) {\n        is_valid = false\n    }\n    else if (file_name.indexOf('.') === -1) {\n        is_valid = false\n    }\n    else if (file_name.indexOf('.') > 0) {\n        let dot = file_name.indexOf('.')\n        let before_dot = file_name.substring(0, dot)\n        if (before_dot.length === 0) {\n            is_valid = false\n        }\n        else {\n            let start_char = before_dot.charAt(0)\n            if (!(start_char >= 'a' && start_char <= 'z') &&!(start_char >= 'A' && start_char <= 'Z')) {\n                is_valid = false\n            }\n        }\n        let after_dot = file_name.substring(dot)\n        if (after_dot!== 'txt' && after_dot!== 'exe' && after_dot!== 'dll' && after_dot!== 'tar') {\n            is_valid = false\n        }\n    }\n    return is_valid\n}\n\nexport default fileNameCheck\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let item of lst) {\n    if (item%3 == 0) {\n      sum += item*item;\n    } else if (item%4 == 0) {\n      sum += item*item*item;\n    }\n  }\n  return sum;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the number of unique values in the list. \n  \n  Examples:\n  For lst = [1,2,3,4,5] the output should be 5\n  For lst = [1,2,3,4,5,5] the output should be 3\n  For lst = [] the output should be 0\n  For lst = [-1,-2,-3,-4,-5] the output should be 5\n  */\nconst summarizeUnique = (lst) => {\n  let dict = {};\n  for (let item of lst) {\n    if (!(item in dict)) {\n      dict[item] = 1;\n    } else {\n      dict[item]++;\n    }\n  }\n  return Object.keys(dict).length;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the number of unique values in the list that are less than or equal to 50. \n  \n  Examples:\n  For lst = [1,2,3,4,5] the output should be 2\n  For lst = [1,2,3,4,5,5] the output should be 2\n  For lst = [] the output should be 0\n  For lst = [-1,-2,-3,-4,-5] the output should be 2\n  */\nconst summarizeUnique50 = (lst) => {\n  let dict = {};\n  for (let item of lst) {\n    if (item < 50 &&!(item in dict)) {\n      dict[item] = 1;\n    } else if (item < 50 && item in dict) {\n      dict[item]++;\n    }\n  }\n  return Object.keys(dict).length;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the number of unique values in the list that are less than or equal to 100. \n  \n  Examples:\n  For lst = [1,2,3,4,5] the output should be 3\n  For lst = [1,2,3,4,5,5] the output should be 3\n  For lst = [] the output should be 0\n  For lst = [-1,-2,-3,-4,-5] the output should be 3\n  */\nconst summarizeUnique100 = (lst) => {\n  let dict = {};\n  for (let item of lst) {\n    if (item < 100 &&!(item in dict)) {\n      dict[item] = 1;\n    } else if (item < 100 && item in dict) {\n      dict[item]++;\n    }\n  }\n  return Object.keys(dict).length;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the number of unique values in the list that are less than or equal to 200. \n  \n  Examples:\n  For lst = [1,2,3,4,5] the output should be 4\n  For lst = [1,2,3,4,5,5] the output should be 4\n  For lst = [] the output should be 0\n  For lst = [-1,-2,-3,-4,-5] the output should be 4\n  */\nconst summarizeUnique200 = (lst) => {\n  let dict = {};\n  for (let item of lst) {\n    if (item < 200 &&!(item in dict)) {\n      dict[item] = 1;\n    } else if (item < 200 && item in dict) {\n      dict[item]++;\n    }\n  }\n  return Object.keys(dict).length;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the number of unique values in the list that are less than or equal to 250. \n  \n  Examples:\n  For lst = [1,2,3,4,5] the output should be 5\n  For lst = [1,2,3,4,5,5] the output should be 5\n  For lst = [] the output should be 0\n  For lst = [-1,-2,-3,-4,-5] the output should be 5\n  */\nconst summarizeUnique250 = (lst) => {\n  let dict = {};\n  for (let item of lst) {\n    if (item < 250 &&!(item in dict)) {\n      dict[item] = 1;\n    } else if (item < 250 && item in dict) {\n      dict[item]++;\n    }\n  }\n  return Object.keys(dict).length;\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will return the number of unique values in the list that are less than or equal to 300. \n  \n  Examples:\n  For lst = [1,2,3,4,5] the output should be 4\n  For lst = [1,2,3,4,5,5] the output should be 4\n  For lst = [] the output should be 0\n  For lst = [-1,-2,-3,-4,-5] the output should be 4\n  */\nconst summarizeUnique300 = (lst) => {\n  let dict = {};\n  for (let item of lst) {\n    if (item < 300 &&!(item in dict))"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const re = /[\\s\\S]*[\\s\\S]*/g\n  const [words, count] = [sentence, 1]\n  const primeNumber = (n) => n % 1 === 0? n : 1\n  const [prime, index, words, count] = [1, 0, words, count]\n  while (re.exec(words)) {\n    const word = re.exec(words)[0]\n    if (primeNumber(count) === primeNumber(index)) {\n      if (word.length % prime === 0) {\n        const newWord = word.substring(0, prime)\n        if (newWord === words) {\n          return newWord\n        }\n        words = words.replace(word, newWord)\n        count = count + 1\n      }\n    }\n    index = index + 1\n  }\n  return words\n}\n\nmodule.exports = bibleInPrisonTerm\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let s = x.toString()\n  let d = n.toString()\n  let c = 1\n  if (s.charAt(0) === '-') {\n    c = -1\n    s = s.slice(1)\n  }\n  if (s.charAt(0) === '0') {\n    return false\n  }\n  let isInteger = true\n  for (let i = 1; i < s.length; i++) {\n    if (s.charAt(i)!== '0') {\n      isInteger = false\n      break\n    }\n  }\n  if (isInteger) {\n    return false\n  }\n  let f = parseFloat(s)\n  let f2 = parseFloat(d)\n  let m = f2 % f\n  if (Math.abs(f2) - Math.abs(f) > 0.1) {\n    return false\n  }\n  if (m!== 0) {\n    return false\n  }\n  return f > 0\n}\n\nsimplify(\"1/5\", \"5/1\") // true\nsimplify(\"1/6\", \"2/1\") // false\nsimplify(\"7/10\", \"10/2\") // false\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const sorted = nums.slice(0);\n\n  for (let i = 0; i < sorted.length; i += 1) {\n    let j = i + 1;\n    while (j < sorted.length) {\n      if (sorted[i].length > sorted[j].length) {\n        sorted.splice(j, 1);\n      } else if (sorted[i].length < sorted[j].length) {\n        sorted.splice(i, 1);\n      } else {\n        if (sorted[i].indexOf(sorted[j][0])!== -1) {\n          sorted.splice(j, 1);\n        } else {\n          j += 1;\n        }\n      }\n    }\n  }\n  return sorted;\n};\n\n// Test\nconsole.log(holyOrderByPoint([1, 11, -1, -11, -12]));\nconsole.log(holyOrderByPoint([]));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  const n = nums.length;\n  let counter = 0;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] > 10 && (nums[i] % 2 === 1 || nums[i] % 2 === 3 || nums[i] % 2 === 5 || nums[i] % 2 === 7 || nums[i] % 2 === 9)) {\n      counter++;\n    }\n  }\n  return counter;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  const a = new Array(n);\n  const numTriples = 0;\n\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const k = j + 1;\n      if (a[i] + a[j] + a[k] % 3 === 0) {\n        numTriples += 1;\n      }\n    }\n  }\n\n  return numTriples;\n};\n\nexport {\n  catchMaxTriples\n};\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const distance = {\n    \"Mercury\"   : 0,\n    \"Venus\"     : 1,\n    \"Earth\"     : 2,\n    \"Mars\"      : 3,\n    \"Jupiter\"  : 4,\n    \"Saturn\"   : 5,\n    \"Uranus\"   : 6,\n    \"Neptune\"  : 7\n  }\n  let counter = 0\n  let return_value = []\n  for (let i = 0; i < planets.length; i++) {\n    for (let j = 0; j < planets.length; j++) {\n      if (distance[planet1] <= distance[planet2]) {\n        counter += 1\n        return_value.push(planets[i])\n      }\n    }\n  }\n  return return_value\n}\n\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Jupiter\", \"Mercury\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Jupiter\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Saturn\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let l = 0;\n  let res = [];\n  for(let i = 0; i < lst.length; i++) {\n    l += lst[i].length;\n  }\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i].length % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  res.sort((a, b) => a.length - b.length);\n  return res;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYttriumTest = () => {\n  const primeX = xOrYttrium(5, 5, 5);\n  const primeY = xOrYttrium(7, 7, 7);\n  return primeX === primeY;\n}\n\nexport default xOrYttriumTest;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) return 0;\n\n  // Create a dictionary of odd numbers.\n  const dict = {};\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num > 0 && num % 2 === 1) {\n      dict[num] = true;\n    }\n  }\n\n  // Find sum of squares.\n  const sum = lst.reduce((acc, curr) => {\n    if (curr in dict) {\n      acc += curr * curr;\n    }\n    return acc;\n  }, 0);\n\n  return sum;\n};\n\nconst sumSquares = (nums) => {\n  return nums.reduce((acc, curr) => {\n    return acc + curr * curr;\n  }, 0);\n};\n\nconst findOdd = (nums) => {\n  const oddSum = sumSquares(nums);\n  const sumSquaredOddSum = sumSquares(filter(nums, (x) => x % 2 === 1));\n  return oddSum === sumSquaredOddSum;\n};\n\nexport {\n  findOdd,\n  doubleTheDeviation\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let correct = 0\n  let wrong = 0\n  let len = game.length\n  for (let i = 0; i < len; i++) {\n    if (game[i] === guess[i]) {\n      correct++\n    } else {\n      wrong++\n    }\n  }\n  return [correct, wrong]\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,1,1,1,1,0],[1,1,1,1,1,1]))\nconsole.log(compare([0,1,1,1,1,0],[1,1,1,1,1,0]))\nconsole.log(compare([0,1,1,1,1,0],[0,0,0,0,0,0]))\nconsole.log(compare([0,1,1,1,1,0],[0,0,0,0,0,0]))\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  let index = extensions.findIndex(ext => ext.toLowerCase().indexOf(class_name.toLowerCase()) > -1);\n  if (index === -1) {\n    return null;\n  }\n  return class_name + extensions[index].substr(0, 1).toUpperCase() + extensions[index].substr(1);\n};\n\nconst softExtension = (class_name, extensions) => {\n  let index = extensions.findIndex(ext => ext.toLowerCase().indexOf(class_name.toLowerCase()) > -1);\n  if (index === -1) {\n    return null;\n  }\n  return class_name + extensions[index].substr(0, 1).toUpperCase() + extensions[index].substr(1);\n};\n\nconst getExtensions = (extensions, class_name) => {\n  let result = [];\n  let class_name_lower = class_name.toLowerCase();\n  for (let ext of extensions) {\n    if (ext.toLowerCase().indexOf(class_name_lower) > -1) {\n      result.push(ext);\n    }\n  }\n  return result;\n};\n\nexport {\n  hardExtension,\n  softExtension,\n  getExtensions\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const result = a.indexOf(b)!== -1;\n  if (!result) {\n    for (let i = 0; i < b.length; i++) {\n      if (cycpatternCheck(a, b.substr(0, i) + b.substr(i + 1))) {\n        return true;\n      }\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if (num === 0) {\n    return (0, 0)\n  } else if (num === 1) {\n    return (1, 0)\n  } else if (num < 0) {\n    throw new Error('Input number must be positive')\n  } else if (num === 2) {\n    return (1, 1)\n  } else if (num < 4) {\n    return (1, 0)\n  } else if (num % 2 === 0) {\n    return (2, 0)\n  } else {\n    return (1, 1)\n  }\n}\n\nexport default evenOddCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = parseInt(number);\n  const n = num - 1;\n  const nums = [ '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix' ];\n  let result = '';\n  let i = 0;\n  while (n > 0) {\n    const nDigit = n % 10;\n    const d = n % 100;\n    if (nDigit > 4) {\n      nDigit = nDigit + 7;\n    }\n    if (nDigit == 9) {\n      nDigit = nDigit + 3;\n    }\n    if (d > 4) {\n      nDigit = nDigit + 3;\n    }\n    result = nums[nDigit] + result;\n    i += 1;\n    n = n / 10;\n  }\n  return result;\n};\n\nexport default intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const s1 = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2));\n  const s2 = Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2));\n  const s3 = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n\n  return (s1 + s2) === s3;\n};\n\nconsole.log(goodSlantTriangle(3, 4, 5));\nconsole.log(goodSlantTriangle(1, 2, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  const wordsLength = words.length\n  let maxUniqueChars = 0\n  let uniqueChars = 0\n  let currentWord = \"\"\n  let i = 0\n  while (i < wordsLength) {\n    currentWord = words[i]\n    uniqueChars = getUniqueChars(currentWord)\n    if (uniqueChars > maxUniqueChars) {\n      maxUniqueChars = uniqueChars\n      i = 0\n      uniqueChars = 0\n    }\n    i++\n  }\n  return currentWord\n}\n\nconst getUniqueChars = (string) => {\n  const chars = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    chars.push(string[i])\n  }\n  const charsArray = chars.sort()\n  return charsArray.length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n    if(number > need) {\n        return [number, 0];\n    }\n    return [number, need - number];\n}\n\nconsole.log(feed(5, 6, 10)); // 11, 4\nconsole.log(feed(4, 8, 9)); // 12, 1\nconsole.log(feed(1, 10, 10)); // 11, 0\nconsole.log(feed(2, 11, 5)); // 7, 0\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n    const operators = []\n    let i\n    const add = (num) => {\n        const result = num + 1\n        operators.push(result)\n        return result\n    }\n    const subtract = (num) => {\n        const result = num - 1\n        operators.push(result)\n        return result\n    }\n    const multiply = (num) => {\n        const result = num * 2\n        operators.push(result)\n        return result\n    }\n    const divide = (num) => {\n        const result = num / 2\n        operators.push(result)\n        return result\n    }\n    const pow = (num) => {\n        const result = num ** 3\n        operators.push(result)\n        return result\n    }\n    const floor = (num) => {\n        const result = Math.floor(num)\n        operators.push(result)\n        return result\n    }\n    operators.push(1)\n    for (i = 0; i < operand.length - 1; i++) {\n        operators.push(operand[i])\n    }\n\n    for (i = 0; i < operator.length; i++) {\n        operators.push(operator[i])\n    }\n\n    operators.pop()\n    operators.pop()\n\n    const res = operators[0]\n    for (i = 1; i < operators.length; i++) {\n        const current = operators[i]\n        if (typeof current === 'number') {\n            res = res + current\n        } else {\n            res = res + add(current)\n        }\n    }\n    return res\n}\n\nconst list = ['+', '-', '*', '//', '**']\nconst array = [2, 3, 4, 5]\n\nconsole.log(s sufficeAlgebra(list, array))\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  let result = \"\";\n  let length = s.length;\n  for (let i = 0; i < length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      if (s[i].toLowerCase() === s[i].toUpperCase()) {\n        result += s[i].toUpperCase();\n      } else {\n        result += s[i].toLowerCase();\n      }\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(resolve(\"1234\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n\n  return md5.digest('hex');\n};\n\n/**\n  Given an array of strings, return their md5 hash equivalent strings.\n  If 'text' is an empty array, return null.\n\n  >>> bowedStringedInstrumentToMd5(['Hello world', 'Good morning']) == ['3e25960a79dbc69b674cd4ec67a72c62', '9e4e7b4f6f0e1d0d6a0e7ad2b77ae1f2']\n  */\nconst bowedStringedInstrumentToMd5Array = (texts) => {\n  if (texts.length === 0) {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n\n  texts.forEach((text) => {\n    md5.update(text);\n  });\n\n  return md5.digest('hex').map((hexDigest) => {\n    return hexDigest;\n  });\n};\n\n/**\n  Given an array of strings, return their md5 hash equivalent strings.\n  If 'text' is an empty array, return null.\n\n  >>> bowedStringedInstrumentToMd5(['']) == [null]\n  */\nconst bowedStringedInstrumentToMd5EmptyArray = () => {\n  return bowedStringedInstrumentToMd5Array(['']);\n};\n\n/**\n  Given a string 'text', return the md5 hash of the given string.\n  If 'text' is an empty string, return null.\n\n  >>> bowlingStringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowlingStringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n\n  return md5.digest('hex');\n};\n\n/**\n  Given an array of strings, return the md5 hash of each string.\n  If 'text' is an empty array, return null.\n\n  >>> bowlingStringToMd5(['Hello world', 'Good morning']) == ['3e25960a79dbc69b674cd4ec67a72c62', '9e4e7b4f6f0e1d0d6a0e7ad2b77ae1f2']\n  */\nconst bowlingStringToMd5Array = (texts) => {\n  if (texts.length === 0) {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n\n  texts.forEach((text) => {\n    md5.update(text);\n  });\n\n  return md5.digest('hex').map((hexDigest) => {\n    return hexDigest;\n  });\n};\n\n/**\n  Given an array of strings, return the md5 hash of each string.\n  If 'text' is an empty array, return null.\n\n  >>> bowlingStringToMd5(['']) == [null]\n  */\nconst bowlingStringToMd5EmptyArray = () => {\n  return bowlingStringToMd5Array(['']);\n};\n\nmodule.exports = {\n  bowlingStringToMd5,\n  bowlingStringToMd5Array,\n  bowedStringedInstrumentToMd5,\n  bowedStringedInstrumentToMd5Array,\n  bowedStringedInstrumentToMd5EmptyArray,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  const numbers = []\n\n  for (let i = a; i <= b; i++) {\n    const number = i % 10\n\n    if (number === 0) {\n      break\n    }\n\n    if (number % 2 === 0) {\n      numbers.push(number)\n    }\n  }\n\n  return numbers\n}\n\nexport default renderInteger\n<|endoftext|>"}
