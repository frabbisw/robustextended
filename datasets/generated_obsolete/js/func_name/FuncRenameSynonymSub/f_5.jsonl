{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n    const closest = [];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            const diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < threshold) {\n                closest.push([numbers[i], numbers[j]]);\n            }\n        }\n    }\n\n    return closest.length > 0;\n};\n\n/**\n  * Given a list of numbers, returns the median of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst getMedian = (numbers) => {\n    const len = numbers.length;\n    const half = len / 2;\n    let result = 0;\n\n    if (len % 2 === 0) {\n        result = (numbers[half - 1] + numbers[half]) / 2;\n    } else {\n        result = numbers[half];\n    }\n\n    return result;\n};\n\n/**\n  * Given a list of numbers, returns the mean of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst getMean = (numbers) => {\n    let sum = 0;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n\n    return sum / numbers.length;\n};\n\n/**\n  * Given a list of numbers, returns the standard deviation of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst getStandardDeviation = (numbers) => {\n    let mean = getMean(numbers);\n    let sum = 0;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += Math.pow(numbers[i] - mean, 2);\n    }\n\n    return Math.sqrt(sum / numbers.length);\n};\n\n/**\n  * Given a list of numbers, returns the range of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst getRange = (numbers) => {\n    let min = numbers[0];\n    let max = numbers[0];\n\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n\n    return [min, max];\n};\n\n/**\n  * Given a list of numbers, returns the mode of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst getMode = (numbers) => {\n    const counts = new Map();\n\n    for (let i = 0; i < numbers.length; i++) {\n        const count = counts.get(numbers[i]) || 0;\n        counts.set(numbers[i], count + 1);\n    }\n\n    const maxCount = Array.from(counts.values())\n       .sort()\n       .pop()\n       .value;\n\n    let max = 0;\n\n    for (let key in counts) {\n        if (counts[key] === maxCount) {\n            max = key;\n        }\n    }\n\n    return max;\n};\n\n/**\n  * Given a list of numbers, returns the mode of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst getMedian = (numbers) => {\n    const len = numbers.length;\n    const half = len / 2;\n    let result = 0;\n\n    if (len % 2 === 0) {\n        result = (numbers[half - 1] + numbers[half]) / 2;\n    } else {\n        result = numbers[half];\n    }\n\n    return result;\n};\n\n/**\n  * Given a list of numbers, returns the mean of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst getMean = (numbers) => {\n    let sum = 0;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n\n    return sum / numbers.length;\n};\n\n/**\n  * Given a list of numbers, returns the standard deviation of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst getStandardDeviation = (numbers) => {\n    let mean = getMean(numbers);\n    let sum = 0;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += Math.pow(numbers[i] - mean, 2);\n    }\n\n    return Math.sqrt(sum / numbers.length);\n};\n\n/**\n  * Given a list of numbers, returns the range of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst getRange = (numbers) => {\n    let min = numbers[0];\n    let max = numbers[0];\n\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n\n    return [min, max];\n};\n\n/**\n  * Given a list of numbers, returns the mode of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst getMode = (numbers) => {\n    const counts = new Map();\n\n    for (let i = 0; i < numbers.length; i++) {\n        const"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const groups = [];\n  const opening_paren = paren_string.indexOf('(');\n  const closing_paren = paren_string.lastIndexOf(')');\n  const group_open = paren_string.indexOf('(', opening_paren + 1);\n  const group_close = paren_string.indexOf(')', group_open + 1);\n\n  while (group_open > -1) {\n    groups.push(paren_string.slice(group_open + 1, group_close));\n    opening_paren = paren_string.indexOf('(', group_open + 1);\n    closing_paren = paren_string.lastIndexOf(')', opening_paren);\n    group_open = paren_string.indexOf('(', opening_paren + 1);\n    group_close = paren_string.indexOf(')', group_open + 1);\n  }\n  return groups;\n};\n\nmodule.exports = freestandingParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  return number - intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInt = (number) => {\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateInt(3.5)\n  0.5\n  */\nconst truncateDec = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDec(3.5)\n  3\n  */\nconst truncateDecInt = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateDecInt(3.5)\n  0.5\n  */\nconst truncateDecInt1 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt2 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt3 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt4 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt5 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt6 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt7 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt8 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt9 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt10 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt11 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateDecInt(3.5)\n  3\n  */\nconst truncateDecInt12 = (number) => {\n  return number;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0\n  let operationsCopy = [...operations]\n  return operationsCopy.reduce((prev, curr) => {\n    if (curr < 0) {\n      balance = -balance\n    }\n    return (balance < 0)? true : false\n  }, false)\n}\n\nmodule.exports = belowZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  let xs = numbers.map(Number)\n  return xs.reduce((a, b) => {\n    return a + Math.abs(b - a)\n  }) / xs.length\n}\n\n/**\n  Find the maximum deviation of the given list of numbers\n  from a given mean.\n  >>> maxAbsDev([1.0, 2.0, 3.0, 4.0])\n  2.0\n  >>> maxAbsDev([1.0, 2.0, 3.0, 4.0, 5.0])\n  5.0\n  */\nconst maxAbsDev = (numbers, mean = 0) => {\n  let xs = numbers.map(Number)\n  let xMean = mean\n  let maxDev = 0\n  for (let i = 0; i < xs.length; i++) {\n    let dev = Math.abs(xs[i] - xMean)\n    if (dev > maxDev) maxDev = dev\n  }\n  return maxDev\n}\n\n/**\n  Find the minimum deviation of the given list of numbers\n  from a given mean.\n  >>> minAbsDev([1.0, 2.0, 3.0, 4.0])\n  0.0\n  >>> minAbsDev([1.0, 2.0, 3.0, 4.0, 5.0])\n  0.0\n  */\nconst minAbsDev = (numbers, mean = 0) => {\n  let xs = numbers.map(Number)\n  let xMean = mean\n  let minDev = Infinity\n  for (let i = 0; i < xs.length; i++) {\n    let dev = Math.abs(xs[i] - xMean)\n    if (dev < minDev) minDev = dev\n  }\n  return minDev\n}\n\n/**\n  Find the maximum deviation of the given list of numbers\n  from a given mean.\n  >>> maxDev([1.0, 2.0, 3.0, 4.0])\n  2.0\n  >>> maxDev([1.0, 2.0, 3.0, 4.0, 5.0])\n  5.0\n  */\nconst maxDev = (numbers, mean = 0) => {\n  let xs = numbers.map(Number)\n  let xMean = mean\n  let maxDev = 0\n  for (let i = 0; i < xs.length; i++) {\n    let dev = Math.abs(xs[i] - xMean)\n    if (dev > maxDev) maxDev = dev\n  }\n  return maxDev\n}\n\n/**\n  Find the minimum deviation of the given list of numbers\n  from a given mean.\n  >>> minDev([1.0, 2.0, 3.0, 4.0])\n  0.0\n  >>> minDev([1.0, 2.0, 3.0, 4.0, 5.0])\n  0.0\n  */\nconst minDev = (numbers, mean = 0) => {\n  let xs = numbers.map(Number)\n  let xMean = mean\n  let minDev = Infinity\n  for (let i = 0; i < xs.length; i++) {\n    let dev = Math.abs(xs[i] - xMean)\n    if (dev < minDev) minDev = dev\n  }\n  return minDev\n}\n\n/**\n  Find the average deviation of the given list of numbers\n  from a given mean.\n  >>> avgDev([1.0, 2.0, 3.0, 4.0])\n  2.0\n  >>> avgDev([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.5\n  */\nconst avgDev = (numbers, mean = 0) => {\n  let xs = numbers.map(Number)\n  let xMean = mean\n  let avgDev = 0\n  for (let i = 0; i < xs.length; i++) {\n    let dev = Math.abs(xs[i] - xMean)\n    avgDev += dev\n  }\n  return avgDev / xs.length\n}\n\nexport default {\n  entailAbsoluteDeviation,\n  maxAbsDev,\n  maxDev,\n  minAbsDev,\n  minDev,\n  avgDev\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let number = 0\n  for (let index = 0; index < numbers.length - 1; index++) {\n    if (number) {\n      result.push(delimeter)\n      number = 0\n    }\n    result.push(numbers[index])\n    number++\n  }\n  if (number) {\n    result.push(delimeter)\n  }\n  return result\n}\n\nmodule.exports = intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_regex = /\\(([\\(\\)\\(]*)\\)/g;\n  const paren_stack = [];\n  const next_paren_string = '';\n\n  while (paren_string.length > 0) {\n    let match = paren_regex.exec(paren_string);\n    if (match === null) {\n      break;\n    }\n    let start = match.index;\n    let end = match.index + match[0].length;\n    paren_string = paren_string.slice(end);\n    paren_stack.push(paren_string);\n    next_paren_string = paren_stack.pop() +'';\n  }\n\n  return paren_stack.map((nested_paren) => {\n    const last_paren_string = nested_paren.slice(nested_paren.length - 1);\n    return last_paren_string.split(' ').length - 1;\n  });\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const newStrings = [];\n\n  for (const string of strings) {\n    if (string.includes(substring)) {\n      newStrings.push(string);\n    }\n  }\n\n  return newStrings;\n};\n\nexport default filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  const product = 1\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n    sum += numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  Given two lists, return a list of all possible tuples of common elements.\n  >>> intersection([1, 2, 3], [2, 4, 5])\n  [(2, 2), (2, 4)]\n  >>> intersection([1, 2, 3, 4], [1, 2, 4, 5])\n  [(1, 1), (1, 2)]\n  >>> intersection([1, 2, 3, 4], [1, 2, 5, 6])\n  []\n  >>> intersection([], [1, 2, 3])\n  []\n  >>> intersection([1, 2, 3], [1])\n  []\n  >>> intersection([1, 2, 3], [2])\n  [(2, 2)]\n  */\nconst intersection = (a, b) => {\n  if (a.length === 0) return []\n  if (b.length === 0) return []\n  const aCopy = a.slice()\n  const bCopy = b.slice()\n  const result = []\n  while (aCopy.length && bCopy.length) {\n    const sum = aCopy.shift() + bCopy.shift()\n    if (sum === 0) {\n      const [x, y] = kernelIntersection(aCopy, bCopy)\n      result.push([x, y])\n    }\n  }\n  return result\n}\n\n/*\n  Given a set of integers, return a list of all possible tuples of common elements.\n  >>> intersection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [2, 4, 6, 8])\n  [(2, 2), (2, 4), (4, 4)]\n  >>> intersection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [2, 4, 6, 8, 10, 12, 14, 16])\n  [(2, 2), (2, 4), (4, 4), (4, 8), (8, 8)]\n  >>> intersection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\n  []\n  >>> intersection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22])\n  [(2, 2), (2, 4), (4, 4), (4, 8), (8, 8)]\n  >>> intersection([], [1, 2, 3])\n  []\n  >>> intersection([1, 2, 3], [2])\n  [(2, 2)]\n  >>> intersection([1, 2, 3, 4], [2, 4])\n  [(2, 2), (4, 4)]\n  */\nconst intersection = (numbers, int) => {\n  const result = []\n  const aCopy = numbers.slice()\n  while (aCopy.length) {\n    const sum = aCopy.shift() + int\n    if (sum === 0) {\n      const [x, y] = kernelIntersection(aCopy, numbers)\n      result.push([x, y])\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  kernelIntersection,\n  intersection\n}\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  let i = 0\n  const max = numbers[0]\n  const maxIdx = 0\n  const maxNum = numbers[0]\n  const nums = numbers.slice(1)\n  for (let j = 0; j < n; j++) {\n    if (numbers[j] > max) {\n      maxIdx = j\n      max = numbers[j]\n    }\n  }\n  return [max, maxIdx, maxNum]\n}\n\nmodule.exports = rolledMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  return longestPalindrome.slice(0, longestPalindrome.length - longestPalindrome.length % 2) + string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  >>> makePalindrome('catac')\n  'cat'\n  */\nconst longestPalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string, 0);\n  return longestPalindrome.slice(0, longestPalindrome.length - longestPalindrome.length % 2) + string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('catac')\n  'catac'\n  >>> makePalindrome('catat')\n  'catat'\n  >>> makePalindrome('cataat')\n  'catat'\n  >>> makePalindrome('cataaat')\n  'catat'\n  */\nconst longestPalindrome = (string, start) => {\n  if (start >= string.length) return string;\n  const sub = string.substr(start, string.length - start);\n  if (isPalindrome(sub)) return longestPalindrome(string, start + 1);\n  return sub;\n}\n\n/* Print longest palindrome that begins with a supplied string */\nconst printLongestPalindrome = (string) => {\n  let longestPalindrome = longestPalindrome(string);\n  console.log(longestPalindrome);\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if string is a palind"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  if (a.length!== b.length) return '';\n  const c = [];\n  for (let i = 0; i < a.length; i++) {\n    const aChar = a.charAt(i);\n    const bChar = b.charAt(i);\n    if (aChar === bChar) {\n      c.push(aChar);\n    } else {\n      c.push(0);\n    }\n  }\n  return c.join('');\n};\n\n/*\n  Given two strings a and b consisting only of 1s and 0s, return a new string where\n  the first 'k' characters of a and b have been XORed.\n  >>> xorString('010', '110', 2)\n  '100'\n  >>> xorString('010', '110', 3)\n  '100'\n  >>> xorString('010', '110', 4)\n  '100'\n  >>> xorString('010', '110', 5)\n  '100'\n  >>> xorString('010', '110', 6)\n  '100'\n  >>> xorString('010', '110', 7)\n  '100'\n  >>> xorString('010', '110', 8)\n  '100'\n  >>> xorString('010', '110', 9)\n  '100'\n  >>> xorString('010', '110', 10)\n  '100'\n  >>> xorString('010', '110', 11)\n  '100'\n  >>> xorString('010', '110', 12)\n  '100'\n  >>> xorString('010', '110', 13)\n  '100'\n  >>> xorString('010', '110', 14)\n  '100'\n  >>> xorString('010', '110', 15)\n  '100'\n  >>> xorString('010', '110', 16)\n  '100'\n  >>> xorString('010', '110', 17)\n  '100'\n  >>> xorString('010', '110', 18)\n  '100'\n  >>> xorString('010', '110', 19)\n  '100'\n  >>> xorString('010', '110', 20)\n  '100'\n  >>> xorString('010', '110', 21)\n  '100'\n  >>> xorString('010', '110', 22)\n  '100'\n  >>> xorString('010', '110', 23)\n  '100'\n  >>> xorString('010', '110', 24)\n  '100'\n  >>> xorString('010', '110', 25)\n  '100'\n  >>> xorString('010', '110', 26)\n  '100'\n  >>> xorString('010', '110', 27)\n  '100'\n  >>> xorString('010', '110', 28)\n  '100'\n  >>> xorString('010', '110', 29)\n  '100'\n  >>> xorString('010', '110', 30)\n  '100'\n  >>> xorString('010', '110', 31)\n  '100'\n  >>> xorString('010', '110', 32)\n  '100'\n  >>> xorString('010', '110', 33)\n  '100'\n  >>> xorString('010', '110', 34)\n  '100'\n  >>> xorString('010', '110', 35)\n  '100'\n  >>> xorString('010', '110', 36)\n  '100'\n  >>> xorString('010', '110', 37)\n  '100'\n  >>> xorString('010', '110', 38)\n  '100'\n  >>> xorString('010', '110', 39)\n  '100'\n  >>> xorString('010', '110', 40)\n  '100'\n  >>> xorString('010', '110', 41)\n  '100'\n  >>> xorString('010', '110', 42)\n  '100'\n  >>> xorString('010', '110', 43)\n  '100'\n  >>> xorString('010', '110', 44)\n  '100'\n  >>> xorString('010', '110', 45)\n  '100'\n  >>> xorString('010', '110', 46)\n  '100'\n  >>> xorString('010', '110', 47)\n  '100'\n  >>> xorString('010', '110', 48)\n  '100'\n  >>> xorString('010', '110', 49)\n  '100'\n  >>> xorString('010', '110', 50)\n  '100'\n  >>> xorString('010', '110', 51)\n  '100'\n  >>> xorString('010', '110', 52)\n  '100'\n  >>> xorString('010', '110', 53)\n  '100'\n  >>> xorString('010', '110', 54)\n  '100'\n  >>> xorString('010', '110', 55)\n  '100'\n  >>> xorString('010', '110', 56)\n  '100'\n  >>> xorString('010', '110', 57)\n  '100'\n  >>> xorString('010', '110', 58)\n  '100'\n  >>> xorString('010', '110', 59)\n  '100'\n  >>> xorString('010', '110', 60)\n  '100'\n  >>> xorString('010', '110', 61)\n  '100'\n  >>> xorString('010', '110', 62)\n  '100'\n  >>> xorString('010', '110', 63)\n  '100'\n  >>> xorString('010', '110', 64)\n  '100'\n  >>> xorString('010', '110', 65)\n  '100'\n  >>> xorString('010', '110', 66)\n  '100'\n  >>> xorString('010', '110', 67)\n  '100'\n  >>> xorString('010', '110', 68)\n  '100'\n  >>> xorString('010', '110', 69)\n  '100'\n  >>> xorString('010', '110"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  if (strings.length === 0) return null;\n  let longest = 0;\n  let current = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longest = strings[i].length;\n      current = i;\n    }\n  }\n  return strings[current];\n};\n\nexport default farseeing;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  while (a > 0) {\n    const remainder = a % b;\n    a = b;\n    b = remainder;\n  }\n  return b;\n};\n\n/*\n  >>> capitalCoarseDivisor(2, 6)\n  2\n  >>> capitalCoarseDivisor(8, 12)\n  2\n  >>> capitalCoarseDivisor(3, 4)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  >>> capitalCoarseDivisor(6, 4)\n  2\n  >>> capitalCoarseDivisor(8, 24)\n  4\n  >>> capitalCoarseDivisor(4, 24)\n  1\n  >>> capitalCoarseDivisor(2, 8)\n  2\n  >>> capitalCoarseDivisor(24, 16)\n  4\n  >>> capitalCoarseDivisor(24, 18)\n  6\n  >>> capitalCoarseDivisor(24, 20)\n  6\n  >>> capitalCoarseDivisor(24, 24)\n  1\n  >>> capitalCoarseDivisor(24, 25)\n  1\n  >>> capitalCoarseDivisor(24, 30)\n  1\n  >>> capitalCoarseDivisor(30, 24)\n  1\n  >>> capitalCoarseDivisor(30, 30)\n  1\n  >>> capitalCoarseDivisor(30, 33)\n  3\n  >>> capitalCoarseDivisor(33, 30)\n  1\n  >>> capitalCoarseDivisor(33, 33)\n  1\n  >>> capitalCoarseDivisor(30, 36)\n  1\n  >>> capitalCoarseDivisor(36, 30)\n  1\n  >>> capitalCoarseDivisor(36, 36)\n  1\n  >>> capitalCoarseDivisor(36, 40)\n  1\n  >>> capitalCoarseDivisor(40, 36)\n  1\n  >>> capitalCoarseDivisor(40, 40)\n  1\n  >>> capitalCoarseDivisor(40, 45)\n  1\n  >>> capitalCoarseDivisor(45, 40)\n  1\n  >>> capitalCoarseDivisor(45, 45)\n  1\n  >>> capitalCoarseDivisor(45, 50)\n  1\n  >>> capitalCoarseDivisor(50, 45)\n  1\n  >>> capitalCoarseDivisor(50, 50)\n  1\n  >>> capitalCoarseDivisor(50, 55)\n  1\n  >>> capitalCoarseDivisor(55, 50)\n  1\n  >>> capitalCoarseDivisor(55, 55)\n  1\n  >>> capitalCoarseDivisor(55, 60)\n  1\n  >>> capitalCoarseDivisor(60, 55)\n  1\n  >>> capitalCoarseDivisor(60, 60)\n  1\n  >>> capitalCoarseDivisor(60, 65)\n  1\n  >>> capitalCoarseDivisor(65, 60)\n  1\n  >>> capitalCoarseDivisor(65, 65)\n  1\n  >>> capitalCoarseDivisor(65, 70)\n  1\n  >>> capitalCoarseDivisor(70, 65)\n  1\n  >>> capitalCoarseDivisor(70, 70)\n  1\n  >>> capitalCoarseDivisor(70, 75)\n  1\n  >>> capitalCoarseDivisor(75, 70)\n  1\n  >>> capitalCoarseDivisor(75, 75)\n  1\n  >>> capitalCoarseDivisor(75, 80)\n  1\n  >>> capitalCoarseDivisor(80, 75)\n  1\n  >>> capitalCoarseDivisor(80, 80)\n  1\n  >>> capitalCoarseDivisor(80, 85)\n  1\n  >>> capitalCoarseDivisor(85, 80)\n  1\n  >>> capitalCoarseDivisor(85, 85)\n  1\n  >>> capitalCoarseDivisor(85, 90)\n  1\n  >>> capitalCoarseDivisor(90, 85)\n  1\n  >>> capitalCoarseDivisor(90, 90)\n  1\n  >>> capitalCoarseDivisor(90, 95)\n  1\n  >>> capitalCoarseDivisor(95, 90)\n  1\n  >>> capitalCoarseDivisor(95, 95)\n  1\n  >>> capitalCoarseDivisor(95, 100)\n  1\n  >>> capitalCoarseDivisor(100, 95)\n  1\n  >>> capitalCoarseDivisor(100, 100)\n  1\n  >>> capitalCoarseDivisor(100, 105)\n  1\n  >>> capitalCoarseDivisor(105, 100)\n  1\n  >>> capitalCoarseDivisor(105, 105)\n  1\n  >>> capitalCoarseDivisor(105, 110)\n  1\n  >>> capitalCoarseDivisor(110, 105)\n  1\n  >>> capitalCoarseDivisor(110, 110)\n  1\n  >>> capitalCoarseDivisor(110, 115)\n  1\n  >>> capitalCoarseDivisor(115, 110)\n  1\n  >>> capitalCoarseDivisor(115, 115)\n  1\n  >>> capitalCoarseDivisor(115, 120)\n  1\n  >>> capitalCoarseDivisor(120, 115)\n  1\n  >>> capitalCoarseDivisor(120, 120)\n  1\n  >>> capitalCoarseDivisor(120, 125)\n  1\n  >>> capitalCoarseDivisor(125, 120)\n  1\n  >>> capitalCoarseDivisor(125, 125)\n  1\n  >>> capitalCoarseDivisor(125, 130)\n  1\n  >>> capitalCoarseDivisor(130, 125)\n  1\n  >>> capitalCoarseDivisor(130, 130)\n  1\n  >>> capitalCoarseDivisor(130, 135)\n  1\n  >>> capitalCoarseDivisor(135, 130)\n  1\n  >>> capitalCoarseDivisor(135, 135)\n  1\n  >>> capitalCoarseDivisor(135, 140)\n  1\n  >>> capitalCoarseDivisor(140, 135)\n"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  return string.split('').map(prefix => prefix).filter((x, i) => i > 0).reverse();\n};\n\n/* Return longest prefix of the input string\n  >>> longestPrefix('abc')\n  'abc'\n  >>> longestPrefix('abcde')\n  'abcde'\n  */\nconst longestPrefix = (string) => {\n  return string.split('').reverse().find(prefix => prefix === string);\n};\n\n/* Return shortest prefix of the input string\n  >>> shortestPrefix('abc')\n  'a'\n  >>> shortestPrefix('abcde')\n  'a'\n  */\nconst shortestPrefix = (string) => {\n  return string.split('').find(prefix => prefix === string);\n};\n\n/* Return list of all suffixes from longest to shortest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h']\n  */\nconst allSuffix = (string) => {\n  return string.split('').map(suffix => suffix).filter((x, i) => i < string.length - 1).reverse();\n};\n\n/* Return longest suffix of the input string\n  >>> longestSuffix('abc')\n  'b'\n  >>> longestSuffix('abcde')\n  'e'\n  */\nconst longestSuffix = (string) => {\n  return string.split('').reverse().find(suffix => suffix === string);\n};\n\n/* Return shortest suffix of the input string\n  >>> shortestSuffix('abc')\n  'e'\n  >>> shortestSuffix('abcde')\n  'e'\n  */\nconst shortestSuffix = (string) => {\n  return string.split('').find(suffix => suffix === string);\n};\n\n/* Return list of all permutations of the input string\n  >>> allPerm('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst allPerm = (string) => {\n  let list = [];\n  let i = 0;\n  while (i < string.length) {\n    let subList = [];\n    let j = 0;\n    while (j < string.length) {\n      subList.push(string.slice(i, j + 1));\n      j++;\n    }\n    list.push(subList);\n    i++;\n  }\n  return list;\n};\n\n/* Return all combinations of k of n elements\n  >>> allComb(4, 3)\n  [\n    [0, 1, 2],\n    [0, 1, 3],\n    [0, 2, 3],\n    [1, 2, 3],\n  ]\n  */\nconst allComb = (k, n) => {\n  let list = [];\n  let i = 0;\n  while (i < n) {\n    list.push(comb(k, n, i));\n    i++;\n  }\n  return list;\n};\n\n/* Return all permutations of the input array\n  >>> allPerm([1, 2, 3])\n  [\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n  ]\n  */\nconst allPerm = (array) => {\n  let list = [];\n  let i = 0;\n  while (i < array.length) {\n    list.push(array.slice(i));\n    i++;\n  }\n  return list;\n};\n\n/* Return all combinations of k of n elements\n  >>> allComb(4, 3)\n  [\n    [0, 1, 2],\n    [0, 1, 3],\n    [0, 2, 3],\n    [1, 2, 3],\n  ]\n  */\nconst comb = (k, n, i) => {\n  if (k === n) {\n    return [array(i)];\n  } else if (k === 1) {\n    return [array(i)];\n  } else if (k === 2) {\n    return [array(i), array(i + 1)];\n  } else {\n    let l = array(i + 1);\n    let r = array(i + 2);\n    return [...l,...r];\n  }\n};\n\n/* Return all permutations of the input array\n  >>> allPerm([1, 2, 3])\n  [\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n  ]\n  */\nconst array = (arr) => arr.map(x => x);\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  const output = []\n  for (let i = 0; i <= n; i++) {\n    output.push(i)\n  }\n  return output.join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> numBowed = 5\n  >>> bow = '^'\n  >>> n = 4\n  >>> bowedStringInstrumentSuccession(numBowed, bow, n)\n  '0 1 2 3 4'\n  */\nconst bowedStringInstrumentSuccession = (numBowed, bow, n) => {\n  const output = []\n  for (let i = 0; i <= numBowed; i++) {\n    output.push(`${i}${bow}`)\n  }\n  return output.join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> numBowed = 5\n  >>> bow = '^'\n  >>> n = 4\n  >>> bowedStringInstrumentSuccession(numBowed, bow, n)\n  '0 1 2 3 4'\n  */\nconst bowedStringInstrumentSuccessionWithBowed = (numBowed, bow) => {\n  const output = []\n  for (let i = 0; i <= numBowed; i++) {\n    output.push(`${i}${bow}`)\n  }\n  return output.join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> numBowed = 5\n  >>> bow = '^'\n  >>> n = 4\n  >>> bowedStringInstrumentSuccessionWithBowed(numBowed, bow, n)\n  '0 1 2 3 4'\n  */\nconst bowedStringInstrumentSuccessionWithBow = (numBowed, bow) => {\n  const output = []\n  for (let i = 0; i <= numBowed; i++) {\n    output.push(`${i}${bow}`)\n  }\n  return output.join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> numBowed = 5\n  >>> bow = '^'\n  >>> n = 4\n  >>> bowedStringInstrumentSuccessionWithBowed(numBowed, bow, n)\n  '0 1 2 3 4'\n  */\nconst bowedStringInstrumentSuccessionWithBowAndBowed = (numBowed, bow) => {\n  const output = []\n  for (let i = 0; i <= numBowed; i++) {\n    output.push(`${i}${bow}${bow}`)\n  }\n  return output.join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  let counts = {}\n  for (let char of string) {\n    let upper = char.toUpperCase()\n    if (counts[upper] === undefined) {\n      counts[upper] = 1\n    } else {\n      counts[upper]++\n    }\n    let lower = char.toLowerCase()\n    if (counts[lower] === undefined) {\n      counts[lower] = 1\n    } else {\n      counts[lower]++\n    }\n  }\n  let result = 0\n  for (let [key, value] of Object.entries(counts)) {\n    result += value\n  }\n  return result\n}\n\n/*\n  Given a string, find out how many letters are unique (including case)\n  >>> considerUniqueLetters('xyzXYZ')\n  3\n  >>> considerUniqueLetters('Jerry')\n  4\n  >>> considerUniqueLetters('jErry')\n  4\n  >>> considerUniqueLetters('abcABC')\n  3\n  */\nconst considerUniqueLetters = (string) => {\n  let counts = {}\n  for (let char of string) {\n    let upper = char.toUpperCase()\n    if (counts[upper] === undefined) {\n      counts[upper] = 1\n    } else {\n      counts[upper]++\n    }\n    let lower = char.toLowerCase()\n    if (counts[lower] === undefined) {\n      counts[lower] = 1\n    } else {\n      counts[lower]++\n    }\n  }\n  let result = 0\n  for (let [key, value] of Object.entries(counts)) {\n    result += value\n  }\n  return result\n}\n\n/*\n  Given a string, find out how many different words are present\n  >>> considerDifferentWords('xyzXYZ')\n  2\n  >>> considerDifferentWords('jerry')\n  2\n  >>> considerDifferentWords('jErry')\n  3\n  >>> considerDifferentWords('abcABC')\n  2\n  >>> considerDifferentWords('abcabc')\n  1\n  */\nconst considerDifferentWords = (string) => {\n  let result = 0\n  for (let word of string.split('')) {\n    result += word.length\n  }\n  return result\n}\n\n/*\n  Given a string, find out how many different words are present, taking into account case\n  >>> considerDifferentWords('xyzXYZ')\n  2\n  >>> considerDifferentWords('jerry')\n  2\n  >>> considerDifferentWords('jErry')\n  3\n  >>> considerDifferentWords('abcABC')\n  2\n  >>> considerDifferentWords('abcabc')\n  1\n  >>> considerDifferentWords('abcabcXYZ')\n  2\n  >>> considerDifferentWords('abcABCXYZ')\n  1\n  */\nconst considerDifferentWordsCase = (string) => {\n  let counts = {}\n  for (let char of string) {\n    let upper = char.toUpperCase()\n    if (counts[upper] === undefined) {\n      counts[upper] = 1\n    } else {\n      counts[upper]++\n    }\n    let lower = char.toLowerCase()\n    if (counts[lower] === undefined) {\n      counts[lower] = 1\n    } else {\n      counts[lower]++\n    }\n  }\n  let result = 0\n  for (let [key, value] of Object.entries(counts)) {\n    result += value\n  }\n  return result\n}\n\nmodule.exports = {\n  considerClearcutCharacters,\n  considerUniqueLetters,\n  considerDifferentWords,\n  considerDifferentWordsCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  // your code here\n  let beat_count = 0;\n  let current_beat = 0;\n  let music_string_len = music_string.length;\n  let current_note = 0;\n\n  let note_list = [];\n  for (let i = 0; i < music_string_len; i++) {\n    current_note = music_string[i];\n    if (current_note == 'o') {\n      if (current_beat % 4 === 0) {\n        beat_count++;\n        current_beat = 0;\n      }\n      else {\n        current_beat++;\n      }\n    }\n    else if (current_note == 'o|') {\n      if (current_beat % 2 === 0) {\n        beat_count++;\n        current_beat = 0;\n      }\n      else {\n        current_beat++;\n      }\n    }\n    else if (current_note == '.') {\n      current_beat = 0;\n    }\n    note_list.push(beat_count);\n  }\n  return note_list;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0\n  const length = string.length\n  let i = 0\n  let j = 0\n\n  while (i < length) {\n    if (string[i] === substring[j]) {\n      count += 1\n      j++\n    }\n\n    if (j === substring.length) {\n      return count\n    }\n\n    i++\n  }\n\n  return count\n}\n\n/*\n  Given a string S and a dictionary of words D, determine if S can be segmented into a space-separated sequence of one or more dictionary words.\n\n  You may assume that the dictionary does not contain duplicate words.\n\n  For example, given\n\n  S: \"apple banana car\"\n\n  D: [\"apple\", \"banana\", \"car\"]\n\n  Return true because \"apple banana car\" can be segmented into \"apple banana car\".\n\n  Note:\n\n  1. S and D may contain duplicate words.\n\n  2. All words are case sensitive.\n\n  3. The same word in D may occur multiple times in S.\n\n  4. S may be empty.\n\n  5. Word in D may start or end with a capital letter.\n\n  6. The given string S and dictionary D are both non-empty.\n\n  Example 1:\n\n  Input: S = \"apple banana car\"\n  D = [\"apple\", \"banana\", \"car\"]\n\n  Output: true\n\n  Example 2:\n\n  Input: S = \"apple\"\n  D = [\"apple\"]\n\n  Output: false\n  */\nconst canBeSegmented = (string, dictionary) => {\n  let start = 0\n  let end = 0\n  let words = []\n\n  while (start < string.length) {\n    end = string.indexOf(' ', start)\n\n    if (end === -1) {\n      end = string.length\n    }\n\n    words.push(string.substring(start, end))\n    start = end + 1\n  }\n\n  let intersection = set(dictionary).intersection(words)\n\n  return (intersection.size > 0)\n}\n\n/*\n  Given two words (start, end) and a dictionary of words (D), return the length of shortest transformation sequence from (start, end) to (end, start) of words in D.\n\n  For example,\n\n  Given: (1, 2)\n  D: [\"a\", \"b\", \"c\"]\n\n  Return 2.\n\n  Given: (1, 3)\n  D: [\"a\", \"b\", \"c\"]\n\n  Return 3.\n  */\nconst editDistance = (start, end, dictionary) => {\n  if (dictionary.length === 0) {\n    return 0\n  }\n\n  const len = dictionary.length\n  const min = [0, 0]\n  let curr = [0, 0]\n\n  for (let i = 0; i < len; i++) {\n    min[0] = Math.min(min[0], dictionary[i].length)\n  }\n\n  for (let i = 0; i < len; i++) {\n    curr[0] = i\n    min[1] = Math.min(min[1], dictionary[i].length)\n  }\n\n  for (let i = 1; i < len; i++) {\n    for (let j = 0; j < len; j++) {\n      curr[1] = j\n      min[0] = Math.min(min[0], dictionary[i].length - dictionary[j].length)\n      min[1] = Math.min(min[1], min[0] + dictionary[i].length)\n    }\n  }\n\n  return min[1]\n}\n\n/*\n  Given a string S and a dictionary of words D, find the longest string in S that is a concatenation of some dictionary words.\n\n  A concatenation of two dictionary words is called a palindrome if both words are read the same way from left to right.\n\n  For example,\n\n  Given: S = \"abba\", D = [\"a\", \"b\", \"c\"]\n\n  Return \"abc\".\n\n  Given: S = \"ab\", D = [\"a\", \"b\"]\n\n  Return \"ab\".\n  */\nconst longestPalindrome = (string, dictionary) => {\n  const len = dictionary.length\n  let longest = 0\n  let start = 0\n  let end = 0\n  let curr = 0\n  let longestLen = 0\n  let maxLen = 0\n\n  for (let i = 0; i < len; i++) {\n    longest = longest + dictionary[i].length\n  }\n\n  for (let i = 0; i < len; i++) {\n    start = 0\n    end = dictionary[i].length - 1\n    curr = start + end\n\n    while (start < end) {\n      if (string[start]!== dictionary[i][curr]) {\n        break\n      }\n\n      start++\n      curr++\n    }\n\n    if (dictionary[i].length === curr) {\n      if (dictionary[i].length > longestLen) {\n        maxLen = dictionary[i].length\n        longestLen = dictionary[i].length\n        longest = dictionary[i]\n      }\n    }\n  }\n\n  return longest\n}\n\n/*\n  Given two integers n and k, return the number of k-pairs in a table with size n.\n\n  A k-pair is a pair with k different elements.\n\n  For example, given\n\n  n = 3\n  k = 3\n\n  Return 3.\n  */\nconst kPairs = (n, k) => {\n  let count = 0\n  let i = 0\n\n  while (i < n) {\n    count += Math.pow(n - i, 2)\n    i++\n  }\n\n  return count\n}\n\nexport {\n  kPairs,\n  canBeSegmented,\n  editDistance,\n  longestPalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    const sorted = []\n    let lastNumber\n    let newNumber\n    let temp\n    for (const number of numbers.split(' ')) {\n        if (number.length > 1) {\n            newNumber = number.slice(1)\n            lastNumber = number[0]\n            if (lastNumber >= 'zero') {\n                temp = parseInt(lastNumber) + 1\n                sorted.push(`${lastNumber}${newNumber}`)\n            } else {\n                sorted.push(`${lastNumber}${newNumber}`)\n            }\n        } else {\n            sorted.push(`${number}`)\n        }\n    }\n    return sorted.join(' ')\n}\n\n/*\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 13\n  Output: 2\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 16\n  Output: 3\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 15\n  Output: 4\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 9\n  Output: 5\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 14\n  Output: 6\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 17\n  Output: 7\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 18\n  Output: 8\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 20\n  Output: 9\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 21\n  Output: 10\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 22\n  Output: 11\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 23\n  Output: 12\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 24\n  Output: 13\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 25\n  Output: 14\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  target: 26\n  Output: 15\n  Given an array of numbers and a target number, return the index of the element\n  in the array that is equal to the target.\n  Input:\n  [1, 2, 3, 4, 5, 6"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return [min, max];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestNumber = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return [min, max];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n  >>> receiveClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestTuple = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return [min, max];\n};\n\nconst _get = (obj, key) => {\n  const v = obj[key];\n  return v;\n};\n\nconst _set = (obj, key, value) => {\n  const v = obj[key];\n  obj[key] = value;\n  return v;\n};\n\nconst _del = (obj, key) => {\n  const v = obj[key];\n  delete obj[key];\n  return v;\n};\n\nconst get = (obj, key) => _get(obj, key);\nconst set = (obj, key, value) => _set(obj, key, value);\nconst del = (obj, key) => _del(obj, key);\n\nexport {\n  receiveClosestElement,\n  receiveClosestChemicalElement,\n  receiveClosestNumber,\n  receiveClosestTuple,\n  get,\n  set,\n  del\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = 1.0 / (max - min);\n  return [\n    Math.round(scale * (numbers[0] - min)),\n    Math.round(scale * (numbers[1] - min)),\n    Math.round(scale * (numbers[2] - min)),\n    Math.round(scale * (numbers[3] - min)),\n    Math.round(scale * (numbers[4] - min))\n  ];\n};\n\nmodule.exports = rescaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v) && v % 1 === 0)\n}\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are boolean\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean')\n}\n\n/**\n  * Filter given list of any python values only for strings\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are strings\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string')\n}\n\n/**\n  * Filter given list of any python values only for nulls\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are nulls\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null)\n}\n\n/**\n  * Filter given list of any python values only for functions\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are functions\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function')\n}\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are numbers\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are numbers\n  */\nconst filterNumbersWithDecimals = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v) && v % 1!== 0)\n}\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are numbers\n  */\nconst filterFloat = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v))\n}\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are numbers\n  */\nconst filterBools = (values) => {\n  return values.filter(v => typeof v === 'boolean')\n}\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are numbers\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string')\n}\n\n/**\n  * Filter given list of any python values only for nulls\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are nulls\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null)\n}\n\n/**\n  * Filter given list of any python values only for functions\n  * @param  {List} values - List of values\n  * @return {List} - List of values that are functions\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    let count = 0;\n    while (string.charAt(count)!== 0) count++;\n    return count;\n};\n\n/**\n  * @description Return a string of given length\n  * @param {String} string\n  * @param {Number} length\n  * @return {String}\n  * @example\n  * strslice('');\n  * //=> ''\n  * strslice('abc', 1);\n  * //=> 'a'\n  * strslice('abc', 3);\n  * //=> 'abc'\n  * strslice('abc', 5);\n  * //=> 'abc'\n  * strslice('abc', -1);\n  * //=> 'abc'\n  * strslice('abc', -2);\n  * //=> 'ab'\n  */\nconst strslice = (string, length) => {\n    return string.substr(0, length);\n};\n\n/**\n  * @description Return a string with a given length\n  * @param {Number} length\n  * @return {String}\n  * @example\n  * strpad('abc', 1);\n  * //=> 'a'\n  * strpad('abc', 3);\n  * //=> 'abc'\n  * strpad('abc', 5);\n  * //=> 'abc'\n  * strpad('abc', -1);\n  * //=> 'abc'\n  * strpad('abc', -2);\n  * //=> 'ab'\n  */\nconst strpad = (string, length) => {\n    let result = '';\n    let i = 0;\n    while (string.length < length) {\n        result += string;\n        string +='';\n    }\n    return result;\n};\n\n/**\n  * @description Return a string with a given length\n  * @param {String} string\n  * @param {Number} length\n  * @return {String}\n  * @example\n  * strpad('abc', 1);\n  * //=> 'a'\n  * strpad('abc', 3);\n  * //=> 'abc'\n  * strpad('abc', 5);\n  * //=> 'abc'\n  * strpad('abc', -1);\n  * //=> 'abc'\n  * strpad('abc', -2);\n  * //=> 'ab'\n  */\nconst strpad2 = (string, length) => {\n    let result = '';\n    let i = 0;\n    while (i < length) {\n        result += string;\n        string +='';\n        i++;\n    }\n    return result;\n};\n\nexport default {\n    strlen,\n    strslice,\n    strpad,\n    strpad2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n    let i = 1,\n        j = 2;\n    while (n >= j) {\n        if (n % j === 0) {\n            return j;\n        }\n        i++;\n        j = i * 2;\n    }\n    return n;\n};\n\n// Test\nconsole.log(bigDivisor(15)); // 5\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    if (n === 1) return [];\n    const list = [];\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            list.push([i, n / i]);\n        }\n    }\n    return list;\n}\n\n/* Return a list of the first k prime numbers\n  >>> primes(1)\n  []\n  >>> primes(2)\n  [2]\n  >>> primes(3)\n  [2, 3]\n  >>> primes(4)\n  [2, 3, 5]\n  >>> primes(5)\n  [2, 3, 5, 7]\n  >>> primes(6)\n  [2, 3, 5, 7, 11]\n  >>> primes(7)\n  [2, 3, 5, 7, 11, 13, 17]\n  >>> primes(8)\n  [2, 3, 5, 7, 11, 13, 17, 19]\n  >>> primes(9)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23]\n  */\nconst primes = (k) => {\n    const list = [];\n    const prime = (n) => {\n        if (n > 1) {\n            for (let i = 2; i <= Math.sqrt(n); i++) {\n                if (n % i === 0) {\n                    return false;\n                }\n            }\n            list.push(n);\n        }\n    }\n    for (let i = 2; i <= k; i++) {\n        prime(i);\n    }\n    return list;\n}\n\nconst test = (assert) => {\n    assert.deepEqual(factorize(8), [2, 2, 2], \"8\");\n    assert.deepEqual(factorize(25), [5, 5], \"25\");\n    assert.deepEqual(factorize(70), [2, 5, 7], \"70\");\n    assert.deepEqual(primes(1), [], \"1\");\n    assert.deepEqual(primes(2), [2], \"2\");\n    assert.deepEqual(primes(3), [2, 3], \"3\");\n    assert.deepEqual(primes(4), [2, 3, 5], \"4\");\n    assert.deepEqual(primes(5), [2, 3, 5, 7], \"5\");\n    assert.deepEqual(primes(6), [2, 3, 5, 7, 11], \"6\");\n    assert.deepEqual(primes(7), [2, 3, 5, 7, 11, 13, 17], \"7\");\n    assert.deepEqual(primes(8), [2, 3, 5, 7, 11, 13, 17, 19], \"8\");\n    assert.deepEqual(primes(9), [2, 3, 5, 7, 11, 13, 17, 19, 23], \"9\");\n}\n\ndescribe(\"Prime Numbers\", () => {\n    it(\"should return a list of the first k prime numbers\", () => {\n        test(() => {});\n    });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const duplicates = {};\n  const indexes = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!(numbers[i] in duplicates)) {\n      duplicates[numbers[i]] = 1;\n      indexes.push(i);\n    }\n  }\n  return indexes.map((index) => numbers[index]);\n};\n\n/* From a list of numbers, remove all the numbers that are less than a certain value.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfLessThan(3, [1, 2, 3, 4, 5])\n  [3, 4, 5]\n  >>> getRidOfLessThan(3, [1, 2, 3, 4, 5, 6, 7])\n  [3, 4, 5, 6, 7]\n  */\nconst getRidOfLessThan = (number, numbers) => {\n  const indexes = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < number) {\n      indexes.push(i);\n    }\n  }\n  return indexes.map((index) => numbers[index]);\n};\n\n/* From a list of numbers, remove all the numbers that are greater than a certain value.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfGreaterThan(3, [1, 2, 3, 4, 5])\n  [1, 2, 4, 5]\n  >>> getRidOfGreaterThan(3, [1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 4, 5, 6, 7]\n  */\nconst getRidOfGreaterThan = (number, numbers) => {\n  const indexes = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > number) {\n      indexes.push(i);\n    }\n  }\n  return indexes.map((index) => numbers[index]);\n};\n\nmodule.exports = {\n  getRidOfDuplicate,\n  getRidOfLessThan,\n  getRidOfGreaterThan\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n    let re = /[a-z]/g;\n    let s = string.toLowerCase();\n    let i = 0;\n    let len = s.length;\n    let ch;\n    while (i < len) {\n        ch = s[i];\n        if (ch ==='') {\n            s = s.replace(re, ch);\n        } else {\n            s = s.replace(re, ch.toUpperCase());\n        }\n        i++;\n    }\n    return s;\n};\n\nmodule.exports = impudentCase;<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n    return strings.reduce((s, c) => s + c, '');\n};\n\n/**\n  * Convert a number into a string\n  * @param {number} number - The number to convert\n  * @returns {string} The number as a string\n  * @example\n  * // Convert a number to a string\n  * const str = numberToString(123)\n  * // Result is '123'\n  */\nconst numberToString = (number) => {\n    return number.toString();\n};\n\n/**\n * Convert a list of numbers into a string\n * @param {Array} numbers - The list of numbers to convert\n * @returns {string} The list of numbers as a string\n */\nconst listToString = (numbers) => {\n    return numbers.reduce((s, n) => numberToString(n) + s, '');\n};\n\n/**\n  * Get the current date and time in a string\n  * @returns {string} The current date and time in a string\n  * @example\n  * const date = getDate()\n  * // Result is '2017-02-22T15:06:07.000Z'\n  */\nconst getDate = () => {\n    const date = new Date();\n    return date.toISOString();\n};\n\n/**\n  * Generate a random number in a range\n  * @param {number} min - The minimum number in the range\n  * @param {number} max - The maximum number in the range\n  * @returns {number} The random number\n  * @example\n  * const random = getRandom(100, 1000)\n  * // Result is 900\n  */\nconst getRandom = (min, max) => {\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\n/**\n  * Generate a random number in a list\n  * @param {Array} list - The list of numbers to choose from\n  * @param {number} index - The index of the number in the list to return\n  * @returns {number} The random number\n  * @example\n  * const random = getRandom([1, 2, 3], 1)\n  * // Result is 2\n  */\nconst getRandomFromList = (list, index) => {\n    return list[index];\n};\n\n/**\n  * Get the current time in a human readable string\n  * @returns {string} The current time in a human readable string\n  * @example\n  * const time = getTime()\n  * // Result is '05:06:07'\n  */\nconst getTime = () => {\n    const date = new Date();\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n    const time = hours + ':' + minutes + ':' + seconds;\n    return time;\n};\n\n/**\n  * Check if a number is even\n  * @param {number} number - The number to check\n  * @returns {boolean} If the number is even\n  */\nconst isEven = (number) => {\n    return number % 2 === 0;\n};\n\n/**\n  * Check if a number is odd\n  * @param {number} number - The number to check\n  * @returns {boolean} If the number is odd\n  */\nconst isOdd = (number) => {\n    return number % 2!== 0;\n};\n\n/**\n  * Check if a number is prime\n  * @param {number} number - The number to check\n  * @returns {boolean} If the number is prime\n  */\nconst isPrime = (number) => {\n    if (number < 2) {\n        return false;\n    }\n    const i = 2;\n    while (i * i <= number) {\n        if (number % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/**\n  * Check if a number is a perfect number\n  * @param {number} number - The number to check\n  * @returns {boolean} If the number is a perfect number\n  */\nconst isPerfect = (number) => {\n    return number === 1 && number === 2 && number === 3 && number === 4 && number === 5 && number === 6 && number === 7 && number === 8 && number === 9 && number === 10;\n};\n\n/**\n  * Check if a number is a palindrome\n  * @param {number} number - The number to check\n  * @returns {boolean} If the number is a palindrome\n  */\nconst isPalindrome = (number) => {\n    return number === parseInt(number, 10) && number === parseInt(number.toString().split('').reverse().join(''), 10);\n};\n\n/**\n  * Check if a number is a power of two\n  * @param {number} number - The number to check\n  * @returns {boolean} If the number is a power of two\n  */\nconst isPowerOfTwo = (number) => {\n    return number === 1 << number;\n};\n\n/**\n  * Check if a number is a prime\n  * @param {number} number - The number to check\n  * @returns {boolean} If the number is a prime\n  */\nconst isPrime = (number) => {\n    if (number < 2) {\n        return false;\n    }\n    const i = 2;\n    while (i * i <= number) {\n        if (number % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/**\n  * Check if a number is a power of two\n  * @param {number} number - The number to check\n  * @returns {boolean} If the number is a power of two\n  */\nconst isPowerOfTwo = (number) => {\n    return number === 1 << number;\n};\n\n/**\n  * Check if a number is a power of two\n  * @param {number} number - The number to check\n  * @returns {boolean} If the number is a power of two\n  */\nconst isPowerOfTwo = (number) => {\n    return number === 1 << number;\n};\n\n/**\n"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substr) => {\n  return strings.filter(s => s.includes(substr));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  starting at a given offset.\n  >>> filterBySubstringOffset([], 'a', 1)\n  []\n  >>> filterBySubstringOffset(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['abc', 'array']\n  */\nconst filterBySubstringOffset = (strings, substr, offset) => {\n  return strings.filter(s => s.includes(substr, offset));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  ending at a given offset.\n  >>> filterBySuffixOffset([], 'a', 1)\n  []\n  >>> filterBySuffixOffset(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['bcd', 'cde', 'array']\n  */\nconst filterBySuffixOffset = (strings, suffix, offset) => {\n  return strings.filter(s => s.endsWith(suffix, offset));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  starting at a given offset and only for ones that end with a given suffix.\n  >>> filterBySuffixOffsetAndEnd([], 'a', 1, 'a')\n  []\n  >>> filterBySuffixOffsetAndEnd(['abc', 'bcd', 'cde', 'array'], 'a', 1, 'a')\n  ['array']\n  */\nconst filterBySuffixOffsetAndEnd = (strings, substr, offset, end) => {\n  return strings.filter(s => s.includes(substr, offset, end));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  starting at a given offset and ending at a given offset,\n  but only for ones that end with a given suffix.\n  >>> filterBySuffixOffsetAndEndOffset([], 'a', 1, 1, 'a')\n  []\n  >>> filterBySuffixOffsetAndEndOffset(['abc', 'bcd', 'cde', 'array'], 'a', 1, 1, 'a')\n  ['array']\n  */\nconst filterBySuffixOffsetAndEndOffset = (strings, substr, offset, end, suffix) => {\n  return strings.filter(s => s.includes(substr, offset, end, suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  starting at a given offset, and ending at a given offset,\n  but only for ones that end with a given suffix.\n  >>> filterBySuffixOffsetAndEndOffsetOffset([], 'a', 1, 1, 'a', 0)\n  []\n  >>> filterBySuffixOffsetAndEndOffsetOffset(['abc', 'bcd', 'cde', 'array'], 'a', 1, 1, 'a', 0)\n  ['array']\n  */\nconst filterBySuffixOffsetAndEndOffsetOffset = (strings, substr, offset, end, suffix, offset2) => {\n  return strings.filter(s => s.includes(substr, offset, end, offset2, suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  starting at a given offset, and ending at a given offset,\n  but only for ones that end with a given suffix.\n  >>> filterBySuffixOffsetAndEndOffsetOffsetOffset([], 'a', 1, 1, 'a', 0, 0)\n  []\n  >>> filterBySuffixOffsetAndEndOffsetOffsetOffset(['abc', 'bcd', 'cde', 'array'], 'a', 1, 1, 'a', 0, 0)\n  ['array']\n  */\nconst filterBySuffixOffsetAndEndOffsetOffsetOffset = (strings, substr, offset, end, offset2, suffix, offset3) => {\n  return strings.filter(s => s.includes(substr, offset, end, offset2, offset3, suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring,\n  starting at a given offset, and ending at a given offset,\n  but only for ones that end with a given suffix.\n  >>> filterBySuffixOffsetAndEndOffsetOffsetOffsetOffset([], 'a', 1, 1, 'a', 0, 0, 0)\n  []\n  >>> filterBySuffixOffsetAndEndOffsetOffsetOffsetOffset(['abc', 'bcd', 'cde', 'array'], 'a', 1, 1, 'a', 0, 0, 0)\n  ['array']\n  */\nconst filterBySuffixOffsetAndEndOffsetOffsetOffsetOffset = (strings, substr, offset, end, offset2, offset3, suffix, offset4) => {\n  return strings.filter(s => s.includes(substr, offset, end, offset2, offset3, offset4, suffix));\n};\n\nexport default {\n  filterByPrefix,\n  filterBySubstring,\n  filterBySubstringOffset,\n  filterBySubstringOffset,\n  filterBySubstringOffset,\n  filterBySubstringOffsetOffset,\n  filterBySubstringOffsetOffsetOffset"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n\nexport default catchPositive;<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999]\n  for (let i = 0; i < prime.length; i++) {\n    if (n % prime[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default isPremier\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let l = xs.length;\n  let max = xs[l - 1];\n  let x = 0.0;\n  for (let i = 0; i < l; i++) {\n    if (xs[i] < 0) {\n      throw new Error(`xs[i] < 0, i = ${i}`);\n    }\n    if (xs[i] > max) {\n      max = xs[i];\n      x = i;\n    }\n  }\n  return x;\n}\n\nconst evaluate = (xs, x) => {\n  return poly(xs, x);\n}\n\n/*\n  This function finds the roots of polynomial with coefficients xs at point x.\n  roots is a list of numbers that are roots of polynomial.\n  It returns only the largest roots and even number of roots.\n  >>> roots = findRoots([1, 2, 3, 4, 5, 6]);\n  >>> round(roots[0], 2) # x = 3.5\n  3.5\n  >>> round(roots[1], 2) # x = 3.5\n  5.0\n  >>> round(roots[2], 2) # x = 3.5\n  7.0\n  >>> round(roots[3], 2) # x = 3.5\n  9.5\n  >>> round(roots[4], 2) # x = 3.5\n  11.0\n  >>> round(roots[5], 2) # x = 3.5\n  13.5\n  >>> round(roots[6], 2) # x = 3.5\n  15.5\n  >>> round(roots[7], 2) # x = 3.5\n  17.5\n  >>> round(roots[8], 2) # x = 3.5\n  19.5\n  >>> round(roots[9], 2) # x = 3.5\n  21.5\n  >>> round(roots[10], 2) # x = 3.5\n  23.5\n  >>> round(roots[11], 2) # x = 3.5\n  25.5\n  >>> round(roots[12], 2) # x = 3.5\n  27.5\n  >>> round(roots[13], 2) # x = 3.5\n  29.5\n  >>> round(roots[14], 2) # x = 3.5\n  31.5\n  >>> round(roots[15], 2) # x = 3.5\n  33.5\n  >>> round(roots[16], 2) # x = 3.5\n  35.5\n  >>> round(roots[17], 2) # x = 3.5\n  37.5\n  >>> round(roots[18], 2) # x = 3.5\n  39.5\n  >>> round(roots[19], 2) # x = 3.5\n  41.5\n  >>> round(roots[20], 2) # x = 3.5\n  43.5\n  >>> round(roots[21], 2) # x = 3.5\n  45.5\n  >>> round(roots[22], 2) # x = 3.5\n  47.5\n  >>> round(roots[23], 2) # x = 3.5\n  49.5\n  >>> round(roots[24], 2) # x = 3.5\n  51.5\n  >>> round(roots[25], 2) # x = 3.5\n  53.5\n  >>> round(roots[26], 2) # x = 3.5\n  55.5\n  >>> round(roots[27], 2) # x = 3.5\n  57.5\n  >>> round(roots[28], 2) # x = 3.5\n  59.5\n  >>> round(roots[29], 2) # x = 3.5\n  61.5\n  >>> round(roots[30], 2) # x = 3.5\n  63.5\n  >>> round(roots[31], 2) # x = 3.5\n  65.5\n  >>> round(roots[32], 2) # x = 3.5\n  67.5\n  >>> round(roots[33], 2) # x = 3.5\n  69.5\n  >>> round(roots[34], 2) # x = 3.5\n  71.5\n  >>> round(roots[35], 2) # x = 3.5\n  73.5\n  >>> round(roots[36], 2) # x = 3.5\n  75.5\n  >>> round(roots[37], 2) # x = 3.5\n  77.5\n  >>> round(roots[38], 2) # x = 3.5\n  79.5\n  >>> round(roots[39], 2) # x = 3.5\n  81.5\n  >>> round(roots[40], 2) # x = 3.5\n  83.5\n  >>> round(roots[41], 2) # x = 3.5\n  85.5\n  >>> round(roots[42], 2) # x = 3.5\n  87.5\n  >>> round(roots[43], 2) # x = 3.5\n  89.5\n  >>> round(roots[44], 2) # x = 3.5\n  91.5\n  >>> round(roots[45], 2) # x = 3.5\n  93.5\n  >>> round(roots[46], 2) # x = 3.5\n  95"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = [];\n  let last = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3!== 0) {\n      sorted[last] = l[i];\n      last++;\n    }\n  }\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  const result = [];\n  const length = l.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (l[i]!== length - 1 - i) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> [1, 2, 3, 4, 5, 6].map(onlyEven)\n  [2, 4, 6]\n  >>> [1, 2, 3, 4, 5, 6].filter(onlyEven)\n  [2, 4, 6]\n  >>> [1, 2, 3, 4, 5, 6].concat(onlyEven([3, 6, 9, 10, 11]))\n  [2, 4, 6, 9, 10, 11]\n  */\nconst onlyEven = (arr) => {\n  const result = [];\n  const length = arr.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> [1, 2, 3, 4, 5, 6].map(onlyOdd)\n  [1, 3, 5]\n  >>> [1, 2, 3, 4, 5, 6].filter(onlyOdd)\n  [1, 3, 5]\n  >>> [1, 2, 3, 4, 5, 6].concat(onlyOdd([3, 6, 9, 10, 11]))\n  [1, 3, 5, 9, 10, 11]\n  */\nconst onlyOdd = (arr) => {\n  const result = [];\n  const length = arr.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (arr[i] % 2!== 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> [1, 2, 3, 4, 5, 6].map(allOdd)\n  [1, 3, 5, 7, 9, 11]\n  >>> [1, 2, 3, 4, 5, 6].filter(allOdd)\n  [1, 3, 5, 7, 9, 11]\n  >>> [1, 2, 3, 4, 5, 6].concat(allOdd([3, 6, 9, 10, 11]))\n  [1, 3, 5, 7, 9, 11, 15, 17, 19]\n  */\nconst allOdd = (arr) => {\n  const result = [];\n  const length = arr.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (arr[i] % 2!== 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> [1, 2, 3, 4, 5, 6].map(onlyEven)\n  [2, 4, 6]\n  >>> [1, 2, 3, 4, 5, 6].filter(onlyEven)\n  [2, 4, 6]\n  >>> [1, 2, 3, 4, 5, 6].concat(onlyEven([3, 6, 9, 10, 11]))\n  [2, 4, 6, 9, 10, 11]\n  */\nconst onlyEven = (arr) => {\n  const result = [];\n  const length = arr.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> [1, 2, 3, 4, 5, 6].map(onlyOdd)\n  [1, 3, 5]\n  >>> [1, 2, 3, 4, 5, 6].filter(onlyOdd)\n  [1, 3, 5]\n  >>> [1, 2, 3, 4, 5, 6].concat(onlyOdd([3, 6, 9, 10, 11]))\n  [1, 3, 5, 9, 10, 11]\n  */\nconst onlyOdd = (arr) => {\n  const result = [];\n  const length = arr.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (arr[i] % 2!== 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> [1, 2, 3, 4, 5, 6].map(allOdd)\n  [1, 3, 5, 7, 9, 11]\n  >>> [1, 2, 3, 4, 5, 6].filter(allOdd)\n  [1, 3, 5, 7, 9, 11]\n  >>> [1, 2, 3, 4, 5, 6].concat(allOdd([3, 6, 9, 10, 11]))\n  [1, 3, 5, 7, 9, 11, 15, 17, 19]\n  */\nconst allOdd = (arr) => {\n  const result = [];\n  const length = arr.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (arr[i] % 2!== 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  onlyEven,\n  onlyOdd,\n  allOdd,\n  onlyEven\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  return l.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })[Math.floor(Math.random() * l.length)]\n}\n\n/*\n  >>> test = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]\n  >>> test.sort()\n  >>> test\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]\n  >>> test.sort(True)\n  >>> test\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0, buzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      fizz += 1;\n    } else if (i % 11 === 0) {\n      buzz += 1;\n    } else if (i % 13 === 0) {\n      fizz += 1;\n      buzz += 1;\n    }\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 9 appears in integers less than n which are divisible by 19 or 23.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  >>> fizzBuzz(88)\n  1\n  >>> fizzBuzz(90)\n  0\n  >>> fizzBuzz(99)\n  0\n  */\nconst fizzBuzz2 = (n) => {\n  let fizz = 0, buzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 19 === 0 && i % 23 === 0) {\n      fizz += 1;\n    } else if (i % 19 === 0) {\n      buzz += 1;\n    } else if (i % 23 === 0) {\n      fizz += 1;\n      buzz += 1;\n    }\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  >>> fizzBuzz(88)\n  1\n  >>> fizzBuzz(90)\n  0\n  >>> fizzBuzz(99)\n  0\n  */\nconst fizzBuzz3 = (n) => {\n  let fizz = 0, buzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      fizz += 1;\n    } else if (i % 11 === 0) {\n      buzz += 1;\n    } else if (i % 13 === 0) {\n      fizz += 1;\n      buzz += 1;\n    }\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  >>> fizzBuzz(88)\n  1\n  >>> fizzBuzz(90)\n  0\n  >>> fizzBuzz(99)\n  0\n  */\nconst fizzBuzz4 = (n) => {\n  let fizz = 0, buzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      fizz += 1;\n    } else if (i % 11 === 0) {\n      buzz += 1;\n    } else if (i % 13 === 0) {\n      fizz += 1;\n      buzz += 1;\n    }\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 9 appears in integers less than n which are divisible by 19 or 23.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  >>> fizzBuzz(88)\n  1\n  >>> fizzBuzz(90)\n  0\n  >>> fizzBuzz(99)\n  0\n  */\nconst fizzBuzz5 = (n) => {\n  let fizz = 0, buzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 19 === 0 && i % 23 === 0) {\n      fizz += 1;\n    } else if (i % 19 === 0) {\n      buzz += 1;\n    } else if (i % 23 === 0) {\n      fizz += 1;\n      buzz += 1;\n    }\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  >>> fizzBuzz(88)\n  1\n  >>> fizzBuzz(90)\n  0\n  >>> fizzBuzz(99)\n  0\n  */\nconst fizzBuzz6 = (n) => {\n  let fizz = 0, buzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      fizz += 1;\n    } else if (i % 11 === 0) {\n      buzz += 1;\n    } else if (i % 13 === 0) {\n      fizz += 1;\n      buzz += 1;\n    }\n  }\n  return fizz + buzz;\n};\n\nexport {fizzBuzz, fizzBuzz2, fizzBuzz3, fizzBuzz4, fizzBuzz5, fizzBuzz6};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const lEven = l.slice(0, l.length / 2);\n  const lOdd = l.slice(l.length / 2, l.length);\n  return lEven.concat(lOdd.sort());\n};\n\nmodule.exports = sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns a string which is obtained by encoding a string with\n  given alphabet.\n  */\nconst encode = (s, alphabet) => {\n  const encoded = [];\n  for (const c of s) {\n    encoded.push(alphabet[c % alphabet.length]);\n  }\n  return encoded.join('');\n}\n\n/*\n  returns a string obtained by decoding a string with\n  given alphabet.\n  */\nconst decode = (s, alphabet) => {\n  const decoded = [];\n  for (const c of s) {\n    decoded.push(alphabet[c % alphabet.length]);\n  }\n  return decoded.join('');\n}\n\n/*\n  returns a string obtained by decoding a string with\n  given alphabet.\n  */\nconst decodeCyclic = (s, alphabet) => {\n  const decoded = [];\n  for (const c of s) {\n    decoded.push(alphabet[c % alphabet.length]);\n  }\n  return decoded.join('');\n}\n\n/*\n  returns a string obtained by decoding a string with\n  given alphabet.\n  */\nconst encodeCyclic = (s, alphabet) => {\n  const encoded = [];\n  for (const c of s) {\n    encoded.push(alphabet[c % alphabet.length]);\n  }\n  return encoded.join('');\n}\n\n/*\n  returns a string obtained by decoding a string with\n  given alphabet.\n  */\nconst decodeBinary = (s, alphabet) => {\n  const decoded = [];\n  for (const c of s) {\n    if (c == 0)\n      decoded.push('0');\n    else\n      decoded.push('1');\n  }\n  return decoded.join('');\n}\n\n/*\n  returns a string obtained by decoding a string with\n  given alphabet.\n  */\nconst encodeBinary = (s, alphabet) => {\n  const encoded = [];\n  for (const c of s) {\n    if (c == '0')\n      encoded.push(0);\n    else\n      encoded.push(1);\n  }\n  return encoded.join('');\n}\n\n/*\n  returns a string obtained by decoding a string with\n  given alphabet.\n  */\nconst decodeBinaryCyclic = (s, alphabet) => {\n  const decoded = [];\n  for (const c of s) {\n    if (c == 0)\n      decoded.push('0');\n    else\n      decoded.push('1');\n  }\n  return decoded.join('');\n}\n\n/*\n  returns a string obtained by decoding a string with\n  given alphabet.\n  */\nconst encodeBinaryCyclic = (s, alphabet) => {\n  const encoded = [];\n  for (const c of s) {\n    if (c == '0')\n      encoded.push(0);\n    else\n      encoded.push(1);\n  }\n  return encoded.join('');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  let a = 0\n  let b = 1\n  let f = 1\n  while (a < n) {\n    f = a + b\n    if (isPrime(f)) {\n      return f\n    }\n    a = b\n    b = f\n  }\n}\n\nconsole.log(premierFib(6))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  l.sort((a, b) => a - b);\n  const prev = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] === prev) {\n      return false;\n    } else if (l[i] === 0) {\n      return true;\n    }\n    prev = l[i];\n  }\n  return false;\n};\n\nmodule.exports = tripleTotalToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let leftcars = new Array(n);\n  let rightcars = new Array(n);\n  for (let i = 0; i < n; i++) {\n    leftcars[i] = {\n      x: i,\n      y: i\n    };\n    rightcars[n - i - 1] = {\n      x: n - i - 1,\n      y: n - i - 1\n    };\n  }\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < n / 2 && j < n / 2) {\n        if (leftcars[i].x < rightcars[j].x) {\n          collisions++;\n        }\n      } else if (i > n / 2 && j > n / 2) {\n        if (rightcars[i].x < leftcars[j].x) {\n          collisions++;\n        }\n      }\n    }\n  }\n  return collisions;\n};\n\nlet n = 10;\nconsole.log(cableCarRaceCollision(n));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const copy = l.slice(0);\n  return l.reduce((acc, curr, index) => acc.concat([curr + 1]), copy);\n};\n\n/*\n  This function returns the first index of the first number which is less than or equal to the second number.\n  >>> findMin(1, 3)\n  0\n  >>> findMin(2, 1)\n  1\n  >>> findMin(1, 1)\n  0\n  >>> findMin(10, 3)\n  2\n  >>> findMin(2, 3)\n  1\n  >>> findMin(1, 5)\n  4\n  >>> findMin(3, 2)\n  2\n  >>> findMin(1, 5)\n  4\n  >>> findMin(2, 2)\n  0\n  >>> findMin(1, 2)\n  1\n  >>> findMin(0, 1)\n  0\n  >>> findMin(2, 0)\n  1\n  >>> findMin(-2, 0)\n  0\n  >>> findMin(1, -1)\n  -1\n  >>> findMin(-1, -1)\n  -1\n  >>> findMin(10, -10)\n  -1\n  >>> findMin(-10, -10)\n  -1\n  >>> findMin(-1, -10)\n  -1\n  >>> findMin(-10, -1)\n  -1\n  >>> findMin(-10, 0)\n  -1\n  >>> findMin(0, -1)\n  -1\n  >>> findMin(-10, 1)\n  -1\n  >>> findMin(1, -10)\n  -1\n  >>> findMin(-10, -2)\n  -1\n  >>> findMin(-10, 2)\n  -1\n  >>> findMin(2, -10)\n  -1\n  >>> findMin(10, 10)\n  0\n  >>> findMin(2, 10)\n  9\n  >>> findMin(10, 2)\n  9\n  >>> findMin(2, 9)\n  9\n  >>> findMin(9, 2)\n  9\n  >>> findMin(2, 8)\n  8\n  >>> findMin(8, 2)\n  8\n  >>> findMin(2, 7)\n  7\n  >>> findMin(7, 2)\n  7\n  >>> findMin(2, 6)\n  6\n  >>> findMin(6, 2)\n  6\n  >>> findMin(2, 5)\n  5\n  >>> findMin(5, 2)\n  5\n  >>> findMin(2, 4)\n  4\n  >>> findMin(4, 2)\n  4\n  >>> findMin(2, 3)\n  3\n  >>> findMin(3, 2)\n  3\n  >>> findMin(2, 2)\n  2\n  >>> findMin(2, 1)\n  1\n  >>> findMin(1, 2)\n  1\n  >>> findMin(2, 0)\n  0\n  >>> findMin(0, 2)\n  0\n  >>> findMin(2, -1)\n  -1\n  >>> findMin(-1, 2)\n  -1\n  >>> findMin(2, -2)\n  -1\n  >>> findMin(-2, 2)\n  -1\n  >>> findMin(2, -3)\n  -1\n  >>> findMin(-3, 2)\n  -1\n  >>> findMin(2, -4)\n  -1\n  >>> findMin(-4, 2)\n  -1\n  >>> findMin(2, -5)\n  -1\n  >>> findMin(-5, 2)\n  -1\n  >>> findMin(2, -6)\n  -1\n  >>> findMin(-6, 2)\n  -1\n  >>> findMin(2, -7)\n  -1\n  >>> findMin(-7, 2)\n  -1\n  >>> findMin(2, -8)\n  -1\n  >>> findMin(-8, 2)\n  -1\n  >>> findMin(2, -9)\n  -1\n  >>> findMin(-9, 2)\n  -1\n  >>> findMin(2, -10)\n  -1\n  >>> findMin(-10, 2)\n  -1\n  >>> findMin(2, -11)\n  -1\n  >>> findMin(-11, 2)\n  -1\n  >>> findMin(2, -12)\n  -1\n  >>> findMin(-12, 2)\n  -1\n  >>> findMin(2, -13)\n  -1\n  >>> findMin(-13, 2)\n  -1\n  >>> findMin(2, -14)\n  -1\n  >>> findMin(-14, 2)\n  -1\n  >>> findMin(2, -15)\n  -1\n  >>> findMin(-15, 2)\n  -1\n  >>> findMin(2, -16)\n  -1\n  >>> findMin(-16, 2)\n  -1\n  >>> findMin(2, -17)\n  -1\n  >>> findMin(-17, 2)\n  -1\n  >>> findMin(2, -18)\n  -1\n  >>> findMin(-18, 2)\n  -1\n  >>> findMin(2, -19)\n  -1\n  >>> findMin(-19, 2)\n  -1\n  >>> findMin(2, -20)\n  -1\n  >>> findMin(-20, 2)\n  -1\n  >>> findMin(2, -21)\n  -1\n  >>> findMin(-21, 2)\n  -1\n  >>> findMin(2, -22)\n  -1\n  >>> findMin(-22, 2)\n  -1\n  >>> findMin(2, -23)\n  -1\n  >>> findMin(-23, 2)\n  -1\n  >>> findMin(2, -24)\n  -1\n  >>> findMin(-24, 2)\n  -1\n  >>> findMin(2, -25)\n  -1\n  >>> findMin(-25, 2)\n  -1\n  >>> findMin"}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  const sorted = sortedArray(l);\n  const len = sorted.length;\n  let min = 0;\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    if (sorted[i] < 0) {\n      min += sorted[i];\n    } else {\n      max += sorted[i];\n    }\n    sum += sorted[i];\n  }\n  if (sum === 0) {\n    return false;\n  }\n  if (sum === max) {\n    return (min === 0);\n  }\n  if (sum === min) {\n    return (max === 0);\n  }\n  return true;\n};\n\nexport {\n  copulateUnionToZero,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n    const result = x.toString(base);\n    if (x < base) {\n        return varietyBase(x * base, base);\n    }\n    return result;\n};\n\n/*\n  variety() returns a list of numbers that sum to x,\n  in base 2, 3, or 5.\n  It is not necessary to check that x is a prime number,\n  because all prime numbers are prime in base 10.\n  >>> variety(6)\n  [0, 1, 2, 3, 4, 5]\n  >>> variety(8)\n  [0, 1, 2, 3, 4, 5, 6, 7]\n  >>> variety(12)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> variety(24)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> variety(32)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n  >>> variety(40)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]\n  >>> variety(48)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]\n  >>> variety(64)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]\n  >>> variety(64)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]\n  >>> variety(100)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n  >>> variety(256)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218,"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return (a * h) / 2;\n};\n\nexport default triangulumArea;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if(n === 0 || n === 1) {\n        return n;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sortedList = l.slice().sort((a, b) => a - b)\n  let half = sortedList.length // half the list\n  if (sortedList.length % 2) { // odd\n    return sortedList[half]\n  } else { // even\n    return (sortedList[half - 1] + sortedList[half]) / 2\n  }\n}\n\nexport default median\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n\n    return text === reversed;\n};\n\nexport default isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [0, n).\n  >>> rand(1)\n  1\n  >>> rand(100)\n  94\n  >>> rand(101)\n  0\n  */\nconst rand = (n) => {\n  return Math.floor(Math.random() * n)\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b).\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  */\nconst rand = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1))\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b] (inclusive)\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  >>> rand(9, 10)\n  10\n  */\nconst rand = (a, b) => {\n  return Math.min(b, a + Math.floor(Math.random() * (b - a + 1)))\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b] (exclusive)\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  >>> rand(9, 10)\n  10\n  */\nconst rand = (a, b) => {\n  return Math.max(b, a + Math.floor(Math.random() * (b - a + 1)))\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b] (exclusive)\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  >>> rand(9, 10)\n  10\n  */\nconst rand = (a, b) => {\n  return Math.min(a, b + Math.floor(Math.random() * (b - a + 1)))\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b] (inclusive)\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  >>> rand(9, 10)\n  10\n  */\nconst rand = (a, b) => {\n  return Math.min(b, a + Math.floor(Math.random() * (b - a + 1)))\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b] (inclusive)\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  >>> rand(9, 10)\n  10\n  */\nconst rand = (a, b) => {\n  return Math.max(a, b - Math.floor(Math.random() * (b - a + 1)))\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b] (inclusive)\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  >>> rand(9, 10)\n  10\n  */\nconst rand = (a, b) => {\n  return Math.min(a, b - Math.floor(Math.random() * (b - a + 1)))\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b] (inclusive)\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  >>> rand(9, 10)\n  10\n  */\nconst rand = (a, b) => {\n  return Math.max(a, b + Math.floor(Math.random() * (b - a + 1)))\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b] (exclusive)\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  >>> rand(9, 10)\n  10\n  */\nconst rand = (a, b) => {\n  return Math.max(a, b - Math.floor(Math.random() * (b - a + 1)))\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b] (exclusive)\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  >>> rand(9, 10)\n  10\n  */\nconst rand = (a, b) => {\n  return Math.min(a, b + Math.floor(Math.random() * (b - a + 1)))\n}\n\n// --------------------------------------------------\n\n/*Return a random number in [a, b] (exclusive)\n  >>> rand(1, 10)\n  1\n  >>> rand(2, 10)\n  2\n  >>> rand(3, 10)\n  3\n  >>> rand(10, 10)\n  9\n  >>> rand(9, 10)\n  10\n  */\nconst rand = (a, b) => {\n  return Math.min(a, b - Math.floor(Math.random()"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (26 - (ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string and returns a boolean value.\n  */\nconst isValidString = (s) => {\n  if (s.length === 0) return false;\n  const validChars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  let found = false;\n  for (let i = 0; i < s.length; i++) {\n    if (validChars.indexOf(s[i])!== -1) {\n      found = true;\n      break;\n    }\n  }\n  return found;\n}\n\n/*\n  takes as input string and returns a boolean value.\n  */\nconst isValidNumber = (s) => {\n  if (s.length === 0) return false;\n  const validChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n  let found = false;\n  for (let i = 0; i < s.length; i++) {\n    if (validChars.indexOf(s[i])!== -1) {\n      found = true;\n      break;\n    }\n  }\n  return found;\n}\n\n/*\n  takes as input string and returns a boolean value.\n  */\nconst isValidPassword = (s) => {\n  if (s.length === 0) return false;\n  const validChars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n  let found = false;\n  for (let i = 0; i < s.length; i++) {\n    if (validChars.indexOf(s[i])!== -1) {\n      found = true;\n      break;\n    }\n  }\n  return found;\n}\n\n/*\n  takes as input string and returns a boolean value.\n  */\nconst isValidSpecialChar = (s) => {\n  if (s.length === 0) return false;\n  const validChars = [\"~\", \"*\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"=\", \"\\\"\", \"(\", \")\", \":\", \";\", \"'\", \"?\", \"/\", \"\\\\\", \"[\", \"]\", \"{\", \"}\", \"|\", \"_\", \"+\", \"`\", \"~\", \"*\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"=\", \"\\\"\", \"(\", \")\", \":\", \";\", \"'\", \"?\", \"/\", \"\\\\\", \"[\", \"]\", \"{\", \"}\", \"|\", \"_\", \"+\", \"`\"];\n  let found = false;\n  for (let i = 0; i < s.length; i++) {\n    if (validChars.indexOf(s[i])!== -1) {\n      found = true;\n      break;\n    }\n  }\n  return found;\n}\n\n/*\n  takes as input string and returns a boolean value.\n  */\nconst isValidAlphabet = (s) => {\n  if (s.length === 0) return false;\n  const validChars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  let found = false;\n  for (let i = 0; i < s.length; i++) {\n    if (validChars.indexOf(s[i])!== -1) {\n      found = true;\n      break;\n    }\n  }\n  return found;\n}\n\nmodule.exports = {\n  encode_shift,\n  decode_shift,\n  isValidString,\n  isValidNumber,\n  isValidPassword,\n  isValidSpecialChar,\n  isValidAlphabet\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n    let i = 0;\n    let len = text.length;\n    while (i < len) {\n        if (text[i] === text[i + 1] && text[i + 1] === text[i + 2]) {\n            text = text.substr(0, i) + text.substr(i + 3);\n            len = text.length;\n        } else {\n            i++;\n        }\n    }\n    return text;\n};\n\n/*\n  isPossible is a function that takes string and returns boolean.\n  >>> isPossible('abc')\n  True\n  >>> isPossible('ab')\n  False\n  >>> isPossible('a')\n  False\n  >>> isPossible('')\n  False\n  >>> isPossible('a')\n  False\n  */\nconst isPossible = (text) => {\n    if (text === '') {\n        return false;\n    }\n    return (text.split('').some(c => c === text[text.length - 1]));\n};\n\n/*\n  getAllPossible is a function that takes string and returns array of strings.\n  >>> getAllPossible('abc')\n  ['a', 'b', 'c', 'abc']\n  >>> getAllPossible('ab')\n  ['a', 'b']\n  >>> getAllPossible('a')\n  ['a']\n  >>> getAllPossible('')\n  []\n  >>> getAllPossible('a')\n  ['a']\n  */\nconst getAllPossible = (text) => {\n    const result = [];\n    if (text === '') {\n        return result;\n    }\n    if (text.length === 1) {\n        result.push(text);\n        return result;\n    }\n    const next = text.substr(0, text.length - 1);\n    const last = text.substr(text.length - 1, 1);\n    if (isPossible(next)) {\n        result = result.concat(getAllPossible(next));\n    }\n    if (isPossible(last)) {\n        result.push(last);\n    }\n    return result;\n};\n\n/*\n  getAllPossibleWord is a function that takes string and returns array of strings.\n  >>> getAllPossibleWord('abc')\n  ['a', 'b', 'c', 'ab', 'bc', 'ac', 'abc']\n  >>> getAllPossibleWord('ab')\n  ['a', 'b']\n  >>> getAllPossibleWord('a')\n  ['a']\n  >>> getAllPossibleWord('')\n  []\n  >>> getAllPossibleWord('a')\n  ['a']\n  */\nconst getAllPossibleWord = (text) => {\n    const result = [];\n    if (text === '') {\n        return result;\n    }\n    if (text.length === 1) {\n        result.push(text);\n        return result;\n    }\n    const next = text.substr(0, text.length - 1);\n    const last = text.substr(text.length - 1, 1);\n    if (isPossible(next)) {\n        result = result.concat(getAllPossibleWord(next));\n    }\n    if (isPossible(last)) {\n        result.push(last);\n    }\n    result = result.concat(getAllPossible(text));\n    return result;\n};\n\n/*\n  getAllPossibleWord is a function that takes string and returns array of strings.\n  >>> getAllPossibleWord('abc')\n  ['a', 'b', 'c', 'ab', 'bc', 'ac', 'abc']\n  >>> getAllPossibleWord('ab')\n  ['a', 'b']\n  >>> getAllPossibleWord('a')\n  ['a']\n  >>> getAllPossibleWord('')\n  []\n  >>> getAllPossibleWord('a')\n  ['a']\n  */\nconst getAllPossibleWord2 = (text) => {\n    const result = [];\n    if (text === '') {\n        return result;\n    }\n    if (text.length === 1) {\n        result.push(text);\n        return result;\n    }\n    const next = text.substr(0, text.length - 1);\n    const last = text.substr(text.length - 1, 1);\n    if (isPossible(next)) {\n        result = result.concat(getAllPossibleWord(next));\n    }\n    if (isPossible(last)) {\n        result.push(last);\n    }\n    return result;\n};\n\n/*\n  getAllPossibleWord is a function that takes string and returns array of strings.\n  >>> getAllPossibleWord('abc')\n  ['a', 'b', 'c', 'ab', 'bc', 'ac', 'abc']\n  >>> getAllPossibleWord('ab')\n  ['a', 'b']\n  >>> getAllPossibleWord('a')\n  ['a']\n  >>> getAllPossibleWord('')\n  []\n  >>> getAllPossibleWord('a')\n  ['a']\n  */\nconst getAllPossibleWord3 = (text) => {\n    const result = [];\n    if (text === '') {\n        return result;\n    }\n    if (text.length === 1) {\n        result.push(text);\n        return result;\n    }\n    const next = text.substr(0, text.length - 1);\n    const last = text.substr(text.length - 1, 1);\n    if (isPossible(next)) {\n        result = result.concat(getAllPossibleWord(next));\n    }\n    if (isPossible(last)) {\n        result.push(last);\n    }\n"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n    return l.every(x => x < t);\n};\n\n/* Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n    return l.every(x => x <= t);\n};\n\n/* Return the largest number in the list l.\n  >>> max(10, 20, 30, 40, 50)\n  50\n  >>> max(0, 1)\n  1\n  >>> max(1, 2)\n  2\n  */\nconst max = (...args) => {\n    return Math.max(...args);\n};\n\n/* Return the largest number in the list l that is a multiple of m.\n  >>> maxMultiplesOf(10, 20, 30, 40, 50, 60)\n  60\n  >>> maxMultiplesOf(0, 1)\n  1\n  >>> maxMultiplesOf(1, 2)\n  2\n  >>> maxMultiplesOf(1, 2, 4, 5, 6)\n  4\n  */\nconst maxMultiplesOf = (m,...args) => {\n    const argsWithM = args.map(x => x * m);\n    return Math.max(...argsWithM);\n};\n\n/* Return the largest number in the list l that is below m.\n  >>> maxBelow(10, 20, 30, 40, 50, 60)\n  50\n  >>> maxBelow(0, 1)\n  1\n  >>> maxBelow(1, 2)\n  1\n  >>> maxBelow(1, 2, 4, 5, 6)\n  4\n  */\nconst maxBelow = (m,...args) => {\n    const argsWithM = args.map(x => x * m);\n    return Math.max(...argsWithM);\n};\n\n/* Return the largest number in the list l that is below m.\n  >>> maxBelow(10, 20, 30, 40, 50, 60)\n  50\n  >>> maxBelow(0, 1)\n  1\n  >>> maxBelow(1, 2)\n  2\n  >>> maxBelow(1, 2, 4, 5, 6)\n  4\n  */\nconst maxBelowThreshold = (m, t,...args) => {\n    const argsWithM = args.map(x => x * m);\n    return Math.max(...argsWithM);\n};\n\n/* Return the largest number in the list l that is below threshold t.\n  >>> maxBelowThreshold(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130)\n  100\n  >>> maxBelowThreshold(0, 1, 2, 4, 5, 6)\n  4\n  >>> maxBelowThreshold(1, 2, 4, 5, 6)\n  4\n  */\nconst maxBelowThresholdOf = (t,...args) => {\n    const argsWithM = args.map(x => x * t);\n    return Math.max(...argsWithM);\n};\n\n/* Return the largest number in the list l that is below threshold t.\n  >>> maxBelowThresholdOf(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170)\n  130\n  >>> maxBelowThresholdOf(0, 1, 2, 4, 5, 6)\n  4\n  >>> maxBelowThresholdOf(1, 2, 4, 5, 6)\n  4\n  */\nconst maxBelowThresholdOfAll = (...args) => {\n    const argsWithM = args.map(x => x * t);\n    return Math.max(...argsWithM);\n};\n\n/* Return the largest number in the list l that is below threshold t.\n  >>> maxBelowThresholdOfAll(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180)\n  130\n  >>> maxBelowThresholdOfAll(0, 1, 2, 4, 5, 6)\n  4\n  >>> maxBelowThresholdOfAll(1, 2, 4, 5, 6)\n  4\n  */\nconst maxBelowThresholdOfAllArgs = (t,...args) => {\n    const argsWithM = args.map(x => x * t);\n    return Math.max(...argsWithM);\n};\n\n/* Return the largest number in the list l that is below threshold t.\n  >>> maxBelowThresholdOfAllArgs(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180)\n  130\n  >>> maxBelowThresholdOfAllArgs(0, 1, 2, 4, 5, 6)\n  4\n  >>> maxBelowThresholdOfAllArgs(1, 2, 4, 5, 6)\n  4\n  */\nconst maxBelowThresholdOfAllArgsWithM = (t, m,...args) => {\n    const argsWithM = args.map(x => x * m);\n    return Math.max(...argsWithM);\n};\n\n/* Return the largest number in the list l that is below threshold t.\n  >>> maxBelowThresholdOfAllArgsWithM(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180)\n  130\n  >>> maxBelowThresholdOfAllArgsWithM(0, 1, 2, 4, 5, 6)\n  4\n  >>> maxBelowThresholdOfAllArgsWithM(1, 2, 4, 5, 6)\n  4\n  */\nconst maxBelowThresholdOfAllArgsWithMAndT = (t, m, t2,...args) => {\n    const argsWithM = args.map(x => x * m);\n    const argsWithMT = args.map(x => x * t);\n    return Math.max(...argsWithMT);\n};\n\n/* Return the largest number in the list l that is below threshold t.\n  >>> maxBelowThresholdOfAllArgsWithM"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  const l = x;\n  const r = y;\n  return Math.max(l, r) + Math.min(l, r);\n};\n\nmodule.exports = lend;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  const a = s0.split('');\n  const b = s1.split('');\n  return a.every((char, i) => b.includes(char));\n};\n\nconst find = (s, t) => {\n  const a = s.split('');\n  const b = t.split('');\n  return a.find((char, i) => b.includes(char));\n};\n\n// TODO: use `find`\nconst subStr = (s, start, end) => {\n  const a = s.split('');\n  const b = start.split('');\n  const c = end.split('');\n  return a.slice(b[0], c[1]);\n};\n\nconst findSubStr = (s, t) => {\n  const a = s.split('');\n  const b = t.split('');\n  return a.find((char, i) => b.includes(char));\n};\n\nconst isPalindrome = s => {\n  const half = Math.floor(s.length / 2);\n  return s.slice(0, half) === s.slice(half, half + half);\n};\n\nconst reverse = s => {\n  const a = s.split('');\n  a.reverse();\n  return a.join('');\n};\n\nconst strReplace = (s, start, end, replacement) => {\n  const a = s.split('');\n  const b = start.split('');\n  const c = end.split('');\n  return a.slice(b[0], c[1]).join('') + replacement;\n};\n\nconst strReplace2 = (s, start, end, replacement) => {\n  const a = s.split('');\n  const b = start.split('');\n  const c = end.split('');\n  return a.slice(b[0], c[1]).join('') + replacement;\n};\n\nconst strReplace3 = (s, start, end, replacement) => {\n  const a = s.split('');\n  const b = start.split('');\n  const c = end.split('');\n  return a.slice(b[0], c[1]).join('') + replacement;\n};\n\nconst strReplace4 = (s, start, end, replacement) => {\n  const a = s.split('');\n  const b = start.split('');\n  const c = end.split('');\n  return a.slice(b[0], c[1]).join('') + replacement;\n};\n\nconst findSubStr2 = (s, t) => {\n  const a = s.split('');\n  const b = t.split('');\n  return a.find((char, i) => b.includes(char));\n};\n\nconst findSubStr3 = (s, t) => {\n  const a = s.split('');\n  const b = t.split('');\n  return a.find((char, i) => b.includes(char));\n};\n\nconst findSubStr4 = (s, t) => {\n  const a = s.split('');\n  const b = t.split('');\n  return a.find((char, i) => b.includes(char));\n};\n\nconst isSubStr = (s, t) => {\n  const a = s.split('');\n  const b = t.split('');\n  return a.includes(b[0]);\n};\n\nconst isSubStr2 = (s, t) => {\n  const a = s.split('');\n  const b = t.split('');\n  return a.includes(b[0]);\n};\n\nconst isSubStr3 = (s, t) => {\n  const a = s.split('');\n  const b = t.split('');\n  return a.includes(b[0]);\n};\n\nconst isSubStr4 = (s, t) => {\n  const a = s.split('');\n  const b = t.split('');\n  return a.includes(b[0]);\n};\n\nexport {\n  likeChars,\n  find,\n  subStr,\n  findSubStr,\n  isPalindrome,\n  reverse,\n  strReplace,\n  strReplace2,\n  strReplace3,\n  strReplace4,\n  findSubStr2,\n  findSubStr3,\n  findSubStr4,\n  isSubStr,\n  isSubStr2,\n  isSubStr3,\n  isSubStr4,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n < 2) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nconst get = (name, callback) => {\n    const module = require(name);\n    if (!module) {\n        throw new Error(`Module not found: ${name}`);\n    }\n    return module.get(callback);\n}\n\nconst set = (name, callback) => {\n    const module = require(name);\n    if (!module) {\n        throw new Error(`Module not found: ${name}`);\n    }\n    return module.set(callback);\n}\n\nconst setFib = (callback) => {\n    return set('fib', callback);\n}\n\nconst getFib = () => {\n    return get('fib', (n) => {\n        if (n < 2) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    });\n}\n\nconst setGet = (callback) => {\n    return set('get', callback);\n}\n\nconst getGet = () => {\n    return get('get', (n) => {\n        if (n < 2) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    });\n}\n\nconst main = () => {\n    console.log(getFib());\n    setFib(() => {\n        console.log(getFib());\n    });\n    console.log(getGet());\n    setGet(() => {\n        console.log(getGet());\n    });\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  let openBrackets = brackets.split(\"<\").map(s => s.length);\n  let i = brackets.length - 1;\n  let j = openBrackets.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (openBrackets[j] === 0) {\n      return false;\n    }\n    if (openBrackets[j] > 0) {\n      openBrackets[j]--;\n    }\n    if (brackets[i] === \">\") {\n      openBrackets[j]++;\n    }\n    i--;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = rightBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    let v = l[i];\n    while (j < l.length - i) {\n      if (v <= l[j + i]) {\n        return false;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return true;\n};\n\n// tests\ndescribe('flat', () => {\n  it('should return true for a flat list', () => {\n    expect(flat([1, 2, 4, 20])).toBe(true);\n    expect(flat([1, 20, 4, 10])).toBe(false);\n    expect(flat([4, 1, 0, -10])).toBe(true);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const diff = setDiff(l1, l2);\n  const newList = [];\n  let i = 0;\n  let j = 0;\n  for (let k = 0; k < diff.length; k++) {\n    const current = diff[k];\n    while (i < l1.length && l1[i] <= current) {\n      newList.push(l1[i]);\n      i++;\n    }\n    while (j < l2.length && l2[j] <= current) {\n      newList.push(l2[j]);\n      j++;\n    }\n  }\n  return newList;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  const prime = primeFactor(n);\n  return prime? n / prime : n;\n};\n\n// From http://www.daniweb.com/software-development/cpp/code/215512/\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst primeFactor = (n) => {\n  let num = 1;\n  let i = 0;\n  while (n > 1 && i < Math.sqrt(n)) {\n    if (n % i === 0) {\n      num *= i;\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    num *= n;\n  }\n  return num;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};\n\nconsole.log(summarizeToN(30));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i]\n    if (char === \"(\") {\n      stack.push(char)\n    } else if (char === \")\") {\n      if (stack.pop()!== \"(\" || stack.length === 0) {\n        return false\n      }\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, find the first occurrence of a character in the string\n  not within any other string.\n  If a character is not found, return -1.\n\n  >>> leftOf(\"hello\", \"o\")\n  -1\n  >>> leftOf(\"hello\", \"h\")\n  0\n  >>> leftOf(\"hello\", \"h\", \"ello\")\n  1\n  >>> leftOf(\"hello\", \"h\", \"hello\")\n  0\n  */\nconst leftOf = (s, c, delim = \"\") => {\n  let i = 0\n  while (i < s.length) {\n    const j = s.indexOf(c, i)\n    if (j === -1) {\n      return j\n    }\n    const k = j + delim.length\n    if (k >= s.length) {\n      return j\n    }\n    if (s.indexOf(delim, k)!== -1) {\n      return -1\n    }\n    i = j + 1\n  }\n  return -1\n}\n\n/*\n  Given a string, find the first occurrence of a character in the string\n  not within any other string.\n  If a character is not found, return -1.\n\n  >>> leftOf(\"hello\", \"o\")\n  -1\n  >>> leftOf(\"hello\", \"h\")\n  0\n  >>> leftOf(\"hello\", \"h\", \"ello\")\n  1\n  >>> leftOf(\"hello\", \"h\", \"hello\")\n  0\n  */\nconst leftOf = (s, c, delim = \"\") => {\n  let i = 0\n  while (i < s.length) {\n    const j = s.indexOf(c, i)\n    if (j === -1) {\n      return j\n    }\n    const k = j + delim.length\n    if (k >= s.length) {\n      return j\n    }\n    if (s.indexOf(delim, k)!== -1) {\n      return -1\n    }\n    i = j + 1\n  }\n  return -1\n}\n\n/*\n  Given a string, return the string with any leading whitespace removed.\n  If there are no leading whitespace, return the string unchanged.\n\n  >>> trim(\"hello world\")\n  'hello world'\n  >>> trim(\"   hello world\")\n  'hello world'\n  >>> trim(\"hello world   \")\n  'hello world'\n  */\nconst trim = (s) => {\n  return s.replace(/^\\s+/gm, \"\")\n}\n\n/*\n  Given a string, return the string with any trailing whitespace removed.\n  If there are no trailing whitespace, return the string unchanged.\n\n  >>> trim(\"hello world\")\n  'hello world'\n  >>> trim(\"   hello world\")\n '  hello world'\n  >>> trim(\"hello world   \")\n  'hello world'\n  */\nconst trim = (s) => {\n  return s.replace(/\\s+$/gm, \"\")\n}\n\n/*\n  Given a string, return the string with any leading and trailing whitespace\n  removed.\n\n  >>> trim(\"   hello world   \")\n  'hello world'\n  >>> trim(\"hello world\")\n  'hello world'\n  >>> trim(\"hello world   \")\n  'hello world'\n  */\nconst trim = (s) => {\n  return s.replace(/^\\s+|\\s+$/g, \"\")\n}\n\n/*\n  Given a string, return the string with any leading and trailing whitespace\n  removed.\n\n  >>> trim(\"   hello world   \")\n  'hello world'\n  >>> trim(\"hello world\")\n  'hello world'\n  >>> trim(\"hello world   \")\n  'hello world'\n  */\nconst trim = (s) => {\n  return s.replace(/^\\s+|\\s+$/g, \"\")\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 0) {\n    return []\n  }\n  const ys = xs.slice(0)\n  ys.push(xs[ys.length - 1])\n  return ys\n}\n\nconst isOdd = (num) => num % 2 === 1\nconst isEven = (num) => num % 2 === 0\n\nconst findKth = (xs, k) => {\n  const sortedXs = xs.sort((a, b) => a - b)\n  return sortedXs[k]\n}\n\nconst findKthEven = (xs, k) => {\n  const sortedXs = xs.sort((a, b) => a - b)\n  if (isEven(k)) {\n    return sortedXs[k]\n  } else {\n    return sortedXs[k - 1]\n  }\n}\n\nconst findKthOdd = (xs, k) => {\n  const sortedXs = xs.sort((a, b) => a - b)\n  if (isEven(k)) {\n    return sortedXs[k]\n  } else {\n    return sortedXs[k - 1]\n  }\n}\n\nconst getKth = (xs, k) => {\n  if (isOdd(k)) {\n    return findKthOdd(xs, k)\n  } else {\n    return findKthEven(xs, k)\n  }\n}\n\nconst factorial = (num) => {\n  if (num === 1) {\n    return 1\n  }\n  return num * factorial(num - 1)\n}\n\nconst getFactorial = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  return num * getFactorial(num - 1)\n}\n\nconst getCoefficients = (xs) => {\n  const coefficients = []\n  const coeffs = xs.map((x) => x * x)\n  coeffs.push(1)\n  coefficients.push(coeffs)\n  return coefficients\n}\n\nconst getCoefficientsEven = (xs) => {\n  const coefficients = []\n  const coeffs = xs.map((x) => x * x)\n  coeffs.push(1)\n  const nums = xs.map((x) => x)\n  const i = 0\n  while (nums[i] < 0) {\n    coeffs.push(coeffs[i] - 1)\n    coefficients.push(coeffs)\n    i += 1\n  }\n  return coefficients\n}\n\nconst getCoefficientsOdd = (xs) => {\n  const coefficients = []\n  const coeffs = xs.map((x) => x * x)\n  coeffs.push(1)\n  const nums = xs.map((x) => x)\n  const i = 0\n  while (nums[i] < 0) {\n    coeffs.push(coeffs[i] + 1)\n    coefficients.push(coeffs)\n    i += 1\n  }\n  return coefficients\n}\n\nconst getCoefficients2 = (xs) => {\n  const coefficients = []\n  const coeffs = xs.map((x) => x * x)\n  coeffs.push(1)\n  const nums = xs.map((x) => x)\n  const i = 0\n  while (nums[i] < 0) {\n    coeffs.push(coeffs[i] - 1)\n    coefficients.push(coeffs)\n    i += 1\n  }\n  return coefficients\n}\n\nconst getCoefficients3 = (xs) => {\n  const coefficients = []\n  const coeffs = xs.map((x) => x * x * x)\n  coeffs.push(1)\n  const nums = xs.map((x) => x)\n  const i = 0\n  while (nums[i] < 0) {\n    coeffs.push(coeffs[i] - 1)\n    coefficients.push(coeffs)\n    i += 1\n  }\n  return coefficients\n}\n\nconst getCoefficients4 = (xs) => {\n  const coefficients = []\n  const coeffs = xs.map((x) => x * x * x * x)\n  coeffs.push(1)\n  const nums = xs.map((x) => x)\n  const i = 0\n  while (nums[i] < 0) {\n    coeffs.push(coeffs[i] - 1)\n    coefficients.push(coeffs)\n    i += 1\n  }\n  return coefficients\n}\n\nconst getCoefficients5 = (xs) => {\n  const coefficients = []\n  const coeffs = xs.map((x) => x * x * x * x * x)\n  coeffs.push(1)\n  const nums = xs.map((x) => x)\n  const i = 0\n  while (nums[i] < 0) {\n    coeffs.push(coeffs[i] - 1)\n    coefficients.push(coeffs)\n    i += 1\n  }\n  return coefficients\n}\n\nconst getCoefficients6 = (xs) => {\n  const coefficients = []\n  const coeffs = xs.map((x) => x * x * x * x * x * x)\n  coeffs.push(1)\n  const nums = xs.map((x) => x)\n  const i = 0\n  while (nums[i] < 0) {\n    coeffs.push(coeffs[i] - 1)\n    coefficients.push(coeffs)\n    i += 1\n  }\n  return coefficients\n}\n\nconst getCoefficients7 = (xs) => {\n  const coefficients = []\n  const coeffs ="}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else if (n === 3) {\n    return 1;\n  } else if (n === 4) {\n    return 2;\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n};\n\n// test\nconsole.log(fibfib(4));\nconsole.log(fibfib(8));\nconsole.log(fibfib(11));\nconsole.log(fibfib(15));\nconsole.log(fibfib(20));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n  const vowelCount = s.split(\"\").reduce((acc, c, i) => {\n    if (vowels.indexOf(c)!== -1) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return vowelCount\n}\n\n/*Write a function wordLength which takes as input a string of text\n  represented as a string, and returns the number of non-space\n  characters in the string.\n\n  Example:\n  >>> wordLength(\"abc\")\n  3\n  >>> wordLength(\"ab cd\")\n  6\n  >>> wordLength(\" a \")\n  2\n  */\nconst wordLength = (s) => {\n  const nonSpace = /\\S/\n  const count = s.split(\"\").reduce((acc, c, i) => {\n    if (nonSpace.test(c)) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*Write a function wordScore which takes as input a string of text\n  represented as a string and a number of points, and returns a\n  string of points earned, given a particular string of words.\n\n  Example:\n  >>> wordScore(\"abc\", 4)\n  \"AB-CO\"\n  >>> wordScore(\"abc\", 3)\n  \"AB-C\"\n  >>> wordScore(\"abc\", 1)\n  \"A\"\n  */\nconst wordScore = (s, points) => {\n  const total = points * wordLength(s)\n  const score = s.split(\"\").reduce((acc, c, i) => {\n    if (wordLength(c) === total) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return score\n}\n\nconst letterScore = (s, points) => {\n  const total = points * vowelReckon(s)\n  const score = s.split(\"\").reduce((acc, c, i) => {\n    if (vowelReckon(c) === total) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return score\n}\n\nconst sum = (a, b) => a + b\n\nconst letterPoints = (points, word) => {\n  const total = points * letterScore(word, 5)\n  return sum(letterScore(word, 5), total)\n}\n\nconst letterSum = (points, words) => {\n  const total = sum(letterPoints(points, word) for word in words)\n  return sum(letterPoints(points, word) for word in words)\n}\n\nconst letterWordSum = (points, words) => {\n  const total = sum(letterSum(points, words) for words in words)\n  return sum(letterSum(points, words) for words in words)\n}\n\nconst letterWordScore = (points, words) => {\n  const total = sum(letterWordSum(points, words) for words in words)\n  return sum(letterWordSum(points, words) for words in words)\n}\n\nconst letterWordScore2 = (points, words) => {\n  const total = sum(letterWordScore(points, words) for words in words)\n  return sum(letterWordScore(points, words) for words in words)\n}\n\nconst letterWordScore3 = (points, words) => {\n  const total = sum(letterWordScore2(points, words) for words in words)\n  return sum(letterWordScore2(points, words) for words in words)\n}\n\nconst letterWordScore4 = (points, words) => {\n  const total = sum(letterWordScore3(points, words) for words in words)\n  return sum(letterWordScore3(points, words) for words in words)\n}\n\nconst letterWordScore5 = (points, words) => {\n  const total = sum(letterWordScore4(points, words) for words in words)\n  return sum(letterWordScore4(points, words) for words in words)\n}\n\nconst letterWordScore6 = (points, words) => {\n  const total = sum(letterWordScore5(points, words) for words in words)\n  return sum(letterWordScore5(points, words) for words in words)\n}\n\nconst letterWordScore7 = (points, words) => {\n  const total = sum(letterWordScore6(points, words) for words in words)\n  return sum(letterWordScore6(points, words) for words in words)\n}\n\nconst letterWordScore8 = (points, words) => {\n  const total = sum(letterWordScore7(points, words) for words in words)\n  return sum(letterWordScore7(points, words) for words in words)\n}\n\nconst letterWordScore9 = (points, words) => {\n  const total = sum(letterWordScore8(points, words) for words in words)\n  return sum(letterWordScore8(points, words) for words in words)\n}\n\nconst letterWordScore10 = (points, words) => {\n  const total = sum(letterWordScore9(points, words) for words in words)\n  return sum(letterWordScore9(points, words) for words in words)\n}\n\nconst letterWordScore11 = (points, words) => {\n  const total = sum(letterWordScore10(points, words) for words in words)\n  return sum(letterWordScore10(points, words) for words in words)\n}\n\nconst letterWordScore12 = (points, words) => {\n  const total = sum(letterWordScore11(points, words) for words in words)\n  return sum(letterWordScore11(points, words) for words in words)\n}\n\nconst letterWordScore13 = (points, words) => {\n  const total = sum(letterWordScore12(points, words) for words in words)\n  return sum(letterWordScore12(points, words) for words"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  const mask = x.length - 1\n  const length = x.length + shift\n  const result = Array(length)\n  const digits = x.toString()\n  let i = x.length - shift\n  let j = x.length\n\n  while (i >= 0 && j >= 0) {\n    result[i] = digits[j]\n    i--\n    j--\n  }\n\n  while (j >= 0) {\n    result[i] = digits[j]\n    i--\n    j--\n  }\n\n  return result.reverse().join('')\n}\n\n/*\n  Given a positive integer n, return the number of 1 bits it has.\n  For example, given 5, return 2, because it has one 1 bit and a one 0 bit.\n  For negative numbers, count 0 bits.\n  >>> countBits(5)\n  2\n  >>> countBits(-1)\n  0\n  >>> countBits(0)\n  0\n  >>> countBits(-2)\n  1\n  >>> countBits(-10)\n  2\n  */\nconst countBits = (n) => {\n  if (n === 0) return 0\n  const count = 0\n\n  while (n > 0) {\n    count += n & 1\n    n = n >>> 1\n  }\n\n  return count\n}\n\n/*\n  Given a string, find the first non-repeating character in the string.\n  If there are no non-repeating characters, return -1.\n  >>> firstNonRepeatingCharacter('abca')\n  0\n  >>> firstNonRepeatingCharacter('aaab')\n  -1\n  >>> firstNonRepeatingCharacter('aaabaa')\n  -1\n  >>> firstNonRepeatingCharacter('aaabaa')\n  1\n  */\nconst firstNonRepeatingCharacter = (s) => {\n  let n = 0\n  let i = 0\n\n  for (; i < s.length; i++) {\n    if (n === 0) {\n      n = 1\n    } else {\n      if (n!== s[i]) {\n        n = 0\n      }\n    }\n  }\n\n  return i - 1\n}\n\n/*\n  Given two strings, return the longest common substring of them.\n  If there is no common substring, return the empty string.\n  >>> longestCommonSubstring('abcd', 'abce')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'abcde')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'abcef')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'abcef')\n  ''\n  >>> longestCommonSubstring('abcd', 'abcef')\n  ''\n  >>> longestCommonSubstring('abcd', 'abcef')\n  ''\n  */\nconst longestCommonSubstring = (a, b) => {\n  const result = ''\n  const current = []\n  let i = 0\n  let j = 0\n  let n = 0\n\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      current.push(a[i])\n      i++\n      j++\n      n++\n    } else if (n === 0) {\n      j++\n    } else if (n === 1) {\n      i++\n    } else {\n      break\n    }\n  }\n\n  while (n > 0) {\n    result += current.pop()\n    n--\n  }\n\n  return result\n}\n\n/*\n  Given two strings, return their longest common substring.\n  If there is no common substring, return the empty string.\n  >>> longestCommonSubstring('abcd', 'abce')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'abcde')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'abcef')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'abcef')\n  ''\n  >>> longestCommonSubstring('abcd', 'abcef')\n  ''\n  >>> longestCommonSubstring('abcd', 'abcef')\n  ''\n  */\nconst longestCommonSubstring = (a, b) => {\n  const result = ''\n  const current = []\n  let i = 0\n  let j = 0\n  let n = 0\n\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      current.push(a[i])\n      i++\n      j++\n      n++\n    } else {\n      break\n    }\n  }\n\n  while (n > 0) {\n    result += current.pop()\n    n--\n  }\n\n  return result\n}\n\nexport { countBits, firstNonRepeatingCharacter, longestCommonSubstring }\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s[i].charCodeAt(0);\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let numOfApples = 0\n  let numOfOranges = 0\n  let numOfMango = 0\n\n  let index = 0\n  while (index < s.length) {\n    if (s[index] === \"apple\") {\n      numOfApples += 1\n    } else if (s[index] === \"orange\") {\n      numOfOranges += 1\n    } else if (s[index] === \"mango\") {\n      numOfMango += 1\n    }\n    index += 1\n  }\n  return numOfApples + numOfOranges + numOfMango - n\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution2 = (s, n) => {\n  let numOfApples = 0\n  let numOfOranges = 0\n  let numOfMango = 0\n\n  let index = 0\n  while (index < s.length) {\n    if (s[index] === \"apple\") {\n      numOfApples += 1\n    } else if (s[index] === \"orange\") {\n      numOfOranges += 1\n    } else if (s[index] === \"mango\") {\n      numOfMango += 1\n    }\n    index += 1\n  }\n  return numOfApples + numOfOranges - n\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution3 = (s, n) => {\n  let numOfApples = 0\n  let numOfOranges = 0\n  let numOfMango = 0\n\n  let index = 0\n  while (index < s.length) {\n    if (s[index] === \"apple\") {\n      numOfApples += 1\n    } else if (s[index] === \"orange\") {\n      numOfOranges += 1\n    } else if (s[index] === \"mango\") {\n      numOfMango += 1\n    }\n    index += 1\n  }\n  return numOfApples - n + numOfOranges - n\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution4 = (s, n) => {\n  let numOfApples = 0\n  let numOfOranges = 0\n  let numOfMango = 0\n\n  let index = 0\n  while (index < s.length) {\n    if (s[index] === \"apple\") {\n      numOfApples += 1\n    } else if (s[index] === \"orange\") {\n      numOfOranges += 1\n    } else if (s[index] === \"mango\") {\n      numOfMango += 1\n    }\n    index += 1\n  }\n  return numOfApples - n + numOfOranges - n\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n    arr.sort((a, b) => a - b)\n    if (arr.length === 0) return []\n    let l = arr.length - 1\n    while (l > 0) {\n        if (arr[l] % 2 === 0) return [arr[l], l]\n        l -= 1\n    }\n    return []\n}\n\nconsole.log(hustle([4,2,3]))\nconsole.log(hustle([1,2,3]))\nconsole.log(hustle([1,0,3,0,4,2]))\nconsole.log(hustle([1,0,3,0,4,2,5]))\nconsole.log(hustle([1,0,3,0,4,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  const count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = count[lst[i]] || 0;\n    count[lst[i]]++;\n  }\n\n  for (let [k, v] of Object.entries(count)) {\n    if (v >= v) {\n      return k;\n    }\n  }\n\n  return -1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n    const arr = Array.from(lst);\n    const index = arr.indexOf(arr.reduce((prev, curr) => Math.min(prev, curr), arr.slice(1).reduce((prev, curr) => Math.max(prev, curr), arr[0])), arr[0]);\n    return arr.slice(0, index + 1).concat(arr.slice(index + 1).sort(a => a - arr[0]));\n};\n\nmodule.exports = foreignSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  if (b < c || c < a || a < b) {\n    return -1;\n  }\n\n  const area = ((a + b) * c) / 2;\n  return Math.round(area * 100) / 100;\n};\n\nexport default triangulumArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  if (len === 1) return w <= q[0]\n  return w <= q[len - 1] + q[len - 2]\n}\n\nexport default willItFlee\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  const len = arr.length;\n  const n = 0;\n  for (let i = 0; i < len; i++) {\n    n = Math.max(n, arr[i]);\n  }\n\n  if (n === len) {\n    return 0;\n  }\n\n  let sum = 0;\n  for (let i = n; i < len; i++) {\n    if (arr[i] > arr[len - 1 - i]) {\n      sum++;\n    }\n  }\n\n  return sum;\n};\n\nconsole.log(smallChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  let lst = []\n  if (len1 === len2) {\n    for (let i = 0; i < len1; i++) {\n      lst.push(lst1[i])\n    }\n  } else if (len1 > len2) {\n    for (let i = 0; i < len2; i++) {\n      lst.push(lst2[i])\n    }\n  } else {\n    for (let i = 0; i < len1; i++) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\n/*\n  Write a function that adds two numbers together.\n\n  if the result is greater than the largest integer, return the largest integer.\n\n  if the result is less than the smallest integer, return the smallest integer.\n\n  Examples\n  add(1, 2) → 3\n  add(1, 3) → 4\n  add(4, 2) → 6\n  add(0, 2) → 2\n  add(-1, -2) → 1\n  add(0, 0) → 0\n  */\nconst add = (x, y) => {\n  const a = Math.min(x, y)\n  const b = Math.max(x, y)\n  return a + b\n}\n\n/*\n  Write a function that subtracts two numbers.\n\n  if the result is less than the smallest integer, return the smallest integer.\n\n  if the result is greater than the largest integer, return the largest integer.\n\n  Examples\n  subtract(3, 2) → 1\n  subtract(3, 3) → 0\n  subtract(2, 3) → -1\n  subtract(0, 2) → 2\n  subtract(-1, -2) → -3\n  */\nconst subtract = (x, y) => {\n  const a = Math.min(x, y)\n  const b = Math.max(x, y)\n  return a - b\n}\n\n/*\n  Write a function that divides two numbers.\n\n  if the result is an integer, return the result.\n\n  if the result is greater than the smallest integer, return the smallest integer.\n\n  if the result is less than the largest integer, return the largest integer.\n\n  Examples\n  divide(5, 2) → 2\n  divide(5, 3) → 1\n  divide(2, 5) → 2\n  divide(0, 2) → 0\n  divide(-1, -2) → -1\n  */\nconst divide = (x, y) => {\n  const a = Math.min(x, y)\n  const b = Math.max(x, y)\n  return a / b\n}\n\n/*\n  Write a function that multiplies two numbers.\n\n  if the result is a negative number, return the negative number.\n\n  if the result is greater than the largest integer, return the largest integer.\n\n  if the result is less than the smallest integer, return the smallest integer.\n\n  Examples\n  multiply(5, 2) → 10\n  multiply(5, 3) → 15\n  multiply(2, 5) → 10\n  multiply(0, 2) → 0\n  multiply(-1, -2) → -2\n  */\nconst multiply = (x, y) => {\n  const a = Math.min(x, y)\n  const b = Math.max(x, y)\n  return a * b\n}\n\n/*\n  Write a function that averages two numbers.\n\n  if the result is a negative number, return the negative number.\n\n  if the result is greater than the largest integer, return the largest integer.\n\n  if the result is less than the smallest integer, return the smallest integer.\n\n  Examples\n  average(5, 2) → 3\n  average(5, 3) → 4\n  average(2, 5) → 3\n  average(0, 2) → 2\n  average(-1, -2) → -1\n  */\nconst average = (x, y) => {\n  const a = Math.min(x, y)\n  const b = Math.max(x, y)\n  return a + b\n}\n\n/*\n  Write a function that sums the elements of a list of numbers.\n\n  if the sum is greater than the largest integer, return the largest integer.\n\n  if the sum is less than the smallest integer, return the smallest integer.\n\n  Examples\n  sum([1, 2, 3]) → 6\n  sum([1, 2, 3, 4, 5, 6]) → 21\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, x) => acc + x)\n}\n\n/*\n  Write a function that adds the elements of two lists together.\n\n  if the sum is greater than the largest integer, return the largest integer.\n\n  if the sum is less than the smallest integer, return the smallest integer.\n\n  Examples\n  sum([1, 2, 3]) → 6\n  sum([1, 2, 3, 4, 5, 6]) → 21\n  */\nconst sumList = (lst1, lst2) => {\n  return sum(lst1.concat(lst2))\n}\n\n/*\n  Write a function that subtracts the elements of two lists.\n\n  if the sum is less than the smallest integer, return the smallest integer.\n\n  if the sum is greater than the largest integer, return the largest integer.\n\n  Examples\n  sum([1, 2, 3]) → 6\n  "}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 3 === 0 && a % 5 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 4 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 4 === 0 && a % 6 === 0 && a % 8 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 5 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7 * 11\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 5 === 0 && a % 7 === 0 && a % 11 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 6 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7 * 11 * 13\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 6 === 0 && a % 8 === 0 && a % 12 === 0 && a % 16 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 7 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 8 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 8 === 0 && a % 12 === 0 && a % 16 === 0 && a % 20 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 9 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 9 === 0 && a % 15 === 0 && a % 21 === 0 && a % 27 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 10 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 10 === 0 && a % 12 === 0 && a % 14 === 0 && a % 16 === 0 && a % 18 === 0 && a % 20 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 11 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 12 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 33\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 12 === 0 && a % 14 === 0 && a % 18 === 0 && a % 20 === 0 && a % 24 === 0 && a % 26 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 13 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 33 * 37\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 13 === 0 && a % 17 === 0 && a % 21 === 0 && a % 25 === 0 && a % 29 === 0;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 14 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 33 * 37 * 41\n  */\nconst isMultiplyPrime = (a) => {\n  return a.isPrime() && a % 14 === 0 && a % 18 === 0 && a % 22 === 0 && a % 26 === 0 && a % 30 === 0;\n};\n\n/*Write a function that returns true if the given number is"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  return n === 1? true : n === 2? x === 4 || x === 8 : n === 3? false :\n    (x % n) === 0? isElementaryWorldPower(x / n, n) : isElementaryWorldPower(x / n, n - 1) &&\n      isElementaryWorldPower(x / n, n);\n};\n\n// tests\nisElementaryWorldPower(1, 1); // true\nisElementaryWorldPower(2, 2); // true\nisElementaryWorldPower(8, 2); // true\nisElementaryWorldPower(3, 2); // false\nisElementaryWorldPower(3, 1); // false\nisElementaryWorldPower(5, 3); // false\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a < 1 || (a > 0 && (a % 1 === 0 && iscube(a // cube root\n ? Math.pow(a, 3) // cube root\n  : Math.pow(a, 2) // square root\n  )\n  )\n  )\n}\n\n// console.log(iscube(1))\n// console.log(iscube(2))\n// console.log(iscube(-1))\n// console.log(iscube(64))\n// console.log(iscube(180))\n// console.log(iscube(0))\n// console.log(iscube(7))\n// console.log(iscube(10))\n// console.log(iscube(20))\n// console.log(iscube(36))\n// console.log(iscube(100))\n// console.log(iscube(1000))\n// console.log(iscube(100000))\n// console.log(iscube(1000000))\n// console.log(iscube(1000000000))\n// console.log(iscube(1000000000000))\n// console.log(iscube(1000000000000000))\n// console.log(iscube(100000000000000000000))\n// console.log(iscube(100000000000000000000000))\n// console.log(iscube(100000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(iscube"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let result = 0;\n  let str = num.split(\"\").reverse();\n  let tmp = 0;\n  for (let i = 0; i < str.length; i++) {\n    tmp = str[i].charCodeAt();\n    result = tmp - (tmp % 16);\n    if (result === 2 || result === 4 || result === 6 || result === 8) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary += (decimal & 1)? '1' : '0';\n        decimal = decimal >>> 1;\n    }\n    binary += 'db';\n    return binary;\n}\n\n// https://www.reddit.com/r/dailyprogrammer/comments/4g9yvk/20150415_challenge_194_easy_intermediate_challenge/\nconst binaryToDecimal = (binary) => {\n    let decimal = 0;\n    for (let i = 0; i < binary.length - 2; i++) {\n        if (binary[i] === '1') {\n            decimal += Math.pow(2, i);\n        }\n    }\n    return decimal;\n}\n\nconsole.log(binaryToDecimal('db1111db'));\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  const l = s.length\n  if (l < 3) return false\n  let last = s[0]\n  let i = 1\n  while (i < l) {\n    if (s[i] === last) {\n      i++\n    } else {\n      last = s[i]\n      i++\n    }\n  }\n  return true\n}\n\nconsole.log(isFelicitous('a'))\nconsole.log(isFelicitous('aa'))\nconsole.log(isFelicitous('abcd'))\nconsole.log(isFelicitous('aabb'))\nconsole.log(isFelicitous('adb'))\nconsole.log(isFelicitous('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  const sum = grades.reduce((acc, curr) => acc + curr, 0);\n  const result = [];\n  for (let i = 0; i <= 5; i += 1) {\n    let current = sum / 5;\n    if (i === 0) {\n      current = 0;\n    }\n    if (current > 4.0) {\n      result.push('A+');\n    } else if (current > 3.7) {\n      result.push('A');\n    } else if (current > 3.3) {\n      result.push('A-');\n    } else if (current > 3.0) {\n      result.push('B+');\n    } else if (current > 2.7) {\n      result.push('B');\n    } else if (current > 2.3) {\n      result.push('B-');\n    } else if (current > 2.0) {\n      result.push('C+');\n    } else if (current > 1.7) {\n      result.push('C');\n    } else if (current > 1.3) {\n      result.push('C-');\n    } else if (current > 1.0) {\n      result.push('D+');\n    } else if (current > 0.7) {\n      result.push('D');\n    } else if (current > 0.0) {\n      result.push('D-');\n    } else {\n      result.push('E');\n    }\n    sum -= current;\n  }\n  return result;\n};\n\nconsole.log(numericLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n  if (string.length === 1) return false\n  for (let i = 1; i < string.length; i++) {\n    if (string.indexOf(string[i])!== -1) return false\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns the string\n  with all of the duplicate characters removed\n  Examples\n  removeDuplicates('Hello') == 'Hello'\n  removeDuplicates('Hello!') == 'Hello!'\n  removeDuplicates('abcdcba') == 'abcdcba'\n  removeDuplicates('aa') == 'aa'\n  removeDuplicates('aaaa') == 'aaaa'\n  removeDuplicates('kittens') == 'kittens'\n  removeDuplicates('aabbbcccc') == 'aabbbcccc'\n  removeDuplicates('aa') == 'aa'\n  removeDuplicates('abababab') == 'abababab'\n  */\nconst removeDuplicates = (string) => {\n  let array = string.split('')\n  let count = 0\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === array[i + 1]) {\n      array.splice(i, 2)\n      count++\n    }\n  }\n  return array.join('')\n}\n\n/*Write a function that takes a string and returns the string\n  with all of the characters lowercased\n  Examples\n  lowerCase('Hello') == 'hello'\n  lowerCase('AB-C') == 'ab-c'\n  lowerCase('AaBbCc') == 'aaabbcc'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase()\n}\n\n/*Write a function that takes a string and returns the string\n  with all of the characters uppercased\n  Examples\n  upperCase('Hello') == 'HELLO'\n  upperCase('AB-C') == 'AB-C'\n  upperCase('aBbCc') == 'AaBbCc'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase()\n}\n\n/*Write a function that takes two strings and returns the string\n  that is the concatenation of the two strings\n  Examples\n  concat('Hello', 'World') == 'HelloWorld'\n  concat('Hi', 'World') == 'HiWorld'\n  concat('Hi','') == 'Hi '\n  */\nconst concat = (first, second) => {\n  return first + second\n}\n\n/*Write a function that takes two strings and returns the string\n  that is the concatenation of the two strings\n  with the delimiter interspersed between the strings\n  Examples\n  concat('Hello', 'World','') == 'HelloWorld '\n  concat('Hi', 'World','') == 'HiWorld '\n  concat('Hi','', 'World','') == 'Hi World '\n  */\nconst concatWithDelimiter = (first, second, delimiter) => {\n  return first + delimiter + second\n}\n\n/*Write a function that takes two strings and returns the string\n  that is the concatenation of the two strings\n  with the delimiter interspersed between the strings\n  with the character at the end of the string changed to a space\n  Examples\n  concatWithSpace('Hello', 'World','') == 'HelloWorld '\n  concatWithSpace('Hi', 'World','') == 'HiWorld '\n  concatWithSpace('Hi','', 'World','') == 'Hi World '\n  */\nconst concatWithSpace = (first, second, delimiter) => {\n  return first + delimiter + second +''\n}\n\n/*Write a function that takes a string and returns the string\n  with the first letter uppercased\n  Examples\n  capitalize('Hello') == 'Hello'\n  capitalize('abcdcba') == 'Abcdcba'\n  capitalize('kittens') == 'Kittens'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/*Write a function that takes a string and returns the string\n  with the first letter lowercased\n  Examples\n  lowerCase('Hello') == 'hello'\n  lowerCase('abcdcba') == 'abcdcba'\n  lowerCase('kittens') == 'kittens'\n  */\nconst lowerCaseFirst = (string) => {\n  return string.slice(0, 1).toLowerCase() + string.slice(1)\n}\n\n/*Write a function that takes a string and returns the string\n  with the last character uppercased\n  Examples\n  capitalize('Hello') == 'Hello'\n  capitalize('abcdcba') == 'abcdcba'\n  capitalize('kittens') == 'Kittens'\n  */\nconst capitalizeLast = (string) => {\n  return string.slice(0, -1).toUpperCase() + string.slice(string.length - 1)\n}\n\n/*Write a function that takes a string and returns the string\n  with the last character lowercased\n  Examples\n  lowerCase('Hello') == 'hello'\n  lowerCase('abcdcba') == 'abcdcba'\n  lowerCase('kittens') == 'kittens'\n  */\nconst lowerCaseLast = (string) => {\n  return string.slice(0, -1).toLowerCase() + string.slice(string.length - 1)\n}\n\n/*Write a function that takes a string and returns the string\n  with all of the words lowercased\n  Examples\n  lowerCaseWords('Hello World') == 'hello world'\n  lowerCaseWords('Hello World!') == 'hello world!'\n  lowerCaseWords('Hello World!') == 'hello world!'\n  lowerCaseWords('Hello World!') == 'hello world!'\n  lowerCaseWords('Hello World!') == 'hello world!'\n  lowerCaseWords('Hello World!') == 'hello world!'\n  lowerCaseWords('Hello World!') == '"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let c = i.toString();\n    if (c.charAt(0) === '1' || c.charAt(n - 1) === '1') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst endOneEnd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let c = i.toString();\n    if (c.charAt(n - 1) === '1') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst count = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let c = i.toString();\n    if (c.charAt(0) === '1') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst cnt = (n) => {\n  return count(n);\n};\n\nconst oneEnd = (n) => {\n  return endOneEnd(n);\n};\n\nconst begin = (n) => {\n  return beginOneEnd(n);\n};\n\nconst twoEnd = (n) => {\n  return endTwoEnd(n);\n};\n\nconst count = (n) => {\n  return count(n);\n};\n\nconst count = (n) => {\n  return count(n);\n};\n\nconsole.log(begin(10));\nconsole.log(twoEnd(10));\nconsole.log(oneEnd(10));\nconsole.log(cnt(10));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let output = 0;\n  for (let i = N; i >= 0; i--) {\n    output += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return output;\n};\n\nconst main = () => {\n  const N = parseInt(process.argv[2]);\n  console.log(resolve(N));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n    if (lst.length === 0) {\n        return 0;\n    }\n    let start = 0;\n    let end = lst.length - 1;\n    while (start < end) {\n        let temp = lst[start];\n        if (temp % 2 === 0) {\n            lst[start] = lst[end];\n            lst[end] = temp;\n            start++;\n        }\n        end--;\n    }\n    return lst[start];\n};\n\n/*Given a non-empty list of strings lst. remove the duplicates in lst. \n\nThe order of the remaining elements is the same as the original order.\n\n\n  Examples:\n      removeDuplicates(\"RJ\");\n      removeDuplicates(\"A\", \"R\", \"J\", \"A\");\n  */\nconst removeDuplicates = (lst) => {\n    let index = 0;\n    while (index < lst.length - 1) {\n        let current = lst[index];\n        let next = lst[index + 1];\n        if (current === next) {\n            lst.splice(index, 1);\n        } else {\n            index++;\n        }\n    }\n    return lst;\n};\n\n/*Given a non-empty list of strings lst. remove the empty elements in lst. \n\nThe order of the remaining elements is the same as the original order.\n\n\n  Examples:\n      removeEmpty(\"RJ\");\n      removeEmpty(\"\", \"R\", \"J\", \"A\");\n  */\nconst removeEmpty = (lst) => {\n    let index = 0;\n    while (index < lst.length - 1) {\n        let current = lst[index];\n        let next = lst[index + 1];\n        if (current === \"\" || next === \"\") {\n            lst.splice(index, 1);\n        } else {\n            index++;\n        }\n    }\n    return lst;\n};\n\n/*Given a non-empty list of strings lst. return the first string that occurs in lst.\n\nIf no string occurs in lst, return an empty string \"\".\n\n\n  Examples:\n      contains(\"RJ\", \"R\");\n      contains(\"RJ\", \"A\");\n      contains(\"\", \"\");\n  */\nconst contains = (lst, s) => {\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === s) {\n            return s;\n        }\n    }\n    return \"\";\n};\n\n/*Given a non-empty list of strings lst. return the first string that does not occur in lst.\n\nIf no string does not occur in lst, return an empty string \"\".\n\n\n  Examples:\n      notContains(\"RJ\", \"A\");\n      notContains(\"RJ\", \"R\");\n      notContains(\"\", \"\");\n  */\nconst notContains = (lst, s) => {\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]!== s) {\n            return lst[i];\n        }\n    }\n    return \"\";\n};\n\n/* Given a non-empty list of numbers lst. return the number that appears the largest number in lst.\n\n  Examples:\n      max(4, 2, 5, 9, 3);\n      max(4, 2, 5, 9, 3, 1);\n  */\nconst max = (lst) => {\n    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex = i;\n        }\n    }\n    return max;\n};\n\n/* Given a non-empty list of numbers lst. return the number that appears the smallest number in lst.\n\n  Examples:\n      min(4, 2, 5, 9, 3);\n      min(4, 2, 5, 9, 3, 1);\n  */\nconst min = (lst) => {\n    let min = 0;\n    let minIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n            minIndex = i;\n        }\n    }\n    return min;\n};\n\n/* Given two lists of numbers lst1 and lst2, return the intersection of lst1 and lst2.\n\n  Examples:\n      intersection([1, 2, 3, 4], [2, 3, 4, 5]);\n      intersection([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]);\n  */\nconst intersection = (lst1, lst2) => {\n    let result = [];\n    for (let i = 0; i < lst1.length; i++) {\n        if (contains(lst2, lst1[i])) {\n            result.push(lst1[i]);\n        }\n    }\n    return result;\n};\n\n/* Given two lists of numbers lst1 and lst2, return the union of lst1 and lst2.\n\n  Examples:\n      union([1, 2, 3, 4], [2, 3, 4, 5]);\n      union([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]);\n  */\nconst union = (lst1, lst2) => {\n    let result = [];\n    for (let i = 0; i < lst1.length; i++) {\n        if (!contains(lst2, lst1[i])) {\n            result.push(lst1[i]);\n        }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        if (!contains(lst1, lst2[i])) {\n            result.push(lst2[i]);\n        }\n    }\n    return result;\n};\n\nmodule.exports = {\n    lend,\n    removeDuplicates,\n    remove"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  let ret = '';\n  for (let i = 0; i < words.length; i++) {\n    let temp = words[i].split('');\n    for (let j = 0; j < temp.length; j++) {\n      if (j === 0) {\n        ret += temp[j];\n      } else {\n        ret += temp[j].charAt(j % temp[j].length);\n      }\n    }\n    ret +='';\n  }\n  return ret.substr(0, ret.length - 1);\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  const list = flatten(lst);\n  const rows = list.sort((a, b) => a[0] - b[0]);\n  const rows = rows.sort((a, b) => b[0] - a[0]);\n  const coords = [];\n  for (let row of rows) {\n    const columns = list.filter((row) => row[0] === row[1]);\n    columns.sort((a, b) => b[1] - a[1]);\n    for (let column of columns) {\n      if (column[0] === x) {\n        coords.push([row[0], column[1]]);\n      }\n    }\n  }\n  return coords;\n};\n\nconst flatten = (list) => [...list].reduce((a, b) => a.concat(b), []);\n\nmodule.exports = catchRow;<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if(!array.length) return array;\n\n  // sort array\n  let temp = array.slice();\n  let sorted = temp.slice();\n  let sum = 0;\n\n  // find sum\n  for(let i = 0; i < temp.length; i++){\n    sum += temp[i];\n  }\n\n  // sort array\n  if(sum % 2 === 1){\n    sorted.sort(function(a, b){\n      return a - b;\n    });\n  } else {\n    sorted.sort(function(a, b){\n      return b - a;\n    });\n  }\n\n  return sorted;\n}\n\n// test\nsortArray([2, 4, 3, 0, 1, 5]);\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  return rotate(s, 2).toUpperCase()\n}\n\n/*\n  Create a function rotate that takes a string and returns a string\n  containing the alphabet rotated to the left by two spaces.\n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  rotate('asdfghjkl') returns 'lhijklj'\n  rotate('gf') returns 'fj'\n  rotate('ix') returns 'hx'\n  rotate('et') returns 't'\n  rotate('hi') returns 'ih'\n  rotate('e') returns's'\n  */\nconst rotate = (s, times) => {\n  let rot = ''\n  for(let i = 0; i < times; i++) {\n    rot += s.charAt(i)\n  }\n  return rot\n}\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  return rotate(s, -2).toLowerCase()\n}\n\n/*\n  Create a function shift that takes a string as an argument and\n  returns a string containing the alphabet shifted by two spaces.\n  The alphabet should be shifted in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shift('asdfghjkl') returns 'ijklj'\n  shift('gf') returns 'jf'\n  shift('et') returns's'\n  shift('hx') returns 'e'\n  */\nconst shift = (s) => {\n  return rotate(s, -2).toUpperCase()\n}\n\n/*\n  Create a function shuffle that takes a string as an argument and\n  returns a string containing the alphabet randomly shuffled.\n  The alphabet should be shuffled in a manner such that the letters \n  are shuffled in a random order.\n  For example:\n  shuffle('asdfghjkl') returns 'qywstbvn'\n  shuffle('gf') returns 'bvsf'\n  shuffle('et') returns 'x'\n  shuffle('hx') returns 'e'\n  */\nconst shuffle = (s) => {\n  let shuffled = []\n  for(let i = 0; i < s.length; i++) {\n    shuffled.push(s.charAt(Math.floor(Math.random() * s.length)))\n  }\n  return shuffled.join('')\n}\n\nmodule.exports = {\n  rotate,\n  decrypt,\n  shift,\n  shuffle\n}\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  const getIndexOf = (elem) => {\n    const idx = lst.indexOf(elem);\n    return idx > -1? idx : null;\n  }\n\n  if (lst.length === 0) {\n    return null;\n  }\n\n  let nextSmallest = lst[0];\n  let prevSmallest = nextSmallest;\n  \n  for (let i = 1; i < lst.length; i++) {\n    const elem = lst[i];\n    if (getIndexOf(elem) === null) {\n      break;\n    }\n    if (elem < prevSmallest) {\n      nextSmallest = elem;\n      prevSmallest = elem;\n    }\n  }\n\n  return nextSmallest;\n}\n\nnextSmallest([1, 2, 3, 4, 5]); // => 2\nnextSmallest([5, 1, 4, 3, 2]); // => 2\nnextSmallest([1, 1]); // => null\nnextSmallest([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]); // => 5\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  const isBlase = (s) => {\n    let i = 0,\n        j = 0;\n\n    while (i < s.length) {\n      if (s[i] === '.') {\n        j++;\n      } else if (s[i] === '?') {\n        j++;\n      } else if (s[i] === '!') {\n        j++;\n      }\n      i++;\n    }\n    return j >= 2;\n  };\n  return isBlase(S);\n};\n\n// console.log(isBlase(\"Hello world\"));\n// console.log(isBlase(\"The sky is blue. The sun is shining. I love this weather\"));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0) {\n    return y === 0 && z === 0\n  }\n\n  if (y === 0) {\n    return x === 0 && z === 0\n  }\n\n  if (z === 0) {\n    return x === y\n  }\n\n  return Math.abs(x - y) <= Math.abs(x - z)\n}\n\n// Tests\nconsole.log(anyInt(5, 2, 7))\nconsole.log(anyInt(3, 2, 2))\nconsole.log(anyInt(3, -2, 1))\nconsole.log(anyInt(3.6, -2.2, 2))\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let s = message.toLowerCase();\n  let i = 0;\n  let k = 0;\n  while (i < s.length) {\n    let char = s[i];\n    if (char ==='') {\n      i += 2;\n    } else if (char.match(/[a-z]/)) {\n      s[i] = s[i + 1];\n      s[i + 1] = char;\n      i += 2;\n    } else {\n      i++;\n    }\n  }\n  return s;\n};\n\nmodule.exports = encode;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = () => {\n    const primes = [2]\n    for (let i = 3; i < 1e9; i += 2) {\n      const isPrime = (n) => {\n        for (let j = 0; j < primes.length; j++) {\n          if (n % primes[j] === 0) {\n            return false\n          }\n        }\n        return true\n      }\n      if (isPrime(i)) {\n        primes.push(i)\n      }\n    }\n    return primes\n  }\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    let x = 0\n    for (let j = 0; j < 10; j++) {\n      x = x * 10 + parseInt(lst[i] / prime()[j])\n    }\n    result.push(x)\n  }\n  return result.reduce((prev, curr) => prev + curr)\n}\n\nconsole.log(prime(1))\nconsole.log(prime(2))\nconsole.log(prime(3))\nconsole.log(prime(4))\nconsole.log(prime(5))\nconsole.log(prime(6))\nconsole.log(prime(7))\nconsole.log(prime(8))\nconsole.log(prime(9))\nconsole.log(prime(10))\nconsole.log(prime(11))\nconsole.log(prime(12))\nconsole.log(prime(13))\nconsole.log(prime(14))\nconsole.log(prime(15))\nconsole.log(prime(16))\nconsole.log(prime(17))\nconsole.log(prime(18))\nconsole.log(prime(19))\nconsole.log(prime(20))\nconsole.log(prime(21))\nconsole.log(prime(22))\nconsole.log(prime(23))\nconsole.log(prime(24))\nconsole.log(prime(25))\nconsole.log(prime(26))\nconsole.log(prime(27))\nconsole.log(prime(28))\nconsole.log(prime(29))\nconsole.log(prime(30))\nconsole.log(prime(31))\nconsole.log(prime(32))\nconsole.log(prime(33))\nconsole.log(prime(34))\nconsole.log(prime(35))\nconsole.log(prime(36))\nconsole.log(prime(37))\nconsole.log(prime(38))\nconsole.log(prime(39))\nconsole.log(prime(40))\nconsole.log(prime(41))\nconsole.log(prime(42))\nconsole.log(prime(43))\nconsole.log(prime(44))\nconsole.log(prime(45))\nconsole.log(prime(46))\nconsole.log(prime(47))\nconsole.log(prime(48))\nconsole.log(prime(49))\nconsole.log(prime(50))\nconsole.log(prime(51))\nconsole.log(prime(52))\nconsole.log(prime(53))\nconsole.log(prime(54))\nconsole.log(prime(55))\nconsole.log(prime(56))\nconsole.log(prime(57))\nconsole.log(prime(58))\nconsole.log(prime(59))\nconsole.log(prime(60))\nconsole.log(prime(61))\nconsole.log(prime(62))\nconsole.log(prime(63))\nconsole.log(prime(64))\nconsole.log(prime(65))\nconsole.log(prime(66))\nconsole.log(prime(67))\nconsole.log(prime(68))\nconsole.log(prime(69))\nconsole.log(prime(70))\nconsole.log(prime(71))\nconsole.log(prime(72))\nconsole.log(prime(73))\nconsole.log(prime(74))\nconsole.log(prime(75))\nconsole.log(prime(76))\nconsole.log(prime(77))\nconsole.log(prime(78))\nconsole.log(prime(79))\nconsole.log(prime(80))\nconsole.log(prime(81))\nconsole.log(prime(82))\nconsole.log(prime(83))\nconsole.log(prime(84))\nconsole.log(prime(85))\nconsole.log(prime(86))\nconsole.log(prime(87))\nconsole.log(prime(88))\nconsole.log(prime(89))\nconsole.log(prime(90))\nconsole.log(prime(91))\nconsole.log(prime(92))\nconsole.log(prime(93))\nconsole.log(prime(94))\nconsole.log(prime(95))\nconsole.log(prime(96))\nconsole.log(prime(97))\nconsole.log(prime(98))\nconsole.log(prime(99))\nconsole.log(prime(100))\nconsole.log(prime(101))\nconsole.log(prime(102))\nconsole.log(prime(103))\nconsole.log(prime(104))\nconsole.log(prime(105))\nconsole.log(prime(106))\nconsole.log(prime(107))\nconsole.log(prime(108))\nconsole.log(prime(109))\nconsole.log(prime(110))\nconsole.log(prime(111))\nconsole.log(prime(112))\nconsole"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  let checkCase = true;\n  for (let i = 0; i < dict.length; i++) {\n    if (!isString(dict[i])) {\n      checkCase = false;\n      break;\n    }\n    if (dict[i].toLowerCase()!== dict[i]) {\n      checkCase = false;\n      break;\n    }\n  }\n  return checkCase;\n};\n\nconst isString = (str) => typeof str ==='string';\n\nconst isInteger = (str) => typeof str === 'number' && str % 1 === 0;\n\nconst isBoolean = (str) => str === 'true' || str === 'false';\n\nconst isObject = (obj) => typeof obj === 'object' && obj!== null;\n\nconst isArray = (obj) => obj instanceof Array;\n\nconst isFunction = (obj) => typeof obj === 'function';\n\nconst isArrayContaining = (arr, elem) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === elem) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isArrayContainingObject = (arr, obj) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === obj) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isArrayContainingString = (arr, str) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === str) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isObjectContaining = (obj, key, value) => {\n  return obj[key] === value;\n};\n\nconst isObjectContainingString = (obj, key, value) => {\n  return obj[key] === value;\n};\n\nconst isArrayContainingArray = (arr, arr2) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr2) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isObjectContainingArray = (obj, arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (obj[arr[i]] === arr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isObjectContainingStringArray = (obj, arr) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (obj[arr[i]] === arr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = {\n  determineDictCase,\n  isArray,\n  isArrayContaining,\n  isArrayContainingObject,\n  isArrayContainingString,\n  isBoolean,\n  isFunction,\n  isInteger,\n  isObject,\n  isObjectContaining,\n  isObjectContainingString,\n  isObjectContainingArray,\n  isObjectContainingStringArray,\n  isString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  const primes = [2,3,5,7,11,13,17,19];\n  const candidates = primes.map((p) => n - p);\n  const nums = candidates.filter((c) => c % 2 === 0 && candidates.indexOf(c) === -1);\n  const firstPrimes = primes.filter((p) => primes.indexOf(p) === -1);\n  return firstPrimes.concat(nums);\n}\n\nmodule.exports = considerUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  const n = a + b\n  const c = n / 10\n  const d = n % 10\n  return (c * c) + (d * d)\n}\n\nconsole.log(breed(148, 412))\nconsole.log(breed(19, 28))\nconsole.log(breed(2020, 1851))\nconsole.log(breed(14, -15))\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n    let upper = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            upper++;\n        }\n    }\n    return upper;\n};\n\nconsole.log(considerUpper('aBCdEf'));\nconsole.log(considerUpper('abcdefg'));\nconsole.log(considerUpper('dBBE'));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  const number = parseInt(value, 10);\n  if (isNaN(number)) {\n    return 0;\n  }\n\n  if (number >= 0) {\n    return number;\n  }\n\n  if (number === -Infinity) {\n    return -number;\n  }\n\n  const absNumber = Math.abs(number);\n\n  let integer = absNumber;\n  const fraction = absNumber - integer;\n\n  let divisor = 1;\n\n  while (fraction > 0.5) {\n    integer++;\n    fraction -= 1;\n    divisor *= 10;\n  }\n\n  return integer * divisor;\n};\n\nmodule.exports = closeInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  if(n === 1) return [1];\n  let even = n % 2 === 0;\n  let evenLen = n;\n  let res = [];\n  while(n > 0) {\n    let num = Math.ceil(n / 2);\n    res.push(num);\n    n = n - num;\n    if(even) {\n      evenLen = evenLen - num;\n    }\n    else {\n      evenLen = evenLen + num;\n    }\n  }\n  return res;\n};\n\n// TESTS\n[\n  [3, [1,1,1], 3],\n  [4, [2,1,1,1], 3],\n  [3, [1,2,1], 2],\n  [3, [2,1,2], 2],\n  [2, [1,2], 1]\n].forEach(([n, res, expected]) => {\n  console.log(`[${n}] ${res} = ${expected}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  let words = s.split(/[,|\\s]+/);\n  return words;\n};\n\n/*\n  Your task is to write a function that takes a string as input and returns a list of\n  the unique words in that string.\n  \n  For example:\n  uniqueWords(\"Hello, my name is John, and I am here.\") == [\"Hello\", \"my\", \"name\", \"is\", \"John\", \"and\", \"I\", \"am\", \"here\"]\n  */\nconst uniqueWords = (s) => {\n  let words = s.split(/[,|\\s]+/);\n  return words.reduce((a, b) => {\n    if (a.indexOf(b) === -1) a.push(b);\n    return a;\n  }, []);\n};\n\nmodule.exports = {\n  bibleString: bibleString,\n  uniqueWords: uniqueWords\n};\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const xs = Array.from({ length: x }, (_, i) => i);\n  const ys = Array.from({ length: y }, (_, i) => i);\n  const max = xs.reduce((prev, current) => Math.max(prev, current), 0);\n  const min = ys.reduce((prev, current) => Math.min(prev, current), 0);\n\n  return xs.reduce((prev, current, i) => Math.min(Math.max(prev, current), current), max)\n}\n\n// console.log(chooseNum(10, 10));\n// console.log(chooseNum(12, 15));\n// console.log(chooseNum(13, 12));\n\n// const test_data = [\n//   [1, 2, 3],\n//   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n\n  const avg = (n + m) / 2;\n  return Math.round(avg);\n}\n\nconsole.log(`${roundedAvg(1, 5)}`);\nconsole.log(`${roundedAvg(7, 5)}`);\nconsole.log(`${roundedAvg(10, 20)}`);\nconsole.log(`${roundedAvg(20, 33)}`);\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  let ans = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      continue;\n    }\n    while (digit > 0) {\n      ans.push(digit);\n      digit = Math.floor(digit / 10);\n    }\n  }\n  return ans;\n};\n\nexport default aloneDigit;<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n    arr.sort((a, b) => {\n        const d1 = (a * 10) + 1\n        const d2 = (b * 10) + 1\n        return d1 - d2\n    })\n    \n    arr.reverse()\n    return arr.map((x) => {\n        return byName[x]\n    })\n}\n\nconst byName = (arr) => {\n    arr.sort((a, b) => {\n        const n1 = a.toUpperCase()\n        const n2 = b.toUpperCase()\n        return n1.localeCompare(n2)\n    })\n    \n    return arr\n}\n\nconst main = () => {\n    const test = [2, 1, 1, 4, 5, 8, 2, 3]\n    console.log(byDuration(test))\n    console.log(byName(test))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let factors = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factors.push(i)\n    } else {\n      factors.push(1 + n / i)\n    }\n  }\n  return factors\n}\n\nf(5)\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindrome = [0, 0]\n  for (let i = 1; i <= n; i++) {\n    const num = i\n    const reverse = reverseNumber(num)\n    if (num === reverse) {\n      if (num % 2 === 0) {\n        evenOddPalindrome[0]++\n      } else {\n        evenOddPalindrome[1]++\n      }\n    }\n  }\n  return evenOddPalindrome\n}\n\nconst reverseNumber = (num) => {\n  const n = parseInt(num, 10)\n  const reverse = []\n  for (let i = 0; i < n; i++) {\n    reverse.push(n - 1 - i)\n  }\n  return reverse.join('')\n}\n\nexport { evenOddPalindrome }\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i]);\n    if (num > 0) {\n      count++;\n    } else if (num < 0) {\n      count += 2;\n      num = Math.abs(num);\n    }\n    if (count > 0) {\n      return count;\n    }\n  }\n  return count;\n};\n\nexport { considerNums };\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) {\n    return true\n  }\n  let lastElement = arr[arr.length - 1]\n  let lastIndex = arr.indexOf(lastElement)\n  for (let i = 0; i < arr.length - 1; i++) {\n    let index = arr.indexOf(arr[i])\n    if (lastIndex < index) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default affectOneTestis<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  const sum1 = lst1.reduce((acc, x) => x % 2? (acc + x) % 2? sum1 : sum2 : sum1, 0);\n  const sum2 = lst2.reduce((acc, x) => x % 2? (acc + x) % 2? sum2 : sum1 : sum2, 0);\n  return sum1 === sum2;\n};\n\nexport default central;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const words = test.split(' ')\n  const counts = {}\n  for(let i = 0; i < words.length; i++) {\n    const letter = words[i]\n    if(counts[letter] === undefined) {\n      counts[letter] = 0\n    }\n    counts[letter]++\n  }\n  const ret = {}\n  for(let key in counts) {\n    if(counts[key] > ret[key]) {\n      ret[key] = counts[key]\n    }\n  }\n  return ret\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  let result = \"\";\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i])!== -1) {\n      result += s[i];\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcde', 'bcd'],\n  ['abcdedcba', 'acdef'],\n  ['abcdedcba', 'bcdef'],\n  ['abcdedcba', 'cdef'],\n  ['abcdedcba', 'adef'],\n  ['abcdedcba', 'af'],\n  ['abcdedcba', 'bf'],\n  ['abcdedcba', 'cf'],\n  ['abcdedcba', 'df'],\n  ['abcdedcba', 'ef'],\n  ['abcdedcba', 'f'],\n  ['abcdedcba', 'g'],\n  ['abcdedcba', 'h'],\n  ['abcdedcba', 'ij'],\n  ['abcdedcba', 'kl'],\n  ['abcdedcba','m'],\n  ['abcdedcba', 'n'],\n  ['abcdedcba', 'o'],\n  ['abcdedcba', 'p'],\n  ['abcdedcba', 'q'],\n  ['abcdedcba', 'r'],\n  ['abcdedcba','s'],\n  ['abcdedcba', 't'],\n  ['abcdedcba', 'u'],\n  ['abcdedcba', 'v'],\n  ['abcdedcba', 'w'],\n  ['abcdedcba', 'x'],\n  ['abcdedcba', 'y'],\n  ['abcdedcba', 'z'],\n  ['abcdedcba', 'a'],\n  ['abcdedcba', 'b'],\n  ['abcdedcba', 'c'],\n  ['abcdedcba', 'd'],\n  ['abcdedcba', 'e'],\n  ['abcdedcba', 'f'],\n  ['abcdedcba', 'g'],\n  ['abcdedcba', 'h'],\n  ['abcdedcba', 'i'],\n  ['abcdedcba', 'j'],\n  ['abcdedcba', 'k'],\n  ['abcdedcba', 'l'],\n  ['abcdedcba','m'],\n  ['abcdedcba', 'n'],\n  ['abcdedcba', 'o'],\n  ['abcdedcba', 'p'],\n  ['abcdedcba', 'q'],\n  ['abcdedcba', 'r'],\n  ['abcdedcba','s'],\n  ['abcdedcba', 't'],\n  ['abcdedcba', 'u'],\n  ['abcdedcba', 'v'],\n  ['abcdedcba', 'w'],\n  ['abcdedcba', 'x'],\n  ['abcdedcba', 'y'],\n  ['abcdedcba', 'z'],\n  ['abcdedcba', '0'],\n  ['abcdedcba', '1'],\n  ['abcdedcba', '2'],\n  ['abcdedcba', '3'],\n  ['abcdedcba', '4'],\n  ['abcdedcba', '5'],\n  ['abcdedcba', '6'],\n  ['abcdedcba', '7'],\n  ['abcdedcba', '8'],\n  ['abcdedcba', '9'],\n  ['abcdedcba', '?'],\n  ['abcdedcba', '!'],\n  ['abcdedcba', '-'],\n  ['abcdedcba', '+'],\n  ['abcdedcba', '_'],\n  ['abcdedcba','']\n];\n\nconst solutions = test.map(([s, c]) => invertDelete(s, c));\n\nconsole.log(solutions);\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let arr = lst[i].split(\"\");\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j].length > 1) {\n        if (parseInt(arr[j]) % 2 === 1) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  const len = nums.length\n  const minSum = Math.min(...nums)\n\n  const sum = (i, j) => (i <= j)? nums[i] + nums[j] : nums[j] + nums[i]\n\n  return sum(0, len - 1) - minSum\n}\n\nconsole.log(minuteSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minuteSubArraySum([-1, -2, -3]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  const length = grid.length\n  const n = length\n  const bucketCapacity = capacity\n  const buckets = []\n  let total = 0\n  for (let i = 0; i < n; i++) {\n    const row = grid[i]\n    const rowLength = row.length\n    const nBuckets = rowLength\n    for (let j = 0; j < nBuckets; j++) {\n      const bucket = { capacity: bucketCapacity }\n      buckets.push(bucket)\n      row[j] = true\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    const row = grid[i]\n    const rowLength = row.length\n    const nBuckets = rowLength\n    for (let j = 0; j < nBuckets; j++) {\n      const bucket = buckets[j]\n      if (row[j]) {\n        const w = bucket.capacity\n        const n = bucket.capacity\n        total += n\n        row[j] = false\n        for (let k = 0; k < n; k++) {\n          const idx = i + k\n          const nextIdx = i + (k + 1)\n          const rowNext = grid[nextIdx]\n          const rowNextLength = rowNext.length\n          for (let l = 0; l < rowNextLength; l++) {\n            const nextBucket = buckets[l]\n            nextBucket.capacity += w\n            rowNext[l] = false\n          }\n        }\n      }\n    }\n  }\n  return total\n}\n\nconst num = [\n  [0,0,1,0],\n  [0,1,0,0],\n  [1,1,1,1]\n]\n\nconsole.log(soapFill(num, 1))\nconsole.log(soapFill(num, 2))\nconsole.log(soapFill(num, 3))\nconsole.log(soapFill(num, 4))\nconsole.log(soapFill(num, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        while (arr[i] > 0) {\n            count++;\n            arr[i] = arr[i] >> 1;\n        }\n        result.push(count);\n    }\n    return result.sort((a, b) => a - b);\n}\n\nexport {sortArray}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n    if (!s) {\n        return [];\n    }\n    const words = s.split(' ');\n    let l = 0,\n        c = 0;\n    for (let i = 0; i < words.length; i++) {\n        const len = words[i].length;\n        if (c < n) {\n            l += len;\n            if (c + len <= n) {\n                c += len;\n                continue;\n            }\n            words[i] = words[i].substring(0, len - n + c);\n            c = n;\n        }\n        if (c === n) {\n            l += len;\n        }\n        words[i] = words[i].substring(0, len - n + c);\n        c = n;\n    }\n    return words.filter(word => word.length === l);\n}\n\n/*\nGiven a string s and a dictionary of words dict, \nyou have to implement a function that returns all words in the string s that are in the dictionary.\n\nThe function should return all the words in the string s that are in the dictionary.\n\nExample:\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\"]) ==> [\"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\"]) ==> [\"Hello\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\"]) ==> [\"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\", \"world\", \"Hello\", \"world\", \"Hello\", \"world\"]) ==> [\"Hello\", \"world\", \"Hello\", \"world\"]\nchoiceDict(\"Hello world\", [\"Hello\","}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  const len = word.length\n  let prev = word.charAt(0)\n  let result = ''\n  let index = 1\n\n  while (index < len) {\n    let next = word.charAt(index)\n    if (prev === 'a' && next === 'e' || prev === 'i' && next === 'o' || prev === 'u' && next === 'y') {\n      result = word.substr(index, 2)\n    }\n    prev = next\n    index++\n  }\n  return result\n}\n\nconsole.log(catchClosestVowel('ab'))\nconsole.log(catchClosestVowel('quick'))\nconsole.log(catchClosestVowel('yogurt'))\nconsole.log(catchClosestVowel('FULL'))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  const numOfOpen = lst.reduce((prev, cur) => (prev + (cur === '('? 1 : 0)), 0)\n  return lst.length > 1 && lst.length % 2 === 0 && numOfOpen === 0\n}\n\nconst catchParens2 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count % 2 === 0\n}\n\nconst catchParens3 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 0\n}\n\nconst catchParens4 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 1\n}\n\nconst catchParens5 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 2\n}\n\nconst catchParens6 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 3\n}\n\nconst catchParens7 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 4\n}\n\nconst catchParens8 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 5\n}\n\nconst catchParens9 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 6\n}\n\nconst catchParens10 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 7\n}\n\nconst catchParens11 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 8\n}\n\nconst catchParens12 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 9\n}\n\nconst catchParens13 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 10\n}\n\nconst catchParens14 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 11\n}\n\nconst catchParens15 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 12\n}\n\nconst catchParens16 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 13\n}\n\nconst catchParens17 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 14\n}\n\nconst catchParens18 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 15\n}\n\nconst catchParens19 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 16\n}\n\nconst catchParens20 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 17\n}\n\nconst catchParens21 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 18\n}\n\nconst catchParens22 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 19\n}\n\nconst catchParens23 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 20\n}\n\nconst catchParens24 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 21\n}\n\nconst catchParens25 = (lst) => {\n  const count = lst.reduce((prev, cur) => prev + (cur === '('? 1 : 0), 0)\n  return count === 22\n}\n\nconst catchParens26 = (lst) => {\n  const count"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  let max = arr[0];\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) max = arr[i];\n  }\n  return arr.slice(0, k).sort((a, b) => a - b);\n};\n\nexport { maximal };\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let s = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      s += lst[i];\n    }\n  }\n  return s;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < len; i++) {\n    sum += (Math.floor(arr[i] / 10)) + (Math.floor(arr[i] % 10));\n  }\n  return sum;\n};\n\nexport {lendElement};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  const collatz = (n) => {\n    const collatzStep = (n) => {\n      const next = n * 2 % n;\n      return next === 1? 1 : (next === n - 1? n - 1 : collatzStep(next));\n    };\n    return next => collatzStep(next);\n  };\n\n  const res = [];\n  while (n > 1) {\n    if (collatz(n).length > 0) {\n      res.push(collatz(n).pop());\n    }\n    n = collatz(n).length;\n  }\n  return res;\n};\n\nexport { catchOddCollatz };<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date ||!date.length ||!date.length) {\n    return false;\n  }\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const dateArr = date.split(\"-\");\n  const day = dateArr[2].split(\"-\");\n  const month = months[parseInt(dateArr[1]) - 1];\n  const dayArr = day.split(\"-\");\n  const year = dayArr[2];\n  const yearArr = year.split(\" \");\n  const dayCount = month.length < 3? 31 : 30;\n  const dayCountArr = dayCount.toString().split(\"-\");\n  const dayCountArr = dayCountArr[1].split(\" \");\n  if (dateArr[0] < 10 || dateArr[0] > 32) {\n    return false;\n  }\n  if (dateArr[1] < 10 || dateArr[1] > 32) {\n    return false;\n  }\n  if (dateArr[2] < 10 || dateArr[2] > 32) {\n    return false;\n  }\n  if (dateArr[1] < 1 || dateArr[1] > 12) {\n    return false;\n  }\n  if (dateArr[0] < 1 || dateArr[0] > 31) {\n    return false;\n  }\n  if (dateArr[1] < 1 || dateArr[1] > 31) {\n    return false;\n  }\n  if (dateArr[2] < 1 || dateArr[2] > 31) {\n    return false;\n  }\n  if (dateArr[1] == 1 && month == \"February\" && dayCountArr[1] > 29) {\n    return false;\n  }\n  if (dateArr[1] == 2 && month == \"March\" && dayCountArr[1] > 30) {\n    return false;\n  }\n  if (dateArr[1] == 3 && month == \"April\" && dayCountArr[1] > 31) {\n    return false;\n  }\n  if (dateArr[1] == 5 && month == \"June\" && dayCountArr[1] > 30) {\n    return false;\n  }\n  if (dateArr[1] == 7 && month == \"July\" && dayCountArr[1] > 31) {\n    return false;\n  }\n  if (dateArr[1] == 8 && month == \"August\" && dayCountArr[1] > 31) {\n    return false;\n  }\n  if (dateArr[1] == 10 && month == \"October\" && dayCountArr[1] > 30) {\n    return false;\n  }\n  if (dateArr[1] == 12 && month == \"December\" && dayCountArr[1] > 31) {\n    return false;\n  }\n  if (yearArr[0] < 1900 || yearArr[0] > 2100) {\n    return false;\n  }\n  if (yearArr[1] < 0 || yearArr[1] > 12) {\n    return false;\n  }\n  return true;\n};\n\nconsole.log(validDate(\"03-11-2000\"));\nconsole.log(validDate(\"15-01-2012\"));\nconsole.log(validDate(\"04-0-2040\"));\nconsole.log(validDate(\"06-04-2020\"));\nconsole.log(validDate(\"06/04/2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  const isWord = (c) => chars.indexOf(c) >= 0;\n  const words = txt.split(/\\s+/g);\n  const oddLetters = [];\n  for (let i = 0; i < words.length; i += 1) {\n    const word = words[i];\n    const lowerCases = word.toLowerCase().split('');\n    const count = lowerCases.filter(isWord).length;\n    if (count % 2 === 1) {\n      oddLetters.push(word);\n    }\n  }\n  return oddLetters;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  let seen = new Set()\n  return lst.every((num) => {\n    if (seen.has(num)) {\n      return false\n    } else {\n      seen.add(num)\n      return true\n    }\n  })\n}\n\nexport default isScreen\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const overlap = interval1.end - interval1.start;\n  const overlap2 = interval2.end - interval2.start;\n  const isPrime = n => n > 1 &&!(n % 2);\n  if (interval1.end < interval2.start || interval2.end < interval1.start) {\n    return 'NO';\n  } else if (interval1.end >= interval2.end) {\n    return `${overlap2}`;\n  } else if (interval2.end >= interval1.end) {\n    return `${overlap}`;\n  } else if (isPrime(overlap) && isPrime(overlap2)) {\n    return 'YES';\n  }\n  return 'NO';\n};\n\nconsole.log(overlap((1, 2), (2, 3)));\nconsole.log(overlap((-1, 1), (0, 4)));\nconsole.log(overlap((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const sums = arr.map(n => n * Math.sign(n));\n  return sums.reduce((sum, x) => sum + x, 0);\n};\n\nconsole.log(goadSigns([-1, -2, 2, -4]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const gridLength = grid.length\n  const matrix = grid.map((row, index) => row.slice())\n  const minPath = [0, 1, 1]\n  const currentCell = 1\n  while (currentCell < gridLength) {\n    const adjacentCells = matrix[currentCell - 1][0].concat(matrix[currentCell - 1][1]).concat(matrix[currentCell + 1][0]).concat(matrix[currentCell + 1][1])\n    const maxIndex = adjacentCells.reduce((a, b) => Math.max(a, b), 0)\n    const newMinPath = [currentCell, maxIndex]\n    for (let i = 0; i < gridLength; i++) {\n      if (adjacentCells[i] > 0) {\n        const newPath = [adjacentCells[i], currentCell, newMinPath]\n        if (adjacentCells[i] > minPath[2]) {\n          minPath = newPath\n        }\n      }\n    }\n    currentCell++\n  }\n  return minPath\n}\n\nconsole.log(minutePath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\nconsole.log(minutePath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    const result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    const result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [1];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [1];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [];\n    let value = 1;\n    let i = 1;\n    while (i <= n) {\n        result.push(value);\n        if (i % 2 === 0) {\n            value = value + value;\n        } else {\n            value = value + value + value;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst tri = (n) => {\n    let result = [];\n    let value = 1;\n    let i ="}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  var res = 1;\n  for (var i = 1; i < n; i++) {\n    res = res * 10;\n    if (res % 2 === 1) {\n      break;\n    }\n  }\n  return res;\n};\n\nvar result = 0;\n\n// Find the product of the odd digits\nfor (var i = 1; i < 10; i++) {\n  result = result + digit(i);\n}\n\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      let isOpen = false;\n      let brackets = 0;\n      let depth = 0;\n      while (index < string.length) {\n        if (string[index] === '[') {\n          brackets++;\n        } else if (string[index] === ']') {\n          brackets--;\n        } else if (string[index] === '[' && brackets === 0) {\n          depth++;\n        } else if (string[index] === ']' && brackets === 0) {\n          depth--;\n        }\n\n        index++;\n      }\n      if (depth!== 0) {\n        return false;\n      }\n    } else {\n      index++;\n    }\n  }\n  return true;\n};\n\nexport { isNest };\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare2 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare3 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare4 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare5 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare6 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare7 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare8 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare9 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare10 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare11 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare12 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare13 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare14 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare15 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare16 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare17 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare18 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare19 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare20 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare21 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare22 = (lst) => {\n  return lst.reduce((sum, x) => {\n    const floor = Math.floor(x);\n    return sum + (x - floor) * (x - floor);\n  }, 0);\n};\n\nconst summarizeSquare23 = (lst) => {\n  return lst.reduce((sum, x"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  txt = txt.toUpperCase();\n  let alphaOnly = txt.replace(/[^A-Z]/g, '');\n  let alphaWords = txt.split(' ');\n  return (\n    (alphaWords.length === 0) ||\n    (alphaWords[alphaWords.length - 1].length === 1 &&\n      alphaOnly.indexOf(alphaWords[alphaWords.length - 1].charAt(0))!== -1)\n  );\n};\n\n/*\n  Return a string consisting of the first 'n' characters of the given string.\n  The 'n' parameter is a number from 1 to the length of the given string.\n  Examples:\n  cutString(\"apple pie\", 2) ➞ \"ppp\"\n  cutString(\"apple pie\", 1) ➞ \"pp\"\n  cutString(\"apple pie\", 0) ➞ \"apple pie\"\n  cutString(\"apple pie\", 3) ➞ \"apple\"\n  cutString(\"apple pie\", 5) ➞ \"apple pie\"\n  cutString(\"apple pie\", 6) ➞ \"apple pie\"\n  cutString(\"apple pie\", 7) ➞ \"apple pie\"\n  cutString(\"apple pie\", 8) ➞ \"apple pie\"\n  cutString(\"apple pie\", 9) ➞ \"apple pie\"\n  cutString(\"apple pie\", 10) ➞ \"apple pie\"\n  cutString(\"apple pie\", 11) ➞ \"apple pie\"\n  cutString(\"apple pie\", 12) ➞ \"apple pie\"\n  cutString(\"apple pie\", 13) ➞ \"apple pie\"\n  cutString(\"apple pie\", 14) ➞ \"apple pie\"\n  cutString(\"apple pie\", 15) ➞ \"apple pie\"\n  cutString(\"apple pie\", 16) ➞ \"apple pie\"\n  cutString(\"apple pie\", 17) ➞ \"apple pie\"\n  cutString(\"apple pie\", 18) ➞ \"apple pie\"\n  cutString(\"apple pie\", 19) ➞ \"apple pie\"\n  cutString(\"apple pie\", 20) ➞ \"apple pie\"\n  cutString(\"apple pie\", 21) ➞ \"apple pie\"\n  cutString(\"apple pie\", 22) ➞ \"apple pie\"\n  cutString(\"apple pie\", 23) ➞ \"apple pie\"\n  cutString(\"apple pie\", 24) ➞ \"apple pie\"\n  cutString(\"apple pie\", 25) ➞ \"apple pie\"\n  cutString(\"apple pie\", 26) ➞ \"apple pie\"\n  cutString(\"apple pie\", 27) ➞ \"apple pie\"\n  cutString(\"apple pie\", 28) ➞ \"apple pie\"\n  cutString(\"apple pie\", 29) ➞ \"apple pie\"\n  cutString(\"apple pie\", 30) ➞ \"apple pie\"\n  cutString(\"apple pie\", 31) ➞ \"apple pie\"\n  cutString(\"apple pie\", 32) ➞ \"apple pie\"\n  cutString(\"apple pie\", 33) ➞ \"apple pie\"\n  cutString(\"apple pie\", 34) ➞ \"apple pie\"\n  cutString(\"apple pie\", 35) ➞ \"apple pie\"\n  cutString(\"apple pie\", 36) ➞ \"apple pie\"\n  cutString(\"apple pie\", 37) ➞ \"apple pie\"\n  cutString(\"apple pie\", 38) ➞ \"apple pie\"\n  cutString(\"apple pie\", 39) ➞ \"apple pie\"\n  cutString(\"apple pie\", 40) ➞ \"apple pie\"\n  cutString(\"apple pie\", 41) ➞ \"apple pie\"\n  cutString(\"apple pie\", 42) ➞ \"apple pie\"\n  cutString(\"apple pie\", 43) ➞ \"apple pie\"\n  cutString(\"apple pie\", 44) ➞ \"apple pie\"\n  cutString(\"apple pie\", 45) ➞ \"apple pie\"\n  cutString(\"apple pie\", 46) ➞ \"apple pie\"\n  cutString(\"apple pie\", 47) ➞ \"apple pie\"\n  cutString(\"apple pie\", 48) ➞ \"apple pie\"\n  cutString(\"apple pie\", 49) ➞ \"apple pie\"\n  cutString(\"apple pie\", 50) ➞ \"apple pie\"\n  cutString(\"apple pie\", 51) ➞ \"apple pie\"\n  cutString(\"apple pie\", 52) ➞ \"apple pie\"\n  cutString(\"apple pie\", 53) ➞ \"apple pie\"\n  cutString(\"apple pie\", 54) ➞ \"apple pie\"\n  cutString(\"apple pie\", 55) ➞ \"apple pie\"\n  cutString(\"apple pie\", 56) ➞ \"apple pie\"\n  cutString(\"apple pie\", 57) ➞ \"apple pie\"\n  cutString(\"apple pie\", 58) ➞ \"apple pie\"\n  cutString(\"apple pie\", 59) ➞ \"apple pie\"\n  cutString(\"apple pie\", 60) ➞ \"apple pie\"\n  cutString(\"apple pie\", 61) ➞ \"apple pie\"\n  cutString(\"apple pie\", 62) ➞ \"apple pie\"\n  cutString(\"apple pie\", 63) ➞ \"apple pie\"\n  cutString(\"apple pie\", 64) ➞ \"apple pie\"\n  cutString(\"apple pie\", 65) ➞ \"apple pie\"\n  cutString(\"apple pie\", 66) ➞ \"apple pie\"\n  cutString(\"apple pie\", 67) ➞ \"apple pie\"\n  cutString(\"apple pie\", 68) ➞ \"apple pie\"\n  cutString(\"apple pie\", 69) ➞ \"apple pie\"\n  cutString(\"apple pie\", 70) ➞ \"apple pie\"\n  cutString(\"apple pie\", 71) ➞ \"apple pie\"\n  cutString(\"apple pie\", 72) �"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  const l = arr.length\n  if(l < 2) return -1\n\n  for(let i = 0; i < l - 1; i++) {\n    if(arr[i] > arr[i+1]) return i\n  }\n\n  return -1\n}\n\n/*\n  Create a function which returns the smallest index of an element which\n  is greater than the element immediately following it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 1\n  canStage([1,2,3]) = -1\n  */\nconst canUnstage = (arr) => {\n  const l = arr.length\n  if(l < 2) return -1\n\n  for(let i = 1; i < l; i++) {\n    if(arr[i] < arr[i-1]) return i\n  }\n\n  return -1\n}\n\n/*\n  Create a function which returns a boolean value indicating whether the\n  given array contains an element with the largest index.\n\n  Examples:\n  canStage([1,2,4,3,5]) = true\n  canStage([1,2,3]) = false\n  canStage([1,2]) = false\n  canStage([1]) = true\n  */\nconst canStageMax = (arr) => {\n  const l = arr.length\n  if(l < 2) return false\n\n  for(let i = 0; i < l - 1; i++) {\n    if(arr[i] > arr[i+1]) return true\n  }\n\n  return false\n}\n\n/*\n  Create a function which returns a boolean value indicating whether the\n  given array contains an element with the smallest index.\n\n  Examples:\n  canStage([1,2,4,3,5]) = true\n  canStage([1,2,3]) = false\n  canStage([1,2]) = false\n  canStage([1]) = true\n  */\nconst canUnstageMax = (arr) => {\n  const l = arr.length\n  if(l < 2) return false\n\n  for(let i = 1; i < l; i++) {\n    if(arr[i] < arr[i-1]) return true\n  }\n\n  return false\n}\n\n/*\n  Create a function which returns the sum of the elements in the given array.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 15\n  canStage([1,2,3]) = 6\n  canStage([1]) = 1\n  canStage([]) = 0\n  */\nconst canSum = (arr) => {\n  let sum = 0\n  for(let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Create a function which returns the difference of the elements in the given\n  array.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 5\n  canStage([1,2,3]) = 3\n  canStage([1]) = 1\n  canStage([]) = 0\n  */\nconst canDiff = (arr) => {\n  let diff = 0\n  for(let i = 0; i < arr.length; i++) {\n    diff += arr[i]\n  }\n  return diff\n}\n\n/*\n  Create a function which returns the mean of the elements in the given array.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2.5\n  canStage([1,2,3]) = 2\n  canStage([1]) = 1\n  canStage([]) = 0\n  */\nconst canMean = (arr) => {\n  let sum = 0\n  for(let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum / arr.length\n}\n\n/*\n  Create a function which returns the sum of the squares of the elements in the\n  given array.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 48\n  canStage([1,2,3]) = 9\n  canStage([1]) = 1\n  canStage([]) = 0\n  */\nconst canSqSum = (arr) => {\n  let sum = 0\n  for(let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i]\n  }\n  return sum\n}\n\n/*\n  Create a function which returns the difference of the squares of the elements\n  in the given array.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = 1\n  canStage([1]) = 1\n  canStage([]) = 0\n  */\nconst canSqDiff = (arr) => {\n  let diff = 0\n  for(let i = 0; i < arr.length; i++) {\n    diff += arr[i] * arr[i]\n  }\n  return diff\n}\n\n/*\n  Create a function which returns the mean of the squares of the elements in\n  the given array.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 32\n  canStage([1,2,3]) = 1\n  canStage([1]) = 1\n  canStage([]) = 0\n  */\nconst canSqMean = (arr) => {\n  let sum = 0\n  for(let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i]\n  }\n  return sum / arr.length\n}\n\n/*\n  Create a function which returns the sum of the products of the elements in the\n  given array.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 60\n  canStage([1,2,3]) = 6\n  canStage([1]) = 1\n  canStage([]) = 0\n  */\nconst canProdSum = (arr) => {\n  let sum"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max === null || min === null) {\n    return [null, null];\n  }\n  return [max, min];\n};\n\nexport default bigSmallIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  // const x = a + \"a\"\n  // const y = b + \"b\"\n  const x = parseInt(a, 10)\n  const y = parseFloat(b)\n\n  if (x < y) {\n    return a\n  } else if (x > y) {\n    return b\n  } else {\n    return null\n  }\n}\n\nconsole.log(compareOne(1, 2.5))\nconsole.log(compareOne(\"5,1\", \"6\"))\nconsole.log(compareOne(\"1\", 1))\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  // The number n is not a sum of 4 positive even numbers\n  if (n % 2!== 0) {\n    return false;\n  }\n  // We only consider even positive numbers\n  if (n < 2) {\n    return false;\n  }\n  // We only consider positive numbers\n  if (n <= 0) {\n    return false;\n  }\n  // We only consider numbers that are divisible by 4\n  if (n % 4!== 0) {\n    return false;\n  }\n  // We only consider numbers that are also divisible by 2\n  if (n % 2!== 0) {\n    return false;\n  }\n  // We only consider numbers that are greater than 1\n  if (n <= 1) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  This is the actual code.\n  */\nconst sumOfEven = (n) => {\n  // If the number is not a sum of 4 positive even numbers, return false\n  if (!isAdequateToSumEven(n)) {\n    return false;\n  }\n  const evenNumberSum = n;\n  const evenNumberSumDividedByTwo = evenNumberSum / 2;\n  const evenNumberSumDividedByTwoSquared = evenNumberSumDividedByTwo * evenNumberSumDividedByTwo;\n  const result = (evenNumberSumDividedByTwoSquared + evenNumberSumSquared) - 1;\n  return (result === 0);\n};\n\nconst sumOfEven = (n) => {\n  // If the number is not a sum of 4 positive even numbers, return false\n  if (!isAdequateToSumEven(n)) {\n    return false;\n  }\n  const evenNumberSum = n;\n  const evenNumberSumDividedByTwo = evenNumberSum / 2;\n  const evenNumberSumDividedByTwoSquared = evenNumberSumDividedByTwo * evenNumberSumDividedByTwo;\n  const result = (evenNumberSumDividedByTwoSquared + evenNumberSumSquared) - 1;\n  return (result === 0);\n};\n\nconsole.log(sumOfEven(4));\nconsole.log(sumOfEven(6));\nconsole.log(sumOfEven(8));\nconsole.log(sumOfEven(10));\nconsole.log(sumOfEven(12));\nconsole.log(sumOfEven(16));\nconsole.log(sumOfEven(18));\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n    let specialFactorial = 1;\n    for (let i = 1; i <= n; i++) {\n        specialFactorial *= i;\n    }\n    return specialFactorial;\n};\n\nexport default extraFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === spaces) {\n      result += '_'\n    } else {\n      result += text[i]\n    }\n  }\n  return result\n}\n\nconst removeUnnecessarySpaces = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === spaces) {\n      if (text[i+1] === spaces) {\n        result += '-'\n      } else {\n        result += spaces\n      }\n    } else {\n      result += text[i]\n    }\n  }\n  return result\n}\n\nconst removeTrailingSpaces = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === spaces) {\n      if (text[i+1] === spaces) {\n        result += '-'\n      } else {\n        result += spaces\n      }\n    } else {\n      result += text[i]\n    }\n  }\n  return result\n}\n\nconst removeConsecutiveSpaces = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  let isPreviousSpace = false\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === spaces) {\n      if (isPreviousSpace) {\n        result += '-'\n      } else {\n        result += spaces\n      }\n      isPreviousSpace = true\n    } else {\n      result += text[i]\n      isPreviousSpace = false\n    }\n  }\n  return result\n}\n\nconst removeExtraSpace = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === spaces) {\n      if (text[i+1] === spaces) {\n        result += '-'\n      } else {\n        result += spaces\n      }\n    } else {\n      result += text[i]\n    }\n  }\n  return result\n}\n\nconst addSpaces = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === spaces) {\n      result += '_'\n    } else {\n      result += text[i]\n    }\n  }\n  return result\n}\n\nconst removeConsecutiveDashes = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === '-') {\n      if (text[i+1] === '-') {\n        result += '-'\n      } else {\n        result +=''\n      }\n    } else {\n      result += text[i]\n    }\n  }\n  return result\n}\n\nconst removeTrailingDashes = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === '-') {\n      if (text[i+1] === '-') {\n        result += '-'\n      } else {\n        result += spaces\n      }\n    } else {\n      result += text[i]\n    }\n  }\n  return result\n}\n\nconst removeExtraDashes = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === '-') {\n      if (text[i+1] === '-') {\n        result += '-'\n      } else {\n        result += spaces\n      }\n    } else {\n      result += text[i]\n    }\n  }\n  return result\n}\n\nconst removeDashesAtEnds = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === '-') {\n      if (i === textLength - 1) {\n        result += '-'\n      } else {\n        result += spaces\n      }\n    } else {\n      result += text[i]\n    }\n  }\n  return result\n}\n\nconst removeDashesAtEnds2 = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === '-') {\n      if (i === textLength - 1) {\n        result += '-'\n      } else {\n        result += spaces\n      }\n    } else {\n      result += text[i]\n    }\n  }\n  return result\n}\n\nconst removeDashesAtEnds3 = (text) => {\n  const spaces =''\n  const textLength = text.length\n  let result = ''\n  for (let i = 0; i < textLength; i++) {\n    if (text[i] === '-') {\n      if (i === textLength - 1) {\n        result += spaces\n      } else {\n        result += '-'\n      }\n    } else {\n      result += text[i]\n    }\n  "}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const valid_characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.';\n  const file_name_length = file_name.length;\n\n  const has_more_than_three_digit = file_name_length > 3;\n  const has_dot = file_name.indexOf(\".\") >= 0;\n  const has_no_letters = file_name.match(/[^a-zA-Z]/) === null;\n  const has_no_letters_after_dot = file_name.match(/[^a-zA-Z]/) === null;\n  const has_only_letters = file_name.match(/[a-zA-Z]+/)!== null;\n\n  if(has_no_letters) {\n    return 'No';\n  } else {\n    if(has_only_letters) {\n      return 'No';\n    } else {\n      if(has_dot) {\n        return 'Yes';\n      } else {\n        if(has_no_letters_after_dot) {\n          return 'No';\n        } else {\n          if(has_more_than_three_digit) {\n            return 'No';\n          } else {\n            return 'Yes';\n          }\n        }\n      }\n    }\n  }\n}\n\nconst valid_file_names = [\"test.txt\", \"test.exe\", \"test.dll\"];\nconst file_names_without_dot = [\"test\", \"test2\", \"test3\"];\nconst file_names_with_dot = [\"test.txt\", \"test.exe\", \"test.dll\"];\nconst file_names_with_dot_after_dot = [\"test.txt.txt\", \"test.exe.exe\", \"test.dll.dll\"];\nconst file_names_without_dot_after_dot = [\"test.txt\", \"test.exe\", \"test.dll\"];\n\nconst test_cases = [\n  [\"test.txt\", \"Yes\"],\n  [\"1test.txt\", \"No\"],\n  [\"test2.txt\", \"No\"],\n  [\"test3.txt\", \"No\"],\n  [\"test4.txt\", \"Yes\"],\n  [\"test.exe\", \"Yes\"],\n  [\"1test.exe\", \"No\"],\n  [\"test.dll\", \"Yes\"],\n  [\"1test.dll\", \"No\"],\n  [\"test.exe.exe\", \"Yes\"],\n  [\"test.exe.exe\", \"No\"],\n  [\"test.dll.dll\", \"Yes\"],\n  [\"test.dll.dll\", \"No\"],\n  [\"test.txt.txt\", \"Yes\"],\n  [\"test.exe.exe\", \"Yes\"],\n  [\"test.dll.dll\", \"Yes\"]\n];\n\n// Create a new table.\nconst test_table = document.createElement('table');\n\n// Create a new row for each test case.\nfor(let test_case of test_cases) {\n  const test_row = document.createElement('tr');\n  test_row.setAttribute('class', 'test-case');\n\n  // Create a new cell for each test field.\n  for(let field of test_case) {\n    const test_cell = document.createElement('td');\n    test_cell.setAttribute('class', 'test-field');\n    test_cell.innerHTML = field;\n\n    test_row.appendChild(test_cell);\n  }\n  test_table.appendChild(test_row);\n}\n\ndocument.body.appendChild(test_table);\n\n// The function returns 'True' if all the test cases pass, and 'False' otherwise.\nconst all_test_cases_passed = (() => {\n  const table_rows = document.getElementsByClassName('test-case');\n  for(let i = 0; i < table_rows.length; i++) {\n    if(table_rows[i].innerHTML.includes('No')) {\n      return false;\n    }\n  }\n  return true;\n})();\n\nif(all_test_cases_passed) {\n  document.getElementById('results').innerHTML = 'All test cases passed!';\n} else {\n  document.getElementById('results').innerHTML = 'Some test cases failed.';\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      total += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      total += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return total;\n};\n\nconsole.log(summarizeSquare([1,2,3]));\nconsole.log(summarizeSquare([]));\nconsole.log(summarizeSquare([-1,-5,2,-1,-5]));\n\n/*\"\n  This function will take a list of numbers and return the square of the average of all numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare2 = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    total += lst[i];\n  }\n  return total * total / lst.length;\n};\n\nconsole.log(summarizeSquare2([1,2,3]));\nconsole.log(summarizeSquare2([-1,-5,2,-1,-5]));\n\n/*\"\n  This function will take a list of numbers and return the average of all numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [-1,-5,2,-1,-5]  the output should be -1\n  */\nconst summarizeAverage = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    total += lst[i];\n  }\n  return total / lst.length;\n};\n\nconsole.log(summarizeAverage([1,2,3]));\nconsole.log(summarizeAverage([-1,-5,2,-1,-5]));<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (const word of words) {\n    if (primeNumbers(word.length) === true) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\nconst primeNumbers = (number) => {\n  const primes = [2]\n  for (let i = 3; i < number; i += 2) {\n    if (primes.every((el) => number % el === 0)) {\n      return false\n    }\n    primes.push(i)\n  }\n  return true\n}\n\nconst solution = (sentence) => {\n  const result = []\n  const words = sentence.split(' ')\n  for (const word of words) {\n    const wordLength = word.length\n    if (primeNumbers(wordLength) === true) {\n      const isPrime = true\n      const newWord = `${word}`\n      while (isPrime === true) {\n        if (primeNumbers(newWord.length) === true) {\n          result.push(newWord)\n          isPrime = false\n        } else {\n          newWord += word[word.length - 1]\n        }\n      }\n    }\n  }\n  return result.join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === '1') return true\n  if (x === '0') return false\n\n  if (x.length!== n.length) return false\n\n  const isOdd = (n) => {\n    return n.charAt(0) === '1'\n  }\n\n  const isEven = (n) => {\n    return n.charAt(0) === '0'\n  }\n\n  const isOddOrEven = (n) => {\n    return isOdd(n) || isEven(n)\n  }\n\n  const isOddOrEvenLast = (n) => {\n    return isOdd(n) || isEven(n.substring(n.length - 1))\n  }\n\n  const isOddOrEvenSecondLast = (n) => {\n    return isOdd(n.substring(0, n.length - 1)) || isEven(n.substring(n.length - 1))\n  }\n\n  const isOddOrEvenThirdLast = (n) => {\n    return isOdd(n.substring(0, n.length - 2)) || isEven(n.substring(n.length - 2))\n  }\n\n  const isOddOrEvenFourthLast = (n) => {\n    return isOdd(n.substring(0, n.length - 3)) || isEven(n.substring(n.length - 3))\n  }\n\n  const isOddOrEvenFifthLast = (n) => {\n    return isOdd(n.substring(0, n.length - 4)) || isEven(n.substring(n.length - 4))\n  }\n\n  const isOddOrEvenFirst = (n) => {\n    return isOdd(n.substring(0, 1)) || isEven(n.substring(1))\n  }\n\n  const isOddOrEvenSecond = (n) => {\n    return isOdd(n.substring(0, 2)) || isEven(n.substring(2))\n  }\n\n  const isOddOrEvenThird = (n) => {\n    return isOdd(n.substring(0, 3)) || isEven(n.substring(3))\n  }\n\n  const isOddOrEvenFourth = (n) => {\n    return isOdd(n.substring(0, 4)) || isEven(n.substring(4))\n  }\n\n  const isOddOrEvenFifth = (n) => {\n    return isOdd(n.substring(0, 5)) || isEven(n.substring(5))\n  }\n\n  const isOddOrEvenFirstLast = (n) => {\n    return isOdd(n.substring(0, n.length - 1)) || isEven(n.substring(n.length - 1))\n  }\n\n  const isOddOrEvenSecondLast = (n) => {\n    return isOdd(n.substring(0, n.length - 2)) || isEven(n.substring(n.length - 2))\n  }\n\n  const isOddOrEvenThirdLast = (n) => {\n    return isOdd(n.substring(0, n.length - 3)) || isEven(n.substring(n.length - 3))\n  }\n\n  const isOddOrEvenFourthLast = (n) => {\n    return isOdd(n.substring(0, n.length - 4)) || isEven(n.substring(n.length - 4))\n  }\n\n  const isOddOrEvenFifthLast = (n) => {\n    return isOdd(n.substring(0, n.length - 5)) || isEven(n.substring(n.length - 5))\n  }\n\n  const isOddOrEvenFirstSecondLast = (n) => {\n    return isOdd(n.substring(0, n.length - 2)) || isEven(n.substring(n.length - 2))\n  }\n\n  const isOddOrEvenThirdFourthLast = (n) => {\n    return isOdd(n.substring(0, n.length - 3)) || isEven(n.substring(n.length - 3))\n  }\n\n  const isOddOrEvenFifthFifthLast = (n) => {\n    return isOdd(n.substring(0, n.length - 4)) || isEven(n.substring(n.length - 4))\n  }\n\n  const isOddOrEvenFirstSecondThirdFourthLast = (n) => {\n    return isOdd(n.substring(0, n.length - 3)) || isEven(n.substring(n.length - 3))\n  }\n\n  const isOddOrEvenSecondThirdFourthLast = (n) => {\n    return isOdd(n.substring(0, n.length - 2)) || isEven(n.substring(n.length - 2))\n  }\n\n  const isOddOrEvenThirdFourthFifthLast = (n) => {\n    return isOdd(n.substring(0, n.length - 3)) || isEven(n.substring(n.length - 3))\n  }\n\n  const isOddOrEvenFourthFifthFifthLast = (n) => {\n    return isOdd(n.substring(0, n.length - 4)) || isEven(n.substring(n.length - 4))\n  }\n\n  const isOddOrEvenFirstSecondThirdFourthLastFirst = (n) => {\n    return isOdd(n.substring(0, n.length - 2)) || isEven(n.substring(0, n.length - 3))\n  }\n\n  const isOddOrEvenSecondThirdFourthLastSecond = (n) => {\n    return isOdd(n.sub"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const hash = new Map()\n  for (let num of nums) {\n    if (hash.has(num)) {\n      hash.set(num, [...hash.get(num), num])\n    } else {\n      hash.set(num, [num])\n    }\n  }\n  return Array.from(hash.values())\n   .sort((a, b) => a.sort((aNum, bNum) => aNum - bNum))\n   .map((arr, index) => arr[index])\n}\n\nconst holyOrderBySum = (nums) => {\n  const hash = new Map()\n  for (let num of nums) {\n    if (hash.has(num)) {\n      hash.set(num, [...hash.get(num), num])\n    } else {\n      hash.set(num, [num])\n    }\n  }\n  return Array.from(hash.values())\n   .sort((a, b) => a.sort((aNum, bNum) => aNum - bNum))\n   .map((arr, index) => arr[index])\n}\n\nconst holyOrderBySumIndex = (nums) => {\n  const hash = new Map()\n  for (let num of nums) {\n    if (hash.has(num)) {\n      hash.set(num, [...hash.get(num), num])\n    } else {\n      hash.set(num, [num])\n    }\n  }\n  return Array.from(hash.values())\n   .sort((a, b) => a.sort((aNum, bNum) => aNum - bNum))\n   .map((arr, index) => arr[index])\n}\n\nconst holyOrderByIndex = (nums) => {\n  const hash = new Map()\n  for (let num of nums) {\n    if (hash.has(num)) {\n      hash.set(num, [...hash.get(num), num])\n    } else {\n      hash.set(num, [num])\n    }\n  }\n  return Array.from(hash.values())\n   .sort((a, b) => a.sort((aNum, bNum) => aNum - bNum))\n   .map((arr, index) => arr[index])\n}\n\nconst holyOrderBySumIndexAndSum = (nums) => {\n  const hash = new Map()\n  for (let num of nums) {\n    if (hash.has(num)) {\n      hash.set(num, [...hash.get(num), num])\n    } else {\n      hash.set(num, [num])\n    }\n  }\n  return Array.from(hash.values())\n   .sort((a, b) => a.sort((aNum, bNum) => aNum - bNum))\n   .map((arr, index) => arr[index])\n}\n\nconst holyOrderBySumIndexAndSumAndIndex = (nums) => {\n  const hash = new Map()\n  for (let num of nums) {\n    if (hash.has(num)) {\n      hash.set(num, [...hash.get(num), num])\n    } else {\n      hash.set(num, [num])\n    }\n  }\n  return Array.from(hash.values())\n   .sort((a, b) => a.sort((aNum, bNum) => aNum - bNum))\n   .map((arr, index) => arr[index])\n}\n\nconst holyOrderBySumIndexAndSumAndIndexAndSum = (nums) => {\n  const hash = new Map()\n  for (let num of nums) {\n    if (hash.has(num)) {\n      hash.set(num, [...hash.get(num), num])\n    } else {\n      hash.set(num, [num])\n    }\n  }\n  return Array.from(hash.values())\n   .sort((a, b) => a.sort((aNum, bNum) => aNum - bNum))\n   .map((arr, index) => arr[index])\n}\n\nconst holyOrderBySumAndSumAndIndex = (nums) => {\n  const hash = new Map()\n  for (let num of nums) {\n    if (hash.has(num)) {\n      hash.set(num, [...hash.get(num), num])\n    } else {\n      hash.set(num, [num])\n    }\n  }\n  return Array.from(hash.values())\n   .sort((a, b) => a.sort((aNum, bNum) => aNum - bNum))\n   .map((arr, index) => arr[index])\n}\n\nconst holyOrderBySumAndSumAndIndexAndSum = (nums) => {\n  const hash = new Map()\n  for (let num of nums) {\n    if (hash.has(num)) {\n      hash.set(num, [...hash.get(num), num])\n    } else {\n      hash.set(num, [num])\n    }\n  }\n  return Array.from(hash.values())\n   .sort((a, b) => a.sort((aNum, bNum) => aNum - bNum))\n   .map((arr, index) => arr[index])\n}\n\nconst holyOrderBySumAndSumAndIndexAndSumAndSum = (nums) => {\n  const hash = new Map()\n  for (let num of nums) {\n    if (hash.has(num)) {\n      hash.set(num, [...hash.get(num), num])\n    } else {\n      hash.set(num, [num])\n    }\n  }\n  return Array.from(hash.values())\n   .sort((a, b) => a.sort((aNum, bNum) => aNum - bNum))\n   .map((arr, index) => arr[index])\n}\n\nexport {\n  holyOrderBySum,\n  holyOrder"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  const length = nums.length;\n  let count = 0;\n  for (let i = 0; i < length; i++) {\n    if (nums[i] > 10 && (nums[i] % 2 === 1 || nums[i] % 2 === 3 || nums[i] % 2 === 5 || nums[i] % 2 === 7 || nums[i] % 2 === 9)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = extraFilter;<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  let i,\n    j,\n    k,\n    triples = 0,\n    a = [];\n\n  for(i = 1; i <= n; i++) {\n    for(j = i + 1; j <= n; j++) {\n      for(k = j + 1; k <= n; k++) {\n        if(i < j && j < k && a[i] + a[j] + a[k] % 3 === 0) {\n          triples++;\n        }\n      }\n    }\n  }\n\n  return triples;\n};\n\nconsole.log(catchMaxTriples(5));\nconsole.log(catchMaxTriples(9));\nconsole.log(catchMaxTriples(10));\nconsole.log(catchMaxTriples(11));\nconsole.log(catchMaxTriples(20));\nconsole.log(catchMaxTriples(21));\nconsole.log(catchMaxTriples(25));\nconsole.log(catchMaxTriples(999));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    const earth = planet1 == \"Earth\";\n    const mercury = planet1 == \"Mercury\";\n    const mars = planet1 == \"Mars\";\n    const jupiter = planet1 == \"Jupiter\";\n    const saturn = planet1 == \"Saturn\";\n    const venus = planet1 == \"Venus\";\n    const uranus = planet1 == \"Uranus\";\n\n    const planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n\n    const minDistance = (s1, s2) => Math.min(Math.abs(s1 - s2), Math.abs(s2 - s1));\n\n    const bf = (s1, s2) => {\n        const [p1, p2] = s1.split(\" \");\n        const [p3, p4] = s2.split(\" \");\n\n        const p1Name = planets.find(p => p == p1);\n        const p2Name = planets.find(p => p == p2);\n\n        if (p1Name == undefined || p2Name == undefined) {\n            return [];\n        }\n\n        const distance = minDistance(s1, s2);\n        const isBetween = (s1.indexOf(p1Name)!= -1 && s2.indexOf(p2Name)!= -1) ||\n                          (s1.indexOf(p2Name)!= -1 && s2.indexOf(p1Name)!= -1);\n\n        if (isBetween) {\n            return [...new Set([p1, p2, p3, p4]).values()];\n        }\n\n        return [p1, p2];\n    };\n\n    return bf(planet1, planet2);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  let result = lst.reduce((prev, curr) => prev + curr.length, 0);\n  lst.filter(str => str.length % 2 === 1).forEach(str => result -= str.length);\n  return result;\n}\n\nmodule.exports = {\n  screenTiltSum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if(isPrime(n)){\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  let divisors = [];\n  let i = 2;\n  while(i * i <= n){\n    if(n % i === 0){\n      divisors.push(i);\n    }\n    i++;\n  }\n  if(n === 1 || n === 2){\n    return true;\n  }\n  if(divisors.length === 0){\n    return false;\n  }\n  return true;\n}\n\n// console.log(xOrYttrium(7, 34, 12));\n// console.log(xOrYttrium(15, 8, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (!lst.length) {\n    return 0;\n  }\n  return lst.reduce((prev, curr) => (prev + curr * curr), 0);\n};\n\nconst isOdd = (num) => {\n  return num % 2!== 0;\n};\n\nconst even = (num) => {\n  return num % 2 === 0;\n};\n\nconst list = [1, 3, 2, 0, -1, -2, 0];\n\nconst getOddNumbers = (lst) => {\n  return lst.filter((curr) => isOdd(curr));\n};\n\nconst getEvenNumbers = (lst) => {\n  return lst.filter((curr) => even(curr));\n};\n\nconst getDeviation = (lst) => {\n  return doubleTheDeviation(getOddNumbers(lst));\n};\n\nconst getDeviationOfOddNumbers = (lst) => {\n  return doubleTheDeviation(getOddNumbers(lst));\n};\n\nconst getDeviationOfEvenNumbers = (lst) => {\n  return doubleTheDeviation(getEvenNumbers(lst));\n};\n\nconst getDeviationOfOddAndEvenNumbers = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers2 = (lst) => {\n  return doubleTheDeviation(getOddNumbers(lst));\n};\n\nconst getDeviationOfOddAndEvenNumbers3 = (lst) => {\n  return doubleTheDeviation(getEvenNumbers(lst));\n};\n\nconst getDeviationOfOddAndEvenNumbers4 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers5 = (lst) => {\n  return doubleTheDeviation(getOddNumbers(lst));\n};\n\nconst getDeviationOfOddAndEvenNumbers6 = (lst) => {\n  return doubleTheDeviation(getEvenNumbers(lst));\n};\n\nconst getDeviationOfOddAndEvenNumbers7 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers8 = (lst) => {\n  return doubleTheDeviation(getOddNumbers(lst));\n};\n\nconst getDeviationOfOddAndEvenNumbers9 = (lst) => {\n  return doubleTheDeviation(getEvenNumbers(lst));\n};\n\nconst getDeviationOfOddAndEvenNumbers10 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers11 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers12 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers13 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers14 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers15 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers16 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers17 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers18 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers19 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers20 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers21 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers22 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers23 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers24 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers25 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers26 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers27 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers28 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers29 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n\nconst getDeviationOfOddAndEvenNumbers30 = (lst) => {\n  return doubleTheDeviation(lst);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    let errors = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            errors.push(0);\n        } else {\n            errors.push(diff);\n        }\n    }\n    return errors;\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {number[]}\nconst compareNumbers = (a, b) => {\n    let errors = [];\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            errors.push(0);\n        } else {\n            errors.push(Math.abs(a[i] - b[i]));\n        }\n    }\n    return errors;\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareLengths = (a, b) => {\n    return a.length === b.length;\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareLengthsEqual = (a, b) => {\n    return a.length === b.length && a.every((element, index) => element === b[index]);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareValues = (a, b) => {\n    return a.every((element, index) => element === b[index]);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareEqual = (a, b) => {\n    return a.every((element, index) => element === b[index]);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareLengthsAndValues = (a, b) => {\n    return compareLengths(a, b) && compareValues(a, b);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareEqualLengthsAndValues = (a, b) => {\n    return compareLengthsEqual(a, b) && compareValues(a, b);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareEqualLengthsAndValuesAndValues = (a, b) => {\n    return compareLengthsEqual(a, b) && compareValues(a, b) && compareValues(a, b);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareAll = (a, b) => {\n    return compareLengthsAndValues(a, b) && compareEqualLengthsAndValues(a, b) && compareEqualLengthsAndValuesAndValues(a, b);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareAllEqual = (a, b) => {\n    return compareLengthsAndValues(a, b) && compareEqualLengthsAndValues(a, b) && compareEqualLengthsAndValuesAndValues(a, b);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareAllEqualLengthsAndValues = (a, b) => {\n    return compareLengthsEqual(a, b) && compareEqualLengthsAndValues(a, b) && compareEqualLengthsAndValuesAndValues(a, b);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareAllEqualLengthsAndValuesAndValues = (a, b) => {\n    return compareLengthsEqual(a, b) && compareEqualLengthsAndValues(a, b) && compareEqualLengthsAndValuesAndValues(a, b);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareAllEqualValues = (a, b) => {\n    return compareValues(a, b) && compareEqualLengthsAndValues(a, b) && compareEqualLengthsAndValuesAndValues(a, b);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareAllEqualValuesAndValues = (a, b) => {\n    return compareValues(a, b) && compareEqualLengthsAndValues(a, b) && compareEqualLengthsAndValuesAndValues(a, b);\n}\n\n// @public\n// @param {number[]} a\n// @param {number[]} b\n// @return {boolean}\nconst compareAllEqualValuesAndValuesAndValues = (a, b) => {\n    return compareValues(a, b) && compareEqualLengths"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n    let class_extensions = extensions.map(extension => extension.replace(/^\\s+|\\s+$/g, '')).join('.');\n    return class_name + '.' + class_extensions.replace(/[^A-Za-z0-9]/g, '').toUpperCase();\n};\n\nmodule.exports = hardExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let b_a = new RegExp(`${b}`, 'i');\n  let b_a_rotations = [];\n  for (let i = 0; i <= a.length - b.length; i++) {\n    b_a_rotations = b_a_rotations.concat(rotate(b, i));\n  }\n  for (let i = 0; i <= b_a_rotations.length - a.length; i++) {\n    if (b_a.test(a)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n * @param {string} s\n * @return {boolean}\n */\nconst palindrome = s => {\n  let l = s.length;\n  for (let i = 0; i < l / 2; i++) {\n    if (s[i]!== s[l - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n * @param {string} s\n * @return {boolean}\n */\nconst abb = s => {\n  let l = s.length;\n  for (let i = 0; i < l / 2; i++) {\n    if (s[i]!== s[l - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = s => {\n  let l = s.length;\n  for (let i = 0; i < l / 2; i++) {\n    if (s[i]!== s[l - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n * @param {string} s\n * @return {boolean}\n */\nconst abb2 = s => {\n  let l = s.length;\n  for (let i = 0; i < l / 2; i++) {\n    if (s[i]!== s[l - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst rotate = (s, i) => {\n  let l = s.length;\n  let t = [];\n  for (let j = 0; j < l; j++) {\n    t.push(s[(i + j) % l]);\n  }\n  return t;\n};\n\n/*\n * @param {string} str\n * @return {boolean}\n */\nconst isSubstring = str => {\n  let arr = str.split('');\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr[arr.length - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isStringPalindrome = str => {\n  let l = str.length;\n  for (let i = 0; i < l / 2; i++) {\n    if (str[i]!== str[l - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isStringABB = str => {\n  let l = str.length;\n  for (let i = 0; i < l / 2; i++) {\n    if (str[i]!== str[l - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport {\n  palindrome,\n  abb,\n  isPalindrome,\n  abb2,\n  isStringPalindrome,\n  isStringABB,\n  rotate,\n  isSubstring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(1));\nconsole.log(evenOddCount(6));\nconsole.log(evenOddCount(9));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const numbers = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n  };\n  const result = [];\n  const number = parseInt(number, 10);\n  const i = 1;\n\n  while (number > 0) {\n    const k = number % 10;\n    const v = numbers[k];\n    number = number / 10;\n    result.unshift(v);\n  }\n  return result.join('');\n};\n\nexport {\n  intToMiniRoman,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const aIsEven = (a % 2 === 0)\n  const bIsEven = (b % 2 === 0)\n  const cIsEven = (c % 2 === 0)\n\n  const aIsTriangle = (a === 3 || a === 4 || a === 5)\n  const bIsTriangle = (b === 3 || b === 4 || b === 5)\n  const cIsTriangle = (c === 3 || c === 4 || c === 5)\n\n  return (aIsEven && bIsEven && cIsEven) ||\n    (!aIsEven && bIsEven && cIsTriangle) ||\n    (!aIsEven &&!bIsEven && cIsEven) ||\n    (!aIsEven && bIsEven &&!cIsEven) ||\n    (!aIsEven &&!bIsEven && cIsTriangle) ||\n    (!aIsEven && bIsEven &&!cIsTriangle) ||\n    (aIsEven &&!bIsEven &&!cIsEven) ||\n    (aIsEven && bIsEven &&!cIsTriangle) ||\n    (aIsEven &&!bIsEven && cIsTriangle) ||\n    (!aIsEven && bIsEven && cIsTriangle) ||\n    (!aIsEven && bIsEven &&!cIsTriangle)\n}\n\nmodule.exports = goodSlantTriangle\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let count = 1\n  let max = 0\n  let maxIndex = 0\n\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      count += words[i][j].toString().length\n    }\n\n    if (count > max) {\n      max = count\n      maxIndex = i\n    }\n  }\n\n  return words[maxIndex]\n}\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of letters. If multiple strings have maximum number of letters,\n  return the one which comes first in lexicographical order.\n\n  receiveMaxLetters([\"name\", \"of\", \"string\"]) === \"name\"\n  receiveMaxLetters([\"name\", \"enam\", \"game\"]) === \"name\"\n  receiveMaxLetters([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMaxLetters = (words) => {\n  let count = 1\n  let max = 0\n  let maxIndex = 0\n\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].length\n    if (count > max) {\n      max = count\n      maxIndex = i\n    }\n  }\n\n  return words[maxIndex]\n}\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum\n  number of unique words. If multiple strings have maximum number\n  of unique words, return the one which comes first in lexicographical\n  order.\n\n  receiveMaxWords([\"name\", \"of\", \"string\"]) === \"name\"\n  receiveMaxWords([\"name\", \"enam\", \"game\"]) === \"name\"\n  receiveMaxWords([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst receiveMaxWords = (words) => {\n  let count = 1\n  let max = 0\n  let maxIndex = 0\n\n  for (let i = 0; i < words.length; i++) {\n    count += words[i].split(\" \").length\n    if (count > max) {\n      max = count\n      maxIndex = i\n    }\n  }\n\n  return words[maxIndex]\n}\n\nconst words = [\"name\", \"of\", \"string\"]\n\nconsole.log(receiveMax(words))\nconsole.log(receiveMaxLetters(words))\nconsole.log(receiveMaxWords(words))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n    const diff = number - need;\n    if (diff > remaining) {\n        return [number, remaining];\n    } else {\n        return [number + diff, remaining - diff];\n    }\n}\n\nconst t1 = timeit(feed, [100, 100, 100]);\nconst t2 = timeit(feed, [100, 100, 100]);\nconst t3 = timeit(feed, [100, 100, 100]);\nconst t4 = timeit(feed, [100, 100, 100]);\nconst t5 = timeit(feed, [100, 100, 100]);\nconst t6 = timeit(feed, [100, 100, 100]);\nconst t7 = timeit(feed, [100, 100, 100]);\nconst t8 = timeit(feed, [100, 100, 100]);\nconst t9 = timeit(feed, [100, 100, 100]);\nconst t10 = timeit(feed, [100, 100, 100]);\nconst t11 = timeit(feed, [100, 100, 100]);\nconst t12 = timeit(feed, [100, 100, 100]);\nconst t13 = timeit(feed, [100, 100, 100]);\nconst t14 = timeit(feed, [100, 100, 100]);\nconst t15 = timeit(feed, [100, 100, 100]);\nconst t16 = timeit(feed, [100, 100, 100]);\nconst t17 = timeit(feed, [100, 100, 100]);\nconst t18 = timeit(feed, [100, 100, 100]);\nconst t19 = timeit(feed, [100, 100, 100]);\nconst t20 = timeit(feed, [100, 100, 100]);\nconst t21 = timeit(feed, [100, 100, 100]);\nconst t22 = timeit(feed, [100, 100, 100]);\nconst t23 = timeit(feed, [100, 100, 100]);\nconst t24 = timeit(feed, [100, 100, 100]);\nconst t25 = timeit(feed, [100, 100, 100]);\nconst t26 = timeit(feed, [100, 100, 100]);\nconst t27 = timeit(feed, [100, 100, 100]);\nconst t28 = timeit(feed, [100, 100, 100]);\nconst t29 = timeit(feed, [100, 100, 100]);\nconst t30 = timeit(feed, [100, 100, 100]);\nconst t31 = timeit(feed, [100, 100, 100]);\nconst t32 = timeit(feed, [100, 100, 100]);\nconst t33 = timeit(feed, [100, 100, 100]);\nconst t34 = timeit(feed, [100, 100, 100]);\nconst t35 = timeit(feed, [100, 100, 100]);\nconst t36 = timeit(feed, [100, 100, 100]);\nconst t37 = timeit(feed, [100, 100, 100]);\nconst t38 = timeit(feed, [100, 100, 100]);\nconst t39 = timeit(feed, [100, 100, 100]);\nconst t40 = timeit(feed, [100, 100, 100]);\nconst t41 = timeit(feed, [100, 100, 100]);\nconst t42 = timeit(feed, [100, 100, 100]);\nconst t43 = timeit(feed, [100, 100, 100]);\nconst t44 = timeit(feed, [100, 100, 100]);\nconst t45 = timeit(feed, [100, 100, 100]);\nconst t46 = timeit(feed, [100, 100, 100]);\nconst t47 = timeit(feed, [100, 100, 100]);\nconst t48 = timeit(feed, [100, 100, 100]);\nconst t49 = timeit(feed, [100, 100, 100]);\nconst t50 = timeit(feed, [100, 100, 100]);\nconst t51 = timeit(feed, [100, 100, 100]);\nconst t52 = timeit(feed, [100, 100, 100]);\nconst t53 = timeit(feed, [100, 100, 100]);\nconst t54 = timeit(feed, [100, 100, 100]);\nconst t55 = timeit(feed, [100, 100, 100]);\nconst t56 = timeit(feed, [100, 100, 100]);\nconst t57 = timeit(feed, [100, 100, 100]);\nconst t58 = timeit(feed, [100, 100, 100]);\nconst t59 = timeit(feed, [100, 100, 100]);\nconst t60 = timeit(feed, [100, 100, 100]);\nconst t61 = timeit(feed, [100, 100, 100]);\nconst t62 = timeit(feed, [100, 100, 100]);\nconst t63 = timeit(feed, [100, 100, 100]);\nconst t64 = timeit(feed, [100, 100, 100]);\nconst t65 = timeit(feed, [100, 100, 100]);\nconst t66 = timeit(feed, [100, 100, 100]);\nconst t67 = timeit(feed, [100, 100, 100]);\nconst t68 = timeit(feed, [100, 100, 100]);\nconst t69 = timeit(feed, [100, 100, 100]);\nconst t70 = timeit(feed, [100, 100, 100]);\nconst t71 = timeit(feed, [100, 100, 100"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n    const operatorLen = operator.length;\n    const operandLen = operand.length;\n\n    const result = [];\n\n    if (operatorLen < operandLen) {\n        throw Error('The length of operator list is less than the length of operand list.');\n    }\n\n    for (let i = 0; i < operatorLen; i++) {\n        if (operand[i] === null) {\n            throw Error('Operand is a list of non-negative integers.');\n        }\n\n        result.push(operator[i](operand[i]));\n    }\n\n    return result.join(' ');\n};\n\nconst operate = (operator, operand) => {\n    if (operator === '+' || operator === '-') {\n        return operateAddSub(operator, operand);\n    }\n\n    if (operator === '*' || operator === '/') {\n        return operateMulDiv(operator, operand);\n    }\n\n    if (operator === '**') {\n        return operateExponentiation(operator, operand);\n    }\n\n    throw Error('Unsupported operator.');\n};\n\nconst operateAddSub = (operator, operand) => {\n    const result = [];\n    for (let i = 0; i < operand.length; i++) {\n        result.push(operand[i] + operator[i](operand[i]));\n    }\n    return result;\n};\n\nconst operateMulDiv = (operator, operand) => {\n    const result = [];\n    for (let i = 0; i < operand.length; i++) {\n        if (operand[i] === null) {\n            throw Error('Operand is a list of non-negative integers.');\n        }\n\n        result.push(operand[i] + operator[i](operand[i]));\n    }\n    return result;\n};\n\nconst operateExponentiation = (operator, operand) => {\n    const result = [];\n    for (let i = 0; i < operand.length; i++) {\n        if (operand[i] === null) {\n            throw Error('Operand is a list of non-negative integers.');\n        }\n\n        result.push(operand[i] + operator[i](operand[i]));\n    }\n    return result;\n};\n\nconst evaluate = (expression, array) => {\n    const operators = {\n        '+': (a, b) => a + b,\n        '-': (a, b) => a - b,\n        '*': (a, b) => a * b,\n        '/': (a, b) => a / b,\n        '**': (a, b) => Math.pow(a, b)\n    };\n\n    const operands = expression.split(/ +/g);\n\n    const operandList = array.slice(0, array.length - 1);\n    const operator = operandList.join('');\n\n    return operate(operators[operators[operator]], operands);\n};\n\nconst test = (expression, array) => {\n    console.log(evaluate(expression, array));\n};\n\n// operatorList = ['+', '-', '*', '/', '**'];\n// operandList = ['2', '3', '4', '5'];\n// array = ['2', '3', '4', '5'];\n\n// console.log(evaluate('2 + 3 * 4 - 5', array));\n// console.log(evaluate('2 + 3 * 4 + 5', array));\n// console.log(evaluate('2 + 3 * 4 - 5 + 6', array));\n// console.log(evaluate('2 + 3 * 4 - 5 - 6', array));\n// console.log(evaluate('2 + 3 * 4 - 5 - 6 + 7', array));\n// console.log(evaluate('2 + 3 * 4 - 5 + 6 - 7', array));\n// console.log(evaluate('2 + 3 * 4 - 5 + 6 * 7', array));\n// console.log(evaluate('2 + 3 * 4 - 5 - 6 * 7', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 + 7 * 8', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 + 7 * 8 - 9', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 - 7 * 8 + 9 * 9', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 - 7 * 8 + 9 * 9 - 10', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 - 7 * 8 - 9 * 9 + 10 * 10', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 + 7 * 8 - 9 * 9 + 10 * 10 - 11', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 + 7 * 8 - 9 * 9 + 10 * 10 - 11 + 12', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 - 7 * 8 + 9 * 9 - 10 * 10 + 11 * 11 - 12', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 - 7 * 8 + 9 * 9 - 10 * 10 + 11 * 11 - 12 + 13', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 - 7 * 8 + 9 * 9 - 10 * 10 + 11 * 11 - 12 + 13 - 14', array));\n// console.log(evaluate('2 + 3 * 4 - 5 * 6 - 7 * 8 +"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  const l = s.length;\n  if (l === 0) {\n    return \"\";\n  }\n  let r = s.replace(/[a-zA-Z]/g, (c) => {\n    const r = c.toUpperCase();\n    if (c.length === 1) {\n      return r;\n    }\n    return r.substring(1, r.length - 1);\n  });\n  return r;\n};\n\nconsole.log(resolve(\"ab\"));\nconsole.log(resolve(\"#a@C\"));\nconsole.log(resolve(\"1234\"));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\nmodule.exports = {\n  bowedStringedInstrumentToMd5\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  const a1 = a;\n  const b1 = b;\n  let num = 0;\n  let result = [];\n\n  while (a1 <= b1) {\n    if (a1 % 2 === 0) {\n      result.push(a1);\n    }\n    a1 += 1;\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the multiples\n  of every even number divisible by a.\n\n  For example:\n  renderEven(2, 8) => 28\n  renderEven(8, 2) => 28\n  renderEven(10, 14) => 26\n  */\nconst renderEven = (a, b) => {\n  const a1 = a;\n  const b1 = b;\n  let num = 0;\n  let result = 0;\n\n  while (a1 <= b1) {\n    if (a1 % 2 === 0) {\n      result += a1;\n    }\n    a1 += 1;\n  }\n  return result;\n};\n\nexport { renderInteger, renderEven };\n<|endoftext|>"}
