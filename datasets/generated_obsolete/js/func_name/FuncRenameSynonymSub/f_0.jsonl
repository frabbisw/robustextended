{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n  const numbersLength = numbers.length;\n\n  if (numbersLength <= 1) {\n    return false;\n  }\n\n  const closest = numbers[0];\n  let index = 1;\n  let dist = Math.abs(closest - numbers[0]);\n  while (index < numbersLength) {\n    const current = numbers[index];\n    const distToCurrent = Math.abs(closest - current);\n    if (distToCurrent < dist) {\n      dist = distToCurrent;\n      closest = current;\n    }\n    index++;\n  }\n\n  return Math.abs(closest - numbers[numbersLength - 1]) > threshold;\n};\n\nmodule.exports = receiveCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const regex = /\\(.*?\\)+/g\n  const groups = paren_string.match(regex)\n  return groups.map(paren_group => paren_group.replace(/\\(/g, '').replace(/\\)/g, ''))\n}\n\nmodule.exports = freestandingParenGroups\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const integer = Math.floor(number);\n  return integer;\n};\n\nexport { truncateNumber, truncateInteger };\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) return true;\n  }\n  return false;\n};\n\nconst belowZero2 = (operations) => {\n  let curr = 0;\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero3 = (operations) => {\n  const curr = 0;\n  const balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero4 = (operations) => {\n  let curr = 0;\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero5 = (operations) => {\n  const balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero6 = (operations) => {\n  const balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero7 = (operations) => {\n  let curr = 0;\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero8 = (operations) => {\n  let balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero9 = (operations) => {\n  let balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero10 = (operations) => {\n  let balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero11 = (operations) => {\n  let balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero12 = (operations) => {\n  let balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero13 = (operations) => {\n  let balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero14 = (operations) => {\n  let balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero15 = (operations) => {\n  let balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    if (curr < 0) {\n      balance += curr;\n      curr = 0;\n    }\n  }\n  return balance < 0;\n};\n\nconst belowZero16 = (operations) => {\n  let balance = 0;\n  let curr = 0;\n  for (let i = 0; i < operations.length; i++) {\n    curr += operations[i];\n    "}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  let mean = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n  }\n  mean /= numbers.length;\n\n  let deviation = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    deviation += Math.abs(numbers[i] - mean);\n  }\n  return deviation / numbers.length;\n};\n\n/*\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  >>> entailAbsoluteDeviation([0.0, 1.0, 2.0, 3.0])\n  1.0\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.0\n  */\nconst entailAbsoluteDeviation2 = (numbers) => {\n  let mean = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n  }\n  mean /= numbers.length;\n\n  let deviation = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    deviation += Math.abs(numbers[i] - mean);\n  }\n  return deviation;\n};\n\nexport default entailAbsoluteDeviation;\nexport {entailAbsoluteDeviation2};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const length = numbers.length - 1;\n  const output = [];\n  let i = 0;\n  for (i = 0; i < length; i += 1) {\n    output.push(numbers[i]);\n    output.push(delimeter);\n  }\n  output.push(numbers[i]);\n  return output;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\n\nconst test = () => {\n  const list = [1, 2, 3];\n  const intersperse = intersperse(list, 4);\n  console.log(list);\n  console.log(intersperse);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  paren_string = paren_string.replace(/\\s/g, '');\n  paren_string = paren_string.replace(/^\\(|\\)$/g, '');\n  paren_string = paren_string.replace(/\\s\\s/g,'');\n\n  let stack = [];\n  let i = 0;\n  let nested = 0;\n\n  while (i < paren_string.length) {\n    if (paren_string[i] === '(') {\n      stack.push(i);\n      nested++;\n    } else if (paren_string[i] === ')') {\n      if (nested === 0) {\n        throw new Error('Unexpected closing paren found at position'+ i + ':'+ paren_string[i]);\n      }\n      stack.pop();\n      nested--;\n    }\n    i++;\n  }\n\n  return stack;\n};\n\n/**\n  Convert the nested parens string to a nested array of strings,\n  in the form of (group1, group2, group3,...).\n  @param paren_string\n  @returns {Array}\n  */\nconst paren_string_to_nested_array = (paren_string) => {\n  paren_string = paren_string.replace(/\\s/g, '');\n  paren_string = paren_string.replace(/^\\(|\\)$/g, '');\n\n  let nested_array = [];\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      nested_array.push(paren_string.substring(i + 1, paren_string.indexOf(')', i + 1)));\n      i = paren_string.indexOf(')', i + 1) + 1;\n    }\n  }\n\n  return nested_array;\n};\n\nexport {parseNestedParens, paren_string_to_nested_array};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => {\n    return s.indexOf(substring) > -1\n  })\n}\n\n// filterByPrefix\n//\n// Filter an input list of strings only for ones that start with given prefix\n//\n// >>> filterByPrefix([], 'a')\n// []\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd']\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'c')\n// ['abc', 'bacd']\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'z')\n// []\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'a')\n// []\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'b')\n// []\n//\n// @param strings: the input strings\n// @param prefix: the prefix to check\n//\n// @returns the input strings, only containing ones that start with given prefix\n//\n// @example\n// >>> filterByPrefix([], 'a')\n// []\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd']\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'c')\n// ['abc', 'bacd']\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'z')\n// []\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'a')\n// []\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'b')\n// []\n//\n// @example\n// >>> filterByPrefix([], 'a')\n// []\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'a')\n// []\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'c')\n// ['abc', 'bacd']\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'z')\n// []\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'a')\n// []\n// >>> filterByPrefix(['abc', 'bacd', 'cde', 'array'], 'b')\n// []\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => {\n    return s.indexOf(prefix) === 0\n  })\n}\n\n// filterBySuffix\n//\n// Filter an input list of strings only for ones that end with given suffix\n//\n// >>> filterBySuffix([], 'a')\n// []\n// >>> filterBySuffix(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd']\n// >>> filterBySuffix(['abc', 'bacd', 'cde', 'array'], 'c')\n// ['abc', 'bacd']\n// >>> filterBySuffix(['abc', 'bacd', 'cde', 'array'], 'z')\n// []\n// >>> filterBySuffix(['abc', 'bacd', 'cde', 'array'], 'a')\n// []\n// >>> filterBySuffix(['abc', 'bacd', 'cde', 'array'], 'b')\n// []\n//\n// @param strings: the input strings\n// @param suffix: the suffix to check\n//\n// @returns the input strings, only containing ones that end with given suffix\n//\n// @example\n// >>> filterBySuffix([], 'a')\n// []\n// >>> filterBySuffix(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd']\n// >>> filterBySuffix(['abc', 'bacd', 'cde', 'array'], 'c')\n// ['abc', 'bacd']\n// >>> filterBySuffix(['abc', 'bacd', 'cde', 'array'], 'z')\n// []\n// >>> filterBySuffix(['abc', 'bacd', 'cde', 'array'], 'a')\n// []\n// >>> filterBySuffix(['abc', 'bacd', 'cde', 'array'], 'b')\n// []\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => {\n    return s.indexOf(suffix) === s.length - suffix.length\n  })\n}\n\n// filterByContains\n//\n// Filter an input list of strings only for ones that contain given substring\n//\n// >>> filterByContains([], 'a')\n// []\n// >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'cde', 'array']\n// >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'c')\n// ['abc', 'bacd']\n// >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'z')\n// []\n// >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'a')\n// []\n// >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'b')\n// []\n//\n// @param strings: the input strings\n// @param contains: the substring to check\n//\n// @returns the input strings, only containing ones that contain given substring\n//\n// @example\n// >>> filterByContains([], 'a')\n// []\n"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  const kernel = getKernel(numbers)\n  const sum = numbers.reduce((acc, current) => {\n    return current + acc\n  }, 0)\n  const product = numbers.reduce((acc, current) => {\n    return acc * current\n  }, 1)\n  return (sum, product)\n}\n\n/**\n  * @param {number} number\n  * @returns {number}\n  * @description\n  * Return the sum of all the digits of a given number.\n  * \n  * Note: The function is recursive\n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * \n  * "}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  let maxes = [];\n  let lastMax = null;\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === 0) {\n      lastMax = numbers[i];\n      maxes.push(lastMax);\n    } else if (lastMax === numbers[i]) {\n      maxes.push(lastMax);\n    } else {\n      lastMax = maxes[maxes.length - 1];\n      maxes.push(numbers[i]);\n    }\n  }\n  return maxes;\n};\n\nmodule.exports = rolledMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const length = string.length;\n  const suffix = string.split('').reverse().join('');\n  let result = string;\n  while (isPalindrome(result + suffix)) {\n    result += suffix;\n  }\n  return result.substr(0, length - result.length);\n}\n\n/* Find the longest palindrome that is the same as the supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the beginning of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  >>> makePalindrome('cataa')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const length = string.length;\n  const prefix = string.split('').reverse().join('');\n  let result = string;\n  while (isPalindrome(prefix + result)) {\n    result = result + prefix;\n  }\n  return result.substr(0, length - result.length);\n}\n\n/* Find the length of the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  0\n  >>> makePalindrome('cat')\n  1\n  >>> makePalindrome('cata')\n  2\n  >>> makePalindrome('cataa')\n  4\n  */\nconst makePalindrome = (string) => {\n  const length = string.length;\n  const suffix = string.split('').reverse().join('');\n  let result = 0;\n  while (isPalindrome(string + suffix)) {\n    result += suffix.length;\n  }\n  return result;\n}\n\n/* Find the length of the longest palindrome that is the same as the supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the beginning of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  0\n  >>> makePalindrome('cat')\n  1\n  >>> makePalindrome('cata')\n  2\n  >>> makePalindrome('cataa')\n  4\n  */\nconst makePalindrome = (string) => {\n  const length = string.length;\n  const prefix = string.split('').reverse().join('');\n  let result = 0;\n  while (isPalindrome(prefix + string)) {\n    result += string.length;\n  }\n  return result;\n}\n\n/* Find the length of the shortest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  0\n  >>> makePalindrome('cat')\n  1\n  >>> makePalindrome('cata')\n  2\n  >>> makePalindrome('cataa')\n  4\n  */\nconst makePalindrome = (string) => {\n  const length = string.length;\n  const suffix = string.split('').reverse().join('');\n  let result = 0;\n  while (isPalindrome(string + suffix)) {\n    result += suffix.length;\n  }\n  return result;\n}\n\n/* Find the length of the longest palindrome that is the same as the supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the beginning of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  0\n  >>> makePalindrome('cat')\n  1\n  >>> makePalindrome('cata')\n  2\n  >>> makePalindrome('cataa')\n  4\n  */\nconst makePalindrome = (string) => {\n  const length = string.length;\n  const prefix = string.split('').reverse().join('');\n  let result = 0;\n  while (isPalindrome(prefix + string)) {\n    result += string.length;\n  }\n  return result;\n}\n\n/* Testing */\n\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cata'));\nconsole.log(makePalindrome('cat'));\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cata'));\nconsole.log(makePalindrome('cata'));\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cataa'));\nconsole.log(makePalindrome('cataa'));"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n    let result = '';\n    let x = a.length;\n    let y = b.length;\n    let xor = '';\n    for (let i = 0; i < x; i++) {\n        for (let j = 0; j < y; j++) {\n            xor = (a[i] + b[j]) % 2;\n            result += xor;\n        }\n    }\n    return result;\n}\n\nconst testBowedStringedInstrumentXor = (a, b) => {\n    let result = bowedStringedInstrumentXor(a, b);\n    console.log(`BowedStringedInstrumentXor of ${a} and ${b} is ${result}`);\n}\n\n/*\n  Find the largest prime factor of a number.\n  >>> largestPrimeFactor(7)\n  3\n  */\nconst largestPrimeFactor = (n) => {\n    let factor = 2;\n    while (factor * factor <= n) {\n        if (n % factor === 0) {\n            return factor;\n        }\n        factor += 1;\n    }\n    return n;\n}\n\nconst testLargestPrimeFactor = (n) => {\n    console.log(`Largest Prime Factor of ${n} is ${largestPrimeFactor(n)}`);\n}\n\n/*\n  Given a string, return the number of non-empty (contiguous) substrings of the string.\n  >>> lengthOfLongestSubstring('abcd')\n  4\n  >>> lengthOfLongestSubstring('abcd')\n  4\n  >>> lengthOfLongestSubstring('abc')\n  3\n  >>> lengthOfLongestSubstring('a')\n  1\n  >>> lengthOfLongestSubstring('')\n  0\n  */\nconst lengthOfLongestSubstring = (s) => {\n    let result = 0;\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) === s.charAt(index)) {\n            result += 1;\n            max = Math.max(result, max);\n            index += 1;\n        } else {\n            result = 1;\n            index = i + 1;\n        }\n    }\n    return max;\n}\n\nconst testLengthOfLongestSubstring = (s) => {\n    console.log(`Length of longest substring of ${s} is ${lengthOfLongestSubstring(s)}`);\n}\n\n/*\n  Given two strings, return their longest common substring.\n  >>> longestCommonSubstring('abcd', 'bcde')\n  'b'\n  >>> longestCommonSubstring('abcd', 'bdde')\n  'bd'\n  >>> longestCommonSubstring('ab', 'ab')\n  'a'\n  >>> longestCommonSubstring('', '')\n  ''\n  */\nconst longestCommonSubstring = (a, b) => {\n    let result = '';\n    let index = 0;\n    for (let i = 0; i < a.length; i++) {\n        if (b.indexOf(a.charAt(i)) > index) {\n            index = b.indexOf(a.charAt(i));\n            result = a.charAt(i);\n        }\n    }\n    return result;\n}\n\nconst testLongestCommonSubstring = (a, b) => {\n    console.log(`Longest common substring of ${a} and ${b} is ${longestCommonSubstring(a, b)}`);\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reversedString('abcd')\n  'cdab'\n  >>> reversedString('ab')\n  'ba'\n  >>> reversedString('')\n  ''\n  */\nconst reversedString = (s) => {\n    let result = '';\n    for (let i = s.length - 1; i >= 0; i--) {\n        result += s.charAt(i);\n    }\n    return result;\n}\n\nconst testReversedString = (s) => {\n    console.log(`Reversed string of ${s} is ${reversedString(s)}`);\n}\n\n/*\n  Given a string, return a palindromic string.\n  >>> palindrome('abcd')\n  'abcd'\n  >>> palindrome('abc')\n  'abc'\n  >>> palindrome('aaa')\n  'aaa'\n  >>> palindrome('')\n  ''\n  */\nconst palindrome = (s) => {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i)!== s.charAt(s.length - i - 1)) {\n            return false;\n        }\n        result += s.charAt(i);\n    }\n    return result;\n}\n\nconst testPalindrome = (s) => {\n    console.log(`Palindrome of ${s} is ${palindrome(s)}`);\n}\n\nmodule.exports = {\n    bowedStringedInstrumentXor,\n    lengthOfLongestSubstring,\n    longestCommonSubstring,\n    reversedString,\n    palindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  const longest = strings.reduce((a, b) => a.length > b.length? a : b, strings[0])\n  const maxIndex = strings.indexOf(longest)\n  return (strings[maxIndex] || strings[0])\n}\n\n/*\n  Given an array of strings, return an array of strings, each string being the\n  longest substring of the previous one.\n  >>> longStrings([ 'a', 'ab', 'abc' ])\n  [ 'a', 'ab', 'abc' ]\n  >>> longStrings(['a', 'bb', 'ccc' ])\n  [ 'a', 'bb', 'ccc' ]\n  */\nconst longStrings = (strings) => {\n  const results = []\n  for (let i = 0; i < strings.length; i++) {\n    let sub = strings[i]\n    while (sub.length > 0) {\n      const next = sub.substring(1)\n      if (next.length > sub.length) {\n        results.push(sub)\n        sub = next\n      } else {\n        break\n      }\n    }\n  }\n  return results\n}\n\nmodule.exports = {\n  farseeing,\n  longStrings\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n  while (b!== 0) {\n    a = a % b;\n    b = b % b;\n  }\n  return a;\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  *\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  */\nconst capitalLCM = (a, b) => {\n  return (a * b) / capitalCoarseDivisor(a, b);\n};\n\n/**\n * Return a least common multiple of two integers a and b\n *\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nconst lcm = (a, b) => {\n  return a * b / capitalLCM(a, b);\n};\n\n/**\n * Return a greatest common divisor of two integers a and b\n *\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nconst gcd = (a, b) => {\n  const r = b % a;\n  return r === 0? a : gcd(b, a);\n};\n\nconst lcm2 = (a, b) => {\n  return a * b / capitalLCM(a, b);\n};\n\nexport { capitalLCM, lcm, gcd, lcm2 };\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  return string.split('').reverse().reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([curr,...acc]);\n  }, []);\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffix = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...acc, curr]);\n  }, []);\n};\n\n/* Return list of all unique suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'bc', 'c', 'b', 'c']\n  */\nconst allSuffixes = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...acc,...allSuffix(curr)]);\n  }, []);\n};\n\n/* Return list of all unique prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...acc,...allPrefix(curr)]);\n  }, []);\n};\n\n/* Return a list of all unique suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'b', 'c']\n  */\nconst allSuffixes = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...allSuffix(curr),...acc]);\n  }, []);\n};\n\n/* Return a list of all suffixes and prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'b', 'c']\n  */\nconst allSuffixesAndPrefixes = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...allSuffix(curr),...allPrefix(curr),...acc]);\n  }, []);\n};\n\n/* Return a list of all unique suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'b', 'c']\n  */\nconst allSuffixes = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...acc,...allSuffix(curr)]);\n  }, []);\n};\n\n/* Return a list of all unique prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...acc,...allPrefix(curr)]);\n  }, []);\n};\n\n/* Return a list of all unique suffixes and prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'b', 'c']\n  */\nconst allSuffixesAndPrefixes = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...allSuffix(curr),...allPrefix(curr),...acc]);\n  }, []);\n};\n\n/* Return a list of all unique suffixes and prefixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'b', 'c']\n  */\nconst allSuffixes = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...acc,...allSuffix(curr)]);\n  }, []);\n};\n\n/* Return a list of all unique suffixes and prefixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'b', 'c']\n  */\nconst allSuffixes = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...acc,...allSuffix(curr)]);\n  }, []);\n};\n\n/* Return a list of all unique suffixes and prefixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'b', 'c']\n  */\nconst allSuffixes = (string) => {\n  return string.split('').reduce((acc, curr) => {\n    if (curr === '') return acc;\n    return acc.concat([...acc,...allSuffix(curr)]);\n  }, []);\n};\n\n/* Return a list of all unique suffixes and prefixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'b', 'c']\n  */\n"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n// TEST\nconsole.log(`Bowed String Instrument Succession: ${bowedStringedInstrumentSuccession(4)}`);\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  return string.split('').reduce((acc, char) => {\n    if (char === char.toLowerCase()) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n};\n\n// Complete the function below.\nconst getWordCount = (string) => {\n  const wordCount = new Map();\n  const string = string.split('').map(char => char.toLowerCase());\n  string.forEach((word) => {\n    const count = wordCount.get(word) || 0;\n    wordCount.set(word, count + 1);\n  });\n  return wordCount.size;\n};\n\nconst main = (string) => {\n  const wordCount = getWordCount(string);\n  const wordCounts = wordCount.values().sort((a, b) => a - b);\n  return wordCounts.length;\n};\n\n/*\n  This function will be called using the following pseudocode:\n  /*\n  Input: s = \"xyzXYZ\"\n  Output: 3\n  */\n/*\n  Input: s = \"abcde\"\n  Output: 2\n  */\n/*\n  Input: s = \"abcdefg\"\n  Output: 3\n  */\n/*\n  Input: s = \"z\"\n  Output: 1\n  */\n/*\n  Input: s = \"b\"\n  Output: 1\n  */\n/*\n  Input: s = \"ab\"\n  Output: 2\n  */\n/*\n  Input: s = \"abb\"\n  Output: 3\n  */\n/*\n  Input: s = \"c\"\n  Output: 1\n  */\n/*\n  Input: s = \"abcd\"\n  Output: 4\n  */\n/*\n  Input: s = \"abcd\"\n  Output: 4\n  */\n/*\n  Input: s = \"abcde\"\n  Output: 5\n  */\n/*\n  Input: s = \"abcdef\"\n  Output: 6\n  */\n/*\n  Input: s = \"abcdefg\"\n  Output: 7\n  */\n/*\n  Input: s = \"xyzXYZ\"\n  Output: 3\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ')\n  const beats = []\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i]\n    const duration = parseDuration(note)\n    beats.push(duration)\n  }\n  return beats\n}\n\nconst parseDuration = (note) => {\n  const [note_length, dots] = note.match(/^(.*)\\.\\.(.*)/)\n  if (!dots) {\n    return parseNum(note_length)\n  } else {\n    const [num_of_dots, note_length] = note_length.match(/^(.*)\\.(.*)/)\n    return parseNum(num_of_dots) + parseNum(note_length)\n  }\n}\n\nconst parseNum = (num) => {\n  let length = 1\n  if (num.length > 1) {\n    length = parseNum(num.substr(0, 1))\n  }\n  return parseNum(num.substr(1, num.length - 1)) * length\n}\n\nconsole.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const strLength = string.length;\n  const subLength = substring.length;\n\n  if (subLength <= 0) {\n    return 0;\n  }\n\n  let index = -1;\n  let count = 0;\n  while ((index = string.indexOf(substring, index + 1))!== -1) {\n    count++;\n  }\n\n  return count;\n};\n\n/*\n  Given a string, count how many times the word 'e' appears in the string.\n  >>> howManyTimesE('a b c d e f')\n  3\n  >>> howManyTimesE('a b c d e f')\n  1\n  >>> howManyTimesE('e f')\n  1\n  */\nconst howManyTimesE = (string) => {\n  const strLength = string.length;\n\n  let index = -1;\n  let count = 0;\n  while ((index = string.indexOf('e', index + 1))!== -1) {\n    count++;\n  }\n\n  return count;\n};\n\n/*\n  Given a string, count how many times the word 'e' appears in the string.\n  >>> howManyTimesE('a b c d e f')\n  3\n  >>> howManyTimesE('a b c d e f')\n  1\n  >>> howManyTimesE('e f')\n  1\n  */\nconst howManyTimesE2 = (string) => {\n  const strLength = string.length;\n\n  let index = -1;\n  let count = 0;\n  while ((index = string.indexOf('e', index + 1))!== -1) {\n    count++;\n  }\n\n  return count;\n};\n\n/*\n  Given a string, count how many times the word 'a' appears in the string.\n  >>> howManyTimesA('a b c d e f')\n  1\n  >>> howManyTimesA('a b c d e f')\n  1\n  >>> howManyTimesA('a b c d e f')\n  1\n  >>> howManyTimesA('a b c d e f')\n  1\n  */\nconst howManyTimesA = (string) => {\n  const strLength = string.length;\n\n  let index = -1;\n  let count = 0;\n  while ((index = string.indexOf('a', index + 1))!== -1) {\n    count++;\n  }\n\n  return count;\n};\n\n/*\n  Given a string, count how many times the word 'e' appears in the string.\n  >>> howManyTimesE('a b c d e f')\n  3\n  >>> howManyTimesE('a b c d e f')\n  1\n  >>> howManyTimesE('a b c d e f')\n  1\n  >>> howManyTimesE('a b c d e f')\n  1\n  */\nconst howManyTimesA2 = (string) => {\n  const strLength = string.length;\n\n  let index = -1;\n  let count = 0;\n  while ((index = string.indexOf('a', index + 1))!== -1) {\n    count++;\n  }\n\n  return count;\n};\n\n/*\n  Given a string, count how many times the word 'a' appears in the string.\n  >>> howManyTimesA('a b c d e f')\n  1\n  >>> howManyTimesA('a b c d e f')\n  1\n  >>> howManyTimesA('a b c d e f')\n  1\n  >>> howManyTimesA('a b c d e f')\n  1\n  */\nconst howManyTimesA3 = (string) => {\n  const strLength = string.length;\n\n  let index = -1;\n  let count = 0;\n  while ((index = string.indexOf('a', index + 1))!== -1) {\n    count++;\n  }\n\n  return count;\n};\n\nmodule.exports = {\n  howManyTimes,\n  howManyTimesE,\n  howManyTimesA,\n  howManyTimesA2,\n  howManyTimesA3,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sortedNumbers = numbers.split(' ').sort((a, b) => a - b).join(' ');\n  return sortedNumbers;\n};\n\n/* Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('nine three one')\n  'one three nine'\n  */\nconst sortNumbersBackwards = (numbers) => {\n  const sortedNumbers = numbers.split(' ').sort((a, b) => b - a).join(' ');\n  return sortedNumbers;\n};\n\nmodule.exports = {\n  sortNumbers,\n  sortNumbersBackwards\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  const sortedNumbers = sortNumerically(numbers);\n  const len = sortedNumbers.length;\n  const minDistance = sortedNumbers[0] - sortedNumbers[1];\n  const closestNumber = sortedNumbers[0];\n\n  for (let i = 1; i < len; i++) {\n    const currentDistance = sortedNumbers[i] - sortedNumbers[i - 1];\n    if (currentDistance < minDistance) {\n      closestNumber = sortedNumbers[i];\n      minDistance = currentDistance;\n    }\n  }\n\n  return [closestNumber, sortedNumbers[len - 1]];\n};\n\nmodule.exports = receiveClosestChemicalElement;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scaled = numbers.map((number) => number / (max - min));\n  return scaled;\n};\n\nexport { rescaleToUnit };\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(isInteger);\n};\n\n/**\n  * Filter given list of any python values only for float\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(isFloat);\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(isString);\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(isBoolean);\n};\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(isDict);\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(isList);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(isNumber);\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixed = (values) => {\n  return values.filter((value) => {\n    if (isInteger(value)) {\n      return isFloat(value);\n    } else if (isString(value)) {\n      return isBoolean(value);\n    } else if (isDict(value)) {\n      return isList(value);\n    } else if (isList(value)) {\n      return isNumber(value);\n    } else {\n      return false;\n    }\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedList = (values) => {\n  return values.filter((value) => {\n    return isString(value) &&!isDict(value) &&!isList(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedFloat = (values) => {\n  return values.filter((value) => {\n    return isFloat(value) &&!isInteger(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedListFloat = (values) => {\n  return values.filter((value) => {\n    return isList(value) && isFloat(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedBoolean = (values) => {\n  return values.filter((value) => {\n    return isBoolean(value) &&!isList(value) &&!isInteger(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedListBoolean = (values) => {\n  return values.filter((value) => {\n    return isList(value) && isBoolean(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedListInteger = (values) => {\n  return values.filter((value) => {\n    return isList(value) && isInteger(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedListFloatInteger = (values) => {\n  return values.filter((value) => {\n    return isList(value) && isFloat(value) && isInteger(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedListFloat = (values) => {\n  return values.filter((value) => {\n    return isList(value) && isFloat(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedListFloatInteger = (values) => {\n  return values.filter((value) => {\n    return isList(value) && isFloat(value) && isInteger(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedListFloatIntegerFloat = (values) => {\n  return values.filter((value) => {\n    return isList(value) && isFloat(value) && isInteger(value) && isFloat(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixedListFloatFloat = (values) => {\n  return values.filter((value) => {\n    "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0\n  while (string[i]!== undefined) {\n    i++\n  }\n  return i\n}\n\n/*\n  Return the index of the first occurrence of search in string\n  >>> strindex('')\n  0\n  >>> strindex('', 'a')\n  0\n  >>> strindex('ab', 'a')\n  1\n  >>> strindex('ab', 'z')\n  -1\n  >>> strindex('ab', 'b')\n  1\n  >>> strindex('ab', 'b', 1)\n  1\n  >>> strindex('ab', 'b', 2)\n  2\n  >>> strindex('ab', 'b', 3)\n  -1\n  >>> strindex('ab', 'b', 4)\n  -1\n  */\nconst strindex = (string, search, fromIndex) => {\n  if (fromIndex === undefined) {\n    fromIndex = 0\n  }\n  let i = fromIndex\n  while (string[i]!== undefined) {\n    if (string[i] === search) {\n      return i\n    }\n    i++\n  }\n  return -1\n}\n\n/* Return true if string is empty */\nconst isEmpty = (string) => {\n  return string === undefined || string === '' || string === null || string === undefined\n}\n\n/* Return true if string is not empty */\nconst isNotEmpty = (string) => {\n  return!isEmpty(string)\n}\n\n/* Return true if string has length of 0 */\nconst isZeroLength = (string) => {\n  return string === undefined || string === '' || string === null || string === undefined || string.length === 0\n}\n\n/* Return true if string has length of >0 */\nconst isNotZeroLength = (string) => {\n  return!isZeroLength(string)\n}\n\n/* Return true if string has length of <0 */\nconst isNegativeLength = (string) => {\n  return string === undefined || string === '' || string === null || string === undefined || string.length < 0\n}\n\n/* Return true if string has length of >=0 */\nconst isPositiveLength = (string) => {\n  return!isNegativeLength(string)\n}\n\n/* Return true if string is the same as other */\nconst equals = (string, other) => {\n  return string === other\n}\n\n/* Return true if string is not the same as other */\nconst notEquals = (string, other) => {\n  return!equals(string, other)\n}\n\n/* Return true if string is less than other */\nconst lessThan = (string, other) => {\n  return string.length < other.length\n}\n\n/* Return true if string is greater than other */\nconst greaterThan = (string, other) => {\n  return string.length > other.length\n}\n\n/* Return true if string is less than or equal to other */\nconst lessThanEqual = (string, other) => {\n  return string.length <= other.length\n}\n\n/* Return true if string is greater than or equal to other */\nconst greaterThanEqual = (string, other) => {\n  return string.length >= other.length\n}\n\n/* Return true if string is the same as other */\nconst has = (string, other) => {\n  return strindex(string, other, 0)!== -1\n}\n\n/* Return true if string is not the same as other */\nconst notHas = (string, other) => {\n  return!has(string, other)\n}\n\n/* Return true if string is in list */\nconst contains = (string, list) => {\n  return strindex(string, list, 0)!== -1\n}\n\n/* Return true if string is not in list */\nconst notContains = (string, list) => {\n  return!contains(string, list)\n}\n\n/* Return true if string is an odd number */\nconst isOdd = (string) => {\n  return string.length % 2 === 1\n}\n\n/* Return true if string is an even number */\nconst isEven = (string) => {\n  return string.length % 2 === 0\n}\n\n/* Return true if string is a palindrome */\nconst isPalindrome = (string) => {\n  return strlen(string) === string.length && string.split('').reverse().join('') === string\n}\n\n/* Return true if string is a numeric string */\nconst isNumeric = (string) => {\n  let digits = string.match(/\\d/)\n  if (digits === null) {\n    return false\n  }\n  return digits.length === string.length\n}\n\n/* Return true if string is a lowercase string */\nconst isLowercase = (string) => {\n  return string === string.toLowerCase()\n}\n\n/* Return true if string is a uppercase string */\nconst isUppercase = (string) => {\n  return string === string.toUpperCase()\n}\n\n/* Return true if string is a sentence string */\nconst isSentence = (string) => {\n  return strlen(string) >= 3 && strlen(string) <= 40\n}\n\n/* Return true if string is a numeric string */\nconst isDigit = (string) => {\n  return isNumeric(string)\n}\n\n/* Return true if string is a letter */\nconst isLetter = (string) => {\n  return string.match(/[a-zA-Z]/)!== null\n}\n\n/* Return true if string is a letter */\nconst isLetterOrDigit = (string) => {\n  return string.match(/[a-zA-Z0-9]/)!== null\n}\n\n/* Return true if string is a word */\nconst isWord = (string) => {\n  return strlen(string) >= 3 && strlen(string) <= 40\n}\n\n/* Return true if string is a letter */\nconst isAlphabetic = (string) => {\n  return string.match(/[a-zA-Z]/)!== null\n}\n\n/* Return true if string is a numeric string */\nconst isAlphaNumeric = (string) => {\n  return isAlphabetic(string) || isNumeric(string)\n}\n\n/* Return true if string is a valid phone number */\nconst isPhoneNumber = (string) => {\n"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n    const divisor = (i) => (n / i) % n;\n    const divisors = [1];\n    while (divisor(divisors[divisors.length - 1])!== 0) {\n        divisors.push(divisor(divisors[divisors.length - 1]));\n    }\n    return divisors.length - 1;\n};\n\nconst numberOfDivisors = (n) => {\n    const divisors = [];\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            divisors.push(i);\n        }\n    }\n    return divisors.length;\n};\n\nconst gcd = (a, b) => {\n    while (b!== 0) {\n        const temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n};\n\nconst lcm = (a, b) => {\n    return a * (b / gcd(a, b));\n};\n\nconst findGCD = (a, b) => {\n    const gcd = gcd(a, b);\n    return gcd === 1? a : findGCD(b, a % b);\n};\n\nconst getLCM = (a, b) => {\n    const lcm = lcm(a, b);\n    return lcm === a? b : getLCM(b, a % b);\n};\n\n// A.2.5.2.1\nconst solution = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.2\nconst solution2 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.3\nconst solution3 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.4\nconst solution4 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.5\nconst solution5 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.6\nconst solution6 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.7\nconst solution7 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.8\nconst solution8 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.9\nconst solution9 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.10\nconst solution10 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.11\nconst solution11 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.12\nconst solution12 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.13\nconst solution13 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);\n    const lcm = getLCM(a, b);\n    const num2 = lcm / div;\n\n    return num2 === a? b : a;\n};\n\n// A.2.5.2.14\nconst solution14 = (a, b) => {\n    const num = a + b;\n    const div = bigDivisor(num);"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 1\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor++\n  }\n  return factors\n}\n\n// const factorize = (n) => {\n//   const factors = []\n//   for (let factor = 1; n > 1; n /= factor) {\n//     if (n % factor === 0) {\n//       factors.push(factor)\n//     }\n//   }\n//   return factors\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const { length } = numbers;\n  const { sort } = [];\n  const { uniq } = [];\n\n  sort(numbers);\n  uniq(numbers);\n\n  const output = [];\n  let i = 0;\n  let j = 0;\n  while (i < length) {\n    if (j < length && numbers[i] === numbers[j]) {\n      j++;\n    } else {\n      output.push(numbers[i]);\n      i++;\n      j = 0;\n    }\n  }\n  return output;\n};\n\nexport default getRidOfDuplicate;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n    return string.toLowerCase().replace(/[a-z]/g, (char) => char.toUpperCase())\n}\n\n/*\n  Given a string, split the string into an array of words, where the words are\n  separated by any non-alphabetic character.\n  */\nconst splitWords = (string) => {\n    return string.split(/(\\s*[^a-zA-Z])/)\n}\n\n/*\n  Given a string, return a string where each letter has been swapped.\n  */\nconst swapCase = (string) => {\n    return string.toUpperCase().replace(/[a-z]/g, (char) => char.toLowerCase())\n}\n\nconst swapWords = (string) => {\n    return string.toUpperCase().split(/(\\s*[^a-zA-Z])/)\n       .map(word => word.toLowerCase().replace(/[A-Z]/g, (char) => char.toUpperCase()))\n       .join(' ')\n}\n\nmodule.exports = {\n    impudentCase,\n    splitWords,\n    swapCase,\n    swapWords\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  strings.forEach(function(string) {\n    result += string\n  })\n  return result\n}\n\n/*\n  >>> concatenate([2, 3, 4])\n  '2324'\n  >>> concatenate([2, 3, 4], [5, 6, 7])\n  '23245627'\n  >>> concatenate([2, 3, 4], [5, 6, 7], [8, 9, 10])\n  '23245627089'\n  */\nconst concatenate = (...strings) => {\n  let result = ''\n  strings.forEach(function(string) {\n    result += string\n  })\n  return result\n}\n\n/*\n  >>> concatenate(['a', 'b', 'c'], [2, 3, 4])\n  'ab2324'\n  >>> concatenate(['a', 'b', 'c'], [2, 3, 4], [5, 6, 7])\n  'ab23245627'\n  >>> concatenate(['a', 'b', 'c'], [2, 3, 4], [5, 6, 7], [8, 9, 10])\n  'ab23245627089'\n  */\nconst concatenate = (...strings) => {\n  let result = ''\n  strings.forEach(function(string) {\n    result += string\n  })\n  return result\n}\n\nmodule.exports = {\n  concatenate\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const arr = strings.filter((x) => x.startsWith(prefix));\n  return arr;\n};\n\n/**\n  * Returns a list of strings that contains only the strings that have at least one of the given prefixes.\n  * @param  {Array} strings\n  * @param  {Array} prefixes\n  * @return {Array}\n  */\nconst getFilteredStringsByPrefix = (strings, prefixes) => {\n  const arr = prefixes.map((p) => filterByPrefix(strings, p));\n  return arr;\n};\n\nconst getFilteredStringsByPrefix = (strings, prefixes) => {\n  const arr = prefixes.map((p) => filterByPrefix(strings, p));\n  return arr;\n};\n\nexport default {\n  getFilteredStringsByPrefix,\n  filterByPrefix,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  let isPositive = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      isPositive = false;\n      break;\n    }\n  }\n  return isPositive? l : [];\n};\n\n/*\n  *\n  * Returns only negative numbers in the list.\n  *\n  * @param l\n  * @returns {Array}\n  * @description\n  *\n  *  >>> catchNegative([-1, 2, -4, 5, 6])\n  *  [-4, -5, -6]\n  *  >>> catchNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *  [5, 3, -3, 9, 0, 1, -10]\n  *\n  *\n  *\n  */\nconst catchNegative = (l) => {\n  let isNegative = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      isNegative = false;\n      break;\n    }\n  }\n  return isNegative? l : [];\n};\n\n/*\n  *\n  * Returns only even numbers in the list.\n  *\n  * @param l\n  * @returns {Array}\n  * @description\n  *\n  *  >>> catchEven([2, -4, 5, 6])\n  *  [2, 4, 6]\n  *  >>> catchEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *  [5, 3, -3, 9, 0, 1, -10]\n  *\n  */\nconst catchEven = (l) => {\n  let isEven = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      isEven = false;\n      break;\n    }\n  }\n  return isEven? l : [];\n};\n\n/*\n  *\n  * Returns only odd numbers in the list.\n  *\n  * @param l\n  * @returns {Array}\n  * @description\n  *\n  *  >>> catchOdd([2, -4, 5, 6])\n  *  [2, -4, 6]\n  *  >>> catchOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  *\n  */\nconst catchOdd = (l) => {\n  let isOdd = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      isOdd = false;\n      break;\n    }\n  }\n  return isOdd? l : [];\n};\n\n/*\n  *\n  * Returns only positive and negative numbers in the list.\n  *\n  * @param l\n  * @returns {Array}\n  * @description\n  *\n  *  >>> catchBoth([-1, 2, -4, 5, 6])\n  *  [-1, 2, -4, 5, 6]\n  *  >>> catchBoth([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  *\n  *\n  *\n  */\nconst catchBoth = (l) => {\n  let isPositive = true;\n  let isNegative = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      isNegative = false;\n      break;\n    }\n    if (l[i] > 0) {\n      isPositive = false;\n      break;\n    }\n  }\n  return isPositive && isNegative? l : [];\n};\n\nexport default {\n  catchPositive,\n  catchNegative,\n  catchEven,\n  catchOdd,\n  catchBoth,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  if (n === 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return a random prime number, and true if one exists, and false otherwise.\n  >>> isPremier(10)\n  true\n  >>> isPremier(15)\n  true\n  >>> isPremier(1000)\n  false\n  >>> isPremier(0)\n  false\n  */\nconst isPremierRand = (n) => {\n  if (n === 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return a random prime number, and true if one exists, and false otherwise.\n  >>> isPremierRand(10)\n  true\n  >>> isPremierRand(15)\n  true\n  >>> isPremierRand(1000)\n  true\n  >>> isPremierRand(0)\n  false\n  */\nconst isPremierRand2 = (n) => {\n  const a = Math.floor(Math.random() * n)\n  const b = Math.floor(Math.random() * (n - a)) + a\n  if (a === b) return false\n  return true\n}\n\n/*Return the number of primes up to n, and true if one exists, and false otherwise.\n  >>> isPremier(10)\n  true\n  >>> isPremier(15)\n  true\n  >>> isPremier(1000)\n  true\n  >>> isPremier(0)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremierBucket = (n) => {\n  if (n === 1) return false\n  const isPrime = isPremier(n)\n  if (isPrime) return true\n  for (let i = 2; i * i <= n; i++) {\n    if (isPremier(n - i)) return false\n  }\n  return true\n}\n\n/*Return the number of primes up to n, and true if one exists, and false otherwise.\n  >>> isPremierBucket(10)\n  true\n  >>> isPremierBucket(15)\n  true\n  >>> isPremierBucket(1000)\n  true\n  >>> isPremierBucket(0)\n  false\n  >>> isPremierBucket(1)\n  false\n  */\nconst isPremierBucket2 = (n) => {\n  const isPrime = isPremierRand(n)\n  if (isPrime) return true\n  for (let i = 2; i * i <= n; i++) {\n    if (isPremierRand2(n - i)) return false\n  }\n  return true\n}\n\n/*Return a string of the number of primes up to n, and true if one exists, and false otherwise.\n  >>> isPremier(10)\n  true\n  >>> isPremier(15)\n  true\n  >>> isPremier(1000)\n  true\n  >>> isPremier(0)\n  false\n  >>> isPremier(1)\n  false\n  >>> isPremier(\"Hello\")\n  false\n  */\nconst isPremierString = (n) => {\n  if (n === 1) return false\n  const isPrime = isPremier(n)\n  if (isPrime) return true\n  let i = 2\n  const a = \"\"\n  while (i * i <= n) {\n    if (isPremier(n - i)) return false\n    a += `${i}`\n    i++\n  }\n  return true\n}\n\n/*Return a string of the number of primes up to n, and true if one exists, and false otherwise.\n  >>> isPremierString(10)\n  true\n  >>> isPremierString(15)\n  true\n  >>> isPremierString(1000)\n  true\n  >>> isPremierString(0)\n  false\n  >>> isPremierString(1)\n  false\n  >>> isPremierString(\"Hello\")\n  false\n  */\nconst isPremierString2 = (n) => {\n  const isPrime = isPremierRand(n)\n  if (isPrime) return true\n  let i = 2\n  const a = \"\"\n  while (i * i <= n) {\n    if (isPremierRand2(n - i)) return false\n    a += `${i}`\n    i++\n  }\n  return true\n}\n\n/*Return a string of the number of primes up to n, and true if one exists, and false otherwise.\n  >>> isPremierString(10)\n  true\n  >>> isPremierString(15)\n  true\n  >>> isPremierString(1000)\n  true\n  >>> isPremierString(0)\n  false\n  >>> isPremierString(1)\n  false\n  >>> isPremierString(\"Hello\")\n  false\n  */\nconst isPremierString3 = (n) => {\n  const isPrime = isPremierBucket(n)\n  if (isPrime) return true\n  let i = 2\n  const a = \"\"\n  while (i * i <= n) {\n    if (isPremierBucket2(n - i)) return false\n    a += `${i}`\n    i++\n  }\n  return true\n}\n\nconsole.log(isPremier(10001))\nconsole.log(isPremier(10001))\nconsole.log(isPremier(1000000))\nconsole.log(isPremier(1000000))\nconsole.log(isPremier(1000000))\nconsole.log(isPremier(1000000))\nconsole.log(isPremier(1000000))\nconsole.log(isPremier(1000000))\nconsole.log(isPremier(1000000))\nconsole.log(isPremier(1000000))\nconsole.log(isPremier(1000000))\nconsole.log(isPremier(1000000))\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2 === 1) {\n    throw new Error('xs should have even number of coefficients.');\n  }\n  let min = Infinity;\n  for (let i = 0; i < xs.length; i += 2) {\n    let next = poly(xs, xs[i + 1]);\n    if (next === 0) {\n      min = xs[i];\n      break;\n    }\n  }\n  return min;\n}\n\nmodule.exports = {\n  findZero,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3!== 0) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird2 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 0) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird3 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 2) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird4 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 1) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird5 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 0) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird6 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 1) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird7 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 2) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird8 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 0 || l1[i] % 3 === 1) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird9 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 0) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird10 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 1) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird11 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 2) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird12 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 0 || l1[i] % 3 === 1) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird13 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 0 || l1[i] % 3 === 2) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird14 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 0 || l1[i] % 3 === 1) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nconst sortThird15 = (l) => {\n    const l1 = [...l];\n    const l2 = [];\n    for (let i = 0; i < l1.length; i++) {\n        if (l1[i] % 3 === 2) {\n            l2.push(l1[i]);\n        }\n    }\n    return l2;\n};\n\nexport {\n    sortThird,\n    sortThird2,\n    sortThird3,\n    sortThird4,\n    sortThird5,\n    "}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = 0; i < n; i++) {\n    a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return a copy of a list\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst copy = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = 0; i < n; i++) {\n    a.push(l[i]);\n  }\n  return a;\n};\n\n/*Return a copy of a list but without repeated elements\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 9]\n  */\nconst unique = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = 0; i < n; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return a copy of a list but without repeated elements\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 9]\n  */\nconst unique_inverse = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = 0; i < n; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return a copy of a list but without repeated elements\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 9]\n  */\nconst remove = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = 0; i < n; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return a copy of a list but without repeated elements\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 9]\n  */\nconst unique_reverse = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = n - 1; i >= 0; i--) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return a copy of a list but without repeated elements\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 9]\n  */\nconst remove_inverse = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = 0; i < n; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return a copy of a list but without repeated elements\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 9]\n  */\nconst remove_reverse = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = n - 1; i >= 0; i--) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return a copy of a list but without repeated elements\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 9]\n  */\nconst unique_and_inverse = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = 0; i < n; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return a copy of a list but without repeated elements\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 9]\n  */\nconst unique_and_reverse = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = 0; i < n; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return a copy of a list but without repeated elements\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 9]\n  */\nconst unique_and_inverse_reverse = (l) => {\n  const a = [];\n  const n = l.length;\n  for (let i = n - 1; i >= 0; i--) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return a copy of a list but without repeated elements\n  >>> copy([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 9]\n  */\nconst unique_and_reverse_inverse = (l) => {\n  const a = [];\n  const n ="}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = -Infinity\n  let value\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      value = i\n    }\n  }\n  return value\n}\n\n/* Return a list of elements of l which are also in m.\n  >>> list(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> list(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]))\n  [1]\n  >>> list(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]))\n  [1, 2, 3]\n  */\nconst list = (l, m) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] in m) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/* Return a list of elements of l which are not in m.\n  >>> list(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]))\n  [5, 6, 7, 8, 9]\n  >>> list(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]))\n  []\n  >>> list(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6]))\n  [7, 8, 9]\n  */\nconst listNot = (l, m) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] not in m) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/* Return the sum of all elements in l.\n  >>> sum(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n  45\n  >>> sum(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]))\n  10\n  >>> sum(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]))\n  6\n  >>> sum(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]))\n  1\n  */\nconst sum = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/* Return the list of elements of l which are less than m.\n  >>> lessThan(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]), 3)\n  [1, 2, 3, 4, 5]\n  >>> lessThan(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6]), 3)\n  []\n  >>> lessThan(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7]), 3)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> lessThan(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8]), 3)\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst lessThan = (l, m) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < m) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/* Return the list of elements of l which are greater than m.\n  >>> greaterThan(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]), 3)\n  [4, 5, 6, 7, 8, 9]\n  >>> greaterThan(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6]), 3)\n  []\n  >>> greaterThan(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7]), 3)\n  [8, 9]\n  >>> greaterThan(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8]), 3)\n  [9]\n  */\nconst greaterThan = (l, m) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > m) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/* Return a list of elements of l which are between m1 and m2.\n  >>> between(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]), 3, 6)\n  [4, 5, 6, 7, 8, 9]\n  >>> between(soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6]), 3, 6)\n  []\n  >>> between(soap"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  }\n  if (n % 3 === 0) {\n    return n;\n  }\n  if (n % 5 === 0) {\n    return n;\n  }\n  if (n % 7 === 0) {\n    return n;\n  }\n  if (n % 11 === 0) {\n    return n;\n  }\n  if (n % 13 === 0) {\n    return n;\n  }\n  return n + 1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const lCopy = JSON.parse(JSON.stringify(l));\n  const newL = [];\n  for (let i = 0; i < l.length; i += 2) {\n    newL.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    newL.push(l[i]);\n  }\n  return newL;\n}\n\nexport default sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = s.split(''),\n        groups2 = [];\n  for (let i = 0; i < groups.length; i++) {\n    if (groups[i].length == 2)\n      groups2.push(groups[i][1] + groups[i][0]);\n    else\n      groups2.push(groups[i]);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns the number of groups in the given string\n  */\nconst countGroups = (s) => {\n  var n = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == s.charAt(i + 1))\n      n++;\n  }\n  return n;\n}\n\n/*\n  checks if the given string contains only one character.\n  */\nconst isOneChar = (s) => s.length == 1;\n\n/*\n  checks if the given string contains only two characters.\n  */\nconst isTwoChar = (s) => s.length == 2;\n\n/*\n  checks if the given string contains only three characters.\n  */\nconst isThreeChar = (s) => s.length == 3;\n\n/*\n  checks if the given string contains only four characters.\n  */\nconst isFourChar = (s) => s.length == 4;\n\n/*\n  checks if the given string contains only five characters.\n  */\nconst isFiveChar = (s) => s.length == 5;\n\n/*\n  checks if the given string contains only six characters.\n  */\nconst isSixChar = (s) => s.length == 6;\n\n/*\n  checks if the given string contains only seven characters.\n  */\nconst isSevenChar = (s) => s.length == 7;\n\n/*\n  checks if the given string contains only eight characters.\n  */\nconst isEightChar = (s) => s.length == 8;\n\n/*\n  checks if the given string contains only nine characters.\n  */\nconst isNineChar = (s) => s.length == 9;\n\n/*\n  checks if the given string contains only ten characters.\n  */\nconst isTenChar = (s) => s.length == 10;\n\n/*\n  checks if the given string contains only eleven characters.\n  */\nconst isElevenChar = (s) => s.length == 11;\n\n/*\n  checks if the given string contains only twelve characters.\n  */\nconst isTwelveChar = (s) => s.length == 12;\n\n/*\n  checks if the given string contains only thirteen characters.\n  */\nconst isThirteenChar = (s) => s.length == 13;\n\n/*\n  checks if the given string contains only fourteen characters.\n  */\nconst isFourteenChar = (s) => s.length == 14;\n\n/*\n  checks if the given string contains only fifteen characters.\n  */\nconst isFifteenChar = (s) => s.length == 15;\n\n/*\n  checks if the given string contains only sixteen characters.\n  */\nconst isSixteenChar = (s) => s.length == 16;\n\n/*\n  checks if the given string contains only seventeen characters.\n  */\nconst isSeventeenChar = (s) => s.length == 17;\n\n/*\n  checks if the given string contains only eighteen characters.\n  */\nconst isEighteenChar = (s) => s.length == 18;\n\n/*\n  checks if the given string contains only nineteen characters.\n  */\nconst isNineteenChar = (s) => s.length == 19;\n\n/*\n  checks if the given string contains only twenty characters.\n  */\nconst isTwentyChar = (s) => s.length == 20;\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  let x = 1,\n    y = 2;\n  if (n === 1) {\n    return 2;\n  } else if (n === 2) {\n    return 3;\n  }\n  for (let i = 0; i < n; i++) {\n    let sum = x + y;\n    x = y;\n    y = sum;\n  }\n  return sum;\n};\n\nconsole.log(premierFib(1));\nconsole.log(premierFib(2));\nconsole.log(premierFib(3));\nconsole.log(premierFib(4));\nconsole.log(premierFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  const list = Array.from(l).sort();\n  const length = list.length;\n\n  // if there is a single element, the list is sorted and the single element is\n  // the only element with a sum of zero, so return true.\n  if (length === 1) return true;\n\n  // if there are no elements in the list, return false.\n  if (length === 0) return false;\n\n  // if there is a single element, the list is sorted, and the single element is\n  // the only element with a sum of zero, so return true.\n  if (length === 1) return true;\n\n  // If there are only two elements, the list is sorted, and the second element\n  // has a sum of zero, return true.\n  if (length === 2) return list[1] === 0;\n\n  // If there are only three elements, the list is sorted, and the third element\n  // has a sum of zero, return true.\n  if (length === 3) return list[2] === 0;\n\n  // If there are more than three elements, then the list is sorted, and there\n  // are three distinct elements with sum of zero, return true.\n  if (length >= 3) {\n    const sorted = list.sort();\n    const sum = sorted[0] + sorted[1] + sorted[2];\n    return sum === 0;\n  }\n};\n\n// Test\nconst test = [1, 3, 5, 0, -2, 1];\nconsole.log(tripleTotalToZero(test));\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  let collidingCars = 0;\n  let car;\n  let x;\n  let y;\n  let carLeftToRight;\n  let carRightToLeft;\n  for (let i = 0; i < n; i++) {\n    carLeftToRight = i;\n    carRightToLeft = n - 1 - i;\n    for (let j = i + 1; j < n; j++) {\n      car = carLeftToRight + carRightToLeft;\n      x = Math.random() * (carLeftToRight * 3);\n      y = Math.random() * (carRightToLeft * 3);\n      if (x < (carLeftToRight + 1) * 3 && x > (carRightToLeft - 1) * 3 && y < (carLeftToRight + 1) * 3 && y > (carRightToLeft - 1) * 3) {\n        collidingCars += 1;\n      }\n    }\n  }\n  return collidingCars;\n};\n\nconsole.log(cableCarRaceCollision(5));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    let list = l.slice();\n    list.forEach((x) => x += 1);\n    return list;\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n    if(l.length === 1) {\n        return false;\n    }\n    \n    for(let i = 0; i < l.length; i++) {\n        for(let j = i + 1; j < l.length; j++) {\n            if(l[i] === 0 && l[j] === 0) {\n                return true;\n            }\n            if(l[i] === 0 && l[j]!== 0) {\n                return false;\n            }\n            if(l[i]!== 0 && l[j] === 0) {\n                return false;\n            }\n        }\n    }\n    \n    return false;\n};\n\nmodule.exports = copulateUnionToZero;<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  let str = '';\n  let i = x;\n  while (i) {\n    str = `${i % base}${str}`;\n    i = Math.floor(i / base);\n  }\n  return str;\n};\n\n/*\n  Given an array of numbers, find the sum of the numbers.\n  >>> varietySum([1, 2, 3])\n  6\n  >>> varietySum([7, 8, 9])\n  24\n  >>> varietySum([1, 2, 3, 4, 5])\n  15\n  >>> varietySum([1, 2, 3, 4, 5, 6])\n  21\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8])\n  33\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  51\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  60\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  69\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  78\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  87\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  96\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  105\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  114\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  123\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  132\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  141\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  150\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  159\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  168\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  177\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  186\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  195\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  204\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  213\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  222\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  231\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  240\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  249\n  >>> varietySum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return a * h / 2;\n};\n\n/**Given a triangle with area a, high, and low sides return the area of the equilateral triangle.\n  >>> equilateralTriangleArea(5, 3, 1)\n  7.5\n  */\nconst equilateralTriangleArea = (a, h, l) => {\n  return a * h / 2 + a * l / 2;\n};\n\nexport default {triangulumArea, equilateralTriangleArea};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let fib = [0, 1, 2, 0, 1, 3, 0, 1, 4, 0, 1, 5, 3, 1, 6, 0, 1, 7, 5, 3, 1, 8, 6, 4, 1, 9, 7, 5, 4, 2, 1, 10];\n  if (n < fib.length) {\n    return fib[n];\n  } else {\n    return fib4(n - fib.length) + fib4(n - fib.length - 1) + fib4(n - fib.length - 2) + fib4(n - fib.length - 3) + fib4(n - fib.length - 4);\n  }\n}\n\nmodule.exports = fib4;<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 1) {\n    return l[0];\n  }\n  if (l.length === 2) {\n    return (l[0] + l[1]) / 2;\n  }\n  let middle = Math.floor(l.length / 2);\n  return (l[middle] + l[l.length - middle]) / 2;\n};\n\n/**\n  * Return the median of the array.\n  * @param {Array} l - Array of numbers.\n  * @returns {Number} median of the array.\n  * @example\n  * // Example 1\n  * median([2, 3, 5, 7])\n  * // -> 5\n  * // Example 2\n  * median([2, 4, 6, 8])\n  * // -> 6\n  */\nconst medianArray = (l) => {\n  const sorted = l.slice().sort(function(a, b) {\n    return a - b;\n  });\n  return sorted[Math.floor(sorted.length / 2)];\n};\n\n/**\n  * Return the median of the array.\n  * @param {Array} l - Array of numbers.\n  * @returns {Number} median of the array.\n  * @example\n  * // Example 1\n  * median([2, 3, 5, 7])\n  * // -> 5\n  * // Example 2\n  * median([2, 4, 6, 8])\n  * // -> 6\n  */\nconst medianArray2 = (l) => {\n  const sorted = l.slice().sort((a, b) => b - a);\n  return sorted[Math.floor(sorted.length / 2)];\n};\n\nexport { median, medianArray, medianArray2 };\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        reversed += text[i];\n    }\n    return text === reversed;\n};\n\n/*\n  Checks if given string has all unique characters\n  >>> isUnique('abcdef')\n  true\n  >>> isUnique('abca')\n  false\n  >>> isUnique('aabb')\n  true\n  >>> isUnique('aaa')\n  false\n  */\nconst isUnique = (text) => {\n    for (let i = 0; i < text.length - 1; i++) {\n        for (let j = i + 1; j < text.length; j++) {\n            if (text[i] === text[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\n/*\n  Counts all unique characters in a given string\n  >>> countUnique('abcdef')\n  6\n  >>> countUnique('abca')\n  1\n  >>> countUnique('aabb')\n  3\n  >>> countUnique('aaa')\n  1\n  */\nconst countUnique = (text) => {\n    let result = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text.includes(text[i])) {\n            result += 1;\n        }\n    }\n    return result;\n};\n\n/*\n  Checks if given string contains all unique characters\n  >>> containsUnique('abcdef')\n  true\n  >>> containsUnique('abca')\n  false\n  >>> containsUnique('aabb')\n  true\n  >>> containsUnique('aaa')\n  false\n  */\nconst containsUnique = (text) => {\n    for (let i = 0; i < text.length; i++) {\n        for (let j = i + 1; j < text.length; j++) {\n            if (text.includes(text[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\n/*\n  Checks if given string contains all unique characters and is unique\n  >>> containsUniqueUnique('abcdef')\n  true\n  >>> containsUniqueUnique('abca')\n  false\n  >>> containsUniqueUnique('aabb')\n  true\n  >>> containsUniqueUnique('aaa')\n  false\n  */\nconst containsUniqueUnique = (text) => {\n    if (!isUnique(text)) {\n        return false;\n    }\n    for (let i = 0; i < text.length; i++) {\n        for (let j = i + 1; j < text.length; j++) {\n            if (text.includes(text[i]) && text.includes(text[j])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\n/*\n  Returns sum of all unique characters in a given string\n  >>> sumUnique('abcdef')\n  6\n  >>> sumUnique('abca')\n  0\n  >>> sumUnique('aabb')\n  3\n  >>> sumUnique('aaa')\n  1\n  */\nconst sumUnique = (text) => {\n    let sum = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text.includes(text[i])) {\n            sum += 1;\n        }\n    }\n    return sum;\n};\n\nmodule.exports = {\n    isPalindrome,\n    isUnique,\n    countUnique,\n    containsUnique,\n    containsUniqueUnique,\n    sumUnique\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return n % p\n}\n\n/*Return a string of numbers 1-9 for use as a barcode.\n  >>> barcode(9)\n  'A1B2C3D4E5F6G7H8I9'\n  >>> barcode(9, 'A')\n  'A1B2C3D4E5F6G7H8I9'\n  >>> barcode(1, 'A')\n  'A'\n  >>> barcode(0)\n  'A'\n  */\nconst barcode = (n, str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') => {\n  let output = ''\n  for (let i = 0; i < n; i++) {\n    output += str[modp(i, str.length)]\n  }\n  return output\n}\n\n/*Return a string of numbers 1-9 for use as a barcode.\n  >>> barcode(9, 'A', 'B')\n  'A1B2C3D4E5F6G7H8I9'\n  >>> barcode(1, 'A', 'B')\n  'A1B'\n  >>> barcode(0, 'A', 'B')\n  'A1B'\n  */\nconst barcode = (n, str1, str2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') => {\n  let output = ''\n  for (let i = 0; i < n; i++) {\n    output += str1[modp(i, str1.length)]\n    output += str2[modp(i, str2.length)]\n  }\n  return output\n}\n\n/*Return a string of numbers 1-9 for use as a barcode.\n  >>> barcode(9, 'A', 'B', 'C')\n  'A1B2C3D4E5F6G7H8I9'\n  >>> barcode(1, 'A', 'B', 'C')\n  'A1B2C'\n  >>> barcode(0, 'A', 'B', 'C')\n  'A1B2C'\n  */\nconst barcode = (n, str1, str2, str3 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') => {\n  let output = ''\n  for (let i = 0; i < n; i++) {\n    output += str1[modp(i, str1.length)]\n    output += str2[modp(i, str2.length)]\n    output += str3[modp(i, str3.length)]\n  }\n  return output\n}\n\n/*Return a string of numbers 1-9 for use as a barcode.\n  >>> barcode(9, 'A', 'B', 'C', 'D')\n  'A1B2C3D4E5F6G7H8I9'\n  >>> barcode(1, 'A', 'B', 'C', 'D')\n  'A1B2C3D'\n  >>> barcode(0, 'A', 'B', 'C', 'D')\n  'A1B2C3D'\n  */\nconst barcode = (n, str1, str2, str3, str4 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') => {\n  let output = ''\n  for (let i = 0; i < n; i++) {\n    output += str1[modp(i, str1.length)]\n    output += str2[modp(i, str2.length)]\n    output += str3[modp(i, str3.length)]\n    output += str4[modp(i, str4.length)]\n  }\n  return output\n}\n\n/*Return a string of numbers 1-9 for use as a barcode.\n  >>> barcode(9, 'A', 'B', 'C', 'D', 'E')\n  'A1B2C3D4E5F6G7H8I9'\n  >>> barcode(1, 'A', 'B', 'C', 'D', 'E')\n  'A1B2C3D4E'\n  >>> barcode(0, 'A', 'B', 'C', 'D', 'E')\n  'A1B2C3D4E'\n  */\nconst barcode = (n, str1, str2, str3, str4, str5 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') => {\n  let output = ''\n  for (let i = 0; i < n; i++) {\n    output += str1[modp(i, str1.length)]\n    output += str2[modp(i, str2.length)]\n    output += str3[modp(i, str3.length)]\n    output += str4[modp(i, str4.length)]\n    output += str5[modp(i, str5.length)]\n  }\n  return output\n}\n\n/*Return a string of numbers 1-9 for use as a barcode.\n  >>> barcode(9, 'A', 'B', 'C', 'D', 'E', 'F')\n  'A1B2C3D4E5F6G7H8I9'\n  >>> barcode(1, 'A', 'B', 'C', 'D', 'E', 'F')\n  'A1B2C3D4E5F'\n  >>> barcode(0, 'A', 'B', 'C', 'D', 'E', 'F')\n  'A1B2C3D4E5F'\n  */\nconst barcode = (n, str1, str2, str3, str4, str5, str6 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') => {\n  let output = ''\n  for (let i = 0; i < n; i++) {\n    output += str1[modp(i, str1.length)]\n    output += str2[modp(i, str2.length)]\n    output += str3"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) - 5) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  Encodes string and returns encoded string.\n  */\nconst encode = (s) => encodeShift(s)\n\n/*\n  Decodes string and returns decoded string.\n  */\nconst decode = (s) => decodeShift(s)\n\n/*\n  Returns number of characters in string.\n  */\nconst length = (s) => s.length\n\n/*\n  Returns number of letters in string.\n  */\nconst numLetters = (s) => s.split(\"\").reduce((a, b) => (a + b.length), 0)\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAlphabetic = (s) => {\n  return s.split(\"\").reduce((a, b) => (a && b.match(/[a-z]/i)), true)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isNumeric = (s) => {\n  return s.split(\"\").reduce((a, b) => (a && b.match(/[0-9]/i)), true)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAlphanumeric = (s) => {\n  return isAlphabetic(s) && isNumeric(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isLowerCase = (s) => {\n  return s.toLowerCase() === s\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isUpperCase = (s) => {\n  return s.toUpperCase() === s\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isPunctuation = (s) => {\n  return s.split(\"\").reduce((a, b) => (a && b.match(/[.,!#\\$%\\^&*;:<>\\-_+~]/i)), true)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isLowerCaseAlphanumeric = (s) => {\n  return isAlphanumeric(s) && isLowerCase(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isUpperCaseAlphanumeric = (s) => {\n  return isAlphanumeric(s) && isUpperCase(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAlphabeticAlphanumeric = (s) => {\n  return isAlphanumeric(s) && isAlphabetic(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAlphabeticNumeric = (s) => {\n  return isNumeric(s) && isAlphabetic(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAlphanumeric = (s) => {\n  return isAlphanumeric(s) || isNumeric(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllAlphabetic = (s) => {\n  return isAlphabetic(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllAlphanumeric = (s) => {\n  return isAlphanumeric(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllLowerCase = (s) => {\n  return isLowerCase(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllUpperCase = (s) => {\n  return isUpperCase(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllAlphabeticAlphanumeric = (s) => {\n  return isAlphabetic(s) && isAlphabeticAlphanumeric(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllAlphabeticNumeric = (s) => {\n  return isAlphabetic(s) && isAlphabeticNumeric(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllAlphabetic = (s) => {\n  return isAllAlphabeticNumeric(s) || isAllAlphabeticAlphanumeric(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllNumeric = (s) => {\n  return isNumeric(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllPunctuation = (s) => {\n  return isPunctuation(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllLowerCaseAlphanumeric = (s) => {\n  return isLowerCaseAlphanumeric(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllUpperCaseAlphanumeric = (s) => {\n  return isUpperCaseAlphanumeric(s)\n}\n\n/*\n  Returns true if the string has only alphabetic characters.\n  */\nconst isAllAlphabeticAlphanumeric = (s) => {\n  return isAllAlphabeticN"}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  if(!text) {\n    return ''\n  }\n  let re = /[aeiou]/g\n  return text.replace(re, '')\n}\n\n/*\n  getVowelCount is a function that takes string and returns count of vowel.\n  >>> getVowelCount('')\n  0\n  >>> getVowelCount(\"abcdef\\nghijklm\")\n  3\n  >>> getVowelCount('abcdef')\n  1\n  >>> getVowelCount('aaaaa')\n  0\n  >>> getVowelCount('aaBAA')\n  2\n  >>> getVowelCount('zbcd')\n  1\n  */\nconst getVowelCount = (text) => {\n  if(!text) {\n    return 0\n  }\n  let re = /[aeiou]/g\n  let count = 0\n  while(re.exec(text)) {\n    count += 1\n  }\n  return count\n}\n\n/*\n  getLastVowel is a function that takes string and returns last vowel.\n  >>> getLastVowel('')\n  ''\n  >>> getLastVowel(\"abcdef\\nghijklm\")\n  'k'\n  >>> getLastVowel('abcdef')\n  'f'\n  >>> getLastVowel('aaaaa')\n  ''\n  >>> getLastVowel('aaBAA')\n  'a'\n  >>> getLastVowel('zbcd')\n  'z'\n  */\nconst getLastVowel = (text) => {\n  if(!text) {\n    return ''\n  }\n  let re = /[aeiou]/g\n  while(re.exec(text)) {\n    let last = re.lastIndex\n    return text.substring(last)\n  }\n}\n\n/*\n  getFirstVowel is a function that takes string and returns first vowel.\n  >>> getFirstVowel('')\n  ''\n  >>> getFirstVowel(\"abcdef\\nghijklm\")\n  'a'\n  >>> getFirstVowel('abcdef')\n  'a'\n  >>> getFirstVowel('aaaaa')\n  'a'\n  >>> getFirstVowel('aaBAA')\n  'A'\n  >>> getFirstVowel('zbcd')\n  'z'\n  */\nconst getFirstVowel = (text) => {\n  if(!text) {\n    return ''\n  }\n  let re = /[aeiou]/g\n  while(re.exec(text)) {\n    let first = re.index\n    return text.substring(first)\n  }\n}\n\n/*\n  getWord is a function that takes string and returns first word.\n  >>> getWord('')\n  ''\n  >>> getWord(\"abcdef\\nghijklm\")\n  'abcdef'\n  >>> getWord('abcdef')\n  'abcdef'\n  >>> getWord('aaaaa')\n  'aaaaa'\n  >>> getWord('aaBAA')\n  'aa'\n  >>> getWord('zbcd')\n  'zbcd'\n  */\nconst getWord = (text) => {\n  if(!text) {\n    return ''\n  }\n  let re = /[^\\s]/g\n  while(re.exec(text)) {\n    let first = re.index\n    return text.substring(first)\n  }\n}\n\n/*\n  getFirstWord is a function that takes string and returns first word.\n  >>> getFirstWord('')\n  ''\n  >>> getFirstWord(\"abcdef\\nghijklm\")\n  'abcdef'\n  >>> getFirstWord('abcdef')\n  'abcdef'\n  >>> getFirstWord('aaaaa')\n  'aaaaa'\n  >>> getFirstWord('aaBAA')\n  'aa'\n  >>> getFirstWord('zbcd')\n  'zbcd'\n  */\nconst getFirstWord = (text) => {\n  if(!text) {\n    return ''\n  }\n  let re = /[^\\s]/g\n  while(re.exec(text)) {\n    let first = re.index\n    return text.substring(first)\n  }\n}\n\n/*\n  getLastWord is a function that takes string and returns last word.\n  >>> getLastWord('')\n  ''\n  >>> getLastWord(\"abcdef\\nghijklm\")\n  'klm'\n  >>> getLastWord('abcdef')\n  'abcdef'\n  >>> getLastWord('aaaaa')\n  'aaaaa'\n  >>> getLastWord('aaBAA')\n  'aa'\n  >>> getLastWord('zbcd')\n  'zbcd'\n  */\nconst getLastWord = (text) => {\n  if(!text) {\n    return ''\n  }\n  let re = /[^\\s]/g\n  while(re.exec(text)) {\n    let last = re.lastIndex\n    return text.substring(last)\n  }\n}\n\n/*\n  getAllWords is a function that takes string and returns all words.\n  >>> getAllWords('')\n  []\n  >>> getAllWords(\"abcdef\\nghijklm\")\n  ['abcdef', 'ghijklm']\n  >>> getAllWords('abcdef')\n  ['abcdef']\n  >>> getAllWords('aaaaa')\n  ['aaaaa']\n  >>> getAllWords('aaBAA')\n  ['aa', 'BAA']\n  >>> getAllWords('zbcd')\n  ['zbcd']\n  */\nconst getAllWords = (text) => {\n  if(!text) {\n    return []\n  "}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  if (l.length === 0) return true;\n  if (l.length === 1) return l[0] <= t;\n  if (l.length === 2) return l[0] <= t && l[1] <= t;\n  return belowDoorway(l.slice(0, -1), t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveDoorway([1, 2, 4, 10], 100)\n  false\n  >>> aboveDoorway([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveDoorway = (l, t) => {\n  if (l.length === 0) return false;\n  if (l.length === 1) return l[0] > t;\n  if (l.length === 2) return l[0] > t && l[1] > t;\n  return aboveDoorway(l.slice(1), t);\n};\n\nconst list = [1, 2, 4, 10, 20, 40];\nconst threshold = 5;\n\n/*If list is below threshold t, print out \"All are below t.\"\n  Otherwise, print out \"All are above t.\"\n  >>> belowDoorway(list, threshold)\n  All are below t.\n  >>> aboveDoorway(list, threshold)\n  All are above t.\n  */\nconsole.log(`All are below ${threshold}: ${belowDoorway(list, threshold)}`);\nconsole.log(`All are above ${threshold}: ${aboveDoorway(list, threshold)}`);\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  let total = 0;\n  while (x >= 1) {\n    total += x % 10;\n    x = Math.floor(x / 10);\n  }\n  while (y >= 1) {\n    total += y % 10;\n    y = Math.floor(y / 10);\n  }\n  return total;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  const len = s0.length\n  let i = 0\n  while (i < len) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/**\n  * Check if a word is a palindrome.\n  * @param {string} word the word to be checked\n  * @return {boolean}\n  * @example\n  *\n  *  >>> palindrome('abc')\n  *  true\n  *  >>> palindrome('ab')\n  *  true\n  *  >>> palindrome('a')\n  *  true\n  *  >>> palindrome('abab')\n  *  true\n  *  >>> palindrome('abcd')\n  *  false\n  *  >>> palindrome('ababab')\n  *  false\n  */\nconst palindrome = word => {\n  const len = word.length\n  let i = 0\n  while (i < len) {\n    if (word.charAt(i)!== word.charAt(len - i - 1)) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nmodule.exports = {\n  likeChars,\n  palindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/* Return n-th factorial.\n  >>> fact(10)\n  3628800\n  >>> fact(1)\n  1\n  >>> fact(8)\n  2432902008176640000\n  */\nconst fact = (n) => {\n  if (n <= 1) return 1;\n  return n * fact(n - 1);\n};\n\n/*Return n-th Catalan number.\n  >>> catalan(10)\n  761293\n  >>> catalan(1)\n  1\n  >>> catalan(8)\n  4043800\n  */\nconst catalan = (n) => {\n  if (n <= 1) return 1;\n  return n * catalan(n - 1) / 2;\n};\n\n/* Return n-th binomial coefficient.\n  >>> binomial(10, 5)\n  50\n  >>> binomial(1, 1)\n  1\n  >>> binomial(8, 3)\n  252\n  */\nconst binomial = (n, k) => {\n  if (k <= 0) return 1;\n  return n * binomial(n - 1, k - 1);\n};\n\n/* Return n-th Harmonic number.\n  >>> harmonic(10)\n  23.14069263277926\n  >>> harmonic(1)\n  1\n  >>> harmonic(8)\n  11.025396825396826\n  */\nconst harmonic = (n) => {\n  if (n <= 1) return 1;\n  return harmonic(n - 1) + 1;\n};\n\n/* Return n-th Riemann zeta value.\n  >>> riemann(10)\n  1.9159718174520522\n  >>> riemann(1)\n  1\n  >>> riemann(8)\n  1.4339103232539201\n  */\nconst riemann = (n) => {\n  if (n <= 1) return 1;\n  return n * riemann(n - 1);\n};\n\n/* Return n-th Riemann zeta value.\n  >>> riemannprime(10)\n  1.3079190586091291\n  >>> riemannprime(1)\n  1\n  >>> riemannprime(8)\n  1.6180339887498948\n  */\nconst riemannprime = (n) => {\n  if (n <= 1) return 1;\n  return n * riemannprime(n - 1);\n};\n\n/* Return n-th Riemann zeta value.\n  >>> zeta(10)\n  1.9456022118174858\n  >>> zeta(1)\n  1\n  >>> zeta(8)\n  1.6744275588221543\n  */\nconst zeta = (n) => {\n  if (n <= 1) return 1;\n  return n * zeta(n - 1);\n};\n\n/* Return n-th Riemann zeta value.\n  >>> zetac(10)\n  1.9020526886856718\n  >>> zetac(1)\n  1\n  >>> zetac(8)\n  1.8678769088286944\n  */\nconst zetac = (n) => {\n  if (n <= 1) return 1;\n  return n * zetac(n - 1);\n};\n\n/* Return n-th Riemann zeta value.\n  >>> zeta2(10)\n  2.3048875342688687\n  >>> zeta2(1)\n  1\n  >>> zeta2(8)\n  2.7182818284590451\n  */\nconst zeta2 = (n) => {\n  if (n <= 1) return 1;\n  return n * zeta2(n - 1);\n};\n\n/* Return n-th Riemann zeta value.\n  >>> zeta3(10)\n  3.1622776601683795\n  >>> zeta3(1)\n  1\n  >>> zeta3(8)\n  3.584962500721156\n  */\nconst zeta3 = (n) => {\n  if (n <= 1) return 1;\n  return n * zeta3(n - 1);\n};\n\n/* Return n-th Riemann zeta value.\n  >>> zeta4(10)\n  4.138501190755501\n  >>> zeta4(1)\n  1\n  >>> zeta4(8)\n  4.9236284957029844\n  */\nconst zeta4 = (n) => {\n  if (n <= 1) return 1;\n  return n * zeta4(n - 1);\n};\n\n/* Return n-th Riemann zeta value.\n  >>> zeta5(10)\n  5.2688504077346764\n  >>> zeta5(1)\n  1\n  >>> zeta5(8)\n  5.8951178163559350\n  */\nconst zeta5 = (n) => {\n  if (n <= 1) return 1;\n  return n * zeta5(n - 1);\n};\n\n/* Return n-th Riemann zeta value.\n  >>> zeta6(10)\n  6.3661977236758134\n  >>> zeta6(1)\n  1\n  >>> zeta6(8)\n  6.2421336533068851\n  */\nconst zeta6 = (n) => {\n  if (n <= 1) return 1;\n  return n * zeta6(n - 1);\n};\n\n/* Return n-th Riemann zeta value.\n  >>> zeta7(10)\n  7.2049640673410037\n  >>> zeta7(1)\n  1\n  >>> zeta7(8)\n  7.1559153069039611\n  */\nconst zeta7 = (n) => {\n  if (n <= 1) return 1;\n  return n * zeta7(n - 1);\n};\n\n/* Return n-th Riemann zeta value.\n  >>> zeta8(10)\n  8.0876690"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const openBrackets = brackets.split(\"<\").filter(char => char!== \"<\").reverse()\n  const openBracketsLength = openBrackets.length\n  const closeBrackets = brackets.split(\">\").filter(char => char!== \">\").reverse()\n  const closeBracketsLength = closeBrackets.length\n\n  if (openBracketsLength === closeBracketsLength) {\n    return true\n  }\n\n  return false\n}\n\n/*\n  A string of brackets is bracketed if the string contains a \">\" or \"(\" or \"{\"\n  character followed by the corresponding \">\" or \"(\" or \"{\" character, and the\n  string is bracketed within the brackets.\n\n  >>> bracketed(\"(<>\")\n  true\n  >>> bracketed(\"<>\")\n  false\n  >>> bracketed(\"<>\")\n  false\n  >>> bracketed(\"<>\")\n  false\n  >>> bracketed(\"(<)\")\n  false\n  >>> bracketed(\"(<>\")\n  false\n  >>> bracketed(\"(<>\")\n  false\n  >>> bracketed(\"<>\")\n  false\n  >>> bracketed(\"<>\")\n  false\n  >>> bracketed(\"<>\")\n  false\n  >>> bracketed(\"<>\")\n  false\n  */\nconst bracketed = (str) => {\n  const open = str.split(\"(\")\n  const close = str.split(\"<\")\n  const openLength = open.length\n  const closeLength = close.length\n\n  if (openLength === closeLength) {\n    return true\n  }\n\n  if (openLength === closeLength - 1) {\n    return open.every(char => char === close[0])\n  }\n\n  if (openLength === closeLength + 1) {\n    return close.every(char => char === open[0])\n  }\n\n  return false\n}\n\n/*\n  The leftBracketed and rightBracketed functions take strings of \"<\" and \">\"\n  characters as input.\n  If the string is bracketed, then the string is returned as-is.\n  If the string is not bracketed, then the function returns a string of \"\".\n\n  >>> leftBracketed(\"<\")\n  \"<\"\n  >>> leftBracketed(\"<>\")\n  \"\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<\")\n  \"<\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  \"<>\"\n  >>> leftBracketed(\"<>\")\n  "}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  const arr = Array.isArray(l)? l : [l];\n  let arr_size = arr.length;\n  let i = 0;\n  let j = 0;\n\n  while (i < arr_size) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport { flat };\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  if (l1.length === 0 || l2.length === 0) return []\n  const result = [l1[0]]\n  let j = 1\n  while (j < l2.length) {\n    if (l1.indexOf(l2[j]) === -1) {\n      result.push(l2[j])\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  * Return intersection of two lists.\n  * @param {Array} l1 - first list.\n  * @param {Array} l2 - second list.\n  * @returns {Array}\n  */\nconst intersection = (l1, l2) => {\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])!== -1) {\n      result.push(l1[i])\n    }\n  }\n  return result\n}\n\n/*\n  * Return union of two lists.\n  * @param {Array} l1 - first list.\n  * @param {Array} l2 - second list.\n  * @returns {Array}\n  */\nconst union = (l1, l2) => {\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    result.push(l1[i])\n  }\n  for (let i = 0; i < l2.length; i++) {\n    result.push(l2[i])\n  }\n  return result\n}\n\n/*\n  * Return difference of two lists.\n  * @param {Array} l1 - first list.\n  * @param {Array} l2 - second list.\n  * @returns {Array}\n  */\nconst difference = (l1, l2) => {\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      result.push(l1[i])\n    }\n  }\n  return result\n}\n\n/*\n  * Return intersection of two lists.\n  * @param {Array} l1 - first list.\n  * @param {Array} l2 - second list.\n  * @returns {Array}\n  */\nconst union = (l1, l2) => {\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    result.push(l1[i])\n  }\n  for (let i = 0; i < l2.length; i++) {\n    result.push(l2[i])\n  }\n  return result\n}\n\n/*\n  * Return difference of two lists.\n  * @param {Array} l1 - first list.\n  * @param {Array} l2 - second list.\n  * @returns {Array}\n  */\nconst difference = (l1, l2) => {\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      result.push(l1[i])\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  const a = 2;\n  const b = n;\n  const t = n;\n  while (a <= t) {\n    if (t % a === 0) {\n      const bt = b;\n      while (bt % a === 0) {\n        bt = bt / a;\n      }\n      if (bt === b) {\n        return a;\n      }\n    }\n    a = a + 1;\n  }\n  return 1;\n};\n\nmodule.exports = bigChoiceFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  summarizeToNWithPredicate is a function that sums numbers that pass a predicate.\n  >>> summarizeToNWithPredicate(30, (n) => n % 2 === 0)\n  46\n  >>> summarizeToNWithPredicate(100, (n) => n % 2 === 0)\n  50\n  >>> summarizeToNWithPredicate(5, (n) => n % 2 === 0)\n  16\n  >>> summarizeToNWithPredicate(10, (n) => n % 2 === 0)\n  56\n  >>> summarizeToNWithPredicate(1, (n) => n % 2 === 0)\n  1\n  */\nconst summarizeToNWithPredicate = (n, predicate) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (predicate(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  summarizeToNWithPredicateAndSum is a function that sums numbers that pass a predicate and that sum up to n.\n  >>> summarizeToNWithPredicateAndSum(30, (n) => n % 2 === 0, (n) => n + n)\n  46\n  >>> summarizeToNWithPredicateAndSum(100, (n) => n % 2 === 0, (n) => n + n)\n  50\n  >>> summarizeToNWithPredicateAndSum(5, (n) => n % 2 === 0, (n) => n + n)\n  16\n  >>> summarizeToNWithPredicateAndSum(10, (n) => n % 2 === 0, (n) => n + n)\n  56\n  >>> summarizeToNWithPredicateAndSum(1, (n) => n % 2 === 0, (n) => n + n)\n  1\n  */\nconst summarizeToNWithPredicateAndSum = (n, predicate, sum) => {\n  let sumToN = n;\n  let sumOfPredicate = 0;\n  for (let i = 1; i <= n; i++) {\n    if (predicate(i)) {\n      sumOfPredicate += i;\n      if (sumOfPredicate >= sumToN) {\n        sum += sumOfPredicate;\n      }\n    }\n  }\n  return sum;\n};\n\n/*\n  summarizeToNWithPredicateAndSumInclusive is a function that sums numbers that pass a predicate and that sum up to n.\n  >>> summarizeToNWithPredicateAndSumInclusive(30, (n) => n % 2 === 0, (n) => n + n)\n  46\n  >>> summarizeToNWithPredicateAndSumInclusive(100, (n) => n % 2 === 0, (n) => n + n)\n  50\n  >>> summarizeToNWithPredicateAndSumInclusive(5, (n) => n % 2 === 0, (n) => n + n)\n  16\n  >>> summarizeToNWithPredicateAndSumInclusive(10, (n) => n % 2 === 0, (n) => n + n)\n  56\n  >>> summarizeToNWithPredicateAndSumInclusive(1, (n) => n % 2 === 0, (n) => n + n)\n  1\n  */\nconst summarizeToNWithPredicateAndSumInclusive = (n, predicate, sum) => {\n  let sumToN = n;\n  let sumOfPredicate = 0;\n  for (let i = 1; i <= n; i++) {\n    if (predicate(i)) {\n      sumOfPredicate += i;\n      if (sumOfPredicate <= sumToN) {\n        sum += sumOfPredicate;\n      }\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  summarizeToN,\n  summarizeToNWithPredicate,\n  summarizeToNWithPredicateAndSum,\n  summarizeToNWithPredicateAndSumInclusive\n};\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const stack = [];\n  const len = brackets.length;\n  for (let i = 0; i < len; i++) {\n    const c = brackets[i];\n    if (c === \"(\") {\n      stack.push(c);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack.pop()!== \")\") {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = rightBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [0];\n  for (let i = len - 1; i >= 0; i--) {\n    d[i] = len - i;\n    d[i] += d[i + 1] * xs[i];\n  }\n  return d;\n};\n\nexport default derivative;\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib = (n <= 2)? n : fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  return fib;\n};\n\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' ||\n      s[i] === 'u') {\n      count += 1\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count += 1\n  }\n  return count\n}\n\nmodule.exports = vowelReckon\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  if (shift >= x.length) {\n    return x.split('').reverse().join('');\n  }\n  return x.substr(0, shift) + x.substr(shift, x.length - shift);\n};\n\n/*\n  Return a number that has the digit at the position\n  index removed.\n  >>> removeDigit(12345, 3)\n  1234\n  >>> removeDigit(12345, 4)\n  1\n  >>> removeDigit(12345, 5)\n  1\n  >>> removeDigit(12345, 6)\n  1\n  >>> removeDigit(12345, 7)\n  1\n  >>> removeDigit(12345, 8)\n  2\n  >>> removeDigit(12345, 9)\n  2\n  >>> removeDigit(12345, 10)\n  2\n  >>> removeDigit(12345, 11)\n  2\n  >>> removeDigit(12345, 12)\n  3\n  >>> removeDigit(12345, 13)\n  3\n  >>> removeDigit(12345, 14)\n  3\n  >>> removeDigit(12345, 15)\n  3\n  >>> removeDigit(12345, 16)\n  4\n  >>> removeDigit(12345, 17)\n  4\n  >>> removeDigit(12345, 18)\n  4\n  >>> removeDigit(12345, 19)\n  5\n  >>> removeDigit(12345, 20)\n  5\n  >>> removeDigit(12345, 21)\n  5\n  >>> removeDigit(12345, 22)\n  6\n  >>> removeDigit(12345, 23)\n  6\n  >>> removeDigit(12345, 24)\n  6\n  >>> removeDigit(12345, 25)\n  7\n  >>> removeDigit(12345, 26)\n  7\n  >>> removeDigit(12345, 27)\n  7\n  >>> removeDigit(12345, 28)\n  8\n  >>> removeDigit(12345, 29)\n  8\n  >>> removeDigit(12345, 30)\n  8\n  >>> removeDigit(12345, 31)\n  9\n  >>> removeDigit(12345, 32)\n  9\n  >>> removeDigit(12345, 33)\n  9\n  >>> removeDigit(12345, 34)\n  10\n  >>> removeDigit(12345, 35)\n  10\n  >>> removeDigit(12345, 36)\n  10\n  >>> removeDigit(12345, 37)\n  11\n  >>> removeDigit(12345, 38)\n  11\n  >>> removeDigit(12345, 39)\n  11\n  >>> removeDigit(12345, 40)\n  12\n  >>> removeDigit(12345, 41)\n  12\n  >>> removeDigit(12345, 42)\n  12\n  >>> removeDigit(12345, 43)\n  13\n  >>> removeDigit(12345, 44)\n  13\n  >>> removeDigit(12345, 45)\n  13\n  >>> removeDigit(12345, 46)\n  14\n  >>> removeDigit(12345, 47)\n  14\n  >>> removeDigit(12345, 48)\n  14\n  >>> removeDigit(12345, 49)\n  15\n  >>> removeDigit(12345, 50)\n  15\n  >>> removeDigit(12345, 51)\n  15\n  >>> removeDigit(12345, 52)\n  16\n  >>> removeDigit(12345, 53)\n  16\n  >>> removeDigit(12345, 54)\n  16\n  >>> removeDigit(12345, 55)\n  17\n  >>> removeDigit(12345, 56)\n  17\n  >>> removeDigit(12345, 57)\n  17\n  >>> removeDigit(12345, 58)\n  18\n  >>> removeDigit(12345, 59)\n  18\n  >>> removeDigit(12345, 60)\n  18\n  >>> removeDigit(12345, 61)\n  19\n  >>> removeDigit(12345, 62)\n  19\n  >>> removeDigit(12345, 63)\n  19\n  >>> removeDigit(12345, 64)\n  20\n  >>> removeDigit(12345, 65)\n  20\n  >>> removeDigit(12345, 66)\n  20\n  >>> removeDigit(12345, 67)\n  21\n  >>> removeDigit(12345, 68)\n  21\n  >>> removeDigit(12345, 69)\n  21\n  >>> removeDigit(12345, 70)\n  22\n  >>> removeDigit(12345, 71)\n  22\n  >>> removeDigit(12345, 72)\n  22\n  >>> removeDigit(12345, 73)\n  23\n  >>> removeDigit(12345, 74)\n  23\n  >>> removeDigit(12345, 75)\n  23\n  >>> removeDigit(12345, 76)\n  24\n  >>> removeDigit(12345, 77)\n  24\n  >>> removeDigit(12345, 78)\n  24\n  >>> removeDigit(12345, 79)\n  25\n  >>> removeDigit(12345, 80)\n  25\n  >>> removeDigit(12345, 81)\n  25\n  >>> removeDigit(12345, 82)\n  26\n  >>> removeDigit(12345, 83)\n  26\n  >>> removeDigit(12345, 84)\n  26\n  >>> removeDigit(12345, 85)\n  27\n  >>> removeDigit(12345, 86)\n  27\n  >>> removeDigit(12345, 87)\n  27\n  >>> removeDigit(12345, 88)\n  28\n  >>> removeDigit(12345, 89)\n  28\n  >>> removeDigit(12345, 90)\n  28\n  >>> removeDigit(12345, 91)\n  29\n  >>> removeDigit(12345, 92)\n  29\n  >>> removeDigit(12345, 93)\n  29\n  >>> removeDigit(123"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  return s.split('').reduce((acc, curr, i) => {\n    const digit = parseInt(curr.charCodeAt(0), 10);\n    const isDigit = isNaN(digit)? false : true;\n    if (isDigit) {\n      acc += (digit - 97) * (i + 1);\n    }\n    return acc;\n  }, 0);\n};\n\nconsole.log(fingerSum(\"\"));\nconsole.log(fingerSum(\"abAB\"));\nconsole.log(fingerSum(\"abcCd\"));\nconsole.log(fingerSum(\"helloE\"));\nconsole.log(fingerSum(\"woArBld\"));\nconsole.log(fingerSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  // console.log(s);\n  let count = 0;\n  let total = 0;\n  let arr = s.split(\" \");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"apples\") {\n      count += 1;\n    }\n    if (arr[i] === \"oranges\") {\n      count += 1;\n    }\n    if (arr[i] === \"mango\") {\n      count += 1;\n    }\n    total += count;\n  }\n  return total - count - n;\n};\n\nconsole.log(yieldDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(yieldDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(yieldDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(yieldDistribution(\"100 apples and 1 oranges\", 120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return [];\n  }\n  const array = arr.sort((a, b) => a - b);\n  const value = array[0];\n  const index = array.findIndex((x, i) => i === 0 || x === value);\n  return [value, index];\n};\n\nconsole.log(hustle([4, 2, 3]));\nconsole.log(hustle([1, 2, 3]));\nconsole.log(hustle([0, 0, 0]));\nconsole.log(hustle([5, 0, 3, 0, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  if (!lst.length) return -1\n\n  const min = Math.min(...lst)\n  const max = Math.max(...lst)\n\n  const maxFreq = (max - min) + 1\n  const maxFreqP = maxFreq\n  let maxFreqF = -1\n\n  for (let i = 0; i < lst.length; i++) {\n    const freq = Math.abs(lst[i] - min)\n    const freqP = Math.abs(lst[i] - max)\n\n    if (freq > maxFreqF) {\n      maxFreqF = freq\n      maxFreqP = lst[i]\n    }\n\n    if (freq > maxFreq) {\n      maxFreq = freq\n      maxFreqP = lst[i]\n    }\n  }\n\n  return maxFreqP\n}\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == -1\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research2 = (lst) => {\n  if (!lst.length) return -1\n\n  const min = Math.min(...lst)\n  const max = Math.max(...lst)\n\n  const maxFreq = (max - min) + 1\n  const maxFreqP = -max\n  let maxFreqF = -1\n\n  for (let i = 0; i < lst.length; i++) {\n    const freq = Math.abs(lst[i] - min)\n    const freqP = Math.abs(lst[i] - max)\n\n    if (freq > maxFreqF) {\n      maxFreqF = freq\n      maxFreqP = lst[i]\n    }\n\n    if (freq > maxFreq) {\n      maxFreq = freq\n      maxFreqP = lst[i]\n    }\n  }\n\n  return maxFreqP\n}\n\nconst research3 = (lst) => {\n  if (!lst.length) return -1\n\n  const min = Math.min(...lst)\n  const max = Math.max(...lst)\n\n  const maxFreq = (max - min) + 1\n  const maxFreqP = max\n  let maxFreqF = -1\n\n  for (let i = 0; i < lst.length; i++) {\n    const freq = Math.abs(lst[i] - min)\n    const freqP = Math.abs(lst[i] - max)\n\n    if (freq > maxFreqF) {\n      maxFreqF = freq\n      maxFreqP = lst[i]\n    }\n\n    if (freq > maxFreq) {\n      maxFreq = freq\n      maxFreqP = lst[i]\n    }\n  }\n\n  return maxFreqP\n}\n\nexport {\n  research,\n  research2,\n  research3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n    return lst.sort((a, b) => {\n        if (a < b) {\n            return -1\n        } else if (a > b) {\n            return 1\n        } else {\n            return 0\n        }\n    })\n}\n\nexport default foreignSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  let area = 0;\n  const max = Math.max(a, b, c);\n  const min = Math.min(a, b, c);\n  if (min >= 0 && max >= 0) {\n    const s = (max + min) / 2;\n    area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  }\n  return area.toFixed(2);\n};\n\nexport default triangulumArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const l = q.length\n  const isPalindrome = q.every((a, i) => a === q[l - 1 - i])\n\n  if (l === 1) return false\n  if (isPalindrome) {\n    return (q.reduce((a, b, i) => a + b) <= w)\n  }\n  return true\n}\n\nexport default willItFlee\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  const len = arr.length;\n  if(len <= 1) return 0;\n  let result = 0;\n  let start = 0;\n  let end = len - 1;\n\n  while(start < end) {\n    let i = start + 1;\n    let j = end;\n\n    while(i < j) {\n      let index = (i + j) / 2;\n      if(arr[index]!== arr[index + 1]) {\n        end = index;\n        break;\n      } else {\n        i++;\n        j--;\n      }\n    }\n\n    if(arr[start] === arr[end]) {\n      start++;\n      end--;\n      result++;\n    } else {\n      break;\n    }\n  }\n\n  return result;\n}\n\nconsole.log(smallChange([1,2,3,5,4,7,9,6]));\nconsole.log(smallChange([1, 2, 3, 2, 1]));\nconsole.log(smallChange([1, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const len = Math.max(len1, len2);\n  let count = 0;\n\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] && lst2[i]) {\n      if (lst1[i].length < lst2[i].length) {\n        count++;\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (count === 0) {\n    return lst1;\n  }\n\n  return lst2;\n};\n\nconsole.log(entireCatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(entireCatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = false;\n  let i = 0;\n  while (!isPrime) {\n    isPrime = (a / i) % 3 === 0 && (a / (i * i)) % 3 === 0 && (a / (i * i * i)) % 3 === 0;\n    i++;\n  }\n  return isPrime;\n};\n\nmodule.exports = isMultiplyPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  return x === n ** parseInt(x, 10);\n};\n\nexport { isElementaryWorldPower };\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let b = a;\n  let c = a * a * a;\n  return b === c;\n}\n\nmodule.exports = iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const num = String(num);\n  const hex = \"0123456789ABCDEF\";\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (i > 0 && num[i] === '0') {\n      count++;\n    } else if (hex.indexOf(num[i].toUpperCase())!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Test 1\nconst test1 = \"AB\";\nconsole.log(hexKey(test1));\n// → 1\n\n// Test 2\nconst test2 = \"1077E\";\nconsole.log(hexKey(test2));\n// → 2\n\n// Test 3\nconst test3 = \"ABED1A33\";\nconsole.log(hexKey(test3));\n// → 4\n\n// Test 4\nconst test4 = \"123456789ABCDEF0\";\nconsole.log(hexKey(test4));\n// → 6\n\n// Test 5\nconst test5 = \"2020\";\nconsole.log(hexKey(test5));\n// → 2\n\n// Test 6\nconst test6 = \"abcdef\";\nconsole.log(hexKey(test6));\n// → 0\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let last = 0;\n  for (let i = 0; i < decimal.length; i++) {\n    let digit = decimal[i];\n    last += (digit * Math.pow(2, i));\n    binary += ((last & 1)? '1' : '0');\n    last = last >> 1;\n  }\n  binary += 'db';\n  return binary;\n};\n\nmodule.exports = decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  const length = s.length\n  const arr = s.split('')\n  if (length < 3) {\n    return false\n  }\n  let index = 0\n  let isHappy = true\n  for (index = 0; index < length - 2; index++) {\n    if (arr[index] === arr[index + 1] && arr[index + 1] === arr[index + 2]) {\n      isHappy = false\n      break\n    }\n  }\n  return isHappy\n}\n\nexport {isFelicitous}\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  const grades_arr = grades.toString().split(\" \");\n  const arr = [];\n  let index = grades_arr.length - 1;\n  let average = 0;\n  let last_average = 0;\n  let sum = 0;\n\n  while (index > 0) {\n    const current_average = parseFloat(grades_arr[index].split(\".\")[0]);\n    sum += parseFloat(grades_arr[index]);\n    average = sum / index;\n    if (last_average === 0) {\n      last_average = current_average;\n    }\n    if (average > last_average) {\n      arr.push(`A+`);\n    } else if (average < last_average) {\n      arr.push(`A`);\n    } else if (average === last_average) {\n      arr.push(`A-`);\n    } else {\n      arr.push(`B+`);\n    }\n    index--;\n  }\n\n  return arr;\n};\n\n/*\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst getGrade = (grades) => {\n  const grades_arr = grades.toString().split(\" \");\n  const arr = [];\n  let index = grades_arr.length - 1;\n  let average = 0;\n  let last_average = 0;\n  let sum = 0;\n\n  while (index > 0) {\n    const current_average = parseFloat(grades_arr[index].split(\".\")[0]);\n    sum += parseFloat(grades_arr[index]);\n    average = sum / index;\n    if (last_average === 0) {\n      last_average = current_average;\n    }\n    if (average > last_average) {\n      arr.push(`A+`);\n    } else if (average < last_average) {\n      arr.push(`A`);\n    } else if (average === last_average) {\n      arr.push(`A-`);\n    } else {\n      arr.push(`B+`);\n    }\n    index--;\n  }\n\n  return arr;\n};\n\nconsole.log(numericLetterGrade([4.0, 3, 1.7, 2, 3.5]));\nconsole.log(getGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n    const str = string.toLowerCase();\n    let x = str.length;\n    let i = 0;\n    while (x > 1) {\n        if (str[i] === 'k' && x % 2 === 0) {\n            return false;\n        }\n        if (str[i] === 'k' && x % 3 === 0) {\n            return false;\n        }\n        if (str[i] === 'p' && x % 5 === 0) {\n            return false;\n        }\n        if (str[i] === 'q' && x % 7 === 0) {\n            return false;\n        }\n        if (str[i] === 'r' && x % 11 === 0) {\n            return false;\n        }\n        if (str[i] ==='s' && x % 13 === 0) {\n            return false;\n        }\n        if (str[i] === 't' && x % 17 === 0) {\n            return false;\n        }\n        if (str[i] === 'u' && x % 19 === 0) {\n            return false;\n        }\n        if (str[i] === 'v' && x % 23 === 0) {\n            return false;\n        }\n        if (str[i] === 'w' && x % 29 === 0) {\n            return false;\n        }\n        if (str[i] === 'x' && x % 31 === 0) {\n            return false;\n        }\n        if (str[i] === 'y' && x % 37 === 0) {\n            return false;\n        }\n        if (str[i] === 'z' && x % 41 === 0) {\n            return false;\n        }\n        x--;\n        i++;\n    }\n    return true;\n};\n\nconst test = (number) => {\n    console.log(premierDistance(number));\n};\n\ntest('Hello');\ntest('abcdcba');\ntest('kittens');\ntest('orange');\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let num = 0\n  for (let i = 1; i <= n; i++) {\n    let start = i\n    while (start > 0 && start % 10 === 1) {\n      start--\n    }\n    while (start < i && start % 10 === 1) {\n      start++\n    }\n    if (start === i) {\n      num++\n    }\n  }\n  return num\n}\n\nconsole.log(beginOneEnd(100))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  if(N === 0) {\n    return '0'\n  }\n  const binary = []\n  const N = Math.abs(N)\n  for(let i = N - 1; i >= 0; i--) {\n    let digit = Math.floor(N / Math.pow(2, i))\n    binary.push(digit)\n  }\n  return binary.join('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. remove the even elements.\n  \n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6, 7] \n  */\nconst remove = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. merge the given odd elements with the elements that are at even index\n  and return the result.\n\n  Examples:\n      merge([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==> [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n  */\nconst merge = (lst) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < lst.length && j < lst.length) {\n    if (i % 2 === 1) {\n      result.push(lst[i])\n      i++\n    } else if (j % 2 === 1) {\n      result.push(lst[j])\n      j++\n    } else {\n      result.push(lst[i] + lst[j])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of strings strs. return the list of the strings in sorted order, using strs[0] as a key.\n\n  Examples:\n      sortedList([{name: 'A'}, {name: 'B'}, {name: 'C'}]) ==> ['A', 'B', 'C'] \n  */\nconst sortedList = (lst) => {\n  return lst.sort((a, b) => {\n    return a.name > b.name? 1 : a.name < b.name? -1 : 0\n  })\n}\n\n/*Given a non-empty list of strings strs. return the list of the strings in sorted order, using strs[0] as a key.\n\n  Examples:\n      sortedList([{name: 'A'}, {name: 'B'}, {name: 'C'}]) ==> ['C', 'A', 'B'] \n  */\nconst reverse = (lst) => {\n  let result = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    result.push(lst[i])\n  }\n  return result\n}\n\nmodule.exports = {\n  lend,\n  remove,\n  merge,\n  sortedList,\n  reverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const arr = s.split(\" \")\n  let res = \"\"\n  arr.sort((a, b) => {\n    const asciiA = a.charCodeAt(0)\n    const asciiB = b.charCodeAt(0)\n    if (asciiA > asciiB) {\n      return 1\n    } else if (asciiA < asciiB) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  arr.forEach((e, index) => {\n    res += e + \" \"\n  })\n  return res.trim()\n}\n\nconsole.log(antiShuffle(\"Hi\"))\nconsole.log(antiShuffle(\"hello\"))\nconsole.log(antiShuffle(\"Hello World!!!\"))\nconsole.log(antiShuffle(\"Hello World!!\"))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  const [rows, cols] = splitIntoRowsCols(lst);\n  const sortedRows = sortRows(rows);\n  const sortedCols = sortCols(cols);\n\n  const res = [];\n  for (let i = 0; i < sortedRows.length; i++) {\n    const row = sortedRows[i];\n    const [rowStart, rowEnd] = splitRow(row);\n    for (let j = rowStart; j < rowEnd; j++) {\n      const col = sortedCols[j];\n      if (col == x) {\n        res.push([row, col]);\n      }\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  const even = len % 2 === 0\n  const sum = array.reduce((acc, value) => acc + value, 0)\n\n  if (even) {\n    return array.sort((a, b) => b - a)\n  } else {\n    return array.sort((a, b) => a - b)\n  }\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n    if (s.length === 0) {\n        return '';\n    }\n    \n    // Create an array of length 2 * n + 1\n    const alpha = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'];\n    const arr = Array.from(new Array(2 * s.length + 1), (x, i) => {\n        const left = i - (2 * s.length - 1) + 1;\n        const right = i - (2 * s.length);\n        const value = (s.charCodeAt(left - 1) + s.charCodeAt(right)) % 26;\n        return alpha[value];\n    });\n    \n    return arr.join('');\n}\n\nconst decrypt = (s) => {\n    const alpha = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'];\n    const arr = Array.from(new Array(2 * s.length + 1), (x, i) => {\n        const left = i - (2 * s.length - 1) + 1;\n        const right = i - (2 * s.length);\n        const value = (s.charCodeAt(left - 1) + s.charCodeAt(right)) % 26;\n        return alpha[value];\n    });\n    \n    return arr.join('');\n}\n\nconst encrypt2 = (s) => {\n    let arr = Array.from(new Array(2 * s.length + 1), (x, i) => {\n        const left = i - (2 * s.length - 1) + 1;\n        const right = i - (2 * s.length);\n        const value = (s.charCodeAt(left - 1) + s.charCodeAt(right)) % 26;\n        return alpha[value];\n    });\n    \n    let k = 0;\n    let result = '';\n    \n    for (let i = 0; i < arr.length; i++) {\n        k = (arr[i] === 'q'? 1 : arr[i] === 'w'? 2 : arr[i] === 'e'? 3 : arr[i] === 'r'? 4 : arr[i] === 't'? 5 : arr[i] === 'y'? 6 : arr[i] === 'u'? 7 : arr[i] === 'i'? 8 : arr[i] === 'o'? 9 : arr[i] === 'p'? 10 : 0) * 2 + 1;\n        result += arr[i];\n    }\n    \n    return result;\n}\n\nconst decrypt2 = (s) => {\n    let arr = Array.from(new Array(2 * s.length + 1), (x, i) => {\n        const left = i - (2 * s.length - 1) + 1;\n        const right = i - (2 * s.length);\n        const value = (s.charCodeAt(left - 1) + s.charCodeAt(right)) % 26;\n        return alpha[value];\n    });\n    \n    let k = 0;\n    let result = '';\n    \n    for (let i = 0; i < arr.length; i++) {\n        k = (arr[i] === 'q'? 1 : arr[i] === 'w'? 2 : arr[i] === 'e'? 3 : arr[i] === 'r'? 4 : arr[i] === 't'? 5 : arr[i] === 'y'? 6 : arr[i] === 'u'? 7 : arr[i] === 'i'? 8 : arr[i] === 'o'? 9 : arr[i] === 'p'? 10 : 0) * 2 + 1;\n        result += arr[i];\n    }\n    \n    return result;\n}\n\nconsole.log(encrypt('hi')); // lm\nconsole.log(decrypt('lm')); // hi\nconsole.log(encrypt('asdfghjkl')); // ewhjklnop\nconsole.log(decrypt('ewhjklnop')); // asdfghjkl\nconsole.log(encrypt('gf')); // kj\nconsole.log(decrypt('kj')); // gf\nconsole.log(encrypt('et')); // ix\nconsole.log(decrypt('ix')); // et\nconsole.log(encrypt2('qwerty')); // gf\nconsole.log(decrypt2('gf')); // qwerty\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const i = 0\n  const j = len - 1\n  let smallest = lst[i]\n  while (i < j) {\n    const next = lst[i + 1]\n    if (next <= smallest) {\n      smallest = next\n      i++\n    } else {\n      j--\n    }\n  }\n  return smallest\n}\n\nnextSmallest([1, 2, 3, 4, 5]) // 2\nnextSmallest([5, 1, 4, 3, 2]) // 2\nnextSmallest([]) // null\nnextSmallest([1, 1]) // null\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  const words = S.split(' ')\n  return words.reduce((a, b) => a + (b === 'I'? 1 : 0), 0)\n}\n\nmodule.exports = isBlase\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every((n) => {\n    return typeof n === 'number';\n  }) &&\n    (x === y + z || x === z + y || x === y - z || x === z - y);\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    return message.replace(/[a-z]/g, (char) => {\n        const lower = char.toLowerCase();\n        const upper = char.toUpperCase();\n        if (upper === lower) {\n            return upper;\n        }\n        return upper;\n    });\n};\n\nconsole.log(encode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  // console.log('lst',lst);\n  // console.log('lst.length',lst.length);\n  let largestPrime = 0;\n  let largestPrimeDigits = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let temp = lst[i];\n    let tempPrime = largestPrime;\n    while (tempPrime > largestPrime) {\n      if (temp % tempPrime === 0) {\n        largestPrime = tempPrime;\n        largestPrimeDigits = largestPrimeDigits;\n      }\n      tempPrime = largestPrimePrime(largestPrime);\n    }\n    sum += largestPrimeDigits;\n  }\n  return sum;\n};\nconst largestPrimePrime = (num) => {\n  let i = 0;\n  let j = 0;\n  let largestPrime = 0;\n  while (i < num) {\n    if (num % i === 0) {\n      if (i > largestPrime) largestPrime = i;\n      for (j = largestPrime + 1; j <= num; j++) {\n        if (num % j === 0) {\n          return j;\n        }\n      }\n    }\n    i++;\n  }\n  return largestPrime;\n};\n\nconsole.log(largestPrimePrime(0));\nconsole.log(largestPrimePrime(1));\nconsole.log(largestPrimePrime(2));\nconsole.log(largestPrimePrime(3));\nconsole.log(largestPrimePrime(4));\nconsole.log(largestPrimePrime(5));\nconsole.log(largestPrimePrime(6));\nconsole.log(largestPrimePrime(7));\nconsole.log(largestPrimePrime(8));\nconsole.log(largestPrimePrime(9));\nconsole.log(largestPrimePrime(10));\nconsole.log(largestPrimePrime(11));\nconsole.log(largestPrimePrime(12));\nconsole.log(largestPrimePrime(13));\nconsole.log(largestPrimePrime(14));\nconsole.log(largestPrimePrime(15));\nconsole.log(largestPrimePrime(16));\nconsole.log(largestPrimePrime(17));\nconsole.log(largestPrimePrime(18));\nconsole.log(largestPrimePrime(19));\nconsole.log(largestPrimePrime(20));\nconsole.log(largestPrimePrime(21));\nconsole.log(largestPrimePrime(22));\nconsole.log(largestPrimePrime(23));\nconsole.log(largestPrimePrime(24));\nconsole.log(largestPrimePrime(25));\nconsole.log(largestPrimePrime(26));\nconsole.log(largestPrimePrime(27));\nconsole.log(largestPrimePrime(28));\nconsole.log(largestPrimePrime(29));\nconsole.log(largestPrimePrime(30));\nconsole.log(largestPrimePrime(31));\nconsole.log(largestPrimePrime(32));\nconsole.log(largestPrimePrime(33));\nconsole.log(largestPrimePrime(34));\nconsole.log(largestPrimePrime(35));\nconsole.log(largestPrimePrime(36));\nconsole.log(largestPrimePrime(37));\nconsole.log(largestPrimePrime(38));\nconsole.log(largestPrimePrime(39));\nconsole.log(largestPrimePrime(40));\nconsole.log(largestPrimePrime(41));\nconsole.log(largestPrimePrime(42));\nconsole.log(largestPrimePrime(43));\nconsole.log(largestPrimePrime(44));\nconsole.log(largestPrimePrime(45));\nconsole.log(largestPrimePrime(46));\nconsole.log(largestPrimePrime(47));\nconsole.log(largestPrimePrime(48));\nconsole.log(largestPrimePrime(49));\nconsole.log(largestPrimePrime(50));\nconsole.log(largestPrimePrime(51));\nconsole.log(largestPrimePrime(52));\nconsole.log(largestPrimePrime(53));\nconsole.log(largestPrimePrime(54));\nconsole.log(largestPrimePrime(55));\nconsole.log(largestPrimePrime(56));\nconsole.log(largestPrimePrime(57));\nconsole.log(largestPrimePrime(58));\nconsole.log(largestPrimePrime(59));\nconsole.log(largestPrimePrime(60));\nconsole.log(largestPrimePrime(61));\nconsole.log(largestPrimePrime(62));\nconsole.log(largestPrimePrime(63));\nconsole.log(largestPrimePrime(64));\nconsole.log(largestPrimePrime(65));\nconsole.log(largestPrimePrime(66));\nconsole.log(largestPrimePrime(67));\nconsole.log(largestPrimePrime(68));\nconsole.log(largestPrimePrime(69));\nconsole.log(largestPrimePrime(70));\nconsole.log(largestPrimePrime(71));\nconsole.log(largestPrimePrime(72));\nconsole.log(largestPrimePrime(73));\nconsole.log(largestPrimePrime(74));\nconsole.log(largestPrimePrime(75));\nconsole.log(largestPrimePrime(76));\nconsole.log(largestPrimePrime(77));\nconsole.log(largestPrimePrime(78));\nconsole.log(largestPrimePrime(79));\nconsole.log(largestPrimePrime(80));\nconsole.log(largestPrimePrime(81));\nconsole.log(largestPrimePrime(82));\nconsole.log(largestPrimePrime(83));\nconsole.log(largestPrimePrime(84));\nconsole.log(largestPrimePrime(85));\nconsole"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n    let allKeysAreStrings = true;\n    for (let key in dict) {\n        if (!dict.hasOwnProperty(key)) {\n            continue;\n        }\n        if (typeof dict[key]!=='string') {\n            allKeysAreStrings = false;\n        }\n        if (dict[key].toLowerCase()!== dict[key]) {\n            allKeysAreStrings = false;\n        }\n    }\n    return allKeysAreStrings;\n};\n\nmodule.exports = determineDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  const primes = [2];\n  const i = 3;\n  while (i <= n) {\n    let j = 2;\n    while (j * i <= n) {\n      primes.push(i);\n      j++;\n    }\n    i++;\n  }\n  return primes;\n};\n\nconsole.log(\n  `The first ${\n    considerUpTo(5).length\n  } primes up to 5 are: ${\n    considerUpTo(5)\n   .map((prime) => prime.toString())\n   .join(', ')\n  }`\n);\n\nconsole.log(\n  `The first ${\n    considerUpTo(11).length\n  } primes up to 11 are: ${\n    considerUpTo(11)\n   .map((prime) => prime.toString())\n   .join(', ')\n  }`\n);\n\nconsole.log(\n  `The first ${\n    considerUpTo(0).length\n  } primes up to 0 are: ${\n    considerUpTo(0)\n   .map((prime) => prime.toString())\n   .join(', ')\n  }`\n);\n\nconsole.log(\n  `The first ${\n    considerUpTo(20).length\n  } primes up to 20 are: ${\n    considerUpTo(20)\n   .map((prime) => prime.toString())\n   .join(', ')\n  }`\n);\n\nconsole.log(\n  `The first ${\n    considerUpTo(1).length\n  } primes up to 1 are: ${\n    considerUpTo(1)\n   .map((prime) => prime.toString())\n   .join(', ')\n  }`\n);\n\nconsole.log(\n  `The first ${\n    considerUpTo(18).length\n  } primes up to 18 are: ${\n    considerUpTo(18)\n   .map((prime) => prime.toString())\n   .join(', ')\n  }`\n);\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n\n  if (a == 0 && b == 0) {\n    return 0;\n  }\n\n  let prod = 1;\n  for (let i = a, j = b; i > 0 && j > 0; i -= 1, j -= 1) {\n    if (i < 10) {\n      prod *= i;\n    } else {\n      prod *= (10 - i);\n    }\n  }\n\n  return prod;\n};\n\nmodule.exports = breed;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n  const count = 0;\n  const l = s.length;\n  const c = 0;\n  for (let i = 0; i < l; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      c += 1;\n      count += 1;\n    }\n  }\n  return count;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  let diff = value - Math.floor(value);\n  let closest = Math.abs(value) < Math.abs(Math.floor(value))? Math.floor(value) : Math.ceil(value);\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest multiple of that number to the nearest\n  multiple of the given number.\n  Examples\n  >>> closestMultiple(3, 3)\n  6\n  >>> closestMultiple(2, 4)\n  8\n  >>> closestMultiple(4, 6)\n  12\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestMultiple(14.5, 15) should\n  return 15 and closestMultiple(14.5, -15) should return -15.\n  */\nconst closestMultiple = (number, multiple) => {\n  let multipleOfNumber = Math.floor(number / multiple);\n  let remainder = number % multiple;\n  let multipleOfRemainder = Math.floor(remainder / multiple);\n  let remainderAfterMultiple = remainder % multiple;\n\n  let closest = multipleOfNumber * multiple;\n\n  if (multipleOfRemainder > multipleOfMultiple) {\n    closest += multiple;\n  } else if (multipleOfRemainder < multipleOfMultiple) {\n    closest -= multiple;\n  }\n\n  if (remainderAfterMultiple > 0) {\n    closest += multiple;\n  } else if (remainderAfterMultiple < 0) {\n    closest -= multiple;\n  }\n\n  return closest;\n};\n\nmodule.exports = {\n  closeInteger,\n  closestMultiple\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  const evenN = n % 2 === 0\n  const oddN = n % 2 === 1\n  const stonePile = [0, 1]\n\n  for (let i = 2; i < n; i++) {\n    const stone = i + 1\n    stonePile.push(stone)\n    if (stone % 2 === 0 && evenN) {\n      stonePile.push(stone)\n    }\n    if (stone % 2 === 1 && oddN) {\n      stonePile.push(stone)\n    }\n  }\n  return stonePile\n}\n\nexport default holdAPile\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  const array = [];\n  const words = s.split(/\\s?(?=(?:[^'\",]*['\"][^'\",]*[^'\",])*[^'\",]*$)/g);\n  words.forEach(word => array.push(word));\n  return array;\n};\n\nmodule.exports = bibleString;\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  let half = Math.floor(x / 2);\n  if (x % 2 === 0) {\n    return half;\n  }\n  return half + 1;\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let average = (n + m) / 2;\n  const result = Math.floor(average);\n  return result.toString(2);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    if (x % 2 === 0) {\n      result.push(x);\n    }\n    x = Math.floor(x / 2);\n  }\n  return result;\n};\n\n/*\n  Given a list of positive integers x. return a sorted list of all\n  elements that has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> oddDigit([15, 33, 1422, 1])\n  [15, 33]\n  >>> oddDigit([152, 323, 1422, 10])\n  [152, 1422]\n  */\nconst oddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    if (x % 2!== 0) {\n      result.push(x);\n    }\n    x = Math.floor(x / 2);\n  }\n  return result;\n};\n\n/*\n  Given a list of positive integers x. return a sorted list of all\n  elements that has even digit but not any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  [1, 1422]\n  */\nconst notOddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    if (x % 2 === 0) {\n      if (x % 3 === 0) {\n        result.push(x);\n      }\n    } else {\n      result.push(x);\n    }\n    x = Math.floor(x / 2);\n  }\n  return result;\n};\n\n/*\n  Given a list of positive integers x. return a sorted list of all\n  elements that has odd digit but not any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> oddDigit([15, 33, 1422, 1])\n  [15, 33]\n  >>> oddDigit([152, 323, 1422, 10])\n  [152, 1422]\n  */\nconst notEvenDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    if (x % 2!== 0) {\n      if (x % 3!== 0) {\n        result.push(x);\n      }\n    } else {\n      result.push(x);\n    }\n    x = Math.floor(x / 2);\n  }\n  return result;\n};\n\n/*\n  Given a list of positive integers x. Return a sorted list of all\n  elements that has even digit but not any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  [1, 1422]\n  */\nconst notOddEvenDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    if (x % 2!== 0) {\n      if (x % 3 === 0) {\n        result.push(x);\n      }\n    } else {\n      result.push(x);\n    }\n    x = Math.floor(x / 2);\n  }\n  return result;\n};\n\n/*\n  Given a list of positive integers x. return a sorted list of all\n  elements that has odd digit and not any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  [152, 1422]\n  */\nconst notOddDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    if (x % 2!== 0) {\n      if (x % 3!== 0) {\n        result.push(x);\n      }\n    } else {\n      result.push(x);\n    }\n    x = Math.floor(x / 2);\n  }\n  return result;\n};\n\n/*\n  Given a list of positive integers x. Return a sorted list of all\n  elements that has odd digit and not any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  [152, 1422]\n  */\nconst oddEvenDigit = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    if (x % 2!== 0) {\n      if (x % 3 === 0) {\n        result.push(x);\n      }\n    } else {\n      result.push(x);\n    }\n    x = Math.floor(x / 2);\n  }\n  return result;\n};\n\nmodule.exports = {\n  aloneDigit,\n  oddDigit,\n  notOddDigit,\n  notEvenDigit,\n  oddEvenDigit\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversed = sorted.reverse();\n\n  const result = reversed.map((x) => {\n    const index = arr.indexOf(x);\n    if (index === -1) {\n      return x;\n    }\n    return [x, arr[index]];\n  });\n\n  return result.map((x) => {\n    return x[1];\n  });\n};\n\nexport default byDuration;\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(Math.pow(i, i));\n    } else {\n      result.push(i * f(i - 1));\n    }\n  }\n  return result;\n};\n\nconst solution = f(5);\n\nconsole.log(solution);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const isOdd = (n) => n % 2!== 0\n  const isEven = (n) => n % 2 === 0\n\n  let count = 0\n  const range = new Range(1, n)\n  while (range.hasNext()) {\n    const x = range.next()\n    if (isOdd(x) && isEven(x)) count += 1\n  }\n\n  return [count, count - 1]\n}\n\nexport { evenOddPalindrome }\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  let n = arr.length;\n  let result = 0;\n\n  for (let i = 0; i < n; i++) {\n    let x = parseInt(arr[i]);\n\n    if (x >= 0) {\n      result += x;\n    } else {\n      let firstDigit = Math.abs(x);\n      let secondDigit = firstDigit % 10;\n      let thirdDigit = firstDigit / 10;\n\n      if (secondDigit > 0 || thirdDigit > 0) {\n        result += 1;\n      }\n    }\n  }\n\n  return result;\n};\n\nconsole.log(`\n  Consider the first ten numbers from 1 to 100:\n  `);\n\nfor (let i = 1; i <= 100; i++) {\n  console.log(i);\n}\n\nconsole.log(`\n  The numbers 1 to 10 have a sum of digits > 0:\n  `);\n\nconsole.log(considerNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\nconsole.log(`\n  The numbers -1 to -10 have a sum of digits > 0:\n  `);\n\nconsole.log(considerNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\n\nconsole.log(`\n  The numbers 1 to 10 have a sum of digits > 0:\n  `);\n\nconsole.log(considerNums([1, 11, -11]));\n\nconsole.log(`\n  The numbers -1 to -10 have a sum of digits > 0:\n  `);\n\nconsole.log(considerNums([-1, 1, -11]));\n\nconsole.log(`\n  The numbers -1 to -10 have a sum of digits > 0:\n  `);\n\nconsole.log(considerNums([-1, -11, 1]));\n\nconsole.log(`\n  The numbers -1 to -10 have a sum of digits > 0:\n  `);\n\nconsole.log(considerNums([-1, -11, -1, 1, 11, -11]));\n\nconsole.log(`\n  The numbers -1 to -10 have a sum of digits > 0:\n  `);\n\nconsole.log(considerNums([-1, -11, -1, -11, 1, 11, -11]));\n\nconsole.log(`\n  The numbers -1 to -10 have a sum of digits > 0:\n  `);\n\nconsole.log(considerNums([-1, -11, -1, -11, -1, 11, -11]));\n\nconsole.log(`\n  The numbers -1 to -10 have a sum of digits > 0:\n  `);\n\nconsole.log(considerNums([-1, -11, -1, -11, -1, -11, 1, 11, -11]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  const len = arr.length\n  if (len === 0) return true\n  const mid = (len + 1) / 2\n  const left = arr.slice(0, mid)\n  const right = arr.slice(mid, len)\n  const left_max = left.reduce((a, b) => a + b)\n  const right_min = right.reduce((a, b) => a + b)\n  if (left_max < right_min) return false\n  for (let i = 0; i < mid; i++) {\n    if (arr[i]!== arr[i + 1]) return false\n  }\n  return true\n}\n\n// Your function below\n\nconst left = [1, 3, 5, 7, 9]\nconst right = [2, 4, 6, 8, 10]\nconst sorted = left.concat(right).sort((a, b) => a - b)\nconsole.log(sorted.length === 10? affectOneTestis(sorted) : false)\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  if (!lst1 ||!lst2) {\n    return 'NO';\n  }\n\n  const sorted1 = lst1.sort();\n  const sorted2 = lst2.sort();\n\n  for (let i = 0; i < sorted1.length; i++) {\n    if (sorted2.indexOf(sorted1[i]) === -1) {\n      return 'NO';\n    }\n  }\n\n  return 'YES';\n};\n\ndescribe('central', () => {\n  it('returns \"YES\" when two lists of numbers are sorted and the central element exists', () => {\n    expect(central([1, 2, 3, 4], [1, 2, 3, 4])).toBe('YES');\n  });\n\n  it('returns \"NO\" when two lists of numbers are sorted and the central element does not exist', () => {\n    expect(central([1, 2, 3, 4], [1, 5, 3, 4])).toBe('NO');\n  });\n\n  it('returns \"YES\" when two lists of numbers are sorted and the central element exists in the second list', () => {\n    expect(central([1, 2, 3, 4], [2, 1, 3, 4])).toBe('YES');\n  });\n\n  it('returns \"NO\" when two lists of numbers are sorted and the central element does not exist in the second list', () => {\n    expect(central([1, 2, 3, 4], [1, 5, 3, 4])).toBe('NO');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letter = (char, i) => char.toLowerCase()[i];\n  const letters = test.split(' ').map(letter);\n  const result = {};\n  letters.forEach(letter => {\n    const count = result[letter] = (result[letter] || 0) + 1;\n    if (count > 1) {\n      result[letter] = count;\n    }\n  });\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  const arr = s.split('');\n  const cArr = c.split('');\n  const inverted = [];\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    inverted[j] = arr[i];\n    i++;\n    j--;\n  }\n  i = 0;\n  j = cArr.length - 1;\n  while (i < j) {\n    if (cArr[i] === arr[j]) {\n      j--;\n    } else {\n      inverted[i] = cArr[j];\n      i++;\n      j--;\n    }\n  }\n  return (inverted.join(''), arr.join('') === inverted.join(''));\n};\n\nexport default invertDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  const count = (lst) => {\n    const list = [...new Set(lst.map((item) => item.split(\"\").filter(digit => digit.length > 0)))]\n    return list.map(item => item.length % 2 === 1? `the number of odd elements ${item.length} of the ${item.join(\" \")} of the ${item.join(\" \")}` : \"\")\n  }\n  return count(lst)\n}\n\nmodule.exports = curiousCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  const dp = (arr) => {\n    const prev = arr[0]\n    const len = arr.length\n    const cur = prev\n    const minSum = -1\n\n    for (let i = 1; i < len; i++) {\n      const curSum = cur + arr[i]\n      const next = (curSum < 0)? curSum : curSum + prev\n      minSum = (minSum < next)? minSum : next\n    }\n\n    return minSum\n  }\n\n  return dp(nums)\n}\n\nconsole.log(minuteSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minuteSubArraySum([-1, -2, -3]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  if (grid.length === 0) {\n    return 0\n  }\n  const buckets = grid.reduce((acc, row, i) => {\n    acc[row[0]] = Math.min(row[1], capacity)\n    return acc\n  }, {})\n  return Object.keys(buckets).reduce((acc, row) => {\n    return Math.min(acc, buckets[row] - row[1])\n  }, 0)\n}\n\nconst solution = (grid, capacity) => {\n  const count = soapFill(grid, capacity)\n  return count\n}\n\nconsole.log(solution([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))\nconsole.log(solution([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))\nconsole.log(solution([[0,0,0], [0,0,0]], 5))\nconsole.log(solution([[0,0,0], [0,0,0], [0,0,0], [0,0,0]], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    const isOne = (x) => x > 0 && (x & (x - 1)) == 0\n    const isZero = (x) => x == 0\n    const isNegative = (x) => x < 0\n\n    const sortByOne = (arr) => arr.sort((x, y) => {\n        const xIsOne = isOne(x)\n        const yIsOne = isOne(y)\n        if (xIsOne!= yIsOne) return xIsOne - yIsOne\n        return x - y\n    })\n    const sortByZero = (arr) => arr.sort((x, y) => {\n        const xIsZero = isZero(x)\n        const yIsZero = isZero(y)\n        if (xIsZero!= yIsZero) return xIsZero - yIsZero\n        return x - y\n    })\n    const sortByNegative = (arr) => arr.sort((x, y) => {\n        const xIsNegative = isNegative(x)\n        const yIsNegative = isNegative(y)\n        if (xIsNegative!= yIsNegative) return xIsNegative - yIsNegative\n        return x - y\n    })\n    return (isOne(arr[0]))? sortByOne(arr) : (isZero(arr[0]))? sortByZero(arr) : sortByNegative(arr)\n}\n\nmodule.exports = sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  const words = s.split(\" \")\n  const len = words.length\n  const result = []\n  let start = 0\n  while (start < len) {\n    let end = start\n    while (end < len && words[end].length <= n) {\n      end++\n    }\n    let word = words.slice(start, end)\n    if (word.length === n) {\n      result.push(word.join(\" \"))\n    }\n    start = end\n  }\n  return result\n}\n\n/*\n  Given a string s, and a string pattern that can be a single character or a \n  sequence of characters (not necessarily all must be characters), you have to \n  implement a function that finds all occurrences of pattern in s and returns \n  them as a list.\n  Examples:\n  wordPattern(\"ab\", \"a\") -> [\"a\"]\n  wordPattern(\"ab\", \"ab\") -> [\"ab\"]\n  wordPattern(\"a b\", \"b\") -> [\"a b\"]\n  wordPattern(\"ab\", \"a \") -> [\"a \"]\n  wordPattern(\"aa bb\", \"a\") -> [\"aa\", \"bb\"]\n  wordPattern(\"aa bb\", \"aa\") -> [\"aa\"]\n  wordPattern(\"aa bb\", \"bb\") -> [\"bb\"]\n  wordPattern(\"aa bb\", \"a b\") -> [\"aa\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb\") -> [\"aa\", \"bb\"]\n  wordPattern(\"aa bb\", \"bb b\") -> [\"bb\", \"bb b\"]\n  wordPattern(\"aa bb\", \"bb bb\") -> [\"aa\", \"bb\", \"bb\"]\n  wordPattern(\"aa bb\", \"a bb\") -> [\"aa\", \"bb\"]\n  wordPattern(\"a a b\", \"a\") -> [\"a a\"]\n  wordPattern(\"aa bb\", \"b\") -> [\"aa bb\"]\n  wordPattern(\"aa bb\", \"a b\") -> [\"aa\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb\") -> [\"aa\", \"bb\"]\n  wordPattern(\"aa bb\", \"b b\") -> [\"aa\", \"bb\"]\n  wordPattern(\"aa bb\", \"a bb\") -> [\"aa\", \"bb\"]\n  wordPattern(\"aa bb\", \"b bb\") -> [\"aa\", \"bb\"]\n  wordPattern(\"aa bb\", \"a bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"b bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"b bb bb\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"b bb bb bb\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb bb\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb bb bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb bb bb bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb bb bb bb bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb bb bb bb bb bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb bb bb bb bb bb bb bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb b\") -> [\"aa\", \"bb\", \"b\"]\n  wordPattern(\"aa bb\", \"a bb"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  const closestVowel = word.substr(word.length - 1, 1);\n  const leftOfClosest = word.substr(0, word.length - 1);\n\n  if (leftOfClosest.includes(closestVowel)) {\n    return closestVowel;\n  }\n  return '';\n};\n\nconsole.log(catchClosestVowel('ab'));\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  const balanced = (s) => {\n    let i = 0, j = 0;\n    while (i < s.length && j < s.length) {\n      if (s[i] === '(') {\n        ++i;\n        continue;\n      }\n      if (s[j] === ')') {\n        ++j;\n        continue;\n      }\n      if (s[i] === '(') {\n        ++i;\n        continue;\n      }\n      if (s[j] === ')') {\n        ++j;\n        continue;\n      }\n      if (s[i] === '(') {\n        ++i;\n        continue;\n      }\n      if (s[j] === ')') {\n        ++j;\n        continue;\n      }\n      if (s[i] === '(') {\n        ++i;\n        continue;\n      }\n      if (s[j] === ')') {\n        ++j;\n        continue;\n      }\n      return false;\n    }\n    return i === s.length && j === s.length;\n  };\n  return balanced(lst[0]) && balanced(lst[1]);\n};\n\nmodule.exports = catchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  const max = [...arr].sort((a, b) => a - b)[k - 1];\n  const min = [...arr].sort((a, b) => b - a)[k - 1];\n\n  return [...arr].filter((x, i) => x === max || x === min)[0];\n};\n\nexport default maximal;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1])); // 12\nconsole.log(solution([3, 3, 3, 3, 3])); // 9\nconsole.log(solution([30, 13, 24, 321])); //0\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let arrLength = arr.length;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arrLength; i++) {\n    sum += arr[i];\n    sum = sum % 10;\n    sum = sum? sum : 10;\n  }\n  return sum;\n};\n\nexport default lendElement;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  const odd = []\n  const even = []\n  const x = n\n  while(x > 1) {\n    if(x % 2 === 1) {\n      odd.push(x)\n    } else {\n      even.push(x)\n    }\n    x = Math.floor(x / 2)\n  }\n  odd.push(1)\n  odd.sort()\n  even.push(1)\n  even.sort()\n  return [...odd,...even]\n}\n\n/*\n  Given a positive integer n, return the collatz sequence for n, which means the odd numbers that the sequence starts with.\n\n  For example:\n  catchCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst catchCollatz = (n) => {\n  const odd = []\n  const even = []\n  const x = n\n  while(x > 1) {\n    if(x % 2 === 1) {\n      odd.push(x)\n    } else {\n      even.push(x)\n    }\n    x = Math.floor(x / 2)\n  }\n  odd.push(1)\n  odd.sort()\n  even.push(1)\n  even.sort()\n  return [...odd,...even]\n}\n\n/*\n  Given a positive integer n, return the number of odd numbers that the collatz sequence starts with.\n\n  For example:\n  catchCollatzOdds(5) returns 2\n  */\nconst catchCollatzOdds = (n) => {\n  const odd = []\n  const even = []\n  const x = n\n  while(x > 1) {\n    if(x % 2 === 1) {\n      odd.push(x)\n    } else {\n      even.push(x)\n    }\n    x = Math.floor(x / 2)\n  }\n  odd.push(1)\n  odd.sort()\n  return odd.length\n}\n\nconst test = () => {\n  const arr = catchOddCollatz(5)\n  console.log(arr)\n  console.log(catchCollatzOdds(5))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const splitDate = date.split('-');\n  const month = parseInt(splitDate[1], 10);\n  const day = parseInt(splitDate[2], 10);\n  const year = parseInt(splitDate[0], 10);\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 30) return false;\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) return false;\n  } else if (month == 2) {\n    if (day < 1 || day > 29) return false;\n  } else {\n    if (day < 1 || day > 31) return false;\n  }\n  if (year < 1970 || year > 2100) return false;\n  return true;\n};\n\nmodule.exports = validDate;<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  return txt.split(/(\\s*[^\\s]+\\s*)/).filter(word => word &&!word.includes(' '))\n}\n\nconst connectedWords = (txt) => {\n  return txt.split(/(\\s*[^\\s]+\\s*)/)\n}\n\n/*\n  Given a string of words, return a list of the words that are in a circle with the word \"the\" at the center\n  If \"the\" is not in the word, return the empty list\n  */\nconst circleWords = (txt) => {\n  const words = connectedWords(txt)\n  const circleWords = []\n\n  for (let i = 0; i < words.length; i++) {\n    const first = words[i]\n    const second = words[(i + 1) % words.length]\n\n    if (first === second && first.includes('the')) {\n      circleWords.push(first)\n    }\n  }\n\n  return circleWords\n}\n\n/*\n  Given a string of words, return a list of the words that are in a circle with the word \"the\" at the center,\n  or a list of the words that are not in a circle\n  */\nconst circleOrNot = (txt) => {\n  const words = connectedWords(txt)\n  const circleWords = circleWords(txt)\n  const notCircleWords = []\n\n  for (let i = 0; i < words.length; i++) {\n    const first = words[i]\n    const second = words[(i + 1) % words.length]\n\n    if (first === second && first.includes('the')) {\n      circleWords.push(first)\n    } else {\n      notCircleWords.push(first)\n    }\n  }\n\n  return circleWords.concat(notCircleWords)\n}\n\n/*\n  Given a string of words, return the list of the words that are in a circle,\n  or a list of the words that are not in a circle,\n  or a list of the words that are in a circle, but not in a circle,\n  or a list of the words that are in a circle, and in a circle\n  */\nconst allCircleWords = (txt) => {\n  const words = connectedWords(txt)\n  const circleWords = circleWords(txt)\n  const notCircleWords = []\n\n  for (let i = 0; i < words.length; i++) {\n    const first = words[i]\n    const second = words[(i + 1) % words.length]\n\n    if (first === second && first.includes('the')) {\n      circleWords.push(first)\n    } else {\n      notCircleWords.push(first)\n    }\n  }\n\n  const circleOrNot = circleOrNot(txt)\n\n  for (let i = 0; i < notCircleWords.length; i++) {\n    const first = notCircleWords[i]\n    const second = notCircleWords[(i + 1) % notCircleWords.length]\n\n    if (first === second && first.includes('the')) {\n      circleOrNot.push(first)\n    }\n  }\n\n  return circleWords.concat(notCircleWords).concat(circleOrNot)\n}\n\n/*\n  Given a string of words, return a list of the words that are in a circle,\n  or a list of the words that are not in a circle,\n  or a list of the words that are in a circle, but not in a circle,\n  or a list of the words that are in a circle, and in a circle,\n  or a list of the words that are in a circle, and not in a circle\n  */\nconst allCircleOrNot = (txt) => {\n  const words = connectedWords(txt)\n  const circleWords = circleWords(txt)\n  const notCircleWords = []\n\n  for (let i = 0; i < words.length; i++) {\n    const first = words[i]\n    const second = words[(i + 1) % words.length]\n\n    if (first === second && first.includes('the')) {\n      circleWords.push(first)\n    } else {\n      notCircleWords.push(first)\n    }\n  }\n\n  const circleOrNot = circleOrNot(txt)\n\n  for (let i = 0; i < notCircleWords.length; i++) {\n    const first = notCircleWords[i]\n    const second = notCircleWords[(i + 1) % notCircleWords.length]\n\n    if (first === second && first.includes('the')) {\n      circleOrNot.push(first)\n    }\n  }\n\n  return circleWords.concat(notCircleWords).concat(circleOrNot)\n}\n\n/*\n  Given a string of words, return a list of the words that are in a circle,\n  or a list of the words that are not in a circle,\n  or a list of the words that are in a circle, but not in a circle,\n  or a list of the words that are in a circle, and in a circle,\n  or a list of the words that are in a circle, and not in a circle\n  */\nconst allCircleOrNotWithCount = (txt) => {\n  const words = connectedWords(txt)\n  const circleWords = circleWords(txt)\n  const notCircleWords = []\n\n  for (let i = 0; i < words.length; i++) {\n    const first = words[i]\n    const second = words[(i + 1) % words.length]\n\n    if (first === second && first.includes('the')) {\n      circleWords.push(first)\n    } else {\n      notCircleWords.push(first)\n    }\n  }\n\n  const circleOrNot = circleOrNot(txt)\n\n  for (let i = 0; i < notCircleWords.length;"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  const lst = lst.filter(x => x >= 0)\n  const last = lst.pop()\n  if (lst.length === 0) {\n    return last === 0\n  }\n  if (lst.length === 1) {\n    return last === lst[0]\n  }\n  return (lst.every(x => x > last) && last > lst[0])\n}\n\n// console.log(isScreen([5]))\n// console.log(isScreen([1, 2, 3, 4, 5]))\n// console.log(isScreen([1, 3, 2, 4, 5]))\n// console.log(isScreen([1, 2, 3, 4, 5, 6]))\n// console.log(isScreen([1, 2, 3, 4, 5, 6, 7]))\n// console.log(isScreen([1, 2, 3, 4, 5, 6, 7, 8]))\n// console.log(isScreen([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n// console.log(isScreen([1, 2, 2, 3, 3, 4, 4, 5]))\n// console.log(isScreen([1, 2, 2, 2, 3, 3, 4, 4, 5]))\n// console.log(isScreen([1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5]))\n// console.log(isScreen([1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  const [max1, min1] = [Math.max(start1, end2), Math.min(start1, end2)];\n  const [max2, min2] = [Math.max(start2, end1), Math.min(start2, end1)];\n  const overlapLength = max1 - min2;\n  return overlapLength > 0 && overlapLength % 1 === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  const signSum = (sign) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] * sign > 0) {\n        sum += arr[i] * sign;\n      }\n    }\n    return sum;\n  };\n  return signSum(1) + signSum(-1) + signSum(0);\n};\n\nconsole.log(goadSigns([1, 2, 2, -4]));\nconsole.log(goadSigns([0, 1]));\nconsole.log(goadSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const N = grid.length;\n  let path = [];\n  const visited = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (visited[i * N + j] === 0) {\n        visited[i * N + j] = 1;\n        const neighborCells = [\n          i - 1, i + 1,\n          j - 1, j + 1,\n          i - N, i + N,\n          j - N, j + N\n        ];\n        const current = grid[i][j];\n        for (let n = 0; n < 4; n++) {\n          const neighbor = neighborCells[n];\n          if (neighbor > 0 && neighbor < N * N && visited[neighbor] === 0) {\n            path.push(grid[neighbor][j]);\n            visited[neighbor] = 1;\n          }\n        }\n      }\n    }\n  }\n  return path.slice(0, k);\n};\n\n// https://www.reddit.com/r/dailyprogrammer/comments/2a5y6c/20161216_challenge_124_easy_path_finding/\nconst findMinPath = (grid, k) => {\n  const N = grid.length;\n  const visited = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (visited[i * N + j] === 0) {\n        visited[i * N + j] = 1;\n        const neighborCells = [\n          i - 1, i + 1,\n          j - 1, j + 1,\n          i - N, i + N,\n          j - N, j + N\n        ];\n        const current = grid[i][j];\n        for (let n = 0; n < 4; n++) {\n          const neighbor = neighborCells[n];\n          if (neighbor > 0 && neighbor < N * N && visited[neighbor] === 0) {\n            const path = grid[neighbor];\n            if (path.length > k) {\n              return path.slice(0, k);\n            }\n          }\n        }\n      }\n    }\n  }\n  return [];\n};\n\nconsole.log(\n  minutePath(\n    [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9]\n    ],\n    3\n  )\n);\n\nconsole.log(\n  findMinPath(\n    [\n      [5, 9, 3],\n      [4, 1, 6],\n      [7, 8, 2]\n    ],\n    1\n  )\n);\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1, 3, 2]\n  while (tri.length < n + 1) {\n    tri.push(tri[tri.length - 1] + tri[tri.length - 2] + tri[tri.length - 3])\n  }\n  return tri\n}\n\nconst test = () => {\n  let res = [1, 3, 2, 8]\n  let m = [1, 3, 2]\n  let n = 3\n  res = tri(n)\n  console.log(res)\n  for (let i = 0; i < n + 1; i++) {\n    m.push(tri(n)[i])\n  }\n  console.log(m)\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n    let result = 1;\n    while (n > 0) {\n        result *= n % 10;\n        n = n / 10;\n    }\n    return result;\n};\n\nconsole.log(digit(10));\nconsole.log(digit(1));\nconsole.log(digit(2));\nconsole.log(digit(3));\nconsole.log(digit(4));\nconsole.log(digit(5));\nconsole.log(digit(6));\nconsole.log(digit(7));\nconsole.log(digit(8));\nconsole.log(digit(9));\nconsole.log(digit(23));\nconsole.log(digit(235));\nconsole.log(digit(236));\nconsole.log(digit(237));\nconsole.log(digit(238));\nconsole.log(digit(239));\nconsole.log(digit(240));\nconsole.log(digit(241));\nconsole.log(digit(242));\nconsole.log(digit(243));\nconsole.log(digit(244));\nconsole.log(digit(245));\nconsole.log(digit(246));\nconsole.log(digit(247));\nconsole.log(digit(248));\nconsole.log(digit(249));\nconsole.log(digit(250));\nconsole.log(digit(251));\nconsole.log(digit(252));\nconsole.log(digit(253));\nconsole.log(digit(254));\nconsole.log(digit(255));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n    let stack = [];\n    for(let i = 0; i < string.length; i++) {\n        if(string[i] === '[') {\n            stack.push(i);\n        } else if(string[i] === ']') {\n            if(stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n};\n\nconsole.log(isNest('[[]]'));\nconsole.log(isNest('[]]]]]]][[[[[]'));\nconsole.log(isNest('[][]'));\nconsole.log(isNest('[]'));\nconsole.log(isNest('[[][]]'));<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  return new Promise((resolve, reject) => {\n    let sumOfSquares = 0;\n    lst.forEach((element) => {\n      sumOfSquares += Math.pow(parseFloat(element), 2);\n    });\n    resolve(sumOfSquares);\n  });\n}\n\nconst calculate = (lst) => {\n  return new Promise((resolve, reject) => {\n    summarizeSquare(lst).then(\n      (sumOfSquares) => {\n        const nums = lst.map((num) => parseFloat(num));\n        const avg = Math.round(sumOfSquares / nums.length);\n        const square = Math.pow(avg, 2);\n        const squareAvg = Math.round(square);\n        const squaredAvg = Math.pow(squareAvg, 2);\n        resolve(squaredAvg);\n      }\n    );\n  });\n}\n\nmodule.exports = calculate;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  const [lastChar, lastCharLen] = txt.slice(-1, -1).split(\" \")\n  return /^[A-Za-z]+$/.test(lastChar) &&!/^[A-Za-z]+\\b/.test(lastChar)\n}\n\n/*\n  Create a function that returns true if the last two\n  characters of a given string are a pair of consonant\n  and a vowel, and false otherwise.\n  Note: \"vowel\" is a group of characters separated by space.\n  Examples:\n  determineIfLastTwoCharactersAreAPhoneme(\"apple pie\") ➞ true\n  determineIfLastTwoCharactersAreAPhoneme(\"apple pi e\") ➞ true\n  determineIfLastTwoCharactersAreAPhoneme(\"apple pi e \") ➞ false\n  determineIfLastTwoCharactersAreAPhoneme(\"apple\") ➞ false\n  determineIfLastTwoCharactersAreAPhoneme(\"\") ➞ false\n  */\nconst determineIfLastTwoCharactersAreAPhoneme = (txt) => {\n  const [lastTwoChars, lastTwoCharLen] = txt.slice(-2, -2).split(\" \")\n  return /^[AEIOU]+\\b/.test(lastTwoChars)\n}\n\n/*\n  Create a function that returns true if the last three\n  characters of a given string are consonant and a\n  vowel, and false otherwise.\n  Note: \"vowel\" is a group of characters separated by space.\n  Examples:\n  determineIfLastThreeCharactersAreAPhoneme(\"apple pie\") ➞ false\n  determineIfLastThreeCharactersAreAPhoneme(\"apple pi e\") ➞ false\n  determineIfLastThreeCharactersAreAPhoneme(\"apple pi e \") ➞ true\n  determineIfLastThreeCharactersAreAPhoneme(\"apple\") ➞ false\n  determineIfLastThreeCharactersAreAPhoneme(\"\") ➞ false\n  */\nconst determineIfLastThreeCharactersAreAPhoneme = (txt) => {\n  const [lastThreeChars, lastThreeCharLen] = txt.slice(-3, -3).split(\" \")\n  return /^[AEIOU]+\\b/.test(lastThreeChars)\n}\n\n/*\n  Create a function that returns true if the last four\n  characters of a given string are consonant and a\n  vowel, and false otherwise.\n  Note: \"vowel\" is a group of characters separated by space.\n  Examples:\n  determineIfLastFourCharactersAreAPhoneme(\"apple pie\") ➞ false\n  determineIfLastFourCharactersAreAPhoneme(\"apple pi e\") ➞ false\n  determineIfLastFourCharactersAreAPhoneme(\"apple pi e \") ➞ true\n  determineIfLastFourCharactersAreAPhoneme(\"apple\") ➞ false\n  determineIfLastFourCharactersAreAPhoneme(\"\") ➞ false\n  */\nconst determineIfLastFourCharactersAreAPhoneme = (txt) => {\n  const [lastFourChars, lastFourCharLen] = txt.slice(-4, -4).split(\" \")\n  return /^[AEIOU]+\\b/.test(lastFourChars)\n}\n\n/*\n  Create a function that returns true if the last five\n  characters of a given string are consonant and a\n  vowel, and false otherwise.\n  Note: \"vowel\" is a group of characters separated by space.\n  Examples:\n  determineIfLastFiveCharactersAreAPhoneme(\"apple pie\") ➞ false\n  determineIfLastFiveCharactersAreAPhoneme(\"apple pi e\") ➞ false\n  determineIfLastFiveCharactersAreAPhoneme(\"apple pi e \") ➞ true\n  determineIfLastFiveCharactersAreAPhoneme(\"apple\") ➞ false\n  determineIfLastFiveCharactersAreAPhoneme(\"\") ➞ false\n  */\nconst determineIfLastFiveCharactersAreAPhoneme = (txt) => {\n  const [lastFiveChars, lastFiveCharLen] = txt.slice(-5, -5).split(\" \")\n  return /^[AEIOU]+\\b/.test(lastFiveChars)\n}\n\n/*\n  Create a function that returns true if the last six\n  characters of a given string are consonant and a\n  vowel, and false otherwise.\n  Note: \"vowel\" is a group of characters separated by space.\n  Examples:\n  determineIfLastSixCharactersAreAPhoneme(\"apple pie\") ➞ false\n  determineIfLastSixCharactersAreAPhoneme(\"apple pi e\") ➞ false\n  determineIfLastSixCharactersAreAPhoneme(\"apple pi e \") ➞ true\n  determineIfLastSixCharactersAreAPhoneme(\"apple\") ➞ false\n  determineIfLastSixCharactersAreAPhoneme(\"\") ➞ false\n  */\nconst determineIfLastSixCharactersAreAPhoneme = (txt) => {\n  const [lastSixChars, lastSixCharLen] = txt.slice(-6, -6).split(\" \")\n  return /^[AEIOU]+\\b/.test(lastSixChars)\n}\n\n/*\n  Create a function that returns true if the last seven\n  characters of a given string are consonant and a\n  vowel, and false otherwise.\n  Note: \"vowel\" is a group of characters separated by space.\n  Examples:\n  determineIfLastSevenCharactersAreAPhoneme(\"apple pie\") ➞ false\n  determineIfLastSevenCharactersAreAPhon"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i < j) {\n    let t = (arr[i] >= arr[j])? i : j\n    if (t > i) {\n      j = t\n    } else {\n      i = t\n    }\n  }\n  return j\n}\n\n/*\n  canStageByBinarySearch\n  Given a sorted array, find the index of the largest element in the array\n  which is not greater than or equal to the element immediately preceding it.\n  If no such element exists then return -1.\n\n  Examples:\n  canStageByBinarySearch([1,2,3,4,5]) = 3\n  canStageByBinarySearch([1,2,3]) = -1\n  */\nconst canStageByBinarySearch = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i < j) {\n    let t = (arr[i] >= arr[j])? i : j\n    if (t > i) {\n      j = t\n    } else {\n      i = t\n    }\n  }\n  return j\n}\n\n/*\n  canStageByRecursiveSearch\n  Given a sorted array, find the index of the largest element in the array\n  which is not greater than or equal to the element immediately preceding it.\n  If no such element exists then return -1.\n\n  Examples:\n  canStageByRecursiveSearch([1,2,3,4,5]) = 3\n  canStageByRecursiveSearch([1,2,3]) = -1\n  */\nconst canStageByRecursiveSearch = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i < j) {\n    let t = (arr[i] >= arr[j])? i : j\n    if (t > i) {\n      j = t\n    } else {\n      i = t\n    }\n  }\n  return j\n}\n\n/*\n  canStageByBruteforce\n  Given a sorted array, find the index of the largest element in the array\n  which is not greater than or equal to the element immediately preceding it.\n  If no such element exists then return -1.\n\n  Examples:\n  canStageByBruteforce([1,2,3,4,5]) = 3\n  canStageByBruteforce([1,2,3]) = -1\n  */\nconst canStageByBruteforce = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i < j) {\n    let t = (arr[i] >= arr[j])? i : j\n    if (t > i) {\n      j = t\n    } else {\n      i = t\n    }\n  }\n  return j\n}\n\n/*\n  canStageByQuickSort\n  Given a sorted array, find the index of the largest element in the array\n  which is not greater than or equal to the element immediately preceding it.\n  If no such element exists then return -1.\n\n  Examples:\n  canStageByQuickSort([1,2,3,4,5]) = 3\n  canStageByQuickSort([1,2,3]) = -1\n  */\nconst canStageByQuickSort = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i < j) {\n    let t = (arr[i] >= arr[j])? i : j\n    if (t > i) {\n      j = t\n    } else {\n      i = t\n    }\n  }\n  return j\n}\n\n/*\n  canStageByHeapSort\n  Given a sorted array, find the index of the largest element in the array\n  which is not greater than or equal to the element immediately preceding it.\n  If no such element exists then return -1.\n\n  Examples:\n  canStageByHeapSort([1,2,3,4,5]) = 3\n  canStageByHeapSort([1,2,3]) = -1\n  */\nconst canStageByHeapSort = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i < j) {\n    let t = (arr[i] >= arr[j])? i : j\n    if (t > i) {\n      j = t\n    } else {\n      i = t\n    }\n  }\n  return j\n}\n\n/*\n  canStageByHeap\n  Given a sorted array, find the index of the largest element in the array\n  which is not greater than or equal to the element immediately preceding it.\n  If no such element exists then return -1.\n\n  Examples:\n  canStageByHeap([1,2,3,4,5]) = 3\n  canStageByHeap([1,2,3]) = -1\n  */\nconst canStageByHeap = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i < j) {\n    let t = (arr[i] >= arr[j])? i : j\n    if (t > i) {\n      j = t\n    } else {\n      i = t\n    }\n  }\n  return j\n}\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  let [a, b] = lst.sort((a, b) => b - a)[0]\n  return [a, b]\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallNegatives = (lst) => {\n  let [a, b] = lst.sort((a, b) => a - b)[0]\n  return [a, b]\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallPositives = (lst) => {\n  let [a, b] = lst.sort((a, b) => b - a)[0]\n  return [a, b]\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallNegativeNegatives = (lst) => {\n  let [a, b] = lst.sort((a, b) => a - b)[0]\n  return [a, b]\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallPositiveNegatives = (lst) => {\n  let [a, b] = lst.sort((a, b) => b - a)[0]\n  return [a, b]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (a > b) {\n        return a;\n      }\n      if (a < b) {\n        return b;\n      }\n      return null;\n    }\n    return b;\n  }\n  if (typeof b === 'number') {\n    return a;\n  }\n  return null;\n};\n\nconst compare = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (a > b) {\n        return a;\n      }\n      if (a < b) {\n        return b;\n      }\n      return null;\n    }\n    return b;\n  }\n  if (typeof b === 'number') {\n    return a;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes two real numbers, and returns the larger of the two.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (a > b) {\n        return a;\n      }\n      if (a < b) {\n        return b;\n      }\n      return null;\n    }\n    return b;\n  }\n  if (typeof b === 'number') {\n    return a;\n  }\n  return null;\n};\n\nconst compareThree = (a, b, c) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof c ==='string') {\n    c = c.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        if (a > b && a > c) {\n          return a;\n        }\n        if (a < b && a < c) {\n          return a;\n        }\n        return null;\n      }\n      if (b > c) {\n        return b;\n      }\n      return c;\n    }\n    if (typeof c === 'number') {\n      if (a > c) {\n        return a;\n      }\n      return c;\n    }\n    return b;\n  }\n  if (typeof b === 'number') {\n    if (typeof c === 'number') {\n      if (b > c) {\n        return b;\n      }\n      return c;\n    }\n    return b;\n  }\n  return null;\n};\n\nexport default {\n  compare,\n  compareTwo,\n  compareThree,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  const count = countEvens(n)\n  if (count === 0) {\n    return false\n  } else if (count === 1) {\n    return true\n  } else {\n    return count === 3\n  }\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n  Example\n  isAdequateToSumEven(3) == true\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSum3 = (n) => {\n  const count = countEvens(n)\n  if (count === 0) {\n    return false\n  } else if (count === 1) {\n    return true\n  } else {\n    return count === 2\n  }\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  isAdequateToSumEven(5) == true\n  isAdequateToSumEven(6) == true\n  isAdequateToSumEven(8) == false\n  */\nconst isAdequateToSum5 = (n) => {\n  const count = countEvens(n)\n  if (count === 0) {\n    return false\n  } else if (count === 1) {\n    return true\n  } else if (count === 2) {\n    return true\n  } else if (count === 3) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSum6 = (n) => {\n  const count = countEvens(n)\n  if (count === 0) {\n    return false\n  } else if (count === 1) {\n    return true\n  } else if (count === 2) {\n    return true\n  } else if (count === 3) {\n    return true\n  } else if (count === 4) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  isAdequateToSumEven(7) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSum7 = (n) => {\n  const count = countEvens(n)\n  if (count === 0) {\n    return false\n  } else if (count === 1) {\n    return true\n  } else if (count === 2) {\n    return true\n  } else if (count === 3) {\n    return true\n  } else if (count === 4) {\n    return true\n  } else if (count === 5) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  isAdequateToSumEven(8) == true\n  isAdequateToSumEven(9) == false\n  */\nconst isAdequateToSum8 = (n) => {\n  const count = countEvens(n)\n  if (count === 0) {\n    return false\n  } else if (count === 1) {\n    return true\n  } else if (count === 2) {\n    return true\n  } else if (count === 3) {\n    return true\n  } else if (count === 4) {\n    return true\n  } else if (count === 5) {\n    return true\n  } else if (count === 6) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\n  Example\n  isAdequateToSumEven(9) == true\n  isAdequateToSumEven(10) == false\n  */\nconst isAdequateToSum9 = (n) => {\n  const count = countEvens(n)\n  if (count === 0) {\n    return false\n  } else if (count === 1) {\n    return true\n  } else if (count === 2) {\n    return true\n  } else if (count === 3) {\n    return true\n  } else if (count === 4) {\n    return true\n  } else if (count === 5) {\n    return true\n  } else if (count === 6) {\n    return true\n  } else if (count === 7) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 10 positive even numbers\n  Example\n  isAdequateToSumEven(10) == false\n  */\nconst isAdequateToSum10 = (n) => {\n  const count = countEvens(n)\n  if (count === 0) {\n    return false\n  } else if (count === 1) {\n    return true\n  } else if (count === 2) {\n    return true\n  } else if (count === 3) {\n    return true\n  } else if (count === 4) {\n    return true\n  } else if (count === 5) {\n    return true\n  } else if (count === 6) {\n    return true\n  } else if (count === 7) {\n    return true\n  } else if (count === 8) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 11 positive even numbers\n  Example\n  isAdequateToSumEven(11) == true\n  isAdequateToSumEven(12) == false\n  */\nconst isAdequateToSum11 = (n) => {\n  const count = countEvens(n)\n  "}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  const arr = new Array(n+1);\n  arr[0] = 1;\n  for (let i = 1; i < n+1; i++) {\n    arr[i] = (arr[i-1] * (n - i + 1));\n  }\n  return arr[n];\n};\n\nexport default extraFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n    return text.replace(/ /g, '_');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  repairUnderscore(\"Example_1\") == \"Example 1\"\n  repairUnderscore(\"_Example_2\") == \"Example 2\"\n  repairUnderscore(\"_Example_3\") == \"Example 3\"\n  repairUnderscore(\"Example-3\") == \"Example 3\"\n  */\nconst repairUnderscore = (text) => {\n    return text.replace(/_/g,'');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  repairUnderscore(\"Example-1\") == \"Example 1\"\n  repairUnderscore(\"Example-2\") == \"Example 2\"\n  repairUnderscore(\"Example-3\") == \"Example 3\"\n  repairUnderscore(\"Example-4\") == \"Example 4\"\n  repairUnderscore(\"Example-5\") == \"Example 5\"\n  repairUnderscore(\"Example-6\") == \"Example 6\"\n  */\nconst repairMultipleUnderscores = (text) => {\n    return text.replace(/\\-+/g, '-');\n}\n\nmodule.exports = {\n    repairSpace,\n    repairUnderscore,\n    repairMultipleUnderscores\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // console.log(file_name);\n  return file_name.match(/^[a-zA-Z]\\w+[\\d\\.]+\\w+$/) && file_name.indexOf('.') > -1 &&\n    file_name.match(/^[a-zA-Z]+[\\d\\.]+\\w+$/) && file_name.indexOf('.') < file_name.length - 3;\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileExtensionCheck = (file_extension) => {\n  return file_extension.match(/\\.(txt|exe|dll)$/i) && file_extension.indexOf('.') > -1;\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameAndExtensionCheck = (file_name, file_extension) => {\n  return fileNameCheck(file_name) && fileExtensionCheck(file_extension);\n}\n\nconst validateFile = (file_name, file_extension) => {\n  if (!fileNameAndExtensionCheck(file_name, file_extension)) {\n    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}\n\nmodule.exports = validateFile;\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if ((i % 4) === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function will then return the number of entries in \n  the list. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 6\n  */\nconst countSquare = (lst) => {\n  return lst.length;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function will then return the difference between the sum \n  of the squares of the entries in the list and the sum of the squares of the entries that are not squared. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 36\n  */\nconst differenceSumSquares = (lst) => {\n  let sumSquares = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) === 0) {\n      sumSquares += lst[i] * lst[i];\n    }\n    if ((i % 4) === 0) {\n      sumSquares += lst[i] * lst[i] * lst[i];\n    }\n  }\n  let sumNonSquares = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3)!== 0) {\n      sumNonSquares += lst[i];\n    }\n    if ((i % 4)!== 0) {\n      sumNonSquares += lst[i] * lst[i];\n    }\n  }\n  return sumSquares - sumNonSquares;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function will square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function will then return the difference between the \n  sum of the squares of the entries in the list and the sum of the squares of the entries that are not squared. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 36\n  */\nconst differenceSumSquares2 = (lst) => {\n  let sumSquares = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3) === 0) {\n      sumSquares += lst[i] * lst[i];\n    }\n    if ((i % 4) === 0) {\n      sumSquares += lst[i] * lst[i] * lst[i];\n    }\n  }\n  let sumNonSquares = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if ((i % 3)!== 0) {\n      sumNonSquares += lst[i];\n    }\n    if ((i % 4)!== 0) {\n      sumNonSquares += lst[i] * lst[i];\n    }\n  }\n  return sumSquares - sumNonSquares;\n};\n\nconst main = () => {\n  const lst = [-1,-5,2,-1,-5];\n  console.log(summarizeSquare(lst));\n  console.log(countSquare(lst));\n  console.log(differenceSumSquares(lst));\n  console.log(differenceSumSquares2(lst));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  const isPrime = (n) => {\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  const mapPrime = (arr, i) => {\n    return arr.map((v, j) => {\n      if (i === 1) {\n        return v\n      }\n      return v + i\n    })\n  }\n  let arr = sentence.split(\" \")\n  let length = arr.length\n  while (length > 1) {\n    arr = mapPrime(arr, length)\n    length--\n  }\n  return arr.join(\"\")\n}\n\nexport default bibleInPrisonTerm\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let num = x.split('/')[0];\n  let den = x.split('/')[1];\n\n  let nn = n.split('/')[0];\n  let dd = n.split('/')[1];\n\n  if (nn === den) {\n    return true;\n  } else if (dd === den) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a string, determine whether it is a palindrome.\n\n  A palindrome is defined as a string that reads the same backwards as forwards.\n\n  Example\n    input: \"A man, a plan, a canal-Panama\"\n    output: true\n    input: \"race a car\"\n    output: false\n    input: \"1/1\"\n    output: true\n    input: \"0/1\"\n    output: false\n*/\nconst isPalindrome = (str) => {\n  let reversed = str.split('').reverse().join('');\n  return str === reversed;\n};\n\n/*\n  Given a string, determine whether it is a permutation of the alphabet.\n\n  A permutation is defined as a string that, when sorted lexicographically, is the same as the original string.\n\n  Example\n    input: \"A man, a plan, a canal-Panama\"\n    output: true\n    input: \"race a car\"\n    output: false\n    input: \"1/1\"\n    output: true\n    input: \"0/1\"\n    output: false\n*/\nconst isPermutation = (str) => {\n  let result = true;\n\n  let a = str.split('').sort();\n  let b = str.split('').sort();\n\n  if (a.length!== b.length) {\n    result = false;\n  } else {\n    for (let i = 0; i < a.length; i++) {\n      if (a[i]!== b[i]) {\n        result = false;\n        break;\n      }\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given a string, determine whether the number of times that the string 'canal' appears in the string 'panama' is even.\n\n  'panama' is a string that contains only the characters 'a' to 'z', where each 'a' appears in 'canal'\n  at least once. 'canal' is a string that contains only the characters 'a' to 'z', where each 'a' appears at least once.\n\n  Example\n    input: \"canal\"\n    output: true\n    input: \"a\"\n    output: true\n    input: \"aa\"\n    output: true\n    input: \"canal\"\n    output: true\n    input: \"a\"\n    output: false\n*/\nconst isEven = (str) => {\n  let a = str.split('').sort();\n  let b = str.split('').sort();\n  let result = true;\n\n  for (let i = 0; i < a.length; i++) {\n    let i2 = b.indexOf(a[i]);\n    if (i2 === -1) {\n      result = false;\n      break;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two strings, determine whether the first string contains all of the characters in the second string, and vice-versa.\n\n  A string 'a' is said to contain all the characters of 'b' if the number of times that a character appears in 'b' is equal to the number of times that that character appears in 'a'.\n\n  Example\n    input: \"a\"\n    output: true\n    input: \"ab\"\n    output: true\n    input: \"a\"\n    output: true\n    input: \"aa\"\n    output: true\n    input: \"a\"\n    output: false\n*/\nconst containsAll = (a, b) => {\n  let c = b.split('').sort();\n  let d = a.split('').sort();\n  let result = true;\n\n  for (let i = 0; i < c.length; i++) {\n    let i2 = d.indexOf(c[i]);\n    if (i2 === -1) {\n      result = false;\n      break;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  simplify,\n  isPalindrome,\n  isPermutation,\n  isEven,\n  containsAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  return nums.sort((a, b) => {\n    return a.toString().length - b.toString().length;\n  })\n}\n\nexport default holyOrderByPoint\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  return nums.filter(num => {\n    return num > 10 && (num % 2 === 1 && num % 3 === 1) || (num % 2 === 1 && num % 5 === 1) || (num % 3 === 1 && num % 5 === 1);\n  });\n}\n\nconsole.log(extraFilter([15, -73, 14, -15])); // 1\nconsole.log(extraFilter([33, -2, -3, 45, 21, 109])); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = catchMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const distance = (planet1 === \"Earth\" || planet2 === \"Earth\")? \"Earth\" : Math.abs(planet1 - planet2);\n  const planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  return planetNames.filter(name => {\n    return Math.abs(planet1 - name) <= distance && Math.abs(planet2 - name) <= distance;\n  });\n};\n\nconst planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Jupiter\", \"Uranus\"));\nconsole.log(bf(\"Mars\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Jupiter\", \"Saturn\"));\nconsole.log(bf(\"Earth\", \"Saturn\"));\nconsole.log(bf(\"Mars\", \"Saturn\"));\nconsole.log(bf(\"Earth\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Jupiter\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Merc"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  if (lst.length === 0) return []\n\n  const sum = (a, b) => a + b\n  const odd = (x) => x % 2\n  const sorted = (a, b) => a + b\n\n  const getLength = (x) => x.length\n\n  return lst.reduce((acc, x, i) => {\n    const a = getLength(acc[0])\n    const b = getLength(x)\n    const len = (a + b) % 2\n\n    if (odd(len)) {\n      acc.push(x)\n    }\n\n    return [\n     ...acc,\n      x\n    ]\n  }, [])\n   .sort((a, b) => sorted(getLength(a), getLength(b)))\n}\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1) = 2^31 - 1\nconst maxInt32 = (x) => Math.pow(2, 31) - 1\n\n// @expect 1 * (2^31 - 1"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (n % 2 === 0) return x;\n  else return y;\n};\n\nconst xOrYttriumTest = {\n  name: 'xOrYttrium',\n  tests: [\n    {\n      name: 'prime number',\n      test: xOrYttrium(7, 34, 12),\n      expected: 34\n    },\n    {\n      name: 'non-prime number',\n      test: xOrYttrium(15, 8, 5),\n      expected: 5\n    }\n  ]\n};\n\nconst xOrYttriumTest2 = {\n  name: 'xOrYttrium',\n  tests: [\n    {\n      name: 'prime number',\n      test: xOrYttrium(7, 34, 12),\n      expected: 34\n    },\n    {\n      name: 'non-prime number',\n      test: xOrYttrium(15, 8, 5),\n      expected: 5\n    }\n  ]\n};\n\nmodule.exports = xOrYttriumTest;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// const doubleTheDeviation = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 === 1) {\n//       sum += Math.pow(lst[i], 2);\n//     }\n//   }\n//   return sum;\n// };\n\nconsole.log(doubleTheDeviation([1, 3, 2, 0]));\nconsole.log(doubleTheDeviation([-1, -2, 0]));\nconsole.log(doubleTheDeviation([9, -2]));\nconsole.log(doubleTheDeviation([0]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = []\n  const game_len = game.length\n  const guess_len = guess.length\n  for (let i = 0; i < game_len; i++) {\n    const match_i = game[i]\n    const guess_i = guess[i]\n    if (match_i === guess_i) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(match_i - guess_i))\n    }\n  }\n  return result\n}\n\n// \n\nconst game = [0,1,2,3,4,0]\nconst guess = [0,0,2,3,4,5]\n\nconsole.log(compare(game, guess))\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  // Create an object of all extensions' names\n  const extension_names = {};\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    extension_names[extension.toLowerCase()] = extension;\n  }\n  // Find the strongest extension\n  const strongest_extension = Object.keys(extension_names)\n   .sort((a, b) => extension_names[a].localeCompare(extension_names[b]))\n   .find(extension => extension_names[extension].length === class_name.length);\n  // Return the class name with the strongest extension\n  return class_name + '.' + strongest_extension;\n};\n\nmodule.exports = hardExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_arr = a.split(\"\")\n  const b_arr = b.split(\"\")\n  const b_len = b_arr.length\n\n  const b_str = b_arr.join(\"\")\n\n  for(let i = 0; i < b_len; i++) {\n    const index = a_arr.indexOf(b_str[i])\n\n    if(index!== -1) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/*\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const count = (num % 2) === 0? 1 : 0;\n  return num / 2 > 0? [count, num / 2] : [count, num];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    if (number === 1) return 'i';\n    if (number === 2) return 'ii';\n    if (number === 3) return 'iii';\n    if (number === 4) return 'iv';\n    if (number === 5) return 'v';\n    if (number === 6) return 'vi';\n    if (number === 7) return 'vii';\n    if (number === 8) return 'viii';\n    if (number === 9) return 'ix';\n    if (number === 10) return 'x';\n    if (number === 11) return 'xi';\n    if (number === 12) return 'xii';\n    if (number === 13) return 'xiii';\n    if (number === 14) return 'xiv';\n    if (number === 15) return 'xv';\n    if (number === 16) return 'xvi';\n    if (number === 17) return 'xvii';\n    if (number === 18) return 'xviii';\n    if (number === 19) return 'xix';\n    if (number === 20) return 'xx';\n    if (number === 30) return 'xxx';\n    if (number === 40) return 'xxxx';\n    if (number === 50) return 'xxxxx';\n    if (number === 60) return 'xxxxxx';\n    if (number === 70) return 'xxxxxxx';\n    if (number === 80) return 'xxxxxxxx';\n    if (number === 90) return 'xxxxxxxxx';\n    if (number === 100) return 'xxxxxxxxxx';\n    if (number === 200) return 'xxxxxxxxxxxx';\n    if (number === 300) return 'xxxxxxxxxxxxx';\n    if (number === 400) return 'xxxxxxxxxxxxxxxx';\n    if (number === 500) return 'xxxxxxxxxxxxxxxxx';\n    if (number === 600) return 'xxxxxxxxxxxxxxxxxx';\n    if (number === 700) return 'xxxxxxxxxxxxxxxxxxxx';\n    if (number === 800) return 'xxxxxxxxxxxxxxxxxxxxx';\n    if (number === 900) return 'xxxxxxxxxxxxxxxxxxxxxxxx';\n    throw new Error(`Invalid number ${number}`);\n};\n\n/*\n  Given a roman numeral, return its integer value.\n  Restrictions: 0 <= roman numeral <= 3999\n\n  Examples:\n  >>> miniRomanToInt('v') == 5\n  >>> miniRomanToInt('ix') == 9\n  >>> miniRomanToInt('vii') == 22\n  >>> miniRomanToInt('xviii') == 39\n  */\nconst miniRomanToInt = (roman) => {\n    switch (roman) {\n        case 'i':\n            return 1;\n        case 'ii':\n            return 2;\n        case 'iii':\n            return 3;\n        case 'iv':\n            return 4;\n        case 'v':\n            return 5;\n        case 'vi':\n            return 6;\n        case 'vii':\n            return 7;\n        case 'viii':\n            return 8;\n        case 'ix':\n            return 9;\n        case 'x':\n            return 10;\n        case 'xi':\n            return 11;\n        case 'xii':\n            return 12;\n        case 'xiii':\n            return 13;\n        case 'xiv':\n            return 14;\n        case 'xv':\n            return 15;\n        case 'xvi':\n            return 16;\n        case 'xvii':\n            return 17;\n        case 'xviii':\n            return 18;\n        case 'xix':\n            return 19;\n        case 'xx':\n            return 20;\n        case 'xxx':\n            return 30;\n        case 'xxxx':\n            return 40;\n        case 'xxxxx':\n            return 50;\n        case 'xxxxxx':\n            return 60;\n        case 'xxxxxxx':\n            return 70;\n        case 'xxxxxxxx':\n            return 80;\n        case 'xxxxxxxxx':\n            return 90;\n        case 'xxxxxxxxxx':\n            return 100;\n        case 'xxxxxxxxxxxx':\n            return 200;\n        case 'xxxxxxxxxxxxx':\n            return 300;\n        case 'xxxxxxxxxxxxxxxx':\n            return 400;\n        case 'xxxxxxxxxxxxxxxxx':\n            return 500;\n        case 'xxxxxxxxxxxxxxxxxx':\n            return 600;\n        case 'xxxxxxxxxxxxxxxxxxxx':\n            return 700;\n        case 'xxxxxxxxxxxxxxxxxxxxx':\n            return 800;\n        case 'xxxxxxxxxxxxxxxxxxxxxxxx':\n            return 900;\n        default:\n            throw new Error(`Invalid roman numeral ${roman}`);\n    }\n};\n\n/*\n  Given a roman numeral, return its value as a string.\n  Restrictions: 0 <= roman numeral <= 3999\n\n  Examples:\n  >>> intToRoman(1) == 'i'\n  >>> intToRoman(22) == 'xvii'\n  >>> intToRoman(39) == 'xviii'\n  */\nconst intToRoman = (number) => {\n    if (number === 1) return 'i';\n    if (number === 2) return 'ii';\n    if (number === 3) return 'iii';\n    if (number === 4) return 'iv';\n    if (number === 5) return 'v';\n    if (number === 6) return 'vi';\n    if (number === 7) return 'vii';\n    if (number === 8) return 'viii';\n    if (number === 9) return 'ix';\n    if (number === 10) return 'x';\n    if (number === 11) return 'xi';\n    if (number === 12) return 'xii';\n    if (number === 13) return 'xiii';\n    if (number === 14) return 'xiv';\n    if (number === 15) return 'xv';\n    if (number === 16) return 'xvi';\n    if (number === 17) return 'xvii';\n    if (number === 18) return 'xviii';\n    if (number === 19) return 'xix';\n    if (number === 20) return 'xx';\n    if (number === 30) return 'xxx';\n    if (number === 40) return 'xxxx';\n    if (number === 50) return 'xxxxx';\n    if (number"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n    if (a < b && b < c && a < c) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// console.log(goodSlantTriangle(3, 4, 5)); // true\n// console.log(goodSlantTriangle(1, 2, 3)); // false\n\n// const goodSlantTriangle = (a, b, c) => {\n//     const a = a / 2;\n//     const b = b / 2;\n//     const c = c / 2;\n//     const l = (a + b + c) / 2;\n//     const m = (a + b - c) / 2;\n//     const n = (a - b + c) / 2;\n//     const k = (a - b - c) / 2;\n//     if (a === b && b === c && a === c) {\n//         return true;\n//     } else if (l === m && m === n && n === k && l === k) {\n//         return true;\n//     } else if (a === n && b === m && c === k && a === k && b === l && c === m) {\n//         return true;\n//     } else if (a === m && b === n && c === k && a === k && b === l && c === n) {\n//         return true;\n//     } else if (a === m && b === n && c === k && a === k && b === l && c === m) {\n//         return true;\n//     } else if (a === n && b === m && c === k && a === k && b === l && c === n) {\n//         return true;\n//     } else if (a === n && b === m && c === k && a === k && b === l && c === m) {\n//         return true;\n//     } else if (a === m && b === n && c === k && a === k && b === l && c === n) {\n//         return true;\n//     } else if (a === n && b === m && c === k && a === k && b === l && c === m) {\n//         return true;\n//     } else if (a === n && b === m && c === k && a === k && b === l && c === n) {\n//         return true;\n//     } else {\n//         return false;\n//     }\n// };\n\n// console.log(goodSlantTriangle(3, 4, 5)); // true\n// console.log(goodSlantTriangle(1, 2, 3)); // false\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  const max = words[0];\n  const currentMax = words.length - 1;\n\n  for (let i = 0; i < words.length; i += 1) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      currentMax = i;\n    }\n  }\n\n  return words[currentMax];\n};\n\nconsole.log(receiveMax([\"name\", \"of\", \"string\"])); // \"string\"\nconsole.log(receiveMax([\"name\", \"enam\", \"game\"])); // \"enam\"\nconsole.log(receiveMax([\"aaaaaaa\", \"bb\",\"cc\"])); // \"\"aaaaaaa\"\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  if (number < need) {\n    return [remaining, number];\n  }\n  return [number - need, remaining];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const operator_len = operator.length\n  const operand_len = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let index = 0\n  let operator_index = 0\n  let operand_index = 0\n  while (i < operator_len && j < operand_len) {\n    const curr_operator = operator[i]\n    const curr_operand = operand[j]\n    if (curr_operator === '+' || curr_operator === '-') {\n      result.push(curr_operand)\n      index += 1\n      operator_index += 1\n      j += 1\n    } else if (curr_operator === '*' || curr_operator === '/' || curr_operator === '**') {\n      result.push(curr_operand[0] * curr_operand[1])\n      index += 2\n      operator_index += 2\n      j += 2\n    } else if (curr_operator === '-') {\n      result.push(curr_operand[0] - curr_operand[1])\n      index += 2\n      operator_index += 1\n      j += 1\n    }\n    i += 1\n    k += 1\n  }\n  while (i < operator_len) {\n    result.push(operator[i])\n    i += 1\n  }\n  while (j < operand_len) {\n    result.push(operand[j])\n    j += 1\n  }\n  while (k < result.length) {\n    result[k] = result[k] - index\n    k += 1\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra2 = (operator, operand) => {\n  const operator_len = operator.length\n  const operand_len = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let index = 0\n  let operator_index = 0\n  let operand_index = 0\n  while (i < operator_len && j < operand_len) {\n    const curr_operator = operator[i]\n    const curr_operand = operand[j]\n    if (curr_operator === '+' || curr_operator === '-') {\n      result.push(curr_operand)\n      index += 1\n      operator_index += 1\n      j += 1\n    } else if (curr_operator === '*' || curr_operator === '/' || curr_operator === '**') {\n      result.push(curr_operand[0] * curr_operand[1])\n      index += 2\n      operator_index += 2\n      j += 2\n    } else if (curr_operator === '-') {\n      result.push(curr_operand[0] - curr_operand[1])\n      index += 2\n      operator_index += 1\n      j += 1\n    }\n    i += 1\n    k += 1\n  }\n  while (i < operator_len) {\n    result.push(operator[i])\n    i += 1\n  }\n  while (j < operand_len) {\n    result.push(operand[j])\n    j += 1\n  }\n  while (k < result.length) {\n    result[k] = result[k] - index\n    k += 1\n  }\n  return result\n}\n\nconst testSuiceAlgebra = () => {\n  const a = ['+', '-', '*', '/', '**', '-']\n  const b = [2, 3, 4, 5]\n  const result = sufficeAlgebra(a, b)\n  const c = ['+', '-', '*', '/', '**', '-', '2', '3', '4', '5']\n  const d = [2, 3, 4, 5]\n  console.log(result)\n  console.log(c)\n  console.log(d)\n  console.log(result === c)\n  console.log(result === d)\n  console.log(result === sufficeAlgebra(b, a))\n  console.log(result === sufficeAlgebra(a, b))\n  console.log(result === sufficeAlgebra(b, b))\n  console.log(result === sufficeAlgebra(a, a))\n  console.log(result === sufficeAlgebra2(a, a))\n  console.log(result === sufficeAlgebra2(b, b))\n  console.log(result === sufficeAlgebra2"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n    let isLetter = () => {\n        return /[a-zA-Z]/.test(s[i])\n    };\n    let isLower = () => {\n        return /[a-z]/.test(s[i])\n    };\n    let isUpper = () => {\n        return /[A-Z]/.test(s[i])\n    };\n    let isNumber = () => {\n        return /[0-9]/.test(s[i])\n    };\n    let isAlpha = () => {\n        return /[a-zA-Z0-9]/.test(s[i])\n    };\n    let reverse = () => {\n        if (isLetter()) {\n            if (isLower()) {\n                return s[i].toUpperCase()\n            } else {\n                return s[i].toLowerCase()\n            }\n        } else {\n            return s[i]\n        }\n    };\n    let isNotAlpha = () => {\n        return!isAlpha()\n    };\n    let isNotLetter = () => {\n        return!isLetter()\n    };\n    let isNotNumber = () => {\n        return!isNumber()\n    };\n    let isNotUpper = () => {\n        return!isUpper()\n    };\n    let isNotLower = () => {\n        return!isLower()\n    };\n    let reverseString = () => {\n        return reverse()\n    };\n    return reverse()\n}\n\nmodule.exports = resolve\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  const instrument = bowedStringedInstrument(text);\n  md5.update(instrument);\n  return md5.digest('hex');\n};\n\nconst bow = (text) => bow(text);\n\n/**\n  Returns a function which can be used to create a hash for a given string.\n  The hash function will return the md5 hash of the given string.\n  If 'text' is an empty string, return null.\n\n  >>> bowToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  const bow = bow(text);\n  md5.update(bow);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  bowToMd5,\n  bowedStringedInstrumentToMd5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  if (a === b) {\n    return [];\n  }\n\n  let count = 0;\n  while (a < b) {\n    if (count === 0) {\n      count = 1;\n      a++;\n    }\n    if (a % 2 === 0) {\n      return [a, a + count, a + count * 2];\n    }\n    a++;\n  }\n  return [];\n};\n\nexport default renderInteger;\n<|endoftext|>"}
