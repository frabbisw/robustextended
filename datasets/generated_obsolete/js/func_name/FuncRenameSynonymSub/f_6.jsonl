{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n  const sortedNumbers = sortedArray(numbers);\n\n  const min = sortedNumbers[0];\n  const max = sortedNumbers[sortedNumbers.length - 1];\n\n  if (max - min <= threshold) {\n    return false;\n  }\n\n  for (let i = 1; i < sortedNumbers.length - 1; i++) {\n    if (sortedNumbers[i] - min < max - min) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = receiveCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  const stack = []\n  const open_parens = paren_string.match(/\\(([^\\s\\(\\)]+)\\)/g)\n  const close_parens = paren_string.match(/\\)\\s*\\(\\s*\\)/g)\n\n  if(!open_parens) return []\n\n  const result = []\n  for(let i = 0; i < open_parens.length; i++) {\n    stack.push(open_parens[i])\n  }\n\n  while(stack.length) {\n    const curr = stack.pop()\n    if(curr.length === 2) {\n      result.push(curr)\n    } else {\n      const open = curr[0]\n      const close = curr[1]\n      const stack_length = stack.length\n      stack.push(close)\n\n      if(stack_length === 0) {\n        throw new Error('Unbalanced parentheses')\n      }\n      stack.push(open)\n    }\n  }\n\n  return result\n}\n\nconsole.log(freestandingParenGroups('((()()))'))\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number)\n  const decimalPart = number - integerPart\n  return decimalPart\n}\n\n/** Given a number, it can be decomposed into an integer and a decimal part\n  (decimal part always smaller than 1).\n  \n  Return the integer part of the number.\n  >>> truncateInteger(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  return Math.floor(number)\n}\n\n/** Given a number, it can be decomposed into an integer and a decimal part\n  (decimal part always smaller than 1).\n  \n  Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3.5\n  */\nconst truncateDecimal = (number) => {\n  return number\n}\n\nmodule.exports = {\n  truncateInteger,\n  truncateDecimal,\n  truncateNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const maxValue = operations.reduce((max, value) => Math.max(max, value), 0);\n\n    return operations.reduce((sum, value, index) => {\n        if (sum + value <= maxValue) {\n            return sum;\n        } else {\n            return sum + value;\n        }\n    }, 0);\n};\n\nmodule.exports = belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.reduce((total, n) => total + Math.abs(n - mean), 0) / numbers.length;\n};\n\n// This is the one-liner version of the above function\nconst oneLinerAbsoluteDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.reduce((total, n) => total + Math.abs(n - mean), 0);\n};\n\n/*\n  This function takes in a list of numbers and returns the number\n  of absolute deviations from the mean of the list.\n  This is the equivalent of:\n  >>> count(x - mean(x))\n  This is an O(1) operation.\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst countAbsoluteDeviations = (numbers) => {\n  const mean = getMean(numbers);\n  return numbers.reduce((total, n) => total + Math.abs(n - mean), 0);\n};\n\n/*\n  This function takes in a list of numbers and returns the number\n  of absolute deviations from the mean of the list.\n  This is the equivalent of:\n  >>> count(x - mean(x))\n  This is an O(1) operation.\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst countAbsoluteDeviations2 = (numbers) => {\n  const mean = getMean(numbers);\n  return Math.abs(numbers.reduce((total, n) => total + (n - mean), 0) / numbers.length);\n};\n\n/*\n  This function takes in a list of numbers and returns the number\n  of absolute deviations from the mean of the list.\n  This is the equivalent of:\n  >>> count(x - mean(x))\n  This is an O(1) operation.\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst countAbsoluteDeviations3 = (numbers) => {\n  const mean = getMean(numbers);\n  return Math.abs(numbers.reduce((total, n) => total + (n - mean), 0) / numbers.length) / numbers.length;\n};\n\n/*\n  This function takes in a list of numbers and returns the number\n  of absolute deviations from the mean of the list.\n  This is the equivalent of:\n  >>> count(x - mean(x))\n  This is an O(1) operation.\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst countAbsoluteDeviations4 = (numbers) => {\n  const mean = getMean(numbers);\n  return Math.abs(numbers.reduce((total, n) => total + Math.abs(n - mean), 0) / numbers.length);\n};\n\n/*\n  This function takes in a list of numbers and returns the number\n  of absolute deviations from the mean of the list.\n  This is the equivalent of:\n  >>> count(x - mean(x))\n  This is an O(1) operation.\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst countAbsoluteDeviations5 = (numbers) => {\n  const mean = getMean(numbers);\n  return Math.abs(numbers.reduce((total, n) => total + Math.abs(n - mean), 0) / numbers.length) / (numbers.length - 1);\n};\n\n/*\n  This function takes in a list of numbers and returns the number\n  of absolute deviations from the mean of the list.\n  This is the equivalent of:\n  >>> count(x - mean(x))\n  This is an O(1) operation.\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst countAbsoluteDeviations6 = (numbers) => {\n  const mean = getMean(numbers);\n  return Math.abs(numbers.reduce((total, n) => total + Math.abs(n - mean), 0) / (numbers.length - 1));\n};\n\n/*\n  This function takes in a list of numbers and returns the number\n  of absolute deviations from the mean of the list.\n  This is the equivalent of:\n  >>> count(x - mean(x))\n  This is an O(1) operation.\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst countAbsoluteDeviations7 = (numbers) => {\n  const mean = getMean(numbers);\n  return Math.abs(numbers.reduce((total, n) => total + Math.abs(n - mean), 0) / (numbers.length - 1) / (numbers.length - 2));\n};\n\n/*\n  This function takes in a list of numbers and returns the number\n  of absolute deviations from the mean of the list.\n  This is the equivalent of:\n  >>> count(x - mean(x))\n  This is an O(1) operation.\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2\n  */\nconst countAbsoluteDeviations8 = (numbers) => {\n  const mean = getMean(numbers);\n  return Math.abs(numbers.reduce((total, n) => total + Math.abs(n - mean), 0) / (numbers.length - 1) / (numbers.length - 2) / (numbers.length - 3));\n};\n\n/*\n  This function takes in a list of numbers and returns the number\n  of absolute deviations from the mean of the list.\n  This is the equivalent of:\n  >>> count(x - mean"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let count = 0\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    result.push(numbers[i])\n    if (count % 2 === 0) {\n      result.push(delimeter)\n    }\n    i++\n    count++\n  }\n  return result\n}\n\nexport default intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const input = paren_string.split(/\\s+/g);\n  const output = [];\n  const stack = [];\n  const stack_len = 0;\n\n  for (const token of input) {\n    if (token === ')') {\n      if (stack.length > stack_len) {\n        stack_len = stack.length;\n      }\n    } else if (token === '(') {\n      stack.push(token);\n      stack_len++;\n    } else if (token === ')') {\n      if (stack_len > 0) {\n        stack_len--;\n      } else {\n        throw new Error(`Unexpected ')' at index ${token_index}`);\n      }\n    }\n  }\n  return stack_len;\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const input = paren_string.split(/\\s+/g);\n  const stack = [];\n  let stack_len = 0;\n\n  for (const token of input) {\n    if (token === ')') {\n      stack_len--;\n      if (stack_len < 0) {\n        throw new Error(`Unexpected ')' at index ${token_index}`);\n      }\n    } else if (token === '(') {\n      stack.push(token);\n      stack_len++;\n    } else if (token === ')') {\n      stack_len--;\n      if (stack_len < 0) {\n        throw new Error(`Unexpected ')' at index ${token_index}`);\n      }\n    }\n  }\n  return stack_len;\n};\n\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));\nconsole.log(parseNestedParens('(()()) ((()"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) return strings;\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n// const filterBySubstring = (strings, substring) => {\n//   if (strings.length === 0) return strings;\n//   return strings.filter(substring.indexOf!== -1);\n// };\n\nconst sortBySubstring = (strings) => {\n  if (strings.length === 0) return strings;\n  let sorted = sortBy(strings, (string) => string.indexOf('d'));\n  sorted = sorted.sort((a, b) => a.indexOf('a') - b.indexOf('a'));\n  return sorted;\n};\n\n// const sortBySubstring = (strings) => {\n//   if (strings.length === 0) return strings;\n//   let sorted = sortBy(strings, (string) => string.indexOf('d'));\n//   sorted = sorted.sort((a, b) => a.indexOf('a') - b.indexOf('a'));\n//   return sorted;\n// };\n\nconst sortBySubstringReverse = (strings) => {\n  if (strings.length === 0) return strings;\n  let sorted = sortBy(strings, (string) => string.indexOf('a'));\n  sorted = sorted.sort((a, b) => b.indexOf('a') - a.indexOf('a'));\n  return sorted;\n};\n\n// const sortBySubstringReverse = (strings) => {\n//   if (strings.length === 0) return strings;\n//   let sorted = sortBy(strings, (string) => string.indexOf('d'));\n//   sorted = sorted.sort((a, b) => b.indexOf('a') - a.indexOf('a'));\n//   return sorted;\n// };\n\nconst filterBySubstringReverse = (strings, substring) => {\n  if (strings.length === 0) return strings;\n  let sorted = sortBy(strings, (string) => string.indexOf(substring));\n  sorted = sorted.filter(string => string.indexOf(substring)!== -1);\n  return sorted;\n};\n\n// const filterBySubstringReverse = (strings, substring) => {\n//   if (strings.length === 0) return strings;\n//   let sorted = sortBy(strings, (string) => string.indexOf(substring));\n//   sorted = sorted.filter(substring.indexOf!== -1);\n//   return sorted;\n// };\n\nconst filterBySubstringLength = (strings, minLength, maxLength) => {\n  if (strings.length === 0) return strings;\n  let sorted = sortBy(strings, (string) => string.length);\n  sorted = sorted.filter(string => string.length >= minLength && string.length <= maxLength);\n  return sorted;\n};\n\n// const filterBySubstringLength = (strings, minLength, maxLength) => {\n//   if (strings.length === 0) return strings;\n//   let sorted = sortBy(strings, (string) => string.length);\n//   sorted = sorted.filter(substring.length >= minLength && substring.length <= maxLength);\n//   return sorted;\n// };\n\n// const filterBySubstringLengthReverse = (strings, minLength, maxLength) => {\n//   if (strings.length === 0) return strings;\n//   let sorted = sortBy(strings, (string) => string.length);\n//   sorted = sorted.filter(string => string.length >= minLength && string.length <= maxLength);\n//   return sorted;\n// };\n\n// const filterBySubstringLengthReverse = (strings, minLength, maxLength) => {\n//   if (strings.length === 0) return strings;\n//   let sorted = sortBy(strings, (string) => string.length);\n//   sorted = sorted.filter(substring.length >= minLength && substring.length <= maxLength);\n//   return sorted;\n// };\n\n// const filterBySubstringLengthReverse = (strings, minLength, maxLength) => {\n//   if (strings.length === 0) return strings;\n//   let sorted = sortBy(strings, (string) => string.length);\n//   sorted = sorted.filter(substring.length >= minLength && substring.length <= maxLength);\n//   return sorted;\n// };\n\nconst filterBySubstringLengthReverse = (strings, minLength, maxLength) => {\n  if (strings.length === 0) return strings;\n  let sorted = sortBy(strings, (string) => string.length);\n  sorted = sorted.filter(string => string.length >= minLength && string.length <= maxLength);\n  return sorted;\n};\n\n// const filterBySubstringLengthReverse = (strings, minLength, maxLength) => {\n//   if (strings.length === 0) return strings;\n//   let sorted = sortBy(strings, (string) => string.length);\n//   sorted = sorted.filter(substring.length >= minLength && substring.length <= maxLength);\n//   return sorted;\n// };\n\nexport {\n  filterBySubstring,\n  filterBySubstringReverse,\n  filterBySubstringLength,\n  filterBySubstringLengthReverse,\n  sortBySubstring,\n  sortBySubstringReverse,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  const length = numbers.length\n  const sum = numbers.reduce((prev, current) => prev + current, 0)\n  const product = numbers.reduce((prev, current) => prev * current, 1)\n  return (sum, product)\n}\n\n/*\n  Given a list of numbers and a target number, return a list of numbers that are less than the target.\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 8)\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 6)\n  [1, 2, 3, 4, 5, 6]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 7)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 8)\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)\n  [1, 2, 3, 4, 5]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n  [1, 2, 3, 4]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  [1, 2, 3]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n  [1, 2]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 1)\n  [1]\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 0)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], -1)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 11)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 12)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 13)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 14)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 15)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 16)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 17)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 18)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 19)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 20)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 21)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 22)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 23)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 24)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 25)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 26)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 27)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 28)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 29)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 30)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 31)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 32)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 33)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 34)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 35)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 36)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 37)\n  []\n  >>> kernelIntersection([1, 2, 3, 4, 5, 6, 7, 8, 9], 38)\n  []\n  >>> kernelIntersection([1, 2, 3, 4"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  let rollingMax = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    rollingMax = [numbers[i], rollingMax[i - 1], rollingMax[i - 2]];\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return rollingMax;\n};\n\nmodule.exports = rolledMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = findPostfix(string);\n  const reversed = postfix.split('').reverse().join('');\n  const palindrome = reversed + postfix;\n  return palindrome;\n}\n\n/* Find the longest postfix of a string that is a palindrome */\nconst findPostfix = (string) => {\n  let maxLength = 0;\n  let maxPrefix = '';\n  let prefix = '';\n  const postfix = [];\n  const palindromic = [];\n\n  const palindromicStrings = getPalindromicStrings(string);\n  palindromicStrings.forEach(palindromicString => {\n    const prefixes = getPrefixes(palindromicString);\n    prefixes.forEach(prefix => {\n      if (isPalindrome(prefix)) {\n        const postfix = palindromicString.split(prefix).reverse().join('');\n        postfix.split('').forEach(postfix => {\n          postfix = postfix.split('').reverse().join('');\n          if (postfix.length > maxLength) {\n            maxLength = postfix.length;\n            maxPrefix = prefix;\n          }\n        });\n      }\n    });\n  });\n  return maxPrefix + maxLength;\n}\n\n/* Get all the palindromic strings in the given string */\nconst getPalindromicStrings = (string) => {\n  const palindromicStrings = [];\n  const stringArray = string.split('');\n  for (let i = 0; i < stringArray.length; i++) {\n    for (let j = 0; j < stringArray.length; j++) {\n      const stringBefore = stringArray.slice(0, i).join('');\n      const stringAfter = stringArray.slice(i+1, stringArray.length).join('');\n      const string = stringBefore + stringAfter;\n      if (isPalindrome(string)) {\n        palindromicStrings.push(string);\n      }\n    }\n  }\n  return palindromicStrings;\n}\n\n/* Get all the prefixes of a given string that are a palindrome */\nconst getPrefixes = (string) => {\n  const prefixes = [];\n  const stringArray = string.split('');\n  for (let i = 0; i < stringArray.length; i++) {\n    const prefix = stringArray.slice(0, i).join('');\n    if (isPalindrome(prefix)) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n}\n\n// Tests\n\ndescribe('Test if string is palindrome', function () {\n  it('empty string is palindrome', function () {\n    expect(isPalindrome('')).toBe(true);\n  });\n  it('a string is palindrome', function () {\n    expect(isPalindrome('cat')).toBe(true);\n  });\n  it('a string is not palindrome', function () {\n    expect(isPalindrome('cata')).toBe(false);\n  });\n});\n\ndescribe('Test makePalindrome', function () {\n  it('empty string makes a palindrome', function () {\n    expect(makePalindrome('')).toBe('');\n  });\n  it('a string makes a palindrome', function () {\n    expect(makePalindrome('cat')).toBe('catac');\n  });\n  it('a string makes a not palindrome', function () {\n    expect(makePalindrome('cata')).toBe('cata');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  const aChars = a.split('')\n  const bChars = b.split('')\n  let aIndex = 0\n  let bIndex = 0\n  const result = []\n  while (aIndex < aChars.length || bIndex < bChars.length) {\n    const aChar = aIndex < aChars.length? aChars[aIndex] : '0'\n    const bChar = bIndex < bChars.length? bChars[bIndex] : '0'\n    const xor = aChar === '1'? 1 : 0\n    const xor2 = bChar === '1'? 1 : 0\n    result.push(xor ^ xor2)\n    aIndex += 1\n    bIndex += 1\n  }\n  return result.join('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  if (!strings) {\n    return null\n  }\n  let prevLength = 0\n  let prev = ''\n  let result = ''\n  strings.forEach((str) => {\n    const length = str.length\n    if (prevLength === length) {\n      result += str\n    } else if (prevLength > length) {\n      result += prev\n    }\n    prev = str\n    prevLength = length\n  })\n  return result + prev\n}\n\n/*\n  >>> farseeing([1,2,3,4])\n  '1234'\n  >>> farseeing([1,2,3,4,5,6])\n  '123456'\n  */\nconst farseeing2 = (strings) => {\n  let prev = ''\n  let result = ''\n  strings.forEach((str) => {\n    if (str === prev) {\n      result += str\n    } else {\n      result += prev\n      result += str\n    }\n    prev = str\n  })\n  return result\n}\n\nmodule.exports = {\n  farseeing,\n  farseeing2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n    const c = a % b;\n    if (c === 0) return b;\n    return capitalCoarseDivisor(b, c);\n};\n\nconst capitalCoarseDivisor_slow = (a, b) => {\n    while (a % b!== 0) {\n        b -= a % b;\n    }\n    return b;\n};\n\nconst capitalCoarseDivisor_slow_2 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor_slow_3 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor_slow_4 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor_slow_5 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor_slow_6 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor_slow_7 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor_slow_8 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor_slow_9 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor_slow_10 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor_slow_11 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor_slow_12 = (a, b) => {\n    const d = 1;\n    const x = a;\n    const y = b;\n    const n = d;\n    const s = 0;\n    while (x!= 0) {\n        if (y!= 0) {\n            const t = x % y;\n            x = y;\n            y = t;\n            n *= d;\n        } else {\n            return n;\n        }\n    }\n    return n;\n};\n\nconst capitalCoarseDivisor"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  const prefixes = [];\n  const prefix = string.split(' ');\n  for (let i = 0; i < prefix.length; i += 1) {\n    prefixes.push(prefix.slice(0, i + 1).join(' '));\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffix = (string) => {\n  const suffixes = [];\n  const suffix = string.split(' ');\n  for (let i = 0; i < suffix.length; i += 1) {\n    suffixes.push(suffix.slice(i, string.length).join(' '));\n  }\n  return suffixes;\n};\n\n/* Return longest prefix common to all input strings\n  >>> longestPrefix(['a', 'b', 'c'])\n  'a'\n  >>> longestPrefix(['a', 'b', 'cc'])\n  'a'\n  >>> longestPrefix(['a', 'b', 'c', 'cc'])\n  'a'\n  */\nconst longestPrefix = (strings) => {\n  let prefix = '';\n  for (let i = 0; i < strings.length; i += 1) {\n    if (strings[i].length > prefix.length) {\n      prefix = strings[i];\n    }\n  }\n  return prefix;\n};\n\n/* Return longest suffix common to all input strings\n  >>> longestSuffix(['a', 'b', 'c'])\n  'c'\n  >>> longestSuffix(['a', 'b', 'cc'])\n  'c'\n  >>> longestSuffix(['a', 'b', 'c', 'cc'])\n  'cc'\n  */\nconst longestSuffix = (strings) => {\n  let suffix = '';\n  for (let i = 0; i < strings.length; i += 1) {\n    if (strings[i].length > suffix.length) {\n      suffix = strings[i];\n    }\n  }\n  return suffix;\n};\n\n/* Return longest prefix common to all input strings\n  >>> longestCommonPrefix(['a', 'b', 'c'])\n  'a'\n  >>> longestCommonPrefix(['a', 'b', 'cc'])\n  'a'\n  >>> longestCommonPrefix(['a', 'b', 'c', 'cc'])\n  'a'\n  */\nconst longestCommonPrefix = (strings) => {\n  let prefix = '';\n  for (let i = 0; i < strings.length; i += 1) {\n    if (strings[i].length > prefix.length) {\n      prefix = strings[i].slice(0, prefix.length);\n    }\n  }\n  return prefix;\n};\n\n/* Return longest suffix common to all input strings\n  >>> longestCommonSuffix(['a', 'b', 'c'])\n  'b'\n  >>> longestCommonSuffix(['a', 'b', 'cc'])\n  'b'\n  >>> longestCommonSuffix(['a', 'b', 'c', 'cc'])\n  'cc'\n  */\nconst longestCommonSuffix = (strings) => {\n  let suffix = '';\n  for (let i = 0; i < strings.length; i += 1) {\n    if (strings[i].length > suffix.length) {\n      suffix = strings[i].slice(strings[i].length - suffix.length);\n    }\n  }\n  return suffix;\n};\n\n/* Return longest common prefix of the input strings\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  */\nconst longestCommonPrefix = (strings) => {\n  let prefix = '';\n  for (let i = 0; i < strings.length; i += 1) {\n    if (strings[i].length > prefix.length) {\n      prefix = strings[i].slice(0, prefix.length);\n    }\n  }\n  return prefix;\n};\n\n/* Return longest common suffix of the input strings\n  >>> longestCommonSuffix([1, 2, 3, 4, 5, 6])\n  6\n  >>> longestCommonSuffix([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> longestCommonSuffix([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  */\nconst longestCommonSuffix = (strings) => {\n  let suffix = '';\n  for (let i = 0; i < strings.length; i += 1) {\n    if (strings[i].length > suffix.length) {\n      suffix = strings[i].slice(strings[i].length - suffix.length);\n    }\n  }\n  return suffix;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n    let string = '';\n    for (let i = 0; i <= n; i++) {\n        string += `${i} `;\n    }\n    return string;\n};\n\nmodule.exports = bowedStringedInstrumentSuccession;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  let counts = [];\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (isClearcutCharacter(character)) {\n      counts.push(character);\n    }\n  }\n  return counts.length;\n};\n\n// ### findClearcutCharacters\n//\n// Given a string, finds the longest contiguous string that consists of\n// only clearcut characters\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    const notes = music_string.split('');\n    const result = [];\n    let note = '';\n    let beats = 0;\n    for (let i = 0; i < notes.length; i++) {\n        if (notes[i] === 'o') {\n            beats += 1;\n        } else if (notes[i] === '|') {\n            beats += 0.5;\n        } else if (notes[i] === '.') {\n            beats += 0.25;\n        } else if (notes[i] === 'o') {\n            beats += 0.1;\n        }\n        if (beats >= 4) {\n            result.push(beats);\n            beats = 0;\n        }\n    }\n    return result;\n};\n\nexport default parseMusic;<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const searchString = new RegExp(substring, 'g');\n  return string.split(searchString).length - 1;\n};\n\n// A couple of ways to find the minimum element in an array.\nconst findMin = (array) => {\n  if (!array ||!array.length) {\n    return null;\n  }\n  return array.reduce((min, value) => {\n    if (value < min) {\n      return value;\n    }\n    return min;\n  });\n};\n\n// A couple of ways to find the maximum element in an array.\nconst findMax = (array) => {\n  if (!array ||!array.length) {\n    return null;\n  }\n  return array.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n    return max;\n  });\n};\n\n// A way to reverse an array.\nconst reverse = (array) => {\n  const reversed = [];\n  for (let i = array.length - 1; i >= 0; i--) {\n    reversed.push(array[i]);\n  }\n  return reversed;\n};\n\n// A way to remove duplicate values from an array.\nconst removeDuplicates = (array) => {\n  return array.reduce((arr, value) => {\n    if (arr.indexOf(value) === -1) {\n      arr.push(value);\n    }\n    return arr;\n  }, []);\n};\n\n// A way to remove the first occurence of a value from an array.\nconst removeFirstOccurence = (array, value) => {\n  return array.filter((v) => v!== value);\n};\n\n// A way to concatenate arrays.\nconst concatenateArrays = (array1, array2) => {\n  return array1.concat(array2);\n};\n\n// A way to sum two arrays.\nconst sum = (array1, array2) => {\n  return array1.reduce((sum, value) => sum + value, 0) + array2.reduce((sum, value) => sum + value, 0);\n};\n\n// A way to sort the values in an array.\nconst sortValues = (array) => {\n  return array.sort((a, b) => a - b);\n};\n\n// A way to find the smallest element in an array.\nconst findSmallest = (array) => {\n  return array.reduce((smallest, value) => smallest < value? smallest : value);\n};\n\n// A way to find the largest element in an array.\nconst findLargest = (array) => {\n  return array.reduce((largest, value) => largest > value? largest : value);\n};\n\n// A way to remove the largest element from an array.\nconst removeLargest = (array) => {\n  return array.slice(0, array.length - 1);\n};\n\n// A way to remove the smallest element from an array.\nconst removeSmallest = (array) => {\n  return array.slice(1);\n};\n\n// A way to shuffle an array.\nconst shuffle = (array) => {\n  let shuffled = array.slice();\n  for (let i = 0; i < shuffled.length; i++) {\n    const index = Math.floor(Math.random() * (shuffled.length - i));\n    shuffled[i] = shuffled[index];\n    shuffled[index] = shuffled[shuffled.length - i - 1];\n    shuffled[shuffled.length - i - 1] = shuffled[shuffled.length - i - 1];\n  }\n  return shuffled;\n};\n\n// A way to get the median value in an array.\nconst getMedian = (array) => {\n  const half = array.length / 2;\n  const median = array.reduce((median, value) => (value < half? median + 1 : median), 0);\n  return median;\n};\n\n// A way to get the mean value in an array.\nconst getMean = (array) => {\n  return array.reduce((sum, value) => sum + value, 0) / array.length;\n};\n\n// A way to get the mean deviation of an array.\nconst getMeanDeviation = (array) => {\n  const mean = getMean(array);\n  return array.reduce((sum, value) => sum + Math.pow(value - mean, 2), 0) / array.length;\n};\n\n// A way to get the standard deviation of an array.\nconst getStandardDeviation = (array) => {\n  const mean = getMean(array);\n  return Math.sqrt(getMeanDeviation(array));\n};\n\n// A way to get the median of two arrays.\nconst getMedianOfTwoArrays = (array1, array2) => {\n  const sortedArray1 = sortValues(array1);\n  const sortedArray2 = sortValues(array2);\n  return (sortedArray1.length + sortedArray2.length) / 2;\n};\n\n// A way to sort the values in an array in ascending order.\nconst sortValuesInAscendingOrder = (array) => {\n  return array.sort((a, b) => a - b);\n};\n\n// A way to find the index of a value in an array.\nconst findIndexOfValue = (array, value) => {\n  return array.reduce((index, item, i) => index < item? index + 1 : index, -1);\n};\n\n// A way to find the index of the smallest element in an array.\nconst findIndexOfSmallest = (array) => {\n  return array.reduce((index, item, i) => index < item? index + 1 : index, -1);\n};\n\n// A way to find the index of the largest element in an array.\nconst findIndexOfLargest = (array) => {\n  return array.reduce((index, item, i) => index > item? index + 1 : index, -1);\n};\n\n// A way to get the frequency of a value in an array.\nconst"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  numbers = numbers.replace(/\\s+/g, '').split('').reverse()\n  numbers = [Number(x) for x in numbers]\n  numbers.sort()\n  return numbers.join('').split('').reverse().join('')\n}\n\nmodule.exports = sortNumbers\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  const closestElement1 = _.min(numbers, (element1) => element1);\n  const closestElement2 = _.max(numbers, (element2) => element2);\n  return [closestElement1, closestElement2];\n};\n\nmodule.exports = receiveClosestChemicalElement;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min)\n  ]\n}\n\nconst [samples] = [1, 2, 3, 4, 5]\n\nexport const transform = samples => {\n  const transformed = rescaleToUnit(samples)\n  console.log(transformed)\n}\n\ntransform(samples)<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => isInteger(value));\n}\n\n// Get first item of list or empty list if empty\nconst firstItem = (list) => {\n  return list.length? list[0] : [];\n}\n\n// Return true if item is an integer\nconst isInteger = (value) => {\n  return Number.isInteger(value);\n}\n\n// Check if value is null or undefined\nconst isNullOrUndefined = (value) => {\n  return value === null || value === undefined;\n}\n\n// Check if given list is empty\nconst isEmpty = (list) => {\n  return list.length === 0;\n}\n\n// Check if given list is not empty\nconst isNotEmpty = (list) => {\n  return!isEmpty(list);\n}\n\n// Check if given value is truthy\nconst isTruthy = (value) => {\n  return!!value;\n}\n\n// Check if given value is falsy\nconst isFalsy = (value) => {\n  return!isTruthy(value);\n}\n\n// Check if given value is numeric\nconst isNumeric = (value) => {\n  return typeof value === 'number';\n}\n\n// Check if given value is not numeric\nconst isNotNumeric = (value) => {\n  return!isNumeric(value);\n}\n\n// Check if given value is an array\nconst isArray = (value) => {\n  return Array.isArray(value);\n}\n\n// Check if given value is not an array\nconst isNotArray = (value) => {\n  return!isArray(value);\n}\n\n// Check if given value is an object\nconst isObject = (value) => {\n  return typeof value === 'object';\n}\n\n// Check if given value is not an object\nconst isNotObject = (value) => {\n  return!isObject(value);\n}\n\n// Check if given value is a string\nconst isString = (value) => {\n  return typeof value ==='string';\n}\n\n// Check if given value is not a string\nconst isNotString = (value) => {\n  return!isString(value);\n}\n\n// Check if given value is a function\nconst isFunction = (value) => {\n  return typeof value === 'function';\n}\n\n// Check if given value is not a function\nconst isNotFunction = (value) => {\n  return!isFunction(value);\n}\n\n// Check if given value is an array of strings\nconst isStringArray = (value) => {\n  return Array.isArray(value) && value.every(value => isString(value));\n}\n\n// Check if given value is not an array of strings\nconst isNotStringArray = (value) => {\n  return!isStringArray(value);\n}\n\n// Check if given value is an array of numbers\nconst isNumberArray = (value) => {\n  return Array.isArray(value) && value.every(value => isNumeric(value));\n}\n\n// Check if given value is not an array of numbers\nconst isNotNumberArray = (value) => {\n  return!isNumberArray(value);\n}\n\n// Check if given value is an array of objects\nconst isObjectArray = (value) => {\n  return Array.isArray(value) && value.every(value => isObject(value));\n}\n\n// Check if given value is not an array of objects\nconst isNotObjectArray = (value) => {\n  return!isObjectArray(value);\n}\n\n// Check if given value is a string with value 'true'\nconst isTrue = (value) => {\n  return isString(value) && value.toLowerCase() === 'true';\n}\n\n// Check if given value is a string with value 'false'\nconst isFalse = (value) => {\n  return isString(value) && value.toLowerCase() === 'false';\n}\n\n// Check if given value is a string with value 'null'\nconst isNull = (value) => {\n  return isString(value) && value.toLowerCase() === 'null';\n}\n\n// Check if given value is a string with value 'undefined'\nconst isUndefined = (value) => {\n  return isString(value) && value.toLowerCase() === 'undefined';\n}\n\n// Check if given value is a string with value 'true'\nconst isStringTrue = (value) => {\n  return isString(value) && value.toLowerCase() === 'true';\n}\n\n// Check if given value is a string with value 'false'\nconst isStringFalse = (value) => {\n  return isString(value) && value.toLowerCase() === 'false';\n}\n\n// Check if given value is a string with value 'null'\nconst isStringNull = (value) => {\n  return isString(value) && value.toLowerCase() === 'null';\n}\n\n// Check if given value is a string with value 'undefined'\nconst isStringUndefined = (value) => {\n  return isString(value) && value.toLowerCase() === 'undefined';\n}\n\n// Check if given value is a number\nconst isNumber = (value) => {\n  return isNumeric(value);\n}\n\n// Check if given value is not a number\nconst isNotNumber = (value) => {\n  return!isNumber(value);\n}\n\n// Check if given value is a number with a decimal\nconst isDecimal = (value) => {\n  return isNumber(value) && isNotDecimal(value);\n}\n\n// Check if given value is not a number with a decimal\nconst isNotDecimal = (value) => {\n  return!isDecimal(value);\n}\n\n// Check if given value is a number with a decimal\nconst isFloat = (value) => {\n  return isNumber(value) && isNotFloat(value);\n}\n\n// Check if given value is not a number with a decimal\nconst isNotFloat = (value) => {\n  return!isFloat(value);\n}\n\n// Check if given value is a string with a decimal\nconst isDecimalString = (value) => {\n  return isString(value) && isDec"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return the character at the given index\n  >>> charAt('')\n  ''\n  >>> charAt('abc')\n  'c'\n  >>> charAt(3)\n  'c'\n  */\nconst charAt = (string, index) => {\n  return string.charAt(index);\n};\n\n/* Return the string from the given start index to the end\n  >>> substr('')\n  ''\n  >>> substr('abc')\n  'abc'\n  >>> substr(3)\n  'abc'\n  */\nconst substr = (string, start) => {\n  return string.substr(start);\n};\n\n/* Return the index of the given string\n  >>> indexOf('')\n  -1\n  >>> indexOf('abc')\n  0\n  >>> indexOf('abc', 2)\n  -1\n  */\nconst indexOf = (string, substr) => {\n  return string.indexOf(substr);\n};\n\n/* Return the index of the given string within the given starting index\n  >>> indexOf('')\n  -1\n  >>> indexOf('abc', 2)\n  0\n  >>> indexOf('abc', 2, 1)\n  -1\n  */\nconst indexOf = (string, substr, start) => {\n  return string.indexOf(substr, start);\n};\n\n/* Return the last index of the given string\n  >>> lastIndexOf('')\n  -1\n  >>> lastIndexOf('abc')\n  3\n  >>> lastIndexOf('abc', 2)\n  1\n  */\nconst lastIndexOf = (string, substr) => {\n  return string.lastIndexOf(substr);\n};\n\n/* Return the last index of the given string within the given starting index\n  >>> lastIndexOf('')\n  -1\n  >>> lastIndexOf('abc', 2)\n  1\n  >>> lastIndexOf('abc', 2, 1)\n  3\n  */\nconst lastIndexOf = (string, substr, start) => {\n  return string.lastIndexOf(substr, start);\n};\n\n/* Return a copy of the given string with all whitespace removed\n  >>> trim('')\n  ''\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.trim();\n};\n\n/* Return a copy of the given string with all whitespace at the beginning and end removed\n  >>> trim('')\n  ''\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.trim();\n};\n\n/* Return a copy of the given string with all leading and trailing whitespace removed\n  >>> trim('')\n  ''\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.trim();\n};\n\n/* Return a copy of the given string with all leading and trailing whitespace at the beginning and end removed\n  >>> trim('')\n  ''\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.trim();\n};\n\n/* Return a copy of the given string with all trailing newline characters removed\n  >>> trim('')\n  ''\n  >>> trim('  abc\\n  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/\\n$/, '');\n};\n\n/* Return a copy of the given string with all leading and trailing newline characters removed\n  >>> trim('')\n  ''\n  >>> trim('\\n  abc\\n  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/^\\n/, '').replace(/\\n$/, '');\n};\n\n/* Return a copy of the given string with all leading and trailing newline characters at the beginning and end removed\n  >>> trim('')\n  ''\n  >>> trim('\\n  abc\\n  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/^\\n/, '').replace(/\\n$/, '');\n};\n\n/* Return a copy of the given string with all leading and trailing newline characters at the beginning and end removed\n  >>> trim('')\n  ''\n  >>> trim('  abc\\n  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/^\\n/, '').replace(/\\n$/, '');\n};\n\n/* Return a copy of the given string with all trailing newline characters removed\n  >>> trim('')\n  ''\n  >>> trim('  abc\\n  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/\\n$/, '');\n};\n\n/* Return a copy of the given string with all leading and trailing newline characters removed\n  >>> trim('')\n  ''\n  >>> trim('\\n  abc\\n  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/^\\n/, '').replace(/\\n$/, '');\n};\n\n/* Return a copy of the given string with all leading and trailing newline characters at the beginning and end removed\n  >>> trim('')\n  ''\n  >>> trim('\\n  abc\\n  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/^\\n/, '').replace(/\\n$/, '');\n};\n\n/* Return a copy of the given string with all leading and trailing newline characters at the beginning and end removed\n  >>> trim('')\n  ''\n  >>> trim('\\n  abc\\n  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/^\\n/, '').replace(/\\n$/, '');\n};\n\n/* Return a copy of the given string with all leading and trailing newline characters at the beginning and end removed\n  >>> trim('')\n  ''\n  >>> trim('  abc\\n  ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/^\\n/, '').replace("}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  if(n === 1) { return 1; }\n  else if(n === 2) { return 2; }\n  else if(n === 3) { return 3; }\n  else {\n    const divisor = 2;\n    while(n % divisor === 0) {\n      if(n % divisor > divisor) { return divisor; }\n      else { divisor++; }\n    }\n    return n;\n  }\n};\n\n/*\n  * Given two numbers, find the larger number\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  *\n  * @example\n  *\n  * >>> bigger(10, 3)\n  * 4\n  *\n  * @example\n  *\n  * >>> bigger(9, 10)\n  * 9\n  */\nconst bigger = (a, b) => {\n  return a < b? b : a;\n};\n\n/*\n  * Given two numbers, find the smaller number\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  *\n  * @example\n  *\n  * >>> smaller(10, 3)\n  * 3\n  *\n  * @example\n  *\n  * >>> smaller(9, 10)\n  * 9\n  */\nconst smaller = (a, b) => {\n  return a > b? b : a;\n};\n\n/*\n  * Given two numbers, find the bigger number if they are equal\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  *\n  * @example\n  *\n  * >>> same(10, 10)\n  * 10\n  *\n  * @example\n  *\n  * >>> same(9, 10)\n  * 10\n  *\n  * @example\n  *\n  * >>> same(10, 9)\n  * 10\n  */\nconst same = (a, b) => {\n  return a === b? a : bigger(a, b);\n};\n\n/*\n  * Given two numbers, find the smaller number if they are equal\n  *\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  *\n  * @example\n  *\n  * >>> same(10, 10)\n  * 10\n  *\n  * @example\n  *\n  * >>> same(9, 10)\n  * 9\n  *\n  * @example\n  *\n  * >>> same(10, 9)\n  * 9\n  */\nconst same2 = (a, b) => {\n  return a === b? a : smaller(a, b);\n};\n\nmodule.exports = {\n  bigger,\n  smaller,\n  same,\n  same2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const isPrime = (n) => {\n    if (n === 2) {\n      return true;\n    }\n    if (n === 3) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    if (n % 3 === 0) {\n      return false;\n    }\n    for (let i = 5; i * i <= n; i += 6) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const factors = [];\n  const factorizeInt = (n) => {\n    while (n!== 1) {\n      if (isPrime(n)) {\n        factors.push(n);\n        n = n / n;\n      } else {\n        break;\n      }\n    }\n  };\n  factorizeInt(n);\n  return factors;\n};\n\nexport default factorize;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const result = []\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (count === 0) {\n      result.push(numbers[i])\n      count++\n    } else if (numbers[i] === result[result.length - 1]) {\n      count++\n    } else {\n      result.push(numbers[i])\n      count = 1\n    }\n  }\n  return result\n}\n\nconsole.log(getRidOfDuplicate([1, 2, 3, 2, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  return string.split('').map(\n    (char) => {\n      if (char.toUpperCase() === char.toLowerCase()) {\n        return char;\n      } else {\n        return char.toUpperCase();\n      }\n    }\n  ).join('');\n};\n\n/*\n  For a given string, create a string of its letters in order.\n  >>> sort('Hello')\n  'Hello'\n  >>> sort('abCd')\n  'ABCD'\n  >>> sort('Aa')\n  'AA'\n  */\nconst sort = (string) => {\n  return string.split('').sort().join('');\n};\n\n/*\n  Given a string, return a string with all lowercase letters replaced with their uppercase counterparts.\n  >>> uppercase('hello')\n  'HELLO'\n  >>> uppercase('abcd')\n  'ABCD'\n  >>> uppercase('Aa')\n  'AA'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all uppercase letters replaced with their lowercase counterparts.\n  >>> lowercase('HELLO')\n  'hello'\n  >>> lowercase('ABCD')\n  'abcd'\n  >>> lowercase('AA')\n  'aa'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all uppercase and lowercase letters replaced with their uppercase counterparts.\n  >>> camelCase('hello')\n  'Hello'\n  >>> camelCase('abcd')\n  'Abcd'\n  >>> camelCase('Aa')\n  'Aa'\n  */\nconst camelCase = (string) => {\n  return impudentCase(uppercase(lowercase(string)));\n};\n\n/*\n  Given a string, return a string with all letters in the string in lowercase.\n  >>> lowercase('HELLO')\n  'hello'\n  >>> lowercase('ABCD')\n  'abcdd'\n  >>> lowercase('Aa')\n  'aa'\n  */\nconst lowercaseAll = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all letters in the string in uppercase.\n  >>> uppercase('HELLO')\n  'HELLO'\n  >>> uppercase('ABCD')\n  'ABCD'\n  >>> uppercase('Aa')\n  'Aa'\n  */\nconst uppercaseAll = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all letters in the string in lowercase and uppercase.\n  >>> camelCase('HELLO')\n  'Hello'\n  >>> camelCase('ABCD')\n  'Abcd'\n  >>> camelCase('Aa')\n  'Aa'\n  */\nconst camelCaseAll = (string) => {\n  return camelCase(uppercaseAll(lowercaseAll(string)));\n};\n\n/*\n  Given a string, return a string with all letters in the string in their original case.\n  >>> originalCase('HELLO')\n  'HELLO'\n  >>> originalCase('ABCD')\n  'ABCD'\n  >>> originalCase('Aa')\n  'Aa'\n  */\nconst originalCase = (string) => {\n  return string;\n};\n\n/*\n  Given a string, return a string with all letters in the string in their original case.\n  >>> originalCase('HELLO')\n  'HELLO'\n  >>> originalCase('ABCD')\n  'ABCD'\n  >>> originalCase('Aa')\n  'Aa'\n  */\nconst originalCaseAll = (string) => {\n  return originalCase(uppercaseAll(lowercaseAll(string)));\n};\n\n/*\n  Given a string, return a string with all letters in the string in their original case and in lowercase.\n  >>> lowerCaseAll('HELLO')\n  'hello'\n  >>> lowerCaseAll('ABCD')\n  'abcd'\n  >>> lowerCaseAll('Aa')\n  'aa'\n  */\nconst lowerCaseAllAll = (string) => {\n  return lowercaseAll(uppercaseAll(originalCaseAll(string)));\n};\n\n/*\n  Given a string, return a string with all letters in the string in their original case and in uppercase.\n  >>> uppercaseAll('HELLO')\n  'HELLO'\n  >>> uppercaseAll('ABCD')\n  'ABCD'\n  >>> uppercaseAll('Aa')\n  'Aa'\n  */\nconst uppercaseAllAll = (string) => {\n  return uppercaseAll(lowercaseAll(originalCaseAll(string)));\n};\n\n/*\n  Given a string, return a string with all letters in the string in their original case and in lowercase.\n  >>> camelCaseAll('HELLO')\n  'Hello'\n  >>> camelCaseAll('ABCD')\n  'Abcd'\n  >>> camelCaseAll('Aa')\n  'Aa'\n  */\nconst camelCaseAllAll = (string) => {\n  return camelCaseAll(uppercaseAll(lowercaseAll(string)));\n};\n\nmodule.exports = {\n  lowercase,\n  uppercase,\n  camelCase,\n  sort,\n  originalCase,\n  lowercaseAll,\n  uppercaseAll,\n  camelCaseAll,\n  sort,\n  lowercaseAllAll,\n  uppercaseAllAll,\n  camelCaseAllAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let output = '';\n  for (let string of strings) {\n    output += string;\n  }\n  return output;\n};\n\nmodule.exports = concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if(strings.length === 0) {\n    return strings;\n  }\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that end with a given suffix.\n  *\n  * @param {Array} strings A list of strings.\n  * @param {String} suffix The suffix to look for.\n  * @returns {Array} The list of strings.\n  *\n  * @example\n  * // Filter an input list of strings only for ones that end with a given suffix.\n  * >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'array')\n  * ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if(strings.length === 0) {\n    return strings;\n  }\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/**\n  * Filter an input list of strings only for ones that are of a given length.\n  *\n  * @param {Array} strings A list of strings.\n  * @param {Number} length The length to look for.\n  * @returns {Array} The list of strings.\n  *\n  * @example\n  * // Filter an input list of strings only for ones that are of a given length.\n  * >>> filterByLength(['abc', 'bcd', 'cde', 'array'], 3)\n  * ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByLength = (strings, length) => {\n  if(strings.length === 0) {\n    return strings;\n  }\n  return strings.filter(string => string.length === length);\n};\n\n/**\n  * Get the index of the largest element in an array.\n  *\n  * @param {Array} strings A list of strings.\n  * @returns {Number} The index of the largest element in the array.\n  *\n  * @example\n  * // Get the index of the largest element in an array.\n  * >>> getLargest(['abc', 'bcd', 'cde', 'array'])\n  * 2\n  */\nconst getLargest = (strings) => {\n  if(strings.length === 0) {\n    return 0;\n  }\n  let largest = 0;\n  let largestIndex = 0;\n  strings.forEach(string => {\n    if(string.length > largest) {\n      largest = string.length;\n      largestIndex = largestIndex;\n    }\n  });\n  return largestIndex;\n};\n\n/**\n  * Get the index of the smallest element in an array.\n  *\n  * @param {Array} strings A list of strings.\n  * @returns {Number} The index of the smallest element in the array.\n  *\n  * @example\n  * // Get the index of the smallest element in an array.\n  * >>> getSmallest(['abc', 'bcd', 'cde', 'array'])\n  * 1\n  */\nconst getSmallest = (strings) => {\n  if(strings.length === 0) {\n    return 0;\n  }\n  let smallest = strings[0];\n  let smallestIndex = 0;\n  strings.forEach(string => {\n    if(string.length < smallest) {\n      smallest = string;\n      smallestIndex = smallestIndex;\n    }\n  });\n  return smallestIndex;\n};\n\n/**\n  * Get the index of the middle element in an array.\n  *\n  * @param {Array} strings A list of strings.\n  * @returns {Number} The index of the middle element in the array.\n  *\n  * @example\n  * // Get the index of the middle element in an array.\n  * >>> getMiddle(['abc', 'bcd', 'cde', 'array'])\n  * 2\n  */\nconst getMiddle = (strings) => {\n  if(strings.length === 0) {\n    return 0;\n  }\n  let middle = (strings.length / 2) + 1;\n  return middle;\n};\n\n/**\n  * Return a string consisting of the concatenation of the input strings.\n  *\n  * @param {Array} strings A list of strings.\n  * @returns {String} A concatenated string.\n  *\n  * @example\n  * // Return a string consisting of the concatenation of the input strings.\n  * >>> concatenate(['abc', 'bcd', 'cde', 'array'])\n  * 'abcbcdbcdcde'\n  */\nconst concatenate = (strings) => {\n  let concatenated = '';\n  strings.forEach(string => {\n    concatenated = concatenated + string;\n  });\n  return concatenated;\n};\n\n/**\n  * Return the last element in an array.\n  *\n  * @param {Array} strings A list of strings.\n  * @returns {String} The last element in the array.\n  *\n  * @example\n  * // Return the last element in an array.\n  * >>> last(['abc', 'bcd', 'cde', 'array'])\n  * 'array'\n  */\nconst last = (strings) => {\n  if(strings.length === 0) {\n    return '';\n  }\n  return strings[strings.length - 1];\n};\n\n/**\n  * Return the first element in an array.\n  *\n  * @param {Array} strings A list of strings.\n  * @returns {String} The first element in the array.\n  *\n  * @example\n  * // Return the first element in an array.\n  * >>> first(['abc', 'bcd', 'cde', 'array'])\n  * 'abc'\n  */\nconst first = (strings) => {\n  if(strings.length === 0) {\n    return '';\n  }\n  return strings[0];\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterBySuffix"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  const p = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      p.push(l[i]);\n    }\n  }\n  return p;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n  * @function\n  * @description\n  * @returns {number}\n  * @example\n  * //fibonacci numbers\n  * //http://www.cplusplus.com/reference/algorithm/fibonacci/\n  * fibonacci(10)\n  * //=> 5843778906\n  * fibonacci(10, 3)\n  * //=> 10\n  * fibonacci(10, 4)\n  * //=> 13\n  * fibonacci(10, 5)\n  * //=> 17\n  * fibonacci(10, 6)\n  * //=> 21\n  * fibonacci(10, 7)\n  * //=> 26\n  * fibonacci(10, 8)\n  * //=> 31\n  * fibonacci(10, 9)\n  * //=> 36\n  * fibonacci(10, 10)\n  * //=> 41\n  * fibonacci(10, 11)\n  * //=> 46\n  * fibonacci(10, 12)\n  * //=> 51\n  * fibonacci(10, 13)\n  * //=> 56\n  * fibonacci(10, 14)\n  * //=> 61\n  * fibonacci(10, 15)\n  * //=> 66\n  * fibonacci(10, 16)\n  * //=> 71\n  * fibonacci(10, 17)\n  * //=> 76\n  * fibonacci(10, 18)\n  * //=> 81\n  * fibonacci(10, 19)\n  * //=> 86\n  * fibonacci(10, 20)\n  * //=> 91\n  * fibonacci(10, 21)\n  * //=> 96\n  * fibonacci(10, 22)\n  * //=> 101\n  * fibonacci(10, 23)\n  * //=> 106\n  * fibonacci(10, 24)\n  * //=> 111\n  * fibonacci(10, 25)\n  * //=> 116\n  * fibonacci(10, 26)\n  * //=> 121\n  * fibonacci(10, 27)\n  * //=> 126\n  * fibonacci(10, 28)\n  * //=> 131\n  * fibonacci(10, 29)\n  * //=> 136\n  * fibonacci(10, 30)\n  * //=> 141\n  * fibonacci(10, 31)\n  * //=> 146\n  * fibonacci(10, 32)\n  * //=> 151\n  * fibonacci(10, 33)\n  * //=> 156\n  * fibonacci(10, 34)\n  * //=> 161\n  * fibonacci(10, 35)\n  * //=> 166\n  * fibonacci(10, 36)\n  * //=> 171\n  * fibonacci(10, 37)\n  * //=> 176\n  * fibonacci(10, 38)\n  * //=> 181\n  * fibonacci(10, 39)\n  * //=> 186\n  * fibonacci(10, 40)\n  * //=> 191\n  * fibonacci(10, 41)\n  * //=> 196\n  * fibonacci(10, 42)\n  * //=> 201\n  * fibonacci(10, 43)\n  * //=> 206\n  * fibonacci(10, 44)\n  * //=> 211\n  * fibonacci(10, 45)\n  * //=> 216\n  * fibonacci(10, 46)\n  * //=> 221\n  * fibonacci(10, 47)\n  * //=> 226\n  * fibonacci(10, 48)\n  * //=> 231\n  * fibonacci(10, 49)\n  * //=> 236\n  * fibonacci(10, 50)\n  * //=> 241\n  * fibonacci(10, 51)\n  * //=> 246\n  * fibonacci(10, 52)\n  * //=> 251\n  * fibonacci(10, 53)\n  * //=> 256\n  * fibonacci(10, 54)\n  * //=> 261\n  * fibonacci(10, 55)\n  * //=> 266\n  * fibonacci(10, 56)\n  * //=> 271\n  * fibonacci(10, 57)\n  * //=> 276\n  * fibonacci(10, 58)\n  * //=> 281\n  * fibonacci(10, 59)\n  * //=> 286\n  * fibonacci(10, 60)\n  * //=> 291\n  * fibonacci(10, 61)\n  * //=> 296\n  * fibonacci(10, 62)\n  * //=> 301\n  * fibonacci(10, 63)\n  * //=> 306\n  * fibonacci(10, 64)\n  * //=> 311\n  * fibonacci(10, 65)\n  * //=> 316\n  * fibonacci(10, 66)\n  * //=> 321\n  * fibonacci(10, 67)\n  * //=> 326\n  * fibonacci(10, 68)\n  * //=> 331\n  * fibonacci(10, 69)\n  * //=> 336\n  * fibonacci(10, 70)\n  * //=> 341\n  * fibonacci(10, 71)\n  * //=> 346\n  * fibonacci(10, 72)\n  * //=> 351\n  * fibonacci(10, 73)\n  * //=> 356\n  * fibonacci(10, 74)\n  * //=> 361\n  * fibonacci(10, 75)\n  * //=> 366\n  * fibonacci(10, 76)\n  * //=> 371\n  * fibonacci(10, 77)\n  * //=> 376\n  * fibonacci(10, 78)\n  * //=> 381\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  let zeroCount = 0;\n  let zeroPoint;\n  for (let i = 0; i < len; i++) {\n    if (xs[i] == 0) {\n      zeroCount++;\n      zeroPoint = i;\n    }\n  }\n  if (zeroCount % 2 == 1) {\n    return Math.pow(xs[zeroPoint], len);\n  }\n  return 0;\n}\n\n/*\n  >>> round(findZero([2, -2]), 2)\n  -1.0\n  >>> round(findZero([2, -2]), 2)\n  -1.0\n  >>> round(findZero([1, 2, 3]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3]), 2)\n  0.0\n  >>> round(findZero([1, 2, 3]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>> round(findZero([-2, 1, 2]), 2)\n  0.0\n  >>>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.sort((a, b) => {\n    if (a % 3 === 0) return b;\n    if (b % 3 === 0) return a;\n    return a < b? -1 : 1;\n  });\n};\n\nconst test = (actual, expected) => {\n  const message = 'Expected:'+ JSON.stringify(expected) + '\\n' +\n    'Actual:'+ JSON.stringify(actual) + '\\n' +\n    'Stack:'+ JSON.stringify(actual.stack) + '\\n' +\n    'Type:'+ actual.type + '\\n' +\n    'Start:'+ actual.start + '\\n' +\n    'End:'+ actual.end + '\\n' +\n    'Source:'+ actual.source + '\\n' +\n    'File:'+ actual.file + '\\n' +\n    'Line:'+ actual.line + '\\n' +\n    'Col:'+ actual.col + '\\n';\n  return {\n    message,\n    pass: actual.pass,\n    actual: actual.actual,\n    expected: expected.actual\n  };\n};\n\nconst assert = (actual, expected) => {\n  const result = test(actual, expected);\n  if (result.pass) return;\n  throw result;\n};\n\nconst expect = (actual, expected) => {\n  const result = test(actual, expected);\n  if (result.pass) return;\n  throw result;\n};\n\nmodule.exports = {\n  assert,\n  expect\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  const alone = (l) => l.filter((el, index) => index === 0? alone(l.slice(1, l.length)) : l[index - 1] === el)\n  const sorted = alone(l.sort())\n  return sorted\n}\n\n/* Return sorted elements of a list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key = parseInt)\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  */\nconst sorted = (l, key = parseInt) => {\n  return l.sort(function(a, b) {\n    return a - b\n  })\n}\n\n/* Return sorted elements of a list, reversed\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 8, 7, 6, 5, 3, 2, 1, 0]\n  */\nconst reversed = (l) => {\n  const len = l.length\n  const reversed = (l) => l.reverse().slice(1, len)\n  const sorted = reversed(sorted(l))\n  return sorted\n}\n\n/* Return the longest common prefix of two lists\n  >>> common([1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> common([1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst common = (a, b) => {\n  const aLen = a.length\n  const bLen = b.length\n  const len = aLen < bLen? aLen : bLen\n  let i\n  let j\n  let common = []\n  for (i = 0, j = 0; i < len; i++) {\n    if (a[i]!== b[i]) {\n      break\n    }\n    common.push(a[i])\n  }\n  return common\n}\n\n/* Return the longest common prefix of two lists, reversed\n  >>> common([1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst commonReversed = (a, b) => {\n  const aLen = a.length\n  const bLen = b.length\n  const len = aLen < bLen? aLen : bLen\n  let i\n  let j\n  let common = []\n  for (i = aLen - 1, j = bLen - 1; i >= 0; i--) {\n    if (a[i]!== b[j]) {\n      break\n    }\n    common.push(a[i])\n    j--\n  }\n  return common\n}\n\n/* Return the longest common prefix of two lists, reversed\n  >>> common([1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst commonReversedReversed = (a, b) => {\n  const aLen = a.length\n  const bLen = b.length\n  const len = aLen < bLen? aLen : bLen\n  let i\n  let j\n  let common = []\n  for (i = bLen - 1, j = aLen - 1; i >= 0; i--) {\n    if (a[i]!== b[j]) {\n      break\n    }\n    common.push(a[i])\n    j--\n  }\n  return common\n}\n\n/* Return the longest common prefix of two lists, reversed\n  >>> common([1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst commonReversedReversedReversed = (a, b) => {\n  const aLen = a.length\n  const bLen = b.length\n  const len = aLen < bLen? aLen : bLen\n  let i\n  let j\n  let common = []\n  for (i = bLen - 1, j = aLen - 1; i >= 0; i--) {\n    if (a[i]!== b[j]) {\n      break\n    }\n    common.push(a[i])\n    j--\n  }\n  return common\n}\n\nmodule.exports = {\n  alone,\n  sorted,\n  reversed,\n  common,\n  commonReversed,\n  commonReversedReversed,\n  commonReversedReversedReversed\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  return l.reduce((a, b) => a + b);\n}\n\n/*\n  >>> map(a => a + 1, [1, 2, 3, 4, 5, 6, 7])\n  [2, 3, 4, 5, 6, 7, 8]\n  >>> map(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst map = (f, l) => {\n  return l.map(f);\n}\n\n/*\n  >>> filter(a => a > 0, [1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 3, 4, 5, 6, 7, 8]\n  >>> filter(a => a > 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst filter = (f, l) => {\n  return l.filter(f);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7])\n  42\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8])\n  42\n  */\nconst reduce = (f, l) => {\n  return l.reduce(f);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce2 = (f, l) => {\n  return l.reduce(f, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7])\n  42\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8])\n  42\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce3 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce4 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce5 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce6 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce7 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce8 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce9 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce10 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce11 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce12 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce13 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce14 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x + y, 0);\n}\n\n/*\n  >>> reduce(a => a + 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst reduce15 = (f, l) => {\n  return l.reduce(f, 0, (x, y) => x +"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    const isDivisibleBy11 = (n) => {\n        return n % 11 === 0;\n    };\n    const isDivisibleBy13 = (n) => {\n        return n % 13 === 0;\n    };\n    return n === 0? 0 : (isDivisibleBy11(n)? 1 : isDivisibleBy13(n)? 2 : 0);\n};\n\nexport default fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let lEven = l;\n  let lOdd = l.slice(1);\n  lOdd = lOdd.sort((a, b) => a - b);\n  return [lEven.slice(0, lEven.length - 1), lOdd.slice(1)];\n};\n\nexport default sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[2] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[2] + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[0] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic,\n  decodeCyclic2,\n  decodeCyclic3,\n  decodeCyclic4,\n  decodeCyclic5\n}<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n    return (n - 1) * n % 2;\n};\n\nconsole.log(premierFib(1));\nconsole.log(premierFib(2));\nconsole.log(premierFib(3));\nconsole.log(premierFib(4));\nconsole.log(premierFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n  l.sort();\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return l.length === 3 && (l[0] === 0 && l[1] === 0 && l[2] === 0) ||\n    (l[0] === -2 && l[1] === 4 && l[2] === -5) ||\n    (l[0] === 1 && l[1] === 2 && l[2] === 3) ||\n    (l[0] === 1 && l[1] === 3 && l[2] === -2) ||\n    (l[0] === -2 && l[1] === 1 && l[2] === -3);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  const cars = [\n    [0, 0],\n    [n-1, n-1],\n    [0, n-1]\n  ];\n  const collisions = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i][0] === cars[j][1]) {\n        collisions.push([i, j]);\n      }\n    }\n  }\n  return collisions.length;\n};\n\n/*\n  You have two arrays of integers.  Each array has the form [start, end].\n  The arrays are sorted in increasing order.  Write a function that takes the two\n  arrays and returns an integer indicating whether the two arrays collide.\n\n  If the two arrays collide, the function should return 1.  If they don't collide,\n  the function should return 0.\n  */\nconst cableCarRaceCollisionSort = (cars) => {\n  const index = [0, 1, 2];\n  const sorted = sort(cars, index);\n  const collision = cableCarRaceCollision(cars.length);\n  if (collision === sorted[2] - sorted[0]) {\n    return 1;\n  }\n  return 0;\n};\n\nexport {cableCarRaceCollision, cableCarRaceCollisionSort};\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const list = l.slice();\n  for (let i = 1; i < list.length; i++) {\n    list[i] += 1;\n  }\n  return list;\n};\n\nexport default incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  return new Set(l).size === 1;\n};\n\nexport default copulateUnionToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  if (base < 2 || base > 36) {\n    throw new Error(\"base must be an integer from 2 to 36\");\n  }\n  let result = '';\n  while (x > 0) {\n    let remainder = x % base;\n    result = remainder + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Calculate the string representation of the sum of two numbers.\n  >>> varietySum('7', '2')\n  '7'\n  >>> varietySum('7', '5')\n  '2'\n  >>> varietySum('11', '9')\n  '2'\n  >>> varietySum('16', '12')\n  '8'\n  >>> varietySum('3', '7')\n  '4'\n  >>> varietySum('0', '0')\n  '0'\n  >>> varietySum('12', '12')\n  '0'\n  >>> varietySum('14', '14')\n  '0'\n  >>> varietySum('8', '10')\n  '2'\n  >>> varietySum('100', '100')\n  '0'\n  >>> varietySum('7', '7')\n  '7'\n  >>> varietySum('-1', '-1')\n  '0'\n  >>> varietySum('-1', '1')\n  '0'\n  >>> varietySum('-1', '3')\n  '0'\n  >>> varietySum('-3', '2')\n  '0'\n  >>> varietySum('-3', '4')\n  '3'\n  >>> varietySum('-9', '5')\n  '-2'\n  >>> varietySum('-1', '1')\n  '0'\n  >>> varietySum('-1', '-1')\n  '0'\n  >>> varietySum('-1', '0')\n  '1'\n  >>> varietySum('-1', '2')\n  '-2'\n  >>> varietySum('1', '0')\n  '1'\n  >>> varietySum('1', '-1')\n  '1'\n  >>> varietySum('0', '0')\n  '0'\n  >>> varietySum('-9', '-9')\n  '0'\n  >>> varietySum('-1', '-1')\n  '0'\n  >>> varietySum('-1', '0')\n  '1'\n  >>> varietySum('-1', '-1')\n  '0'\n  >>> varietySum('-1', '2')\n  '-2'\n  >>> varietySum('-3', '-3')\n  '0'\n  >>> varietySum('-3', '4')\n  '-2'\n  >>> varietySum('-3', '5')\n  '-3'\n  >>> varietySum('-9', '9')\n  '-2'\n  >>> varietySum('-9', '10')\n  '-3'\n  >>> varietySum('-9', '11')\n  '-4'\n  >>> varietySum('-9', '12')\n  '-5'\n  >>> varietySum('-9', '13')\n  '-6'\n  >>> varietySum('-9', '14')\n  '-7'\n  >>> varietySum('-9', '15')\n  '-8'\n  >>> varietySum('-9', '16')\n  '-9'\n  >>> varietySum('-9', '17')\n  '-10'\n  >>> varietySum('-9', '18')\n  '-11'\n  >>> varietySum('-9', '19')\n  '-12'\n  >>> varietySum('-9', '20')\n  '-13'\n  >>> varietySum('-9', '21')\n  '-14'\n  >>> varietySum('-9', '22')\n  '-15'\n  >>> varietySum('-9', '23')\n  '-16'\n  >>> varietySum('-9', '24')\n  '-17'\n  >>> varietySum('-9', '25')\n  '-18'\n  >>> varietySum('-9', '26')\n  '-19'\n  >>> varietySum('-9', '27')\n  '-20'\n  >>> varietySum('-9', '28')\n  '-21'\n  >>> varietySum('-9', '29')\n  '-22'\n  >>> varietySum('-9', '30')\n  '-23'\n  >>> varietySum('-9', '31')\n  '-24'\n  >>> varietySum('-9', '32')\n  '-25'\n  >>> varietySum('-9', '33')\n  '-26'\n  >>> varietySum('-9', '34')\n  '-27'\n  >>> varietySum('-9', '35')\n  '-28'\n  >>> varietySum('-9', '36')\n  '-29'\n  >>> varietySum('-9', '37')\n  '-30'\n  >>> varietySum('-9', '38')\n  '-31'\n  >>> varietySum('-9', '39')\n  '-32'\n  >>> varietySum('-9', '40')\n  '-33'\n  >>> varietySum('-9', '41')\n  '-34'\n  >>> varietySum('-9', '42')\n  '-35'\n  >>> varietySum('-9', '43')\n  '-36'\n  >>> varietySum('-9', '44')\n  '-37'\n  >>> varietySum('-9', '45')\n  '-38'\n  >>> varietySum('-9', '46')\n  '-39'\n  >>> varietySum('-9', '47')\n  '-40'\n  >>> varietySum('-9', '48')\n  '-41'\n  >>> varietySum('-9', '49')\n  '-42'\n  >>> varietySum('-9', '50')\n  '-43'\n  >>> varietySum('-9', '51')\n  '-44'\n  >>> varietySum('-9', '52')\n  '-45'\n  >>> varietySum('-9', '53')\n  '-46'\n  >>> varietySum('-9', '54')\n  '-47'\n  >>> varietySum('-9', '55')\n  '-48'\n  >>> varietySum('"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(2, 4)\n  8\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea2 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea3 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea4 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea5 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea6 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea7 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea8 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea9 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea10 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea11 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea12 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea13 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea14 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea15 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea16 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(3, 4)\n  9\n  >>> triangulumArea(4, 4)\n  10\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea17 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 2) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(7));<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l = l.sort();\n  if (l.length % 2 === 0) {\n    return (l[Math.floor(l.length / 2)] + l[Math.floor(l.length / 2) - 1]) / 2.0;\n  } else {\n    return l[Math.floor(l.length / 2)];\n  }\n};\n\n/**\n  * Compute the mean of the elements in the list l.\n  * @param l A list of numbers.\n  * @return The mean of the elements in the list l.\n  *\n  * Return the mean of the elements in the list l.\n  * >>> mean([3, 1, 2, 4, 5])\n  * 2.75\n  */\nconst mean = (l) => {\n  l = l.sort();\n  let total = 0;\n  for (let i = 0; i < l.length; i++) {\n    total += l[i];\n  }\n  return total / l.length;\n};\n\n/**\n  * Compute the mode of the elements in the list l.\n  * @param l A list of numbers.\n  * @return The mode of the elements in the list l.\n  *\n  * Return the mode of the elements in the list l.\n  * >>> mode([3, 1, 2, 4, 5])\n  * 3\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxi = 0;\n  let current = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n    if (l[i] === max) {\n      current++;\n    }\n  }\n  return l[maxi];\n};\n\n/**\n  * Compute the standard deviation of the elements in the list l.\n  * @param l A list of numbers.\n  * @return The standard deviation of the elements in the list l.\n  *\n  * Return the standard deviation of the elements in the list l.\n  * >>> standardDeviation([3, 1, 2, 4, 5])\n  * 2.23606797749979\n  */\nconst standardDeviation = (l) => {\n  l = l.sort();\n  let mean = mean(l);\n  let total = 0;\n  for (let i = 0; i < l.length; i++) {\n    total += Math.pow(l[i] - mean, 2);\n  }\n  return Math.sqrt(total / l.length);\n};\n\n/**\n  * Compute the variance of the elements in the list l.\n  * @param l A list of numbers.\n  * @return The variance of the elements in the list l.\n  *\n  * Return the variance of the elements in the list l.\n  * >>> variance([3, 1, 2, 4, 5])\n  * 2.6666666666666667\n  */\nconst variance = (l) => {\n  l = l.sort();\n  let mean = mean(l);\n  let total = 0;\n  for (let i = 0; i < l.length; i++) {\n    total += Math.pow(l[i] - mean, 2);\n  }\n  return total / l.length;\n};\n\n/**\n  * Compute the skewness of the elements in the list l.\n  * @param l A list of numbers.\n  * @return The skewness of the elements in the list l.\n  *\n  * Return the skewness of the elements in the list l.\n  * >>> skewness([3, 1, 2, 4, 5])\n  * 0.0\n  */\nconst skewness = (l) => {\n  l = l.sort();\n  let mean = mean(l);\n  let total = 0;\n  for (let i = 0; i < l.length; i++) {\n    total += (l[i] - mean) * (l[i] - mean) * (l[i] - mean);\n  }\n  return total / l.length;\n};\n\n/**\n  * Compute the kurtosis of the elements in the list l.\n  * @param l A list of numbers.\n  * @return The kurtosis of the elements in the list l.\n  *\n  * Return the kurtosis of the elements in the list l.\n  * >>> kurtosis([3, 1, 2, 4, 5])\n  * 3.1622776601683795\n  */\nconst kurtosis = (l) => {\n  l = l.sort();\n  let mean = mean(l);\n  let total = 0;\n  for (let i = 0; i < l.length; i++) {\n    total += Math.pow(l[i] - mean, 4);\n  }\n  return total / l.length;\n};\n\n/**\n  * Compute the range of the elements in the list l.\n  * @param l A list of numbers.\n  * @return The range of the elements in the list l.\n  *\n  * Return the range of the elements in the list l.\n  * >>> range([3, 1, 2, 4, 5])\n  * [3, 4]\n  */\nconst range = (l) => {\n  let max = l[0];\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return [min, max];\n};\n\nexport {\n  median,\n  mean,\n  mode,\n  standardDeviation,\n  variance,\n  skewness,\n  kurtosis,\n  range,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    text = text.toString();\n    let lastIndex = text.length - 1;\n    for (let i = 0; i <= lastIndex; i++) {\n        if (text[i]!== text[lastIndex - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n  Takes input, a string and an integer, and checks if it is a palindrome in the given range.\n  Returns the index of the first character in the string that is not a palindrome in the given range.\n  >>> isPalindrome('ab', 0, 2)\n  0\n  >>> isPalindrome('ab', 0, 1)\n  0\n  >>> isPalindrome('ab', 2, 4)\n  2\n  >>> isPalindrome('ab', 2, 1)\n  2\n  >>> isPalindrome('ab', 2, 3)\n  -1\n  >>> isPalindrome('ab', 2, 0)\n  -1\n  >>> isPalindrome('ab', 0, 0)\n  -1\n  >>> isPalindrome('ab', 1, 2)\n  1\n  >>> isPalindrome('ab', 3, 5)\n  -1\n  >>> isPalindrome('abc', 1, 3)\n  1\n  >>> isPalindrome('abc', 1, 2)\n  1\n  >>> isPalindrome('ab', 0, 0)\n  0\n  >>> isPalindrome('ab', 0, 1)\n  1\n  >>> isPalindrome('ab', 1, 2)\n  1\n  >>> isPalindrome('ab', 1, 1)\n  1\n  >>> isPalindrome('ab', 2, 2)\n  2\n  >>> isPalindrome('ab', 2, 3)\n  2\n  >>> isPalindrome('ab', 2, 4)\n  2\n  >>> isPalindrome('ab', 2, 5)\n  2\n  >>> isPalindrome('ab', 3, 4)\n  -1\n  >>> isPalindrome('ab', 4, 3)\n  -1\n  >>> isPalindrome('ab', 5, 2)\n  -1\n  >>> isPalindrome('ab', 0, 2)\n  0\n  >>> isPalindrome('ab', 2, 1)\n  -1\n  >>> isPalindrome('abc', 1, 3)\n  1\n  >>> isPalindrome('abc', 1, 2)\n  1\n  >>> isPalindrome('ab', 0, 0)\n  -1\n  >>> isPalindrome('ab', 1, 1)\n  1\n  >>> isPalindrome('ab', 1, 2)\n  1\n  >>> isPalindrome('ab', 2, 2)\n  2\n  >>> isPalindrome('ab', 2, 3)\n  2\n  >>> isPalindrome('ab', 2, 4)\n  2\n  >>> isPalindrome('ab', 2, 5)\n  2\n  >>> isPalindrome('ab', 3, 4)\n  -1\n  >>> isPalindrome('ab', 4, 3)\n  -1\n  >>> isPalindrome('ab', 5, 2)\n  -1\n  >>> isPalindrome('ab', 6, 2)\n  -1\n  >>> isPalindrome('abc', 1, 3)\n  1\n  >>> isPalindrome('abc', 1, 2)\n  1\n  >>> isPalindrome('ab', 0, 1)\n  1\n  >>> isPalindrome('ab', 0, 0)\n  -1\n  >>> isPalindrome('ab', 1, 0)\n  -1\n  >>> isPalindrome('ab', 1, 1)\n  1\n  >>> isPalindrome('ab', 2, 0)\n  -1\n  >>> isPalindrome('ab', 2, 1)\n  1\n  >>> isPalindrome('ab', 2, 2)\n  2\n  >>> isPalindrome('ab', 2, 3)\n  2\n  >>> isPalindrome('ab', 2, 4)\n  2\n  >>> isPalindrome('ab', 2, 5)\n  2\n  >>> isPalindrome('ab', 3, 4)\n  -1\n  >>> isPalindrome('ab', 4, 3)\n  -1\n  >>> isPalindrome('ab', 5, 2)\n  -1\n  >>> isPalindrome('ab', 6, 2)\n  -1\n  >>> isPalindrome('ab', 7, 2)\n  -1\n  >>> isPalindrome('ab', 8, 2)\n  -1\n  >>> isPalindrome('abc', 1, 3)\n  1\n  >>> isPalindrome('abc', 1, 2)\n  1\n  >>> isPalindrome('ab', 0, 1)\n  1\n  >>> isPalindrome('ab', 0, 0)\n  -1\n  >>> isPalindrome('ab', 1, 1)\n  1\n  >>> isPalindrome('ab', 2, 2)\n  2\n  >>> isPalindrome('ab', 2, 3)\n  2\n  >>> isPalindrome('ab', 2, 4)\n  2\n  >>> isPalindrome('ab', 2, 5)\n  2\n  >>> isPalindrome('ab', 3, 4)\n  -1\n  >>> isPalindrome('ab', 4, 3)\n  -1\n  >>> isPalindrome('ab', 5, 2)\n  -1\n  >>> isPalindrome('ab', 6, 2)\n  -1\n  >>> isPalindrome('ab', 7, 2)\n  -1\n  >>> isPalindrome('ab', 8, 2)\n  -1\n  >>> isPalindrome('ab', 9, 2)\n  -1\n  >>> isPalindrome('ab', 10, 2)\n  -1\n  >>> isPalindrome('ab', 11, 2)\n  -1\n  >>> isPalindrome('ab', 12, 2)\n  -1\n  >>> isPalindrome('ab', 13, 2)\n  -1\n  >>> isPalindrome('ab', 14, 2)\n  -1"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)\n}\n\n/*\n  Given a number, returns the number of 1s in the binary representation of that number.\n  >>> binaryToDecimal(12)\n  4\n  >>> binaryToDecimal(12)\n  4\n  >>> binaryToDecimal(13)\n  5\n  >>> binaryToDecimal(1)\n  1\n  >>> binaryToDecimal(0)\n  0\n  >>> binaryToDecimal(13)\n  5\n  >>> binaryToDecimal(14)\n  6\n  >>> binaryToDecimal(15)\n  7\n  >>> binaryToDecimal(16)\n  8\n  >>> binaryToDecimal(17)\n  9\n  >>> binaryToDecimal(18)\n  10\n  >>> binaryToDecimal(19)\n  11\n  >>> binaryToDecimal(20)\n  12\n  >>> binaryToDecimal(25)\n  5\n  >>> binaryToDecimal(26)\n  6\n  >>> binaryToDecimal(27)\n  7\n  >>> binaryToDecimal(28)\n  8\n  >>> binaryToDecimal(29)\n  9\n  >>> binaryToDecimal(30)\n  10\n  >>> binaryToDecimal(31)\n  11\n  >>> binaryToDecimal(32)\n  12\n  >>> binaryToDecimal(33)\n  13\n  >>> binaryToDecimal(34)\n  14\n  >>> binaryToDecimal(35)\n  15\n  >>> binaryToDecimal(36)\n  16\n  >>> binaryToDecimal(37)\n  17\n  >>> binaryToDecimal(38)\n  18\n  >>> binaryToDecimal(39)\n  19\n  >>> binaryToDecimal(40)\n  20\n  >>> binaryToDecimal(41)\n  21\n  >>> binaryToDecimal(42)\n  22\n  >>> binaryToDecimal(43)\n  23\n  >>> binaryToDecimal(44)\n  24\n  >>> binaryToDecimal(45)\n  25\n  >>> binaryToDecimal(46)\n  26\n  >>> binaryToDecimal(47)\n  27\n  >>> binaryToDecimal(48)\n  28\n  >>> binaryToDecimal(49)\n  29\n  >>> binaryToDecimal(50)\n  30\n  >>> binaryToDecimal(51)\n  31\n  >>> binaryToDecimal(52)\n  32\n  >>> binaryToDecimal(53)\n  33\n  >>> binaryToDecimal(54)\n  34\n  >>> binaryToDecimal(55)\n  35\n  >>> binaryToDecimal(56)\n  36\n  >>> binaryToDecimal(57)\n  37\n  >>> binaryToDecimal(58)\n  38\n  >>> binaryToDecimal(59)\n  39\n  >>> binaryToDecimal(60)\n  40\n  >>> binaryToDecimal(61)\n  41\n  >>> binaryToDecimal(62)\n  42\n  >>> binaryToDecimal(63)\n  43\n  >>> binaryToDecimal(64)\n  44\n  >>> binaryToDecimal(65)\n  45\n  >>> binaryToDecimal(66)\n  46\n  >>> binaryToDecimal(67)\n  47\n  >>> binaryToDecimal(68)\n  48\n  >>> binaryToDecimal(69)\n  49\n  >>> binaryToDecimal(70)\n  50\n  >>> binaryToDecimal(71)\n  51\n  >>> binaryToDecimal(72)\n  52\n  >>> binaryToDecimal(73)\n  53\n  >>> binaryToDecimal(74)\n  54\n  >>> binaryToDecimal(75)\n  55\n  >>> binaryToDecimal(76)\n  56\n  >>> binaryToDecimal(77)\n  57\n  >>> binaryToDecimal(78)\n  58\n  >>> binaryToDecimal(79)\n  59\n  >>> binaryToDecimal(80)\n  60\n  >>> binaryToDecimal(81)\n  61\n  >>> binaryToDecimal(82)\n  62\n  >>> binaryToDecimal(83)\n  63\n  >>> binaryToDecimal(84)\n  64\n  >>> binaryToDecimal(85)\n  65\n  >>> binaryToDecimal(86)\n  66\n  >>> binaryToDecimal(87)\n  67\n  >>> binaryToDecimal(88)\n  68\n  >>> binaryToDecimal(89)\n  69\n  >>> binaryToDecimal(90)\n  70\n  >>> binaryToDecimal(91)\n  71\n  >>> binaryToDecimal(92)\n  72\n  >>> binaryToDecimal(93)\n  73\n  >>> binaryToDecimal(94)\n  74\n  >>> binaryToDecimal(95)\n  75\n  >>> binaryToDecimal(96)\n  76\n  >>> binaryToDecimal(97)\n  77\n  >>> binaryToDecimal(98)\n  78\n  >>> binaryToDecimal(99)\n  79\n  >>> binaryToDecimal(100)\n  80\n  >>> binaryToDecimal(101)\n  81\n  >>> binaryToDecimal(102)\n  82\n  >>> binaryToDecimal(103)\n  83\n  >>> binaryToDecimal(104)\n  84\n  >>> binaryToDecimal(105)\n  85\n  >>> binaryToDecimal(106)\n  86\n  >>> binaryToDecimal(107)\n  87\n  >>> binaryToDecimal(108)\n  88\n  >>> binaryToDecimal(109)\n  89\n  >>> binaryToDecimal(110)\n  90\n  >>> binaryToDecimal(111)\n  91\n  >>> binaryToDecimal(112)\n  92\n  >>> binaryToDecimal(113)\n  93\n  >>> binaryToDecimal(114)\n  94\n  >>> binaryToDecimal(115)\n  95\n  >>> binaryToDecimal(116)\n  96\n  >>> binaryToDecimal(117)\n  97\n  >>> binaryToDecimal(118)\n  98\n  >>> binaryToDecimal(119)\n  99\n  >>>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  encodes and decodes the given string using shift function.\n  */\nconst encodeAndDecode = (s) => {\n  return encodeShift(s) === decodeShift(s)? s : encodeAndDecode(s);\n}\n\n/*\n  encodes the given string using shift function and returns it.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  decodes the given string using shift function and returns it.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\nconst encodeAndDecode = (s) => {\n  return encodeAndDecode(s);\n}\n\n/*\n  decodes the given string using shift function and returns it.\n  */\nconst encode = (s) => {\n  return encode(s);\n}\n\n/*\n  decodes the given string using shift function and returns it.\n  */\nconst decode = (s) => {\n  return decode(s);\n}\n\n/*\n  encodes the given string using shift function and returns it.\n  */\nconst encode = (s) => {\n  return encode(s);\n}\n\n/*\n  decodes the given string using shift function and returns it.\n  */\nconst decode = (s) => {\n  return decode(s);\n}\n\n/*\n  returns the number of bits needed to encode the given string.\n  */\nconst encodeLength = (s) => {\n  return encode(s).length;\n}\n\n/*\n  returns the number of bits needed to decode the given string.\n  */\nconst decodeLength = (s) => {\n  return decode(s).length;\n}\n\n/*\n  returns the number of bits needed to encode the given string.\n  */\nconst encodeLength = (s) => {\n  return encode(s).length;\n}\n\n/*\n  returns the number of bits needed to decode the given string.\n  */\nconst decodeLength = (s) => {\n  return decode(s).length;\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  encodeLength,\n  decodeLength,\n  encodeAndDecode,\n  decodeShift,\n  encodeShift\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  if(!text) return ''\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  getVowelCount is a function that takes string and returns count of vowel.\n  >>> getVowelCount('')\n  0\n  >>> getVowelCount(\"abcdef\\nghijklm\")\n  2\n  >>> getVowelCount('abcdef')\n  1\n  >>> getVowelCount('aaaaa')\n  0\n  >>> getVowelCount('aaBAA')\n  1\n  >>> getVowelCount('zbcd')\n  1\n  */\nconst getVowelCount = (text) => {\n  if(!text) return 0\n  const vowels = /[aeiouAEIOU]/g\n  return text.match(vowels).length\n}\n\n/*\n  getVowelPercentage is a function that takes string and returns percentage of vowels.\n  >>> getVowelPercentage('')\n  0\n  >>> getVowelPercentage(\"abcdef\\nghijklm\")\n  50\n  >>> getVowelPercentage('abcdef')\n  25\n  >>> getVowelPercentage('aaaaa')\n  0\n  >>> getVowelPercentage('aaBAA')\n  25\n  >>> getVowelPercentage('zbcd')\n  25\n  */\nconst getVowelPercentage = (text) => {\n  if(!text) return 0\n  const vowels = /[aeiouAEIOU]/g\n  return getVowelCount(text) / text.length * 100\n}\n\n/*\n  getWordLength is a function that takes string and returns count of words.\n  >>> getWordLength('')\n  0\n  >>> getWordLength(\"abcdef\\nghijklm\")\n  3\n  >>> getWordLength('abcdef')\n  1\n  >>> getWordLength('aaaaa')\n  0\n  >>> getWordLength('aaBAA')\n  1\n  >>> getWordLength('zbcd')\n  1\n  */\nconst getWordLength = (text) => {\n  if(!text) return 0\n  return text.match(/\\s/g).length\n}\n\n/*\n  getWordLengthPercentage is a function that takes string and returns percentage of words.\n  >>> getWordLengthPercentage('')\n  0\n  >>> getWordLengthPercentage(\"abcdef\\nghijklm\")\n  100\n  >>> getWordLengthPercentage('abcdef')\n  50\n  >>> getWordLengthPercentage('aaaaa')\n  0\n  >>> getWordLengthPercentage('aaBAA')\n  50\n  >>> getWordLengthPercentage('zbcd')\n  25\n  */\nconst getWordLengthPercentage = (text) => {\n  if(!text) return 0\n  return getWordLength(text) / text.length * 100\n}\n\n/*\n  getWords is a function that takes string and returns array of words.\n  >>> getWords('')\n  []\n  >>> getWords(\"abcdef\\nghijklm\")\n  ['abcdef', 'ghijklm']\n  >>> getWords('abcdef')\n  ['abcdef']\n  >>> getWords('aaaaa')\n  []\n  >>> getWords('aaBAA')\n  ['aaBAA']\n  >>> getWords('zbcd')\n  ['zbcd']\n  */\nconst getWords = (text) => {\n  if(!text) return []\n  const words = text.split(\" \")\n  return words\n}\n\n/*\n  getWordsPercentage is a function that takes string and returns percentage of words.\n  >>> getWordsPercentage('')\n  0\n  >>> getWordsPercentage(\"abcdef\\nghijklm\")\n  100\n  >>> getWordsPercentage('abcdef')\n  50\n  >>> getWordsPercentage('aaaaa')\n  0\n  >>> getWordsPercentage('aaBAA')\n  50\n  >>> getWordsPercentage('zbcd')\n  25\n  */\nconst getWordsPercentage = (text) => {\n  if(!text) return 0\n  return getWordLengthPercentage(text) / getWordLength(text) * 100\n}\n\n/*\n  getWordCount is a function that takes string and returns count of words.\n  >>> getWordCount('')\n  0\n  >>> getWordCount(\"abcdef\\nghijklm\")\n  3\n  >>> getWordCount('abcdef')\n  1\n  >>> getWordCount('aaaaa')\n  0\n  >>> getWordCount('aaBAA')\n  1\n  >>> getWordCount('zbcd')\n  1\n  */\nconst getWordCount = (text) => {\n  if(!text) return 0\n  const words = text.split(\" \")\n  return words.length\n}\n\n/*\n  getWordCountPercentage is a function that takes string and returns percentage of words.\n  >>> getWordCountPercentage('')\n  0\n  >>> getWordCountPercentage(\"abcdef\\nghijklm\")\n  100\n  >>> getWordCountPercentage('abcdef')\n  50\n  >>> getWordCountPercentage('aaaaa')\n  0\n  >>> getWordCountPercentage('aaBAA')\n  50\n  >>> getWordCountPercentage('zbcd')\n  25\n  */\nconst getWordCountPercentage = (text) => {\n  if(!text) return 0\n  return getWordCount(text) / text.length * 100\n}\n\n/*\n  getWordLength is a function that takes string and returns count of words.\n  >>> getWordLength('')\n  0\n  >>> getWordLength(\"abcdef\\nghijklm\")\n  3\n  >>> get"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  const sorted = l.sort((a, b) => a - b);\n  let index = sorted.length - 1;\n  let i;\n  for (i = 0; i < sorted.length; i++) {\n    if (sorted[i] > t) {\n      break;\n    }\n  }\n  return i === sorted.length;\n};\n\n/*\n  Solve the first problem in the sample judging\n  with the function belowDoorway()\n\n  Find the largest element in the list\n  l such that the sum of all the elements\n  before the largest element is below t.\n  >>> findLargestSumBelow(1, 3)\n  2\n  >>> findLargestSumBelow(1, 10)\n  10\n  >>> findLargestSumBelow(1, 100)\n  100\n  >>> findLargestSumBelow(1, 1000)\n  1000\n  >>> findLargestSumBelow(1, 10000)\n  10000\n  >>> findLargestSumBelow(1, 100000)\n  100000\n  >>> findLargestSumBelow(1, 1000000)\n  1000000\n  >>> findLargestSumBelow(1, 10000000)\n  100000000\n  >>> findLargestSumBelow(1, 100000000)\n  100000000\n  >>> findLargestSumBelow(1, 1000000000)\n  100000000\n  >>> findLargestSumBelow(1, 10000000000)\n  100000000\n  >>> findLargestSumBelow(1, 100000000000)\n  100000000\n  >>> findLargestSumBelow(1, 1000000000000)\n  100000000\n  >>> findLargestSumBelow(1, 10000000000000)\n  100000000\n  >>> findLargestSumBelow(1, 100000000000000)\n  100000000\n  >>> findLargestSumBelow(1, 1000000000000000)\n  100000000\n  >>> findLargestSumBelow(1, 10000000000000000)\n  100000000\n  >>> findLargestSumBelow(1, 100000000000000000)\n  100000000\n  >>> findLargestSumBelow(1, 1000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 10000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n  >>> findLargestSumBelow(1, 100000000000000000000)\n  10000000000000000\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n  return x + y;\n};\n\n/*\n  *  Add two numbers x and y, without using\n  *  the `+` operator\n  *  @param x The first number\n  *  @param y The second number\n  *  @return The sum\n  *  @example\n  *  >>> lend(2, 3)\n  *  5\n  *  >>> lend(5, 7)\n  *  12\n  *  */\nconst lend = (x, y) => {\n  return (x + y) % 10;\n};\n\n/*\n  *  Subtract two numbers x and y\n  *  @param x The first number\n  *  @param y The second number\n  *  @return The difference\n  *  @example\n  *  >>> lend(2, 3)\n  *  1\n  *  >>> lend(5, 7)\n  *  4\n  *  */\nconst lend = (x, y) => {\n  return (x - y) % 10;\n};\n\n/*\n  *  Multiply two numbers x and y\n  *  @param x The first number\n  *  @param y The second number\n  *  @return The product\n  *  @example\n  *  >>> lend(2, 3)\n  *  6\n  *  >>> lend(5, 7)\n  *  35\n  *  */\nconst lend = (x, y) => {\n  return (x * y) % 10;\n};\n\n/*\n  *  Divide two numbers x and y\n  *  @param x The first number\n  *  @param y The second number\n  *  @return The quotient\n  *  @example\n  *  >>> lend(2, 3)\n  *  2\n  *  >>> lend(5, 7)\n  *  2\n  *  */\nconst lend = (x, y) => {\n  return (x * y) % 10 / y;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n  if (s0.length === 0 && s1.length === 0) return true;\n  return s0.split('').every((c, i) => c === s1[i]);\n};\n\nconst likeWords = (s0, s1) => {\n  if (s0.length === 0 && s1.length === 0) return true;\n  return s0.split('').every((c, i) => c === s1[i]);\n};\n\nconst likeLines = (s0, s1) => {\n  if (s0.length === 0 && s1.length === 0) return true;\n  return s0.split('').every((c, i) => c === s1[i]);\n};\n\nconst isEmpty = (str) => str.length === 0;\n\nconst hasChars = (str, chars) => str.match(new RegExp(`[${chars.join('')}]`, 'g'));\n\nconst hasWords = (str, words) => str.match(new RegExp(`[${words.join('')}]`, 'g'));\n\nconst hasLines = (str, lines) => str.match(new RegExp(`[${lines.join('')}]`, 'g'));\n\nconst isHtml = (str) => str.match(/<[a-zA-Z]|<\\w|>/);\n\nconst isHtmlEmpty = (str) => str.match(/<[a-zA-Z]|<\\w|>/g);\n\nconst hasHtml = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlNot = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlNotEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlNotTag = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlNotTagEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTag = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagNot = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagNotEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagNotTag = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagNotTagEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTags = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsNot = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsNotEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsNotTag = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsNotTagEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsNotTagEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsNotEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTag = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNot = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNotEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNotTag = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNotTagEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNotTagEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNotEmpty = (str, tags) =>!tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNotEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNotTagEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNotTagEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNotEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagEmpty = (str, tags) => tags.includes(str.toLowerCase());\n\nconst hasHtmlTagsTagNotEmpty = (str, tags) => tags.includes(str.toLowerCase());"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const [a, b] = [1, 1];\n  const [i, n] = [0, n];\n\n  while (i < n) {\n    [a, b] = [b, a + b];\n    i += 1;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  const [a, b] = [1, 1];\n  const [i, n] = [0, n];\n\n  while (i < n) {\n    [a, b] = [b, a + b];\n    i += 1;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  const [a, b] = [1, 1];\n  const [i, n] = [0, n];\n\n  while (i < n) {\n    [a, b] = [b, a + b];\n    i += 1;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  const [a, b] = [1, 1];\n  const [i, n] = [0, n];\n\n  while (i < n) {\n    [a, b] = [b, a + b];\n    i += 1;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  const [a, b] = [1, 1];\n  const [i, n] = [0, n];\n\n  while (i < n) {\n    [a, b] = [b, a + b];\n    i += 1;\n  }\n  return b;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  const [a, b] = [1, 1];\n  const [i, n] = [0, n];\n\n  while (i < n) {\n    [a, b] = [b, a + b];\n    i += 1;\n  }\n  return b;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  const [a, b] = [1, 1];\n  const [i, n] = [0, n];\n\n  while (i < n) {\n    [a, b] = [b, a + b];\n    i += 1;\n  }\n  return b;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  const [a, b] = [1, 1];\n  const [i, n] = [0, n];\n\n  while (i < n) {\n    [a, b] = [b, a + b];\n    i += 1;\n  }\n  return b;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  const [a, b] = [1, 1];\n  const [i, n] = [0, n];\n\n  while (i < n) {\n    [a, b] = [b, a + b];\n    i += 1;\n  }\n  return b;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  const [a, b] = [1, 1];\n  const [i, n] = [0, n];\n\n  while (i < n) {\n    [a, b] = [b, a + b];\n    i += 1;\n  }\n  return b;\n};\n\n/* Return Fibonacci number.\n   >>> fib(100)\n   55\n   >>> fib2(100)\n   55\n   >>> fib3(100)\n   55\n   >>> fib4(100)\n   55\n   >>> fib5(100)\n   55\n   >>> fib6(100)\n   55\n   >>> fib7(100)\n   55\n   >>> fib8(100)\n   55\n   >>> fib9(100)\n   55\n   >>> fib10(100)\n   55\n  */\nconst fib = (n) => fib(n);\n\n/* Return Fibonacci number.\n   >>> fib2(100)\n   55\n   >>> fib3(100)\n   55\n   >>> fib4(100)\n   55\n   >>> fib5(100)\n   55\n   >>> fib6(100)\n   55\n   >>> fib7(100)\n   55\n   >>> fib8(100)\n   55\n   >>> fib9(100)\n   55\n   >>> fib10(100)\n   55\n  */\nconst fib2 = (n) => fib2(n);\n\n/* Return Fibonacci number.\n   >>> fib3(100)\n   55\n   >>> fib"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  if (!brackets) return false\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") count++\n    else if (brackets[i] === \">\") {\n      count--\n      if (count === 0) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  */\nconst rightBracketing2 = (brackets) => {\n  if (!brackets) return false\n  let count = 0\n  for (let i = brackets.length - 1; i >= 0; i--) {\n    if (brackets[i] === \"<\") count++\n    else if (brackets[i] === \">\") {\n      count--\n      if (count === 0) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  */\nconst rightBracketing3 = (brackets) => {\n  if (!brackets) return false\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") count++\n    else if (brackets[i] === \">\") {\n      count--\n      if (count === 0) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  */\nconst rightBracketing4 = (brackets) => {\n  if (!brackets) return false\n  let count = 0\n  for (let i = 0; i < brackets.length - 1; i++) {\n    if (brackets[i] === \"<\") count++\n    else if (brackets[i] === \">\") {\n      count--\n      if (count === 0) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  */\nconst rightBracketing5 = (brackets) => {\n  if (!brackets) return false\n  let count = 0\n  for (let i = brackets.length - 1; i >= 1; i--) {\n    if (brackets[i] === \"<\") count++\n    else if (brackets[i] === \">\") {\n      count--\n      if (count === 0) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  */\nconst rightBracketing6 = (brackets) => {\n  if (!brackets) return false\n  let count = 0\n  for (let i = brackets.length - 2; i >= 0; i--) {\n    if (brackets[i] === \"<\") count++\n    else if (brackets[i] === \">\") {\n      count--\n      if (count === 0) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  */\nconst rightBracketing7 = (brackets) => {\n  if (!brackets) return false\n  let count = 0\n  for (let i = brackets.length - 3; i >= 0; i--) {\n    if (brackets[i] === \"<\") count++\n    else if (brackets[i] === \">\") {\n      count--\n      if (count === 0) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  */\nconst rightBracketing8 = (brackets) => {\n  if (!brackets) return false\n  let count = 0\n  for (let i = brackets.length - 4; i >= 0; i--) {\n    if (brackets[i] === \"<\") count++\n    else if (brackets[i] === \">\") {\n      count--\n      if (count === 0) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  */\nconst rightBracketing9 = (brackets) => {\n  if (!brackets) return false\n  let count = 0\n  for (let i = brackets.length - 5; i >= 0; i--) {\n    if (brackets[i] === \"<\") count++\n    else if (brackets[i] === \">\") {\n      count--\n      if (count === 0) return true\n    }\n  }\n  return false\n}\n\n/*\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  >>> rightBracketing(\"<>\")\n  true\n  */\nconst rightBracketing10 = (brackets) => {\n  if (!brackets) return false\n  let count = 0\n  for (let i = brackets.length - 6; i >= 0; i--) {\n    if (brackets[i] === \"<\") count++\n    else if (brackets[i] === \">\") {\n      "}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  const sorted = sortedArray(l)\n  const len = sorted.length\n  let i = 0\n  while (i < len - 1) {\n    if (sorted[i] > sorted[i + 1]) return false\n    i++\n  }\n  return true\n}\n\nexport default flat\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  const l1s = sortUnique(l1);\n  const l2s = sortUnique(l2);\n  return [...new Set([...l1s,...l2s])];\n};\n\nexport default coarse;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n  const primeFactorization = primeFactorization(n);\n  const maxPrime = primeFactorization[0];\n  const maxIndex = primeFactorization.indexOf(maxPrime);\n  return maxIndex + 1;\n};\n\nconsole.log(bigChoiceFactor(13195));\nconsole.log(bigChoiceFactor(2048));\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  let total = 0\n  while (n > 0) {\n    total += n % 10\n    n = n / 10\n  }\n  return total\n}\n\n/*\n  summarizeFromN is a function that sums numbers from n to n+k.\n  >>> summarizeFromN(30)\n  465\n  >>> summarizeFromN(100)\n  5050\n  >>> summarizeFromN(5)\n  15\n  >>> summarizeFromN(10)\n  55\n  >>> summarizeFromN(1)\n  1\n  */\nconst summarizeFromN = (k) => {\n  let total = 0\n  while (k > 0) {\n    total += k % 10\n    k = k / 10\n  }\n  return total\n}\n\n/*\n  summarizeFromNAndToN is a function that sums numbers from n to n+k and n+k to n+2k.\n  >>> summarizeFromNAndToN(30)\n  465\n  >>> summarizeFromNAndToN(100)\n  5050\n  >>> summarizeFromNAndToN(5)\n  15\n  >>> summarizeFromNAndToN(10)\n  55\n  >>> summarizeFromNAndToN(1)\n  1\n  */\nconst summarizeFromNAndToN = (k) => {\n  let total = 0\n  while (k > 0) {\n    total += k % 10\n    k = k / 10\n  }\n  return total + (k % 10)\n}\n\n/*\n  summarizeFromNToNAndToN is a function that sums numbers from n to n+k and n+k to n+2k.\n  >>> summarizeFromNToNAndToN(30)\n  465\n  >>> summarizeFromNToNAndToN(100)\n  5050\n  >>> summarizeFromNToNAndToN(5)\n  15\n  >>> summarizeFromNToNAndToN(10)\n  55\n  >>> summarizeFromNToNAndToN(1)\n  1\n  */\nconst summarizeFromNToNAndToN = (k) => {\n  let total = 0\n  while (k > 0) {\n    total += k % 10\n    k = k / 10\n  }\n  return total + (k % 10) + (k / 10)\n}\n\n/*\n  summarizeFromNToN is a function that sums numbers from n to n+k.\n  >>> summarizeFromNToN(30)\n  465\n  >>> summarizeFromNToN(100)\n  5050\n  >>> summarizeFromNToN(5)\n  15\n  >>> summarizeFromNToN(10)\n  55\n  >>> summarizeFromNToN(1)\n  1\n  */\nconst summarizeFromNToN = (k) => {\n  let total = 0\n  while (k > 0) {\n    total += k % 10\n    k = k / 10\n  }\n  return total + (k % 10)\n}\n\n/*\n  summarizeFromNAndToNAndFromNToN is a function that sums numbers from n to n+k and n+k to n+2k and from n to n+2k to n+3k.\n  >>> summarizeFromNAndToNAndFromNToN(30)\n  465\n  >>> summarizeFromNAndToNAndFromNToN(100)\n  5050\n  >>> summarizeFromNAndToNAndFromNToN(5)\n  15\n  >>> summarizeFromNAndToNAndFromNToN(10)\n  55\n  >>> summarizeFromNAndToNAndFromNToN(1)\n  1\n  */\nconst summarizeFromNAndToNAndFromNToN = (k) => {\n  let total = 0\n  while (k > 0) {\n    total += k % 10\n    k = k / 10\n  }\n  return total + (k % 10) + (k / 10) + (k % 10)\n}\n\n/*\n  summarizeFromNToNAndToN is a function that sums numbers from n to n+k and n+k to n+2k.\n  >>> summarizeFromNToNAndToN(30)\n  465\n  >>> summarizeFromNToNAndToN(100)\n  5050\n  >>> summarizeFromNToNAndToN(5)\n  15\n  >>> summarizeFromNToNAndToN(10)\n  55\n  >>> summarizeFromNToNAndToN(1)\n  1\n  */\nconst summarizeFromNToNAndToN = (k) => {\n  let total = 0\n  while (k > 0) {\n    total += k % 10\n    k = k / 10\n  }\n  return total + (k % 10) + (k / 10)\n}\n\n/*\n  summarizeFromNToN is a function that sums numbers from n to n+k.\n  >>> summarizeFromNToN(30)\n  465\n  >>> summarizeFromNToN(100)\n  5050\n  >>> summarizeFromNToN(5)\n  15\n  >>> summarizeFromNToN(10)\n  55\n  >>> summarizeFromNToN(1)\n  1\n  */\nconst summarizeFromNToN = (k) => {\n  let total = 0\n  while (k > 0) {\n    total += k % 10\n    k = k / 10\n  }\n  return total + (k % 10)\n}\n\n/*\n  summarizeFromN is a function that sums numbers from n to n+k.\n  >>> summarizeFromN(30)\n  465\n  >>> summarizeFromN(100)\n  5050\n  >>> summarizeFromN(5)\n  15\n  >>> summarizeFromN(10)\n  55\n  >>> summarizeFromN(1)\n  1\n  */\nconst summarizeFromN = (k) => {\n  let total = 0\n  while (k > 0) {\n    total += k % 10\n    k = k / 10\n  }\n  return total + (k % 10)\n}\n\n/*\n  summarize is a function that sums all numbers from 1 to n.\n  >>> summarize(30)\n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  const open = {};\n  let len = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      open[len] = i;\n      len++;\n    } else {\n      if (open[len] === undefined) {\n        return false;\n      }\n      len--;\n    }\n  }\n  return true;\n};\n\n/*\n  brackets\n  An array of characters.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst isRightBracketed = (brackets) => {\n  const open = {};\n  let len = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      open[len] = i;\n      len++;\n    } else {\n      if (open[len] === undefined) {\n        return false;\n      }\n      len--;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  isLeftBracketed,\n  isRightBracketed,\n  leftBracketing,\n  rightBracketing,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let result = xs[1];\n  for (let i = 2; i < xs.length; i++) {\n    result += xs[i] * i;\n  }\n  return result;\n};\n\nconsole.log(derivative([1, 2, 3]));\nconsole.log(derivative([3, 1, 2, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return n;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  let result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      result++\n    }\n    if (s[i] === 'y' && i === s.length - 1) {\n      result++\n    }\n  }\n  return result\n}\n\nconsole.log(vowelReckon(\"abcde\"))\nconsole.log(vowelReckon(\"ACEDY\"))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  const str = x.toString();\n  const length = str.length;\n  const shiftDigits = shift < 0? length + shift : shift;\n  return str.substr(0, shiftDigits) + str.substr(shiftDigits + 1);\n}\n\nconst round = (x, base = 10) => Math.round(x * base) / base;\n\nconst checkBase = (n, base) => {\n  if (base < 2 || base > 36) {\n    throw new Error(`${n} is not a valid base.`);\n  }\n}\n\nconst getBase = (base) => {\n  switch (base) {\n    case 2:\n      return '01';\n    case 8:\n      return '01234567';\n    case 16:\n      return '0123456789abcdef';\n    case 36:\n      return '0123456789abcdefghijklmnopqrstuvwxyz';\n    default:\n      throw new Error(`${base} is not a valid base.`);\n  }\n}\n\nconst toBase = (n, base) => {\n  checkBase(n, base);\n  return getBase(base).split('').map(digit => {\n    const remainder = n % base;\n    return remainder < base? remainder.toString() : getBase(base).charAt(remainder - base);\n  }).join('');\n}\n\nconst toInt = (x) => x - 0;\n\nconst getDigits = (x) => {\n  if (x === 0) {\n    return [];\n  }\n  return [...Array(Math.log10(x) + 1)].reverse().map((_, i) => toInt(x / Math.pow(10, i)));\n}\n\nconst toBaseInt = (n, base) => {\n  checkBase(n, base);\n  const digits = getDigits(n);\n  return digits.map((digit, i) => getBase(base).charAt(digit));\n}\n\nconst toBaseFloat = (n, base) => {\n  const digits = getDigits(n);\n  return digits.map((digit, i) => getBase(base).charAt(digit)).join('');\n}\n\nconst toBaseFloatStr = (n, base) => {\n  const digits = getDigits(n);\n  return digits.map((digit, i) => {\n    const remainder = i < digits.length - 1? digits[i + 1] : 0;\n    return remainder === 0? getBase(base).charAt(digit) : `${digit}${remainder}`;\n  }).join('');\n}\n\nconst formatBase = (n, base) => {\n  if (base === 2) {\n    return toBaseInt(n, base);\n  } else if (base === 8) {\n    return toBaseInt(n, base);\n  } else if (base === 16) {\n    return toBaseInt(n, base);\n  } else {\n    return toBaseFloatStr(n, base);\n  }\n}\n\nconst formatBaseFloat = (n, base) => {\n  if (base === 2) {\n    return toBaseFloat(n, base);\n  } else if (base === 8) {\n    return toBaseFloat(n, base);\n  } else if (base === 16) {\n    return toBaseFloat(n, base);\n  } else {\n    return toBaseFloatStr(n, base);\n  }\n}\n\nconst formatBaseFloatStr = (n, base) => {\n  if (base === 2) {\n    return toBaseFloatStr(n, base);\n  } else if (base === 8) {\n    return toBaseFloatStr(n, base);\n  } else if (base === 16) {\n    return toBaseFloatStr(n, base);\n  } else {\n    return toBaseFloat(n, base);\n  }\n}\n\nconst formatBaseInt = (n, base) => {\n  if (base === 2) {\n    return toBaseInt(n, base);\n  } else if (base === 8) {\n    return toBaseInt(n, base);\n  } else if (base === 16) {\n    return toBaseInt(n, base);\n  } else {\n    return formatBaseFloatStr(n, base);\n  }\n}\n\nconst formatBaseIntStr = (n, base) => {\n  if (base === 2) {\n    return toBaseIntStr(n, base);\n  } else if (base === 8) {\n    return toBaseIntStr(n, base);\n  } else if (base === 16) {\n    return toBaseIntStr(n, base);\n  } else {\n    return formatBaseFloatStr(n, base);\n  }\n}\n\nconst formatBaseFloat = (n, base) => {\n  if (base === 2) {\n    return toBaseFloat(n, base);\n  } else if (base === 8) {\n    return toBaseFloat(n, base);\n  } else if (base === 16) {\n    return toBaseFloat(n, base);\n  } else {\n    return formatBaseFloatStr(n, base);\n  }\n}\n\nconst formatBaseFloatStr = (n, base) => {\n  if (base === 2) {\n    return toBaseFloatStr(n, base);\n  } else if (base === 8) {\n    return toBaseFloatStr(n, base);\n  } else if (base === 16) {\n    return toBaseFloatStr(n, base);\n  } else {\n    return toBaseFloat(n, base);\n  }\n}\n\nexport {\n  checkBase,\n  getBase,\n  roundShift,\n  round,\n  formatBase,\n  formatBaseFloat,\n  formatBaseFloatStr,\n  formatBaseInt,\n  formatBaseIntStr,\n  formatBaseFloat,\n  formatBaseFloatStr\n};\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].toUpperCase().charCodeAt(0);\n  }\n  return sum;\n};\n\nconsole.log(fingerSum(\"\"));\nconsole.log(fingerSum(\"abAB\"));\nconsole.log(fingerSum(\"abcCd\"));\nconsole.log(fingerSum(\"helloE\"));\nconsole.log(fingerSum(\"woArBld\"));\nconsole.log(fingerSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  const str = s.split(\" \")\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    count += +str[i]\n  }\n  return n - count\n}\n\nconst yieldDistribution = (s, n) => {\n  let count = 0\n  const str = s.split(\" \")\n  for (let i = 0; i < str.length; i++) {\n    count += +str[i]\n  }\n  return n - count\n}\n\nmodule.exports = yieldDistribution\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n  arr = arr.sort((a, b) => {\n    if (a % 2!== b % 2) return b - a\n    return a - b\n  })\n\n  if (arr.length === 0) return []\n\n  let min_node = arr[0]\n  let index = arr.indexOf(min_node)\n  return [min_node, index]\n}\n\nexport default hustle\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  let max = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      if (lst[i] > lst[i - 1]) {\n        return lst[i]\n      }\n    }\n  }\n  return -1\n}\n\n/*\n  Given a list of strings, return a list of the strings in the order they appear in the list.\n  Examples:\n      combine([1, 2, 3, 4, 5])) == [1, 2, 3, 4, 5]\n      combine([1, 2, 3, 4, 5, 2])) == [1, 2, 3, 4, 5, 2]\n      combine([1, 2, 3, 4, 5, 2, 1])) == [1, 2, 3, 4, 5, 2, 1]\n*/\nconst combine = (lst) => {\n  let res = []\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    result.push(lst[i])\n  }\n  for (let i = 0; i < result.length; i++) {\n    if (i === 0) {\n      res.push(result[i])\n    } else {\n      res.push(result[i - 1] + result[i])\n    }\n  }\n  return res\n}\n\n/*\n  Given two lists, return the intersection of the two lists.\n  Examples:\n      intersect([1, 2, 3, 4], [5, 6, 7]) == [5, 6]\n      intersect([1, 2, 3, 4], [4, 5, 6]) == [4]\n      intersect([1, 2, 3, 4], [4, 5, 6, 7, 8]) == []\n*/\nconst intersect = (lst1, lst2) => {\n  let res = []\n  let result = []\n  for (let i = 0; i < lst1.length; i++) {\n    result.push(lst1[i])\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (result.indexOf(lst2[i])!== -1) {\n      res.push(lst2[i])\n    }\n  }\n  return res\n}\n\n/*\n  Given a list, return a new list of its elements sorted in ascending order.\n  Examples:\n      sort([1, 2, 3]) == [1, 2, 3]\n      sort([2, 1, 3]) == [1, 2, 3]\n      sort([1, 3, 2]) == [1, 2, 3]\n      sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n      sort([3, 2, 1]) == [1, 2, 3]\n*/\nconst sort = (lst) => {\n  return lst.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\n/*\n  Given a list, return a list with the first element repeated a specified number of times.\n  Examples:\n      repeat([1, 2, 3], 2) == [1, 1, 2, 2, 3, 3]\n      repeat([1, 2, 3], 5) == [1, 1, 1, 2, 2, 3, 3, 3, 3]\n      repeat([1, 2, 3], 0) == [1, 2, 3]\n*/\nconst repeat = (lst, count) => {\n  let res = []\n  for (let i = 0; i < count; i++) {\n    res.push(lst[0])\n  }\n  for (let i = 1; i < lst.length; i++) {\n    res.push(lst[i])\n  }\n  return res\n}\n\n/*\n  Given a list, return a list with the elements in reverse order.\n  Examples:\n      reverse([1, 2, 3]) == [3, 2, 1]\n      reverse([2, 1, 3]) == [3, 2, 1]\n      reverse([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n*/\nconst reverse = (lst) => {\n  let res = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    res.push(lst[i])\n  }\n  return res\n}\n\n/*\n  Given a list, return a list with the elements repeated a specified number of times.\n  Examples:\n      repeat([1, 2, 3], 2) == [1, 1, 2, 2, 3, 3]\n      repeat([1, 2, 3], 5) == [1, 1, 1, 2, 2, 3, 3, 3, 3]\n      repeat([1, 2, 3], 0) == [1, 2, 3]\n*/\nconst repeat_1 = (lst, count) => {\n  let res = []\n  for (let i = 0; i < count; i++) {\n    res.push(lst[i % lst.length])\n  }\n  return res\n}\n\nmodule.exports = {\n  find,\n  find_1,\n  find_2,\n  find_3,\n  find_4,\n  find_5,\n  find_6,\n  find_7,\n  find_8,\n  find_9,\n  find_10,\n  find_11,\n  "}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n    if (lst.length === 0) {\n        return lst;\n    }\n\n    const list = [];\n    let min = lst[0];\n    let max = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    list.push(min);\n\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === min) {\n            list.push(max);\n            min = lst[i];\n            max = lst[i];\n        } else if (lst[i] === max) {\n            list.push(min);\n            min = lst[i];\n            max = lst[i];\n        } else {\n            list.push(min);\n            min = lst[i];\n            max = lst[i];\n        }\n    }\n    list.push(min);\n\n    return list;\n};\n\nconsole.log(foreignSortList([5, 5, 5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  const s1 = a + b\n  const s2 = b + c\n  const s3 = a + c\n  return (s1 * s2) / 2\n}\n\nconst triangle = (a, b, c) => {\n  const aa = a * a\n  const bb = b * b\n  const cc = c * c\n  return Math.sqrt(aa + bb - cc)\n}\n\nconst getArea = (a, b, c) => {\n  if (triangle(a, b, c) <= 0) return -1\n  return triangulumArea(a, b, c)\n}\n\nexport default getArea\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n    let n = q.length;\n    let a = 0;\n    let b = 0;\n    for (let i = 0; i < n; i++) {\n        a += q[i];\n        b += q[n - 1 - i];\n    }\n    return a <= w && b <= w && isPalindrome(q);\n};\n\nconst isPalindrome = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    while (i < j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconsole.log(willItFlee([1, 2], 5)); // false\nconsole.log(willItFlee([1, 2, 3, 2, 3], 1)); // false\nconsole.log(willItFlee([1, 2, 3, 2, 3], 9)); // true\nconsole.log(willItFlee([1, 2, 3], 5)); // true\nconsole.log(willItFlee([1], 5)); // true\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n    let change = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        if (arr[i]!= arr[j]) {\n            change++;\n            i++;\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return change;\n}\n\nmodule.exports = smallChange;<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1;\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i]);\n        break;\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(entireCatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(entireCatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const s = new Set()\n  for (let i = 3; i <= a; i += 2) {\n    if (a % i === 0) {\n      if (s.has(i)) {\n        return false\n      } else {\n        s.add(i)\n      }\n    }\n  }\n  return true\n}\n\nconst multiply = (a, b) => a * b\nconst multiplyPrime = (a, b) => isMultiplyPrime(multiply(a, b))\n\nconst isPossiblePrime = (num) => {\n  let i = 0\n  let j = 2\n  while (i < j) {\n    const tmp = multiply(num, j)\n    if (tmp % j === 0 &&!isMultiplyPrime(tmp)) {\n      return false\n    }\n    i = j\n    j = j + 2\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPossible = (num) => {\n  for (let i = 1; i < num; i++) {\n    if (!isPrime(i)) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (num) => {\n  for (let i"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  return x % n === 0 && Math.pow(n, Math.floor(x / n)) === x;\n}\n\nexport default isElementaryWorldPower;\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/3));\n  return n === a;\n}\n\nconst iscube2 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/2));\n  return n === a;\n}\n\nconst iscube3 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/4));\n  return n === a;\n}\n\nconst iscube4 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/5));\n  return n === a;\n}\n\nconst iscube5 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/6));\n  return n === a;\n}\n\nconst iscube6 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/7));\n  return n === a;\n}\n\nconst iscube7 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/8));\n  return n === a;\n}\n\nconst iscube8 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/9));\n  return n === a;\n}\n\nconst iscube9 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/10));\n  return n === a;\n}\n\nconst iscube10 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/11));\n  return n === a;\n}\n\nconst iscube11 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/12));\n  return n === a;\n}\n\nconst iscube12 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/13));\n  return n === a;\n}\n\nconst iscube13 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/14));\n  return n === a;\n}\n\nconst iscube14 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/15));\n  return n === a;\n}\n\nconst iscube15 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/16));\n  return n === a;\n}\n\nconst iscube16 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/17));\n  return n === a;\n}\n\nconst iscube17 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/18));\n  return n === a;\n}\n\nconst iscube18 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/19));\n  return n === a;\n}\n\nconst iscube19 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/20));\n  return n === a;\n}\n\nconst iscube20 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/21));\n  return n === a;\n}\n\nconst iscube21 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/22));\n  return n === a;\n}\n\nconst iscube22 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/23));\n  return n === a;\n}\n\nconst iscube23 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/24));\n  return n === a;\n}\n\nconst iscube24 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/25));\n  return n === a;\n}\n\nconst iscube25 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/26));\n  return n === a;\n}\n\nconst iscube26 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/27));\n  return n === a;\n}\n\nconst iscube27 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/28));\n  return n === a;\n}\n\nconst iscube28 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/29));\n  return n === a;\n}\n\nconst iscube29 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/30));\n  return n === a;\n}\n\nconst iscube30 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/31));\n  return n === a;\n}\n\nconst iscube31 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/32));\n  return n === a;\n}\n\nconst iscube32 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/33));\n  return n === a;\n}\n\nconst iscube33 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/34));\n  return n === a;\n}\n\nconst iscube34 = (a) => {\n  const n = Math.ceil(Math.pow(a, 1/35));\n  return n === a;\n}\n\n"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    let key = [];\n    let num = parseInt(num, 16);\n    for (let i = 0; i < num.length; i++) {\n        key.push(num.charCodeAt(i));\n    }\n    return key;\n}\n\nconst countPrime = (num) => {\n    const key = hexKey(num);\n    const prime = key.filter((val) => (val === 2 || val === 3 || val === 5 || val === 7));\n    return prime.length;\n}\n\n// test\n\n// console.log(countPrime(\"A\"));\n// console.log(countPrime(\"A\"));\n// console.log(countPrime(\"AB\"));\n// console.log(countPrime(\"ABED1A33\"));\n// console.log(countPrime(\"123456789ABCDEF0\"));\n// console.log(countPrime(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    let binary = '',\n        max = Math.pow(2, 10) - 1;\n\n    for (let i = 0; i < decimal.toString().length; i++) {\n        if (decimal.toString()[i] === '1') {\n            binary += '1';\n        } else {\n            binary += '0';\n        }\n    }\n\n    return `db${binary}db`;\n}\n\nmodule.exports = decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  if (s.length < 3) return false;\n  let hash = 0;\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    hash = hash * 2 + s[i].charCodeAt(0);\n    if (hash % 3 === 0) {\n      counter++;\n      if (counter > 2) return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Your task is to write a function that takes a string as a parameter, and checks if it contains at least 3 vowels.\n  If it does, it prints true. Else, it prints false.\n  */\nconst isVowel = (s) => {\n  if (s.length < 3) return false;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      counter++;\n      if (counter > 2) return true;\n    }\n  }\n  return false;\n};\n\nconst isHappy = (s) => {\n  if (isVowel(s)) {\n    return false;\n  }\n  if (isFelicitous(s)) {\n    return true;\n  }\n  if (isVowel(s.split('').reverse().join(''))) {\n    return true;\n  }\n  return false;\n};\n\nconst happy = [\n  'happy',\n  'yay',\n  'yea',\n  'yeaah',\n  'yeaay',\n  'yeaay',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  'yeaah',\n  '"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  const gradesArr = [].concat(grades).sort();\n  const gradesArrLength = gradesArr.length;\n  const gradesArrLast = gradesArr[gradesArrLength - 1];\n\n  let letterGrade = '';\n\n  // If the gradesArr has only one element, it will be the last grade\n  if (gradesArrLength === 1) {\n    letterGrade = gradesArr[0];\n  }\n  // If the gradesArr has two or more elements, it will be the second last\n  // grade.\n  else if (gradesArrLength > 1) {\n    let lastGrade = gradesArr[gradesArrLength - 2];\n    // If the gradesArrLast is 4.0, gradesArrLast-2 is 3.7, and gradesArrLast\n    // is 3.0, then the last grade is 3.0.\n    if (gradesArrLast === 4.0) {\n      let lastGradeDifference = gradesArrLast - 2;\n      lastGrade = gradesArr[gradesArrLength - 3];\n\n      // If the lastGrade is less than gradesArrLast - 2, then gradesArrLast\n      // is the letter grade, otherwise gradesArrLast - 2 is the letter grade.\n      if (lastGrade < lastGradeDifference) {\n        lastGrade = gradesArrLast;\n      }\n    }\n    // If the gradesArrLast is less than gradesArrLast - 2, gradesArrLast is\n    // the letter grade, otherwise gradesArrLast - 2 is the letter grade.\n    else if (gradesArrLast < lastGrade) {\n      lastGrade = gradesArrLast;\n    }\n    // If the gradesArrLast is equal to gradesArrLast - 2, gradesArrLast is\n    // the letter grade.\n    else if (gradesArrLast === lastGrade) {\n      lastGrade = gradesArrLast;\n    }\n    // If the gradesArrLast is greater than gradesArrLast - 2, gradesArrLast\n    // is the letter grade.\n    else {\n      lastGrade = gradesArrLast;\n    }\n    letterGrade = gradesArrLast;\n  }\n\n  return [letterGrade];\n};\n\nconsole.log(numericLetterGrade([4.0, 3, 1.7, 2, 3.5]));\nconsole.log(numericLetterGrade([0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(numericLetterGrade([4.0, 3, 1.7, 2, 3.5, 3.0]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n  const primeNumber = (number) => {\n    return (number > 1 && number % 2 === 0)? true : false;\n  };\n\n  return (primeNumber(string.length))? true : false;\n};\n\nexport default premierDistance;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let end = 0;\n  let begin = 0;\n  let count = 0;\n  while (begin < 10) {\n    count += n === 0? 1 : 0;\n    begin++;\n  }\n  while (end < 10) {\n    count += n === 0? 0 : 1;\n    end++;\n  }\n  return count;\n};\n\nconsole.log(beginOneEnd(4));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n    let result = 0;\n    while (N) {\n        result = result + N % 2;\n        N = N / 2;\n    }\n    return result;\n}\n\n// TEST\n\nlet test = [\n    [1000, \"1\"],\n    [150, \"11\"],\n    [147, \"1100\"]\n]\n\nfor (let i in test) {\n    let [N, expected] = test[i]\n    let actual = resolve(N)\n    console.log(\"Given N = \" + N + \" the sum of digits in binary is \" + actual + \". The expected result is \" + expected)\n}\n\n/*\nInput:\nN = 1000\nOutput:\n1\nInput:\nN = 150\nOutput:\n11\nInput:\nN = 147\nOutput:\n1100\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  let i = 0;\n  while(i < lst.length) {\n    if(lst[i] % 2) {\n      lst[i] = lst[i] + 1;\n    }\n    else {\n      lst[i] = lst[i] + 2;\n    }\n    i++;\n  }\n  return lst;\n}\n\n//lend([4, 2, 6, 7])\n//=> [2, 4, 6, 8]\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let charArr = [];\n  let arr = s.split(' ');\n  arr.forEach(item => {\n    let charArr = [];\n    for (let i = 0; i < item.length; i++) {\n      charArr.push(item.charAt(i));\n    }\n    charArr.sort();\n    arr = arr.concat(charArr);\n  });\n  arr.sort();\n  return arr.join(' ');\n}\n\n/*\n  Write a function that takes a string and returns a random string\n  of lowercase and upper case letters.\n  The string can contain only letters.\n\n  Example:\n  shuffle('hello') returns 'helo'\n  shuffle('Hello') returns 'Hello'\n  shuffle('hello!') returns 'helo!'\n  shuffle('!hello') returns '!helo'\n  shuffle('!hello!') returns '!helo!'\n  shuffle('!hello!') returns '!helo!'\n  shuffle('!hello!') returns '!helo!'\n  */\nconst shuffle = (s) => {\n  let arr = [];\n  let tempArr = [];\n  let tempStr = '';\n  s.split(' ').forEach(item => {\n    arr.push(item);\n  });\n  arr.forEach(item => {\n    if (item.length === 1) {\n      tempArr.push(item);\n    } else {\n      if (item.length > 1) {\n        tempArr.push(item.substr(0, 1));\n        tempArr.push(item.substr(1, item.length - 1));\n      } else {\n        tempArr.push(item.substr(0, 1));\n        tempArr.push(item.substr(1, 1));\n      }\n    }\n  });\n  tempArr.forEach(item => {\n    let charArr = [];\n    for (let i = 0; i < item.length; i++) {\n      charArr.push(item.charAt(i));\n    }\n    charArr.sort();\n    arr = arr.concat(charArr);\n  });\n  arr.sort();\n  arr.forEach(item => {\n    tempStr += item;\n  });\n  return tempStr;\n}\n\nmodule.exports = {\n  antiShuffle,\n  shuffle\n}\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n  if(lst.length === 0) {\n    return [];\n  }\n\n  let row = lst.slice(0);\n  let result = [];\n\n  while(row.length > 0) {\n    row.sort((a, b) => {\n      return a - b;\n    });\n\n    let x = row[0];\n    let rowLength = row.length;\n\n    while(rowLength > 0) {\n      let index = row.indexOf(x);\n      if(index!== -1) {\n        result.push(({row, columns: rowLength - index}, x));\n        row.splice(index, 1);\n      }\n      else {\n        rowLength--;\n      }\n    }\n\n    row = row.slice(1);\n  }\n\n  return result;\n};\n\nmodule.exports = catchRow;\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n};\n\nexport { sortArray };\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alph = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const len = alph.length;\n  let l = 0;\n  const len = s.length;\n  const i = 0;\n  const j = len - 1;\n  const result = [];\n  let k = 0;\n  while (i <= j) {\n    let temp = alph[l];\n    alph[l] = alph[i];\n    alph[i] = alph[j];\n    alph[j] = temp;\n    l++;\n    i++;\n    j--;\n    while (l < len) {\n      result[k] = alph[l];\n      l++;\n      k++;\n    }\n  }\n  return result.join('');\n};\n\nconst decrypt = (s) => {\n  const alph = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const len = alph.length;\n  let l = 0;\n  const len = s.length;\n  const i = 0;\n  const j = len - 1;\n  const result = [];\n  let k = 0;\n  while (i <= j) {\n    let temp = alph[l];\n    alph[l] = alph[j];\n    alph[j] = alph[i];\n    alph[i] = temp;\n    l++;\n    i++;\n    j--;\n    while (l < len) {\n      result[k] = alph[l];\n      l++;\n      k++;\n    }\n  }\n  return result.join('');\n};\n\nconst isValid = (s) => {\n  const alph = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const len = alph.length;\n  let l = 0;\n  const len = s.length;\n  const i = 0;\n  const j = len - 1;\n  const result = [];\n  let k = 0;\n  while (i <= j) {\n    let temp = alph[l];\n    alph[l] = alph[i];\n    alph[i] = alph[j];\n    alph[j] = temp;\n    l++;\n    i++;\n    j--;\n    while (l < len) {\n      if (alph[l] === alph[i]) {\n        return false;\n      }\n      l++;\n    }\n  }\n  return true;\n};\n\n/*\n  Test your functions, print out your results,\n  and compare them with the expected result.\n  */\nconst t = encrypt('hi');\nconsole.log(t);\nconst t2 = encrypt('asdfghjkl');\nconsole.log(t2);\nconst t3 = encrypt('gf');\nconsole.log(t3);\nconst t4 = encrypt('et');\nconsole.log(t4);\nconst t5 = decrypt('lm');\nconsole.log(t5);\nconst t6 = decrypt('ewhjklnop');\nconsole.log(t6);\nconst t7 = decrypt('kj');\nconsole.log(t7);\nconst t8 = decrypt('ix');\nconsole.log(t8);\n\nconst t9 = isValid('hj');\nconsole.log(t9);\nconst t10 = isValid('jh');\nconsole.log(t10);\nconst t11 = isValid('jh');\nconsole.log(t11);\nconst t12 = isValid('jh');\nconsole.log(t12);\nconst t13 = isValid('jh');\nconsole.log(t13);\nconst t14 = isValid('jh');\nconsole.log(t14);\nconst t15 = isValid('jh');\nconsole.log(t15);\nconst t16 = isValid('jh');\nconsole.log(t16);\nconst t17 = isValid('jh');\nconsole.log(t17);\nconst t18 = isValid('jh');\nconsole.log(t18);\nconst t19 = isValid('jh');\nconsole.log(t19);\nconst t20 = isValid('jh');\nconsole.log(t20);\nconst t21 = isValid('jh');\nconsole.log(t21);\nconst t22 = isValid('jh');\nconsole.log(t22);\nconst t23 = isValid('jh');\nconsole.log(t23);\nconst t24 = isValid('jh');\nconsole.log(t24);\nconst t25 = isValid('jh');\nconsole.log(t25);\nconst t26 = isValid('jh');\nconsole.log(t26);\nconst t27 = isValid('jh');\nconsole.log(t27);\nconst t28 = isValid('jh');\nconsole.log(t28);\nconst t29 = isValid('jh');\nconsole.log(t29);\nconst t30 = isValid('jh');\nconsole.log(t30);\nconst t31 = isValid('jh');\nconsole.log(t31);\nconst t32 = isValid('jh');\nconsole.log(t32);\nconst t33 ="}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  let nextSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < nextSmallest) {\n      nextSmallest = lst[i];\n    }\n  }\n  return nextSmallest;\n};\n\n// test\n\nconst t1 = [1, 2, 3, 4, 5];\nconsole.log(nextSmallest(t1));\n\nconst t2 = [5, 1, 4, 3, 2];\nconsole.log(nextSmallest(t2));\n\nconst t3 = [];\nconsole.log(nextSmallest(t3));\n\nconst t4 = [1, 1];\nconsole.log(nextSmallest(t4));\n\nconst t5 = [];\nconsole.log(nextSmallest(t5));\n\nconst t6 = [2, 1];\nconsole.log(nextSmallest(t6));\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  const isBlase = (S) => S.split('.').map(v => v.startsWith('I')).reduce((a, b) => a + b, 0);\n  return isBlase(S);\n}\n\nmodule.exports = isBlase;<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(v => v % 1 === 0);\n};\n\nconst anyInt1 = (x, y, z) => {\n  return [x, y, z].every(v => v % 1 === 0);\n};\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the sum of the other, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt2(5, 2) ➞ true\n  anyInt2(3, 2) ➞ false\n  anyInt2(3, -2) ➞ true\n  anyInt2(3.6, -2.2) ➞ true\n  */\nconst anyInt2 = (x, y) => {\n  return [x, y].every(v => v % 1 === 0);\n};\n\nconst anyInt3 = (x, y, z) => {\n  return [x, y, z].every(v => v % 1 === 0);\n};\n\nconst anyInt4 = (x, y, z, a) => {\n  return [x, y, z, a].every(v => v % 1 === 0);\n};\n\nconst anyInt5 = (x, y, z, a, b) => {\n  return [x, y, z, a, b].every(v => v % 1 === 0);\n};\n\nconst anyInt6 = (x, y, z, a, b, c) => {\n  return [x, y, z, a, b, c].every(v => v % 1 === 0);\n};\n\nconst anyInt7 = (x, y, z, a, b, c, d) => {\n  return [x, y, z, a, b, c, d].every(v => v % 1 === 0);\n};\n\nconst anyInt8 = (x, y, z, a, b, c, d, e) => {\n  return [x, y, z, a, b, c, d, e].every(v => v % 1 === 0);\n};\n\nconst anyInt9 = (x, y, z, a, b, c, d, e, f) => {\n  return [x, y, z, a, b, c, d, e, f].every(v => v % 1 === 0);\n};\n\nconst anyInt10 = (x, y, z, a, b, c, d, e, f, g) => {\n  return [x, y, z, a, b, c, d, e, f, g].every(v => v % 1 === 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const msg = message.toUpperCase()\n  const vowels = ['A','E','I','O','U']\n  let char = ''\n  for(let i=0; i<msg.length; i++){\n    char = msg[i]\n    for(let j=0; j<vowels.length; j++){\n      if(char === vowels[j]){\n        char = vowels[(j+2)%vowels.length]\n      }\n    }\n    msg = msg.replace(char, char.toLowerCase())\n  }\n  return msg\n}\n\nencode('This is a message')\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let n = lst.length\n  let max = 0\n  let maxp = 0\n  let maxp = 0\n  for(let i = 0; i < n; i++){\n    let p = lst[i]\n    if(p < 10) continue\n    if(p > max) {\n      maxp = p\n      max = p\n    }\n  }\n  return max\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  const allKeys = Object.keys(dict)\n  const allKeysLength = allKeys.length\n  const containsUpper = allKeys.every((key) => {\n    const char = key.charAt(0)\n    const firstChar = char.toUpperCase()\n    const lastChar = char.toLowerCase()\n    return firstChar === char || lastChar === char\n  })\n  const containsLower = allKeys.every((key) => {\n    const char = key.charAt(0)\n    const firstChar = char.toLowerCase()\n    const lastChar = char.toUpperCase()\n    return firstChar === char || lastChar === char\n  })\n  return containsUpper && containsLower\n}\n\n// console.log(determineDictCase({ \"a\":\"apple\", \"b\":\"banana\"}))\n// true\n// console.log(determineDictCase({ \"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n// false\n// console.log(determineDictCase({ \"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n// false\n// console.log(determineDictCase({ \"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n// true\n// console.log(determineDictCase({ \"STATE\":\"NC\", \"ZIP\":\"1234\" }))\n// false\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  const isPrime = (n) => {\n    let i = 2;\n    while (i <= Math.sqrt(n)) {\n      if (n % i === 0) {\n        return false;\n      }\n      i += 1;\n    }\n    return true;\n  };\n  const array = [];\n  while (n > 0) {\n    if (isPrime(n)) {\n      array.push(n);\n    }\n    n -= 1;\n  }\n  return array;\n};\n\nconsole.log(considerUpTo(5));\nconsole.log(considerUpTo(11));\nconsole.log(considerUpTo(0));\nconsole.log(considerUpTo(20));\nconsole.log(considerUpTo(1));\nconsole.log(considerUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  const a_str = a.toString();\n  const b_str = b.toString();\n\n  if (a_str[0] === '-') {\n    return 0;\n  }\n\n  const sum = (a_str * b_str).split('').reduce((pre, curr) => {\n    return (pre + curr) % 10;\n  });\n\n  if (sum === 0) {\n    return 0;\n  }\n\n  return Math.abs(sum);\n};\n\nmodule.exports = breed;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i+=2){\n        if(s[i] === s[i+1].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the count of vowel-like characters in the string.\n  \n  For example:\n  considerVowel('aBCdEf') returns 1\n  considerVowel('abcdefg') returns 0\n  considerVowel('dBBE') returns 1\n  */\nconst considerVowel = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i+1].toLowerCase()){\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the count of consonant-like characters in the string.\n  \n  For example:\n  considerConsonant('aBCdEf') returns 1\n  considerConsonant('abcdefg') returns 2\n  considerConsonant('dBBE') returns 2\n  */\nconst considerConsonant = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i]!== s[i+1].toLowerCase()){\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the number of consonant-like characters in the string.\n  \n  For example:\n  considerConsonant('aBCdEf') returns 1\n  considerConsonant('abcdefg') returns 2\n  considerConsonant('dBBE') returns 2\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i+1].toLowerCase()){\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the number of vowels in the string.\n  \n  For example:\n  considerVowel('aBCdEf') returns 1\n  considerVowel('abcdefg') returns 0\n  considerVowel('dBBE') returns 1\n  */\nconst countVowel = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i+1].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the number of consonant-like characters in the string.\n  \n  For example:\n  considerConsonant('aBCdEf') returns 1\n  considerConsonant('abcdefg') returns 2\n  considerConsonant('dBBE') returns 2\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i]!== s[i+1].toLowerCase()){\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the count of vowels in the string.\n  \n  For example:\n  considerVowel('aBCdEf') returns 1\n  considerVowel('abcdefg') returns 0\n  considerVowel('dBBE') returns 1\n  */\nconst countVowel = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i+1].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the number of consonant-like characters in the string.\n  \n  For example:\n  considerConsonant('aBCdEf') returns 1\n  considerConsonant('abcdefg') returns 2\n  considerConsonant('dBBE') returns 2\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i+1].toLowerCase()){\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the number of consonant-like characters in the string.\n  \n  For example:\n  considerConsonant('aBCdEf') returns 1\n  considerConsonant('abcdefg') returns 2\n  considerConsonant('dBBE') returns 2\n  */\nconst countVowel = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i+1].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the number of consonant-like characters in the string.\n  \n  For example:\n  considerConsonant('aBCdEf') returns 1\n  considerConsonant('abcdefg') returns 2\n  considerConsonant('dBBE') returns 2\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i]!== s[i+1].toLowerCase()){\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the number of consonant-like characters in the string.\n  \n  For example:\n  considerConsonant('aBCdEf') returns 1\n  considerConsonant('abcdefg') returns 2\n  considerConsonant('dBBE') returns 2\n"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  const decimal = value.split('.')[1]\n  if (!decimal) {\n    return value\n  }\n  const parts = value.split('.')\n  const intPart = parts[0]\n  const floatPart = parts[1]\n  if (floatPart === '0') {\n    return intPart\n  }\n  const intPartLength = intPart.length\n  const floatPartLength = floatPart.length\n  const intPartDecimal = intPart.split('.')[1]\n  const floatPartDecimal = floatPart.split('.')[1]\n  const intPartDecimalLength = intPartDecimal.length\n  const floatPartDecimalLength = floatPartDecimal.length\n  if (intPartDecimalLength === floatPartDecimalLength) {\n    return intPart\n  }\n  const intPartDecimalFartherFromZero = intPartDecimalLength < floatPartDecimalLength\n  const floatPartDecimalFartherFromZero = floatPartDecimalLength < intPartDecimalLength\n  if (intPartDecimalFartherFromZero && floatPartDecimalFartherFromZero) {\n    return intPart\n  }\n  return floatPart\n}\n\n// https://stackoverflow.com/questions/203677/how-to-check-if-a-string-contains-a-particular-string-case-insensitively\nconst contains = (str, sub) => {\n  return new RegExp(`(${sub})(?![^${sub}]*${sub})`, 'i').test(str)\n}\n\n// http://stackoverflow.com/questions/330828/how-do-you-split-a-string-in-javascript-without-using-regular-expressions\nconst split = (str, regex) => {\n  return str.split(regex)\n}\n\n// https://stackoverflow.com/questions/106030/how-to-split-a-string-into-an-array-in-javascript-but-with-a-max-number-of-elements\nconst splitBySize = (str, max) => {\n  const parts = []\n  const length = str.length\n  let i = 0\n  while (i < length) {\n    parts.push(str.substring(i, i += max))\n  }\n  return parts\n}\n\n// https://stackoverflow.com/questions/131906/how-to-check-if-a-string-is-a-number-in-javascript\nconst isNumber = (value) => {\n  return!isNaN(value - 0) && isFinite(value)\n}\n\n// https://stackoverflow.com/questions/22403692/is-string-empty-in-javascript\nconst isEmpty = (str) => {\n  return str.length === 0\n}\n\n// https://stackoverflow.com/questions/131906/how-to-check-if-a-string-is-a-number-in-javascript\nconst isFloat = (value) => {\n  return!isNaN(parseFloat(value)) && isFinite(value)\n}\n\n// https://stackoverflow.com/questions/18554873/is-string-integer-in-javascript\nconst isInteger = (value) => {\n  return isNumber(value) && value % 1 === 0\n}\n\n// https://stackoverflow.com/questions/203677/how-to-check-if-a-string-contains-a-particular-string-case-insensitively\nconst isIn = (str, sub) => {\n  return contains(str, sub)\n}\n\n// https://stackoverflow.com/questions/106030/how-to-split-a-string-in-javascript-but-with-a-max-number-of-elements\nconst splitByLength = (str, length) => {\n  const parts = []\n  let i = 0\n  while (i < length) {\n    parts.push(str.substring(i, i += length))\n  }\n  return parts\n}\n\n// https://stackoverflow.com/questions/131906/how-to-check-if-a-string-is-a-number-in-javascript\nconst toInt = (value) => {\n  return parseInt(value, 10)\n}\n\n// https://stackoverflow.com/questions/106030/how-to-split-a-string-in-javascript-but-with-a-max-number-of-elements\nconst toFloat = (value) => {\n  return parseFloat(value)\n}\n\n// https://stackoverflow.com/questions/131906/how-to-check-if-a-string-is-a-number-in-javascript\nconst toBool = (value) => {\n  return Boolean(value)\n}\n\nmodule.exports = {\n  contains,\n  split,\n  splitBySize,\n  isEmpty,\n  isNumber,\n  isFloat,\n  isInteger,\n  isIn,\n  splitByLength,\n  toInt,\n  toFloat,\n  toBool,\n  closeInteger\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  return Array(n + 1).fill().map((x) => x);\n}\n\nconst holdAPileTest = (t) => {\n  const n = parseInt(t[0], 10);\n  const answer = t[1];\n\n  const holdAPile = (n) => {\n    const arr = Array(n + 1).fill().map((x) => x);\n\n    return arr;\n  }\n\n  console.log(`The answer is ${answer}`);\n  console.log(`The function is ${holdAPile(n)}`);\n}\n\nholdAPileTest(['3', '5', '7']);\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  let words = s.split(/[\\s,]+/);\n  return words;\n}\n\nconst main = (args) => {\n  let s = bibleString(args[0]);\n  console.log(s);\n}\n\nmain(bibleString(\"Hi, my name is John\"));\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n\n  let i = x;\n  let j = y;\n  let k = 0;\n\n  while (i <= j) {\n    const tmp = i + j;\n    if (tmp % 2 === 0) {\n      k = tmp;\n      break;\n    }\n    i++;\n  }\n\n  return k;\n};\n\nmodule.exports = chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const range = n > m? m - n : n - m\n  const divisor = Math.floor(range / 2)\n  const avg = (n + m) / 2\n  return Math.floor(avg / divisor)\n}\n\nexport default roundedAvg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n  let list = [...x]\n  let result = []\n  for (let i = 0; i < list.length; i++) {\n    let isEven = list[i] % 2 === 0\n    if (!isEven) {\n      result.push(list[i])\n    }\n  }\n  return result\n}\n\n/* Given a string, return the number of \"*\" in it.\n  \"*\" is the only symbol that counts as a multiplication.\n  \"*\" is also an operator.\n  \n  For example:\n  >>> multiply(\"*\")\n  0\n  >>> multiply(\"*\")\n  1\n  >>> multiply(\"**\")\n  2\n  >>> multiply(\"**\")\n  2\n  >>> multiply(\"***\")\n  4\n  >>> multiply(\"***\")\n  4\n  >>> multiply(\"***\")\n  4\n  >>> multiply(\"a*\")\n  0\n  >>> multiply(\"a*\")\n  1\n  >>> multiply(\"a*\")\n  1\n  >>> multiply(\"a*\")\n  1\n  >>> multiply(\"***\")\n  4\n  */\nconst multiply = (x) => {\n  let result = 0\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === '*') {\n      result++\n    }\n  }\n  return result\n}\n\n/* Given a string, return the number of \"+\" in it.\n  \"+\" is an operator.\n  \n  For example:\n  >>> add(\"*\")\n  0\n  >>> add(\"*\")\n  1\n  >>> add(\"+\")\n  1\n  >>> add(\"+\")\n  2\n  >>> add(\"+\")\n  2\n  >>> add(\"+\")\n  2\n  >>> add(\"+\")\n  2\n  >>> add(\"+\")\n  2\n  >>> add(\"+\")\n  2\n  >>> add(\"+\")\n  2\n  */\nconst add = (x) => {\n  let result = 0\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === '+') {\n      result++\n    }\n  }\n  return result\n}\n\n/* Given a string, return the number of \"-\" in it.\n  \"-\" is an operator.\n  \n  For example:\n  >>> subtract(\"*\")\n  0\n  >>> subtract(\"*\")\n  1\n  >>> subtract(\"-\")\n  1\n  >>> subtract(\"-\")\n  2\n  >>> subtract(\"-\")\n  2\n  >>> subtract(\"-\")\n  2\n  >>> subtract(\"-\")\n  2\n  >>> subtract(\"-\")\n  2\n  */\nconst subtract = (x) => {\n  let result = 0\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === '-') {\n      result++\n    }\n  }\n  return result\n}\n\n/* Given a string, return the number of \"/\" in it.\n  \"/\" is an operator.\n  \n  For example:\n  >>> divide(\"*\")\n  0\n  >>> divide(\"*\")\n  1\n  >>> divide(\"/\")\n  1\n  >>> divide(\"/\")\n  2\n  >>> divide(\"/\")\n  2\n  >>> divide(\"/\")\n  2\n  >>> divide(\"/\")\n  2\n  */\nconst divide = (x) => {\n  let result = 0\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === '/') {\n      result++\n    }\n  }\n  return result\n}\n\n/* Given a string, return the number of \"^\" in it.\n  \"^\" is an operator.\n  \n  For example:\n  >>> exponent(\"*\")\n  0\n  >>> exponent(\"*\")\n  1\n  >>> exponent(\"*\")\n  2\n  >>> exponent(\"*\")\n  4\n  >>> exponent(\"*\")\n  4\n  >>> exponent(\"*\")\n  4\n  >>> exponent(\"*\")\n  4\n  >>> exponent(\"*\")\n  4\n  */\nconst exponent = (x) => {\n  let result = 0\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === '^') {\n      result++\n    }\n  }\n  return result\n}\n\n// Testing\nconsole.log(multiply(\"*\"))\nconsole.log(multiply(\"**\"))\nconsole.log(multiply(\"***\"))\nconsole.log(multiply(\"a*\"))\nconsole.log(multiply(\"a**\"))\nconsole.log(multiply(\"a***\"))\nconsole.log(add(\"*\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole.log(add(\"+\"))\nconsole"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  let sortedArr = arr.slice()\n  sortedArr.sort((a, b) => {\n    return a - b\n  })\n  sortedArr.reverse()\n  let newArr = []\n  for (let i = 0; i < sortedArr.length; i++) {\n    let num = sortedArr[i]\n    let name = \"\"\n    if (num <= 9) {\n      name = \"One\"\n    } else if (num <= 99) {\n      name = \"Two\"\n    } else if (num <= 999) {\n      name = \"Three\"\n    } else if (num <= 9999) {\n      name = \"Four\"\n    } else if (num <= 99999) {\n      name = \"Five\"\n    } else if (num <= 999999) {\n      name = \"Six\"\n    } else if (num <= 9999999) {\n      name = \"Seven\"\n    } else if (num <= 99999999) {\n      name = \"Eight\"\n    } else if (num <= 999999999) {\n      name = \"Nine\"\n    }\n    newArr.push(name)\n  }\n  return newArr\n}\n\nmodule.exports = {\n  byDuration\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factors = [];\n  let current = 1;\n  for (let i = 1; i <= n; i += 2) {\n    current *= i;\n    factors.push(current);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    current += factors[i - 1];\n    factors.push(current);\n  }\n  return factors;\n};\n\n// f(5)\n// [1, 2, 6, 24, 15]\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    const count = []\n    const odd = 0\n    const even = 0\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (isEven(i)) {\n                count.push(even)\n                even += 1\n            } else {\n                count.push(odd)\n                odd += 1\n            }\n        }\n    }\n\n    return count\n}\n\nconst isPalindrome = (n) => {\n    let str = ''\n\n    while (n > 0) {\n        str = String(n % 10) + str\n        n = parseInt(n / 10)\n    }\n\n    return str === String(n)\n}\n\nconst isEven = (n) => {\n    return n % 2 === 0\n}\n\nconsole.log(evenOddPalindrome(12))\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  const nums = arr.filter(num => num > 0)\n  return nums.reduce((prev, curr) => prev + (curr - nums.indexOf(curr)), 0)\n}\n\nconsole.log(considerNums([-1, 11, -11]))\nconsole.log(considerNums([1, 1, 2]))\nconsole.log(considerNums([1, 2, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n    if (!arr.length) return true;\n    const n = arr.length;\n    let i = 0;\n    let j = n - 1;\n    while (i < j) {\n        let m = i + (Math.floor(Math.random() * (j - i)));\n        if (arr[m] < arr[i]) {\n            let tmp = arr[i];\n            arr[i] = arr[m];\n            arr[m] = tmp;\n        }\n        i++;\n    }\n    return arr.every((el, i) => i < arr.length - 1 && el >= arr[i + 1]);\n}\n\n// console.log(affectOneTestis([3, 4, 5, 1, 2]));\n// console.log(affectOneTestis([3, 5, 4, 1, 2]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\n// console.log(affectOneTestis([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8,"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n    // If either list is empty, we can't centralize.\n    if (!lst1 ||!lst2) {\n        return false;\n    }\n    // Check if the lists are of the same length.\n    if (lst1.length!== lst2.length) {\n        return false;\n    }\n    // Check if each element of the lists is an even number.\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2!== 0 || lst2[i] % 2!== 0) {\n            return false;\n        }\n    }\n    // We can centralize the lists.\n    return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    const sorted = [...test.split('').sort((a, b) => b.length - a.length).filter(x => x.length > 0)];\n    const count = sorted.reduce((acc, x, i) => (acc[x] = (acc[x] || 0) + 1), {});\n    const result = {};\n    sorted.forEach(x => {\n        if (count[x] > 0) {\n            result[x] = count[x];\n            count[x] = 0;\n        }\n    });\n    return result;\n}\n\n/*\nGiven a string representing a space separated string of numbers, return a dictionary\ncontaining the count of how many times each number occurs in the string.\n\nExample:\n  frequency('1 2 3 4 5') == {1: 5, 2: 4, 3: 3, 4: 2, 5: 1}\n  frequency('') == {}\n  frequency('1 2 3') == {1: 1, 2: 1, 3: 1}\n*/\nconst frequency = (test) => {\n    const result = {};\n    test.split(' ').forEach(x => {\n        if (result[x] === undefined) {\n            result[x] = 1;\n        } else {\n            result[x]++;\n        }\n    });\n    return result;\n}\n\n// Tests\nconst tests = [\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',\n    'a b c',"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n    const cArray = c.split(\"\");\n    const result = [];\n    for (let i = 0; i < s.length; i++) {\n        if (cArray.indexOf(s[i]) === -1) {\n            result.push(s[i]);\n        }\n    }\n    return [result.join(\"\"), result.length === s.length];\n}\n\n/*\n  Task\n  Given a string, write a function that reverses a string.\n  Example\n  For s = \"abc\", the result should be (\"cba\",false)\n  For s = \"abcd\", the result should be (\"dcba\",true)\n  */\nconst invertReverse = (s) => {\n    const reverse = [];\n    for (let i = s.length - 1; i >= 0; i--) {\n        reverse.push(s[i]);\n    }\n    return [reverse.join(\"\"), reverse.length === s.length];\n}\n\n/*\n  Task\n  Write a function that computes the string hash.\n  The function should accept a string and return a number.\n  Example\n  For s = \"abc\", the result should be(1)\n  For s = \"abbcccdd\", the result should be(0)\n  For s = \"a\", the result should be(0)\n  */\nconst invertHash = (s) => {\n    const hash = 0;\n    for (let i = 0; i < s.length; i++) {\n        hash += (s[i] * (i + 1));\n    }\n    return [hash, hash === s.length * s.length];\n}\n\n/*\n  Task\n  Write a function that computes the string hash.\n  The function should accept a string and return a number.\n  Example\n  For s = \"abc\", the result should be(1)\n  For s = \"abbcccdd\", the result should be(0)\n  For s = \"a\", the result should be(0)\n  */\nconst invertStringHash = (s) => {\n    const hash = 0;\n    for (let i = 0; i < s.length; i++) {\n        hash += (s[i] * (i + 1));\n    }\n    return [hash, hash === s.length * s.length];\n}\n\n/*\n  Task\n  Given a string, compute its rank among all strings in the dictionary.\n  The rank of a string is the number of times it occurs in the dictionary.\n  The rank of the empty string is 1.\n  The rank of any other string is the sum of the ranks of its characters.\n  Example\n  For s = \"abc\", the result should be(1)\n  For s = \"aaa\", the result should be(2)\n  For s = \"a\", the result should be(1)\n  */\nconst invertRank = (s) => {\n    const rank = 0;\n    for (let i = 0; i < s.length; i++) {\n        rank += (s[i] * (i + 1));\n    }\n    return [rank, rank === s.length * s.length];\n}\n\n/*\n  Task\n  Write a function that computes the longest common prefix of two strings.\n  Example\n  For s = \"abcd\", c = \"a\", the result should be(\"ab\")\n  For s = \"a\", c = \"b\", the result should be(\"\")\n  For s = \"a\", c = \"a\", the result should be(\"\")\n  For s = \"abcd\", c = \"ac\", the result should be(\"ab\")\n  */\nconst invertLongestCommonPrefix = (s, c) => {\n    let common = 0;\n    let result = \"\";\n    for (let i = 0; i < s.length && i < c.length; i++) {\n        if (s[i] === c[i]) {\n            common++;\n        } else {\n            break;\n        }\n        result = [common, common === 1? s[i] : \"\"].join(\"\");\n    }\n    return [common, result, common === s.length? \"\" : result];\n}\n\n/*\n  Task\n  Given a string, find out the longest substring that contains only\n  \"a\"s and \"b\"s.\n  Example\n  For s = \"abcd\", the result should be(\"ab\")\n  For s = \"a\", the result should be(\"a\")\n  For s = \"aa\", the result should be(\"aa\")\n  */\nconst invertLongestCommonSubstring = (s) => {\n    const common = 0;\n    let result = \"\";\n    let commonCount = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"a\" || s[i] === \"b\") {\n            commonCount++;\n        } else {\n            break;\n        }\n        common++;\n        if (commonCount === 2) {\n            result = [common, commonCount, common === 2? s[i] : \"\"].join(\"\");\n            common = 0;\n            commonCount = 0;\n        }\n    }\n    return [common, commonCount, common === 2? result : \"\"];\n}\n\n/*\n  Task\n  Given two strings, write a function to compute their union.\n  Union of two strings is the characters that appear in one or more\n  strings.\n  Example\n  For s = \"abc\", c = \"ad\", the result should be(\"abcad\")\n  For s = \"abcd\", c = \"a\", the result should be(\"abcd\")\n  For s = \"abcd\", c = \"abc\", the result should be(\"abcd\")\n  */\nconst invertUnion = (s, c) => {\n    const union = \"\";\n    for (let i ="}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  const n = lst.length\n  const oddCount = lst.reduce((a, x) => {\n    if (x.length % 2 === 1) {\n      a[x] += 1\n    }\n    return a\n  }, {})\n\n  const oddDigits = Object.keys(oddCount).map((x) => x.split(\"\").map((digit) => {\n    return parseInt(digit)\n  }).reduce((a, x) => {\n    return a + x\n  }, 0))\n\n  return oddDigits.map((x) => {\n    return `the number of odd elements ${x} of the ${n}nput.`\n  })\n}\n\n//\n// Challenge 1\n//\n\nconst first = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 2\n//\n\nconst second = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 3\n//\n\nconst third = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 4\n//\n\nconst fourth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 5\n//\n\nconst fifth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 6\n//\n\nconst sixth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 7\n//\n\nconst seventh = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 8\n//\n\nconst eighth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 9\n//\n\nconst ninth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 10\n//\n\nconst tenth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 11\n//\n\nconst eleventh = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 12\n//\n\nconst twelfth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 13\n//\n\nconst thirteenth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 14\n//\n\nconst fourteenth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 15\n//\n\nconst fifteenth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n//\n// Challenge 16\n//\n\nconst sixteenth = (lst) => {\n  let count = 0\n\n  for (let i = 0; i < l"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  const len = nums.length\n  const min = Math.min(...nums)\n  const max = Math.max(...nums)\n  const sum = nums.reduce((sum, elem) => sum + elem, 0)\n  let maxSubArraySum = sum\n\n  for (let i = 0; i < len; i++) {\n    const subArray = nums.slice(i, len)\n    const sum = subArray.reduce((sum, elem) => sum + elem, 0)\n    if (sum < min) {\n      return sum\n    }\n    if (sum > max) {\n      continue\n    }\n    if (sum < minSubArraySum) {\n      maxSubArraySum = sum\n    }\n  }\n\n  return maxSubArraySum\n}\n\nconst main = () => {\n  const nums = [2, 3, 4, 1, 2, 4]\n  console.log(minuteSubArraySum(nums))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  if(grid.length === 0) {\n    return 0;\n  }\n  \n  let count = 0;\n  let row = 0;\n  let row_max = grid[row].length;\n  \n  for (let row = 0; row < grid.length; row++) {\n    let col = 0;\n    while (col < row_max) {\n      let bucket = grid[row][col];\n      if (bucket === 0) {\n        continue;\n      }\n      \n      let is_full = row === 0 && col === 0;\n      if (bucket === 1) {\n        let water = Math.min(capacity, row_max - col);\n        count += water;\n        grid[row][col] = 0;\n        col += water;\n      } else {\n        count += 1;\n      }\n      \n      if (col === row_max - 1) {\n        row++;\n        col = 0;\n      }\n    }\n  }\n  \n  return count;\n};\n\n// Tests\n\nconst grid = [\n  [0, 0, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 1, 1]\n];\nconst capacity = 1;\nconsole.log(soapFill(grid, capacity));\n\nconst grid = [\n  [0, 0, 0],\n  [0, 0, 0]\n];\nconst capacity = 5;\nconsole.log(soapFill(grid, capacity));\n\nconst grid = [\n  [1, 1],\n  [1, 1]\n];\nconst capacity = 5;\nconsole.log(soapFill(grid, capacity));\n\nconst grid = [\n  [0, 0, 0],\n  [1, 1, 0]\n];\nconst capacity = 5;\nconsole.log(soapFill(grid, capacity));\n\nconst grid = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0]\n];\nconst capacity = 5;\nconsole.log(soapFill(grid, capacity));\n\nconst grid = [\n  [0, 0, 1, 1, 1, 1],\n  [1, 1, 1, 1, 1, 1],\n  [1, 1, 1, 1, 1, 1]\n];\nconst capacity = 5;\nconsole.log(soapFill(grid, capacity));\n\nconst grid = [\n  [0, 1, 1, 1, 0],\n  [0, 1, 1, 1, 0],\n  [0, 1, 1, 1, 0]\n];\nconst capacity = 5;\nconsole.log(soapFill(grid, capacity));\n\nconst grid = [\n  [0, 1, 1, 1, 0],\n  [0, 1, 1, 1, 0],\n  [0, 1, 1, 1, 0],\n  [0, 1, 1, 1, 0],\n  [0, 1, 1, 1, 0]\n];\nconst capacity = 5;\nconsole.log(soapFill(grid, capacity));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    const asBits = a.toString(2);\n    const bsBits = b.toString(2);\n\n    const asInt = parseInt(asBits, 2);\n    const bsInt = parseInt(bsBits, 2);\n\n    if (asInt < bsInt) {\n      return -1;\n    }\n    if (asInt > bsInt) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n  const words = [];\n  const index = 0;\n  const sLength = s.length;\n  while (index < sLength) {\n    let word = s.slice(index);\n    while (word.length >= n) {\n      words.push(word.substr(0, n));\n      word = word.substr(n);\n    }\n    index += word.length + 1;\n  }\n  return words;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  const vowel = /[aeiouAEIOU]/\n  const consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/\n  const index = word.length - 1\n  const closestVowel = ''\n  let i = index\n\n  while (i > 0) {\n    if (vowel.test(word.charAt(i)) && consonant.test(word.charAt(i - 1))) {\n      closestVowel = word.charAt(i)\n      break\n    }\n    i--\n  }\n\n  return closestVowel\n}\n\nexport default catchClosestVowel\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  const stack = [];\n  for (const item of lst) {\n    if (item === '(') {\n      stack.push('(');\n    } else if (item === ')') {\n      stack.pop();\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      stack.push(item);\n    }\n  }\n  return stack.length === 0;\n};\n\nconst catchParens2 = (lst) => {\n  const stack = [];\n  for (const item of lst) {\n    if (item === '(') {\n      stack.push('(');\n    } else if (item === ')') {\n      while (stack.length > 0 && stack.pop()!== '(') {\n      }\n      if (stack.length === 0) {\n        return false;\n      }\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      stack.push(item);\n    }\n  }\n  return stack.length === 0;\n};\n\nconst catchParens3 = (lst) => {\n  const stack = [];\n  for (const item of lst) {\n    if (item === '(') {\n      stack.push('(');\n    } else if (item === ')') {\n      while (stack.length > 0 && stack.pop()!== '(') {\n      }\n      if (stack.length === 0) {\n        return false;\n      }\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      stack.push(item);\n    }\n  }\n  return stack.length === 0;\n};\n\nconst catchParens4 = (lst) => {\n  const stack = [];\n  let prev = null;\n  for (const item of lst) {\n    if (item === '(') {\n      stack.push('(');\n    } else if (item === ')') {\n      while (stack.length > 0 && stack.pop()!== '(') {\n      }\n      if (stack.length === 0) {\n        return false;\n      }\n      prev = stack[stack.length - 1];\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      stack.push(item);\n    }\n  }\n  if (prev === '(') {\n    return false;\n  }\n  return stack.length === 0;\n};\n\nconst catchParens5 = (lst) => {\n  const stack = [];\n  let prev = null;\n  for (const item of lst) {\n    if (item === '(') {\n      stack.push('(');\n    } else if (item === ')') {\n      while (stack.length > 0 && stack.pop()!== '(') {\n      }\n      if (stack.length === 0) {\n        return false;\n      }\n      prev = stack[stack.length - 1];\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      stack.push(item);\n    }\n  }\n  if (prev === '(') {\n    return false;\n  }\n  return stack.length === 0;\n};\n\nconst catchParens6 = (lst) => {\n  const stack = [];\n  for (const item of lst) {\n    if (item === '(') {\n      stack.push('(');\n    } else if (item === ')') {\n      while (stack.length > 0 && stack.pop()!== '(') {\n      }\n      if (stack.length === 0) {\n        return false;\n      }\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      stack.push(item);\n    }\n  }\n  return stack.length === 0;\n};\n\nconst catchParens7 = (lst) => {\n  const stack = [];\n  for (const item of lst) {\n    if (item === '(') {\n      stack.push('(');\n    } else if (item === ')') {\n      while (stack.length > 0 && stack.pop()!== '(') {\n      }\n      if (stack.length === 0) {\n        return false;\n      }\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      stack.push(item);\n    }\n  }\n  return stack.length === 0;\n};\n\nconst catchParens8 = (lst) => {\n  const stack = [];\n  let prev = null;\n  for (const item of lst) {\n    if (item === '(') {\n      stack.push('(');\n    } else if (item === ')') {\n      while (stack.length > 0 && stack.pop()!== '(') {\n      }\n      if (stack.length === 0) {\n        return false;\n      }\n      prev = stack[stack.length - 1];\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      stack.push(item);\n    }\n  }\n  if (prev === '(') {\n    return false;\n  }\n  return stack.length === 0;\n};\n\nconst catchParens9 = (lst) => {\n  const stack = [];\n  for (const item of lst) {\n    if (item === '(') {\n      stack.push('(');\n    } else if (item === ')') {\n      while (stack.length > 0 && stack.pop()"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  let max = arr[0],\n      i = 1;\n  while (i < k) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    i++;\n  }\n  return arr.slice(i).sort();\n};\n\nconst test = [\n  [-3, -4, 5],\n  [4, -4, 4],\n  [-3, 2, 1, 2, -1, -2, 1],\n];\n\ntest.forEach(t => {\n  const result = maximal(t[0], t[1]);\n  console.log(`maximal(${t[0]}, ${t[1]}) = ${result}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = (lst.length)? lst.reduce((a, b) => a + b, 0) : 0\n  const odd = lst.reduce((a, b) => a + b % 2, 0)\n  return odd === 0? sum : sum - odd\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  const l = k\n  const r = arr.length - 1\n  let sum = 0\n  let i = 0\n  let j = 0\n\n  for (i = 0, j = 0; i < l; i++, j++) {\n    sum += arr[j]\n  }\n\n  for (i = 0, j = l; i < r; i++, j++) {\n    sum += arr[j]\n  }\n\n  return sum\n}\n\nmodule.exports = lendElement\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  const collatz = () => {\n    let current = n;\n    let next = 0;\n    while (current > 0) {\n      if (current % 2 === 0) {\n        current = current / 2;\n      } else {\n        next = current * 3 + 1;\n        current = next;\n      }\n    }\n    return [current, next];\n  };\n  const odd = [];\n  const even = [];\n  const result = [];\n  const sorted = [];\n  const oddCollatz = collatz();\n  const evenCollatz = collatz();\n  const sortedCollatz = oddCollatz.concat(evenCollatz).sort((a, b) => a - b);\n  while (oddCollatz.length!== sortedCollatz.length) {\n    const currentOdd = oddCollatz.shift();\n    const currentEven = evenCollatz.shift();\n    const nextOdd = sortedCollatz.shift();\n    const nextEven = sortedCollatz.shift();\n    if (nextOdd % 2!== 0) {\n      odd.push(nextOdd);\n      if (nextOdd % 2 === 1) {\n        even.push(nextOdd);\n      }\n    } else {\n      odd.push(nextOdd);\n    }\n    if (nextEven % 2 === 0) {\n      even.push(nextEven);\n    } else {\n      even.push(nextEven);\n      odd.push(nextEven);\n    }\n  }\n  while (odd.length!== sorted.length) {\n    sorted.push(odd.shift());\n  }\n  while (even.length!== sorted.length) {\n    sorted.push(even.shift());\n  }\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    if (!date) {\n        return false;\n    }\n\n    const dateParts = date.split('-');\n\n    if (dateParts.length!== 3) {\n        return false;\n    }\n\n    const month = parseInt(dateParts[1], 10);\n    const day = parseInt(dateParts[2], 10);\n\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\n    const daysInMonth = monthInfo[month].daysInMonth;\n    const dayOfMonth = day;\n\n    if (month === 2) {\n        if (dayOfMonth < 1 || dayOfMonth > 29) {\n            return false;\n        }\n    }\n\n    if (dayOfMonth > daysInMonth) {\n        return false;\n    }\n\n    return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n    const words = txt.split(' ')\n    const list = []\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i]\n        if (word.length < 1) {\n            continue\n        }\n        let hasOdd = false\n        for (let j = 0; j < word.length; j++) {\n            const char = word[j]\n            const ord = char.charCodeAt(0)\n            if ((ord >= 97 && ord <= 122) || (ord >= 65 && ord <= 90)) {\n                hasOdd =!hasOdd\n            }\n        }\n        if (!hasOdd) {\n            list.push(word)\n        }\n    }\n    return list\n}\n\nmodule.exports = disconnectedWords<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  const len = lst.length;\n  let i, j, next;\n  for (i = 0; i < len - 1; i += 1) {\n    next = lst[i + 1];\n    for (j = i; j < len; j += 1) {\n      if (lst[j] > next) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a list of numbers, return whether or not they are sorted in\n  decending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isDecreasing([5]) ➞ true\n  isDecreasing([1, 2, 3, 4, 5]) ➞ true\n  isDecreasing([1, 2, 3, 4, 5, 6]) ➞ true\n  isDecreasing([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isDecreasing([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isDecreasing([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isDecreasing([1, 2, 2, 3, 3, 4]) ➞ true\n  isDecreasing([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDecreasing = (lst) => {\n  const len = lst.length;\n  let i, j, next;\n  for (i = 0; i < len - 1; i += 1) {\n    next = lst[i + 1];\n    for (j = i; j < len; j += 1) {\n      if (lst[j] < next) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a list of numbers, return whether or not they are sorted in\n  increasing order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isIncreasing([5]) ➞ true\n  isIncreasing([1, 2, 3, 4, 5]) ➞ true\n  isIncreasing([1, 2, 3, 4, 5, 6]) ➞ true\n  isIncreasing([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isIncreasing([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isIncreasing([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isIncreasing([1, 2, 2, 3, 3, 4]) ➞ true\n  isIncreasing([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isIncreasing = (lst) => {\n  const len = lst.length;\n  let i, j, next;\n  for (i = 0; i < len - 1; i += 1) {\n    next = lst[i + 1];\n    for (j = i; j < len; j += 1) {\n      if (lst[j] < next) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a list of numbers, return whether or not they are sorted in\n  decending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isReverse([5]) ➞ true\n  isReverse([1, 2, 3, 4, 5]) ➞ true\n  isReverse([1, 2, 3, 4, 5, 6]) ➞ true\n  isReverse([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isReverse([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isReverse([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isReverse([1, 2, 2, 3, 3, 4]) ➞ true\n  isReverse([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isReverse = (lst) => {\n  const len = lst.length;\n  let i, j, next;\n  for (i = 0; i < len - 1; i += 1) {\n    next = lst[i + 1];\n    for (j = i; j < len; j += 1) {\n      if (lst[j] > next) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nexport {\n  isScreen,\n  isDecreasing,\n  isIncreasing,\n  isReverse,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  // check if both intervals are valid\n  if (!(interval1.start <= interval1.end && interval2.start <= interval2.end)) {\n    return 'NO';\n  }\n  \n  // if one of the intervals has length 1, then the other interval should be longer\n  if (interval1.end - interval1.start === 1) {\n    return 'YES';\n  } else if (interval2.end - interval2.start === 1) {\n    return 'NO';\n  }\n  \n  // if the two intervals don't intersect, return 'NO'\n  if (!(interval1.start <= interval2.end && interval2.start <= interval1.end)) {\n    return 'NO';\n  }\n  \n  // get the distance between the two intervals\n  let distance = interval2.end - interval1.start;\n  // get the length of the interval\n  let intervalLength = interval2.end - interval2.start;\n  \n  // if the interval is of length 1, then return 'YES'\n  if (distance === 1) {\n    return 'YES';\n  } else if (intervalLength > 1) {\n    // if the interval length is greater than 1, then check if the overlap is prime\n    for (let i = 1; i < distance; i++) {\n      if (isPrime(i)) {\n        return 'YES';\n      }\n    }\n  }\n  return 'NO';\n};\n\n// if the number is prime, return 'YES'\nconst isPrime = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  let divisor = 2;\n  while (num % divisor === 0) {\n    divisor++;\n  }\n  return divisor > 1;\n};\n\n// tests\nconsole.log(overlap((-1, 1), (-3, -1)));\nconsole.log(overlap((-1, 1), (-3, -1), (-1, 3)));\nconsole.log(overlap((-1, 1), (-3, -1), (-2, -1)));\nconsole.log(overlap((-1, 1), (-3, -1), (-2, 1)));\nconsole.log(overlap((-1, 1), (-3, -1), (-2, 2)));\nconsole.log(overlap((-1, 1), (-3, -1), (-2, -2)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += Math.abs(arr[i]);\n  }\n\n  return result * (arr.reduce((a, b) => a * b, arr) * (arr.reduce((a, b) => a * b, arr) < 0? -1 : 1));\n};\n\nmodule.exports = goadSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const dp = new Array(grid.length).fill(null);\n  dp[0] = grid[0];\n  dp[1] = grid[1];\n\n  for (let i = 2; i < grid.length; i++) {\n    let path = dp[i - 1].slice(0, k);\n    let nxt = grid[i];\n    for (let j = 0; j < k; j++) {\n      if (nxt[j] > path[j]) {\n        path.splice(j, 0, nxt[j]);\n      }\n    }\n    dp[i] = path;\n  }\n  return dp[dp.length - 1].slice(0, k);\n};\n\nconsole.log(minutePath([[1,2,3], [4,5,6], [7,8,9]], 3));\nconsole.log(minutePath([[5,9,3], [4,1,6], [7,8,2]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    const [a, b, c] = [1, 1, 1];\n    let i = 0;\n    let result = [];\n    while (i < n) {\n        result.push(c);\n        a = b;\n        b = c;\n        c = a + b;\n        i++;\n    }\n    return result;\n};\n\nconsole.log(tri(3));<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let a = 1;\n  let b = 0;\n  for (let i = 1; i <= n; i++) {\n    a *= i;\n    b += (i % 2)? a : 0;\n  }\n  return b;\n}\n\nconst num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconsole.log(digit(1));\nconsole.log(digit(234));\nconsole.log(digit(2355));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestedBrackets = string.split('').filter((c) => c === '[')\n  return nestedBrackets.length > 1\n}\n\nconst isNest2 = (string) => {\n  const nestedBrackets = string.split('').filter((c) => c === '[')\n  const isNested = nestedBrackets.length > 1\n  const stack = nestedBrackets.map((c) => c === '['? c : ']')\n  let index = stack.indexOf(stack[0])\n  while (index!== -1) {\n    const isNested2 = stack[index].length === 2\n    if (!isNested &&!isNested2) {\n      return false\n    }\n    index = stack.indexOf(stack[index], index + 1)\n  }\n  return isNested\n}\n\nconst isNest3 = (string) => {\n  const nestedBrackets = string.split('').filter((c) => c === '[')\n  const isNested = nestedBrackets.length > 1\n  const stack = nestedBrackets.map((c) => c === '['? c : ']')\n  let index = stack.indexOf(stack[0])\n  while (index!== -1) {\n    const isNested2 = stack[index].length === 1\n    if (!isNested &&!isNested2) {\n      return false\n    }\n    index = stack.indexOf(stack[index], index + 1)\n  }\n  return isNested\n}\n\nconst isNest4 = (string) => {\n  const nestedBrackets = string.split('').filter((c) => c === '[')\n  const isNested = nestedBrackets.length > 1\n  const stack = nestedBrackets.map((c) => c === '['? c : ']')\n  let index = stack.indexOf(stack[0])\n  while (index!== -1) {\n    const isNested2 = stack[index].length === 2\n    if (!isNested &&!isNested2) {\n      return false\n    }\n    index = stack.indexOf(stack[index], index + 1)\n  }\n  return isNested\n}\n\nconst isNest5 = (string) => {\n  const nestedBrackets = string.split('').filter((c) => c === '[')\n  const isNested = nestedBrackets.length > 1\n  const stack = nestedBrackets.map((c) => c === '['? c : ']')\n  let index = stack.indexOf(stack[0])\n  while (index!== -1) {\n    const isNested2 = stack[index].length === 1\n    if (!isNested &&!isNested2) {\n      return false\n    }\n    index = stack.indexOf(stack[index], index + 1)\n  }\n  return isNested\n}\n\nconst isNest6 = (string) => {\n  const nestedBrackets = string.split('').filter((c) => c === '[')\n  const isNested = nestedBrackets.length > 1\n  const stack = nestedBrackets.map((c) => c === '['? c : ']')\n  let index = stack.indexOf(stack[0])\n  while (index!== -1) {\n    const isNested2 = stack[index].length === 2\n    if (!isNested &&!isNested2) {\n      return false\n    }\n    index = stack.indexOf(stack[index], index + 1)\n  }\n  return isNested\n}\n\nconst isNest7 = (string) => {\n  const nestedBrackets = string.split('').filter((c) => c === '[')\n  const isNested = nestedBrackets.length > 1\n  const stack = nestedBrackets.map((c) => c === '['? c : ']')\n  let index = stack.indexOf(stack[0])\n  while (index!== -1) {\n    const isNested2 = stack[index].length === 3\n    if (!isNested &&!isNested2) {\n      return false\n    }\n    index = stack.indexOf(stack[index], index + 1)\n  }\n  return isNested\n}\n\nconst isNest8 = (string) => {\n  const nestedBrackets = string.split('').filter((c) => c === '[')\n  const isNested = nestedBrackets.length > 1\n  const stack = nestedBrackets.map((c) => c === '['? c : ']')\n  let index = stack.indexOf(stack[0])\n  while (index!== -1) {\n    const isNested2 = stack[index].length === 2\n    if (!isNested &&!isNested2) {\n      return false\n    }\n    index = stack.indexOf(stack[index], index + 1)\n  }\n  return isNested\n}\n\nconst isNest9 = (string) => {\n  const nestedBrackets = string.split('').filter((c) => c === '[')\n  const isNested = nestedBrackets.length > 1\n  const stack = nestedBrackets.map((c) => c === '['? c : ']')\n  let index = stack.indexOf(stack[0])\n  while (index!== -1) {\n    const isNested2 = stack[index].length === 1\n    if (!isNested &&!isNested2) {\n      return false\n    }\n    index = stack.indexOf(stack[index], index + 1)\n  }\n  return isNested\n}\n\nconst isNest10 = (string) => {\n  const nestedBrackets = string.split('').filter((c) => c === '[')\n  const isNested = nestedBrackets."}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  return lst.reduce((acc, x) => {\n    return acc + Math.pow(x, 2);\n  }, 0);\n};\n\nmodule.exports = summarizeSquare;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return isAlphaNumeric(lastChar) &&!containsLetters(txt.slice(0, txt.length - 1));\n};\n\n/*\n  Create a function that returns true if a given string ends with the\n  given ending string and false otherwise.\n  Examples:\n  endsWith(\"string\", \"ing\") ➞ false\n  endsWith(\"string\", \"ing\", \"ing\") ➞ true\n  endsWith(\"string\", \"ing\", \"ing \") ➞ true\n  endsWith(\"string\", \"ing\", \"ing \") ➞ false\n  endsWith(\"string\", \"ing\") ➞ false\n  endsWith(\"string\", \"ing\", \"string\") ➞ false\n  endsWith(\"string\", \"ing\", \"string \") ➞ false\n  endsWith(\"string\", \"ing\", \"string \") ➞ true\n  */\nconst endsWith = (txt, end) => txt.endsWith(end);\n\n/*\n  Create a function that returns true if the last character of a given string is\n  an alphabetical character and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  endsWith(\"apple pie\", \" \") ➞ true\n  endsWith(\"apple pi e\", \" \") ➞ true\n  endsWith(\"apple pi e \", \" \") ➞ true\n  endsWith(\"apple pi e \", \" \") ➞ false\n  endsWith(\"apple pie \", \" \") ➞ true\n  endsWith(\"apple pie \", \" \") ➞ false\n  */\nconst endsWithALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  return isAlphaNumeric(lastChar) &&!containsLetters(txt.slice(0, txt.length - 1));\n};\n\n/*\n  Create a function that returns true if the string contains at least one\n  lowercase letter and false otherwise.\n  Examples:\n  containsLowercaseLetters(\"apple pie\") ➞ false\n  containsLowercaseLetters(\"apple pi e\") ➞ true\n  containsLowercaseLetters(\"apple pi e \") ➞ true\n  containsLowercaseLetters(\"apple pi e \") ➞ false\n  containsLowercaseLetters(\"apple pie \") ➞ true\n  containsLowercaseLetters(\"apple pie \") ➞ false\n  */\nconst containsLowercaseLetters = (txt) => {\n  return txt.split('').every((c) => c.toLowerCase() === c);\n};\n\n/*\n  Create a function that returns true if the string contains at least one\n  uppercase letter and false otherwise.\n  Examples:\n  containsUppercaseLetters(\"apple pie\") ➞ false\n  containsUppercaseLetters(\"apple pi e\") ➞ true\n  containsUppercaseLetters(\"apple pi e \") ➞ true\n  containsUppercaseLetters(\"apple pi e \") ➞ false\n  containsUppercaseLetters(\"apple pie \") ➞ true\n  containsUppercaseLetters(\"apple pie \") ➞ false\n  */\nconst containsUppercaseLetters = (txt) => {\n  return txt.split('').every((c) => c.toUpperCase() === c);\n};\n\n/*\n  Create a function that returns true if the string contains only digits,\n  and false otherwise.\n  Examples:\n  containsDigits(\"123\") ➞ true\n  containsDigits(\"123a\") ➞ false\n  containsDigits(\"1a2\") ➞ false\n  containsDigits(\"1a2\") ➞ true\n  containsDigits(\"123\") ➞ true\n  containsDigits(\"123 \") ➞ false\n  containsDigits(\"123 \") ➞ true\n  containsDigits(\"\") ➞ false\n  */\nconst containsDigits = (txt) => {\n  return txt.split('').every((c) => c.toLowerCase() >= '0' && c.toLowerCase() <= '9');\n};\n\n/*\n  Create a function that returns true if the string contains at least one\n  non-alphanumeric character and false otherwise.\n  Examples:\n  containsNonAlphanumericChars(\"apple pie\") ➞ false\n  containsNonAlphanumericChars(\"apple pi e\") ➞ true\n  containsNonAlphanumericChars(\"apple pi e \") ➞ true\n  containsNonAlphanumericChars(\"apple pi e \") ➞ false\n  containsNonAlphanumericChars(\"apple pie \") ➞ true\n  containsNonAlphanumericChars(\"apple pie \") ➞ false\n  */\nconst containsNonAlphanumericChars = (txt) => {\n  return txt.split('').every((c) =>!isAlphaNumeric(c));\n};\n\n/*\n  Create a function that returns true if the string ends with the\n  given ending string and false otherwise.\n  Examples:\n  endsWith(\"apple pie\", \"pie\") ➞ true\n  endsWith(\"apple pie\", \"pie\", \"pie\") ➞ true\n  endsWith(\"apple pie\", \"pie\", \"pie \") ➞ false\n  endsWith(\"apple pie\", \"pie\", \"pie \") ➞ true\n  endsWith(\"apple pie \", \"pie\", \"pie \") ➞ true\n  endsWith(\"apple pie \", \"pie\", \"pie \") ➞ false\n  */\nconst endsWithALetterAndDigit = (txt, end) => {\n  const endsWithALetter = endsWithALetter(txt);\n  const endsWithDigit"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[index + 1]) {\n      index = i;\n    }\n  }\n  return index;\n}\n\n/**\n  *  Given an array of numbers, return the largest index of a number which\n  *  is greater than the largest index of the element immediately preceding\n  *  it. If no such element exists then return -1. The given array will not\n  *  contain duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 2\n  canStage([1,2,3]) = -1\n  */\nconst canStage2 = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[index + 1]) {\n      index = i;\n    }\n  }\n  return index;\n}\n\n/**\n  *  Given an array of numbers, return the largest index of a number which\n  *  is less than the largest index of the element immediately preceding it.\n  *  If no such element exists then return -1. The given array will not\n  *  contain duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 4\n  canStage([1,2,3]) = -1\n  */\nconst canStage3 = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[index + 1]) {\n      index = i;\n    }\n  }\n  return index;\n}\n\nconst arr = [1,2,3,4,5,6,7,8,9,10,11,12];\n\nconsole.log(canStage(arr));\nconsole.log(canStage2(arr));\nconsole.log(canStage3(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  const maxInt = -Infinity;\n  const minInt = Infinity;\n  const maxIntInLst = lst.reduce((max, elem) => max(elem, maxInt), minInt);\n  const minIntInLst = lst.reduce((min, elem) => min(elem, minInt), maxInt);\n  if (minIntInLst === maxIntInLst) {\n    return null;\n  } else {\n    return [maxIntInLst, minIntInLst];\n  }\n}\n\n/*\n  Calculate the sum of the numbers in a list.\n  If there are no numbers, return null.\n  Examples:\n  sumList([3, 7, 5, 9]) == 15\n  sumList([0]) == null\n  sumList([0, 1, 2, 3]) == 10\n  sumList([3, 7, 5, 9, 0]) == 17\n  sumList([1, 2, 3, 4]) == 9\n  sumList([1, 2, 3, 4, 5]) == 15\n  sumList([3, 7, 5, 9, 0, 1]) == 17\n  sumList([0, 1, 2, 3, 4, 5]) == 10\n  sumList([1, 2, 3, 4, 5]) == 15\n  sumList([1, 2, 3, 4, 5, 6]) == 21\n  sumList([3, 7, 5, 9, 0, 1, 2, 3, 4, 5]) == 17\n  sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 21\n  sumList([3, 7, 5, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 39\n  sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 39\n  */\nconst sumList = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  } else {\n    return lst.reduce((pre, curr) => pre + curr, 0);\n  }\n}\n\nconst test = () => {\n  console.log(bigSmallIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n  console.log(sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      if (a > b) {\n        return a\n      } else {\n        return b\n      }\n    } else {\n      return b\n    }\n  } else {\n    if (typeof b === \"string\") {\n      return b\n    } else {\n      if (a > b) {\n        return a\n      } else {\n        return b\n      }\n    }\n  }\n}\n\nconsole.log(compareOne(1, \"2,3\"))\nconsole.log(compareOne(\"5,1\", \"6\"))\nconsole.log(compareOne(\"1\", 1))\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n    let sum = 0;\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            sum += i;\n        }\n    }\n    return sum === n;\n}\n\nconst check = () => {\n    console.log(`Number of perfect numbers under ${N} are:`);\n    let result = 0;\n    for (let i = 2; i <= N; i++) {\n        if (isAdequateToSumEven(i)) {\n            result++;\n        }\n    }\n    console.log(`${result}`);\n}\n\ncheck();\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  const factorial = (n) => n!== 0? n * extraFactorial(n - 1) : 1;\n  return factorial(n);\n}\n\n/*\n  The Fibonacci numbers are defined as:\n  F(n) = F(n-1) + F(n-2)\n  where n > 0\n\n  For example:\n  >>> fibonacci(3)\n  3\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(7)\n  47\n  */\nconst fibonacci = (n) => {\n  let f1 = 0;\n  let f2 = 1;\n  for (let i = 1; i < n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n}\n\n/*\n  The number of divisors of a number is defined as:\n  d(n) = n * (n-1) * (n-2) *... * 2 * 1\n  where n > 0\n\n  For example:\n  >>> divisor(6)\n  6\n\n  The function will receive an integer as input and should return the number of\n  divisors of this integer.\n  */\nconst divisor = (n) => {\n  const d = (n) => {\n    const divisors = [];\n    for (let i = 1; i < n; i++) {\n      if (n % i === 0) {\n        divisors.push(i);\n        divisors.push(n / i);\n      }\n    }\n    return divisors;\n  };\n  return d(n);\n}\n\n/*\n  The sum of the digits of a number is defined as:\n  s(n) = sum(digit(n))\n  where n > 0\n\n  For example:\n  >>> sum_of_digits(7)\n  7\n\n  The function will receive an integer as input and should return the sum of the\n  digits of this integer.\n  */\nconst sum_of_digits = (n) => {\n  const s = (n) => {\n    const sum = 0;\n    for (let i = 0; i < n; i++) {\n      sum += (n % 10);\n      n = n / 10;\n    }\n    return sum;\n  };\n  return s(n);\n}\n\n/*\n  The number of primes less than a number is defined as:\n  p(n) = n * (n-1) * (n-2) *... * 3 * 2 * 1\n  where n > 0\n\n  For example:\n  >>> prime_less_than(6)\n  3\n\n  The function will receive an integer as input and should return the number of\n  primes less than this integer.\n  */\nconst prime_less_than = (n) => {\n  const p = (n) => {\n    const divisors = [];\n    for (let i = 1; i < n; i++) {\n      if (n % i === 0) {\n        divisors.push(i);\n        divisors.push(n / i);\n      }\n    }\n    const primes = [];\n    for (let i = 0; i < divisors.length; i++) {\n      const num = divisors[i];\n      for (let j = 2; j < num; j++) {\n        if (num % j === 0) {\n          primes.push(j);\n          primes.push(num / j);\n        }\n      }\n    }\n    return primes;\n  };\n  return p(n);\n}\n\n/*\n  The number of divisors of a number is defined as:\n  d(n) = n * (n-1) * (n-2) *... * 2 * 1\n  where n > 0\n\n  For example:\n  >>> divisors(6)\n  6\n\n  The function will receive an integer as input and should return the number of\n  divisors of this integer.\n  */\nconst divisors = (n) => {\n  const d = (n) => {\n    const divisors = [];\n    for (let i = 1; i < n; i++) {\n      if (n % i === 0) {\n        divisors.push(i);\n        divisors.push(n / i);\n      }\n    }\n    return divisors;\n  };\n  return d(n);\n}\n\n/*\n  The number of factors of a number is defined as:\n  f(n) = n * (n-1) * (n-2) *... * p(n)\n  where n > 0 and p(n) is the number of primes less than n\n\n  For example:\n  >>> factors(6)\n  6\n\n  The function will receive an integer as input and should return the number of\n  factors of this integer.\n  */\nconst factors = (n) => {\n  const f = (n) => {\n    const factors = [];\n    for (let i = 1; i < n; i++) {\n      const p = prime_less_than(i);\n      for (let j = 0; j < p.length; j++) {\n        if (i % p[j] === 0) {\n          factors.push(i);\n          factors.push(p[j]);\n        }\n      }\n    }\n    return factors;\n  };\n  return f(n);\n}\n\n/*\n  The number of digits of a number is defined as:\n  d(n) = sum(digit(n))\n  where n > 0\n\n  For example:\n  >>> digits(7)\n  7\n\n  The function will receive an integer as input and should return the number of\n  digits of this integer.\n  */\nconst digits = (n) => {\n  const d = (n) => {\n    const digits = [];\n    for (let i = 0; i < n; i++) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n  const spaces = text.match(/\\s+/g)\n  if (spaces === null) {\n    return text\n  }\n  \n  const textParts = text.split(/\\s+/g)\n  for (let i = 0; i < textParts.length; i++) {\n    if (textParts[i].length > 1) {\n      textParts[i] = textParts[i].replace(/\\s+/g, \"-\")\n    }\n  }\n  \n  return textParts.join(\" \")\n}\n\nexport default repairSpace\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // If the name contains more than three digits, or the name doesn't contain exactly one dot, or the first\n  // character of the substring before the dot isn't a letter, or the substring after the dot isn't one of\n  // the valid extensions, return 'No'\n  if ((file_name.length > 3) || (file_name.indexOf('.')!= 0) || (file_name.indexOf('.') == 1) || (file_name.indexOf('.') == 2)){\n    return 'No'\n  }\n  let first_char = file_name.substring(0, 1);\n  if ((first_char.match(/[A-Za-z]/)) == null) {\n    return 'No'\n  }\n  return 'Yes'\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let total = 0\n  lst.forEach((i, index) => {\n    if (index % 3 === 0) {\n      total += i * i\n    }\n    if (index % 4 === 0) {\n      total += i * i * i\n    }\n  })\n  return total\n}\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCube = (lst) => {\n  let total = 0\n  lst.forEach((i, index) => {\n    if (index % 3 === 0) {\n      total += i * i * i\n    }\n    if (index % 4 === 0) {\n      total += i * i * i * i\n    }\n  })\n  return total\n}\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquareAndCube = (lst) => {\n  let total = 0\n  lst.forEach((i, index) => {\n    if (index % 3 === 0) {\n      total += i * i\n    }\n    if (index % 4 === 0) {\n      total += i * i * i\n    }\n  })\n  return total\n}\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeAndSquare = (lst) => {\n  let total = 0\n  lst.forEach((i, index) => {\n    if (index % 3 === 0) {\n      total += i * i\n    }\n    if (index % 4 === 0) {\n      total += i * i * i\n    }\n  })\n  return total\n}\n\nconst summary = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  if (lst.length === 1) {\n    return lst[0]\n  }\n  return summarizeSquareAndCube(lst) + summarizeCubeAndSquare(lst)\n}\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquareAndCubeAndSquare = (lst) => {\n  let total = 0\n  lst.forEach((i, index) => {\n    if (index % 3 === 0) {\n      total += i * i\n    }\n    if (index % 4 === 0) {\n      total += i * i * i\n    }\n  })\n  return total\n}\n\nconst summary2 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  if (lst.length === 1) {\n    return lst[0]\n  }\n  return summarizeCubeAndSquare(lst) + summarizeSquare(lst)\n}\n\nconst summarizeSquareAndCubeAndSquare = (lst) => {\n  let total = 0\n  lst.forEach((i, index) => {\n    if (index % 3 === 0) {\n      total += i * i\n    }\n    if (index % 4 === 0) {\n      total += i * i * i\n    }\n  })\n  return total\n}\n\nconst summary3 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  if (lst.length === 1) {\n    return lst[0]\n  }\n  return summarizeCube(lst) + summarizeSquare("}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  let len = sentence.length,\n    result = [],\n    prev = 0,\n    cur = 0,\n    isPrime = (n) => n > 1 && n > Math.floor(Math.sqrt(n)) && n % 1 === 0;\n\n  for (let i = 0; i < len; i++) {\n    if (sentence[i] ==='') {\n      result[cur++] = sentence.substring(prev, i);\n      prev = i + 1;\n    }\n  }\n  result[cur++] = sentence.substring(prev, len);\n\n  for (let i = 0; i < result.length; i++) {\n    if (isPrime(result[i].length)) {\n      return result[i];\n    }\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = parseFraction(x);\n  const [xN, nN] = parseFraction(n);\n\n  if (x === n) {\n    return true;\n  } else if (nN === 1 && xN === 1) {\n    return true;\n  } else if (xN === 1 && nN === 1) {\n    return true;\n  } else if (xN === nN) {\n    return true;\n  } else if (xN === 1 && nN === -1) {\n    return true;\n  } else if (xN === -1 && nN === 1) {\n    return true;\n  } else if (xN === -1 && nN === -1) {\n    return true;\n  } else if (nN === 0) {\n    return false;\n  } else if (nN === -1) {\n    return false;\n  } else if (xN === -1) {\n    return false;\n  } else if (nN === 1) {\n    return false;\n  } else if (xN === 1) {\n    return false;\n  }\n\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n    return nums.sort((a, b) => {\n        let a1 = +a;\n        let b1 = +b;\n        if (a1 < b1) {\n            return -1;\n        } else if (a1 > b1) {\n            return 1;\n        } else {\n            let a2 = a1.toString().split('');\n            let b2 = b1.toString().split('');\n            if (a2.length > b2.length) {\n                return 1;\n            } else if (a2.length < b2.length) {\n                return -1;\n            } else {\n                return a2.localeCompare(b2);\n            }\n        }\n    });\n};\n\nconsole.log(holyOrderByPoint([1, 11, -1, -11, -12]));\nconsole.log(holyOrderByPoint([]));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  const len = nums.length\n  const oddLast = nums.filter((n) => {\n    const num = parseInt(n, 10)\n    return (num % 2 === 1) && (num % 10 === 1)\n  })\n  const oddFirst = nums.filter((n) => {\n    const num = parseInt(n, 10)\n    return (num % 2 === 1) && (num % 10 === 0)\n  })\n  return (oddLast.length + oddFirst.length)\n}\n\nconsole.log(extraFilter([15, -73, 14, -15, 9, -3, -3, 45, 21, 109])) // 1\nconsole.log(extraFilter([33, -2, -3, 45, 21, 109])) // 2<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n    let triples = 0\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (i < j && j < k) {\n                    triples += (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1);\n                }\n            }\n        }\n    }\n    return triples;\n}\n\nconst main = () => {\n    let n = parseInt(process.argv[2])\n    console.log(catchMaxTriples(n))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  // check for valid inputs\n  if (!(typeof planet1 ==='string' && planet1!== '') ||!(typeof planet2 ==='string' && planet2!== '')) {\n    return () => {\n      return () => {\n        return () => {\n          return () => {\n            return () => {\n              return () => {\n                return () => {\n                  return () => {\n                    return () => {\n                      return () => {\n                        return () => {\n                          return () => {\n                            return () => {\n                              return () => {\n                                return () => {\n                                  return () => {\n                                    return () => {\n                                      return () => {\n                                        return () => {\n                                          return () => {\n                                            return () => {\n                                              return () => {\n                                                return () => {\n                                                  return () => {\n                                                    return () => {\n                                                      return () => {\n                                                        return () => {\n                                                          return () => {\n                                                            return () => {\n                                                              return () => {\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // return list of all planets between planet1 and planet2\n  let planets = []\n  let current = planet1\n  while (current!== planet2) {\n    planets.push(current)\n    current = planets.find(current => current === planet2)\n  }\n\n  return planets\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const len = lst.length\n  const odd = (num) => (num & 1)? 0 : 1\n  const even = (num) => (num & 1)? 1 : 0\n  const evenSum = (lst) => lst.reduce((acc, num) => acc + even(num), 0)\n  const oddSum = (lst) => lst.reduce((acc, num) => acc + odd(num), 0)\n  const allSum = (lst) => (lst.reduce((acc, num) => acc + num, 0))\n\n  return lst.reduce((acc, num, i) => {\n    if (odd(num)) {\n      if (oddSum(lst.slice(i)) > allSum(lst)) {\n        const nums = [num].concat(lst.slice(i))\n        acc.push(nums.sort((a, b) => a - b)[0])\n      }\n    } else if (evenSum(lst.slice(i)) > allSum(lst)) {\n      const nums = [num].concat(lst.slice(i))\n      acc.push(nums.sort((a, b) => a - b)[0])\n    }\n    return acc\n  }, [])\n}\n\nconsole.log(screenTiltSum([\"a\", \"aa\", \"aaa\", \"aa\", \"aaa\", \"aaa\", \"aa\", \"aaa\", \"aa\", \"aaa\", \"aa\", \"aaa\", \"aa\"]))\n\n/*\n  Write a function that takes a string as parameter and\n  returns a list of its characters. The function should\n  be able to handle the input strings of any length,\n  and the returned list of characters should be sorted\n  alphabetically.\n  For example:\n  assert list_sort(\"a\") => [\"a\"]\n  assert list_sort(\"aa\") => [\"a\", \"a\"]\n  assert list_sort(\"aaa\") => [\"a\", \"a\", \"a\"]\n  assert list_sort(\"aab\") => [\"a\", \"a\", \"a\", \"b\"]\n  assert list_sort(\"aac\") => [\"a\", \"a\", \"a\", \"c\"]\n  assert list_sort(\"aad\") => [\"a\", \"a\", \"a\", \"d\"]\n  assert list_sort(\"aae\") => [\"a\", \"a\", \"a\", \"e\"]\n  assert list_sort(\"abcd\") => [\"a\", \"a\", \"b\", \"c\", \"d\"]\n  assert list_sort(\"abc\") => [\"a\", \"a\", \"b\", \"c\"]\n  assert list_sort(\"ab\") => [\"a\", \"a\", \"b\"]\n  assert list_sort(\"\") => [\"\"]\n  */\nconst list_sort = (str) => {\n  const chars = str.split('')\n  const sorted = chars.sort()\n  return sorted\n}\n\nconsole.log(list_sort(\"a\"))\nconsole.log(list_sort(\"aa\"))\nconsole.log(list_sort(\"aaa\"))\nconsole.log(list_sort(\"aab\"))\nconsole.log(list_sort(\"aac\"))\nconsole.log(list_sort(\"aad\"))\nconsole.log(list_sort(\"aae\"))\nconsole.log(list_sort(\"abcd\"))\nconsole.log(list_sort(\"abc\"))\nconsole.log(list_sort(\"ab\"))\nconsole.log(list_sort(\"\"))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n    if(n % 2 == 0) {\n        return y;\n    } else {\n        return x;\n    }\n};\n\n//Test Cases\nexpect(xOrYttrium(7, 34, 12)).toBe(34);\nexpect(xOrYttrium(15, 8, 5)).toBe(5);\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  const dev = 0;\n  if (!lst.length) return dev;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum * sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [scores, guesses] = game;\n  const [i, j] = Math.min(guesses.length, scores.length);\n  const match = guesses[i] === scores[j];\n  return match? [0, 0, 0, 0, 0, 0] : [Math.abs(scores[j] - guesses[i]), 0, 0, 0, 0, 0];\n}\n\nconst main = () => {\n  let test = [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]];\n  let correct = compare(test, [1, 2, 3, 4, 5, 1]);\n  console.log(correct);\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  extensions = extensions.sort((a, b) => a.localeCompare(b));\n  const cap = extensions[0].split(\"\").map(char => char.toUpperCase()).length;\n  const sm = extensions[0].split(\"\").map(char => char.toLowerCase()).length;\n  const strength = (cap - sm) / cap;\n  return `${class_name}.${extensions[0]}`;\n}\n\nmodule.exports = hardExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n    const a_split = a.split(\"\");\n    const b_split = b.split(\"\");\n    return a_split.some(x => b_split.includes(x)) || a_split.some(x => b_split.includes(rotate(x)));\n};\n\nexport default cycpatternCheck;<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0, oddCount = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      evenCount += 1;\n    } else {\n      oddCount += 1;\n    }\n    num = num >> 1;\n  }\n  return [evenCount, oddCount];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  // use stack to reverse the number\n  let stack = [];\n  for (let i = number; i >= 1; i--) {\n    // pop value off the stack\n    stack.push(i);\n  }\n  let result = '';\n  while (stack.length > 0) {\n    // pop a number off the stack\n    let value = stack.pop();\n    // convert the number to string\n    let roman = toRoman(value);\n    // append the string to result\n    result += roman;\n  }\n  // return the string\n  return result;\n};\n\n/*\n  Given a roman numeral, return its integer equivalent\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> toIntRoman(xix) == 19\n  >>> toIntRoman(clii) == 152\n  >>> toIntRoman(cdxxvi) == 426\n  */\nconst toIntRoman = (roman) => {\n  // use stack to reverse the roman numeral\n  let stack = [];\n  for (let i = roman.length - 1; i >= 0; i--) {\n    // pop value off the stack\n    stack.push(roman[i]);\n  }\n  let result = 0;\n  while (stack.length > 0) {\n    // pop a number off the stack\n    let value = stack.pop();\n    // convert the number to int\n    result += toInt(value);\n  }\n  // return the int\n  return result;\n};\n\n/*\n  Given an integer, return its roman numeral equivalent as a string\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> toRoman(19) == xix\n  >>> toRoman(152) == clii\n  >>> toRoman(426) == cdxxvi\n  */\nconst toRoman = (number) => {\n  // use map to convert the number to string\n  let map = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n    1000: 'M'\n  };\n  let result = '';\n  for (let i = 1; i <= number; i++) {\n    // pop a number off the stack\n    let value = map[i];\n    // append the string to result\n    result += value;\n  }\n  // return the string\n  return result;\n};\n\n/*\n  This challenge is pretty straightforward, but it's worth taking a moment\n  to review the code.\n  To convert a number from one base to another, you'll need to use a stack\n  instead of a map. In the map, we can only use numbers that are present\n  in the map, so you'll need to convert a string of numbers into an integer\n  by using `parseInt`.\n  However, we can only use a stack if we have to. The stack is much more\n  flexible, so we'll need to convert a string of numbers into an integer\n  using the `parseInt` method.\n  First, we'll create a stack of numbers that will be converted into an\n  integer, and then we'll convert a string of numbers into an integer using\n  the `parseInt` method.\n\n  Note that I did not use any variables here, but the stack is just a\n  dictionary of numbers and their equivalents.\n\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  >>> intToRoman(24) == 'xiv'\n  >>> intToRoman(9) == 'ix'\n  >>> intToRoman(6) == 'v'\n  >>> intToRoman(3) == 'iii'\n  >>> intToRoman(1) == 'i'\n  >>> intToRoman(0) == 'i'\n  >>> intToRoman(10) == 'x'\n  >>> intToRoman(7) == 'xv'\n  >>> intToRoman(8) == 'xvii'\n  >>> intToRoman(11) == 'xviii'\n  >>> intToRoman(12) == 'xix'\n  >>> intToRoman(13) == 'xxv'\n  >>> intToRoman(14) == 'xxvi'\n  >>> intToRoman(15) == 'xxvii'\n  >>> intToRoman(16) == 'xxviii'\n  >>> intToRoman(17) == 'xxix'\n  >>> intToRoman(18) == 'xx'\n  >>> intToRoman(9) == 'ix'\n  >>> intToRoman(7) == 'v'\n  >>> intToRoman(5) == 'vii'\n  >>> intToRoman(6) == 'viii'\n  >>> intToRoman(4) == 'iv'\n  >>> intToRoman(2) == 'ii'\n  >>> intToRoman(1) == 'i'\n  >>> intToRoman(0) == 'i'\n  >>> intToRoman(10) == 'x'\n  >>> intToRoman(7) == 'xv'\n  >>> intToRoman(8) == 'xvii'\n  >>> intToRoman(9) == 'xviii'\n  >>> intToRoman(6) == 'xvi'\n  >>> intToRoman(5) == 'xvii'\n  >>> intToRoman(4) == 'xviii'\n  >>> intToRoman(3) == 'xix'\n  >>> intToRoman(2) == 'xx'\n  >>> intToRoman(1) == 'xx'\n  >>> intToRoman(0) == 'xx'\n  >>> intToRoman(10) == 'x'\n  >>> intToRoman(9) == 'xix'\n  >>> intToRoman(8) == 'xxv'\n  >>> intToRoman(7) == 'xxvi'\n  >>> intToRoman(6) == 'xxvii'"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const ab = b - a;\n  const ac = c - a;\n\n  if (ab === 0) {\n    return false;\n  }\n\n  if (ac === 0) {\n    return false;\n  }\n\n  if (Math.abs(ac * ab)!== Math.sqrt(ab * ab * ac * ac)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default goodSlantTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  let result = \"\";\n  let max = 0;\n  let resultCount = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > max) {\n      max = words[i].length;\n      result = words[i];\n      resultCount = 1;\n    } else if (words[i].length === max) {\n      if (resultCount < 1) {\n        resultCount = 1;\n        result = words[i];\n      } else {\n        resultCount++;\n      }\n    }\n    count += words[i].length;\n  }\n  return result;\n};\n\n/*\n  Write a function that takes two strings and returns the string with maximum\n  common characters.\n\n  receiveMax(\"abcabc\", \"abc\") === \"abc\"\n  receiveMax(\"aab\", \"aba\") === \"aba\"\n  receiveMax(\"aaaaaa\", \"aaaaa\") === \"aaaaa\"\n  receiveMax(\"aaaaaa\", \"aaa\") === \"aaaaa\"\n  */\nconst receiveMax = (a, b) => {\n  let result = \"\";\n  let resultCount = 0;\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (b[i] === a[i]) {\n      resultCount++;\n    }\n    count++;\n  }\n  if (resultCount > 0) {\n    result = a;\n  }\n  return result;\n};\n\nconst words = [\n  \"abc\",\n  \"abc\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\",\n  \"aaaaa\","}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  const needCarrot = need / 2\n  const remainingCarrot = remaining - needCarrot\n  \n  return [ number + needCarrot, remainingCarrot ]\n}\n\nconst test = [\n  feed(5, 6, 10),\n  feed(4, 8, 9),\n  feed(1, 10, 10),\n  feed(2, 11, 5)\n]\n\nfor (let t of test) {\n  console.log(`result: ${t[0]} ${t[1]}`)\n}<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n  const result = [];\n  const operatorList = operator.slice();\n  const operandList = operand.slice();\n  let operatorIndex = 0;\n  let operandIndex = 0;\n\n  while (operatorIndex < operatorList.length) {\n    result.push(operatorList[operatorIndex] * operandList[operandIndex]);\n    if (operatorList[operatorIndex] === '*') {\n      operatorIndex++;\n      operandIndex++;\n    } else if (operatorList[operatorIndex] === '+') {\n      operatorIndex++;\n      operandIndex++;\n    } else if (operatorList[operatorIndex] === '-') {\n      operatorIndex++;\n      operandIndex++;\n    } else if (operatorList[operatorIndex] === '**') {\n      operatorIndex++;\n      operandIndex++;\n    } else {\n      operatorIndex++;\n    }\n  }\n  return result;\n};\n\nconst operand = ['2', '3', '4', '5'];\nconst operator = ['*', '+', '-'];\n\nconsole.log(sufficeAlgebra(operator, operand));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  if (s.length === 0) {\n    return s;\n  }\n\n  let r = [];\n  let len = s.length;\n\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      r[i] = s[i].toUpperCase();\n    } else {\n      r[i] = s[i].toLowerCase();\n    }\n  }\n\n  return r.join('');\n};\n\nmodule.exports = resolve;\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  if (text.length === 0) {\n    return null\n  }\n\n  const hasher = crypto.createHash('md5')\n  hasher.update(text, 'utf8')\n  return hasher.digest('hex')\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('') == null\n  */\nconst bowTieToMd5 = (text) => {\n  if (text.length === 0) {\n    return null\n  }\n\n  const hasher = crypto.createHash('md5')\n  hasher.update(text, 'utf8')\n  return hasher.digest('hex')\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowTieToMd5('') == null\n  */\nconst bowTieAndUnbowTiedToMd5 = (text) => {\n  if (text.length === 0) {\n    return null\n  }\n\n  const hasher = crypto.createHash('md5')\n  hasher.update(text, 'utf8')\n  return hasher.digest('hex')\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowTieAndUnbowTiedToMd5('') == null\n  */\nconst bowTieAndUnbowTiedAndBowTiedToMd5 = (text) => {\n  if (text.length === 0) {\n    return null\n  }\n\n  const hasher = crypto.createHash('md5')\n  hasher.update(text, 'utf8')\n  return hasher.digest('hex')\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowTieAndUnbowTiedAndBowTiedToMd5('') == null\n  */\nconst bowTieAndUnbowTiedAndBowTiedAndUnbowTiedToMd5 = (text) => {\n  if (text.length === 0) {\n    return null\n  }\n\n  const hasher = crypto.createHash('md5')\n  hasher.update(text, 'utf8')\n  return hasher.digest('hex')\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowTieAndUnbowTiedAndBowTiedAndUnbowTiedToMd5('') == null\n  */\nconst bowTieAndUnbowTiedAndBowTiedAndUnbowTiedAndUnbowTiedToMd5 = (text) => {\n  if (text.length === 0) {\n    return null\n  }\n\n  const hasher = crypto.createHash('md5')\n  hasher.update(text, 'utf8')\n  return hasher.digest('hex')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  let i = 0,\n    arr = [];\n  while (a <= b) {\n    if (a % 2 === 0) {\n      arr.push(a);\n    }\n    a++;\n  }\n  return arr;\n}\n\nconsole.log(renderInteger(2, 8));\n<|endoftext|>"}
