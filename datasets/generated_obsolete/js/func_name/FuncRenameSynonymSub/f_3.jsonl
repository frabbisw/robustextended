{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "receiveCloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> receiveCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> receiveCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst receiveCloseElements = (numbers, threshold) => {\n  let result = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n        result = true;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  receiveCloseElements\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "freestandingParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> freestandingParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst freestandingParenGroups = (paren_string) => {\n  let groups = [];\n  let i = 0;\n  while (i < paren_string.length) {\n    const paren_open = paren_string[i];\n    let count = 1;\n    while (i + 1 < paren_string.length && paren_open === paren_string[i + 1]) {\n      count += 1;\n      i += 1;\n    }\n    groups.push(paren_string.slice(i + 1, i + count + 1));\n    i += count + 1;\n  }\n  return groups;\n};\n\n// TEST CODE\n/*\nconst freestandingParenGroups = (paren_string) => {\n  let groups = [];\n  let i = 0;\n  while (i < paren_string.length) {\n    const paren_open = paren_string[i];\n    if (paren_open === '(') {\n      if (i + 1 < paren_string.length && paren_string[i + 1] === ')') {\n        groups.push(paren_string.slice(i + 2, i + 3));\n      } else {\n        groups.push(paren_string.slice(i + 1));\n      }\n    } else if (paren_open === ')') {\n      if (i + 1 < paren_string.length && paren_string[i + 1] === '(') {\n        groups.push(paren_string.slice(i + 2, i + 3));\n      } else {\n        groups.push(paren_string.slice(i + 1));\n      }\n    }\n    i += 1;\n  }\n  return groups;\n};\n\nconst freestandingParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('(').map(x => x.slice(0, -1));\n  let stack = [];\n  let groups = [];\n  for (let i = 0; i < paren_list.length; i += 1) {\n    const paren = paren_list[i];\n    if (paren === ')') {\n      if (stack.length === 0) {\n        groups.push(paren_list.slice(0, i));\n        break;\n      }\n      stack.pop();\n    } else if (paren === '(') {\n      stack.push(paren);\n    }\n  }\n  if (stack.length > 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return groups;\n};\n\nconst freestandingParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('(').map(x => x.slice(0, -1));\n  let stack = [];\n  let groups = [];\n  for (let i = 0; i < paren_list.length; i += 1) {\n    const paren = paren_list[i];\n    if (paren === ')') {\n      if (stack.length === 0) {\n        groups.push(paren_list.slice(0, i));\n        break;\n      }\n      stack.pop();\n    } else if (paren === '(') {\n      stack.push(paren);\n    }\n  }\n  if (stack.length > 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return groups;\n};\n\nconst freestandingParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('(').map(x => x.slice(0, -1));\n  let stack = [];\n  let groups = [];\n  for (let i = 0; i < paren_list.length; i += 1) {\n    const paren = paren_list[i];\n    if (paren === ')') {\n      if (stack.length === 0) {\n        groups.push(paren_list.slice(0, i));\n        break;\n      }\n      stack.pop();\n    } else if (paren === '(') {\n      stack.push(paren);\n    }\n  }\n  if (stack.length > 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return groups;\n};\n\nconst freestandingParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('(').map(x => x.slice(0, -1));\n  let stack = [];\n  let groups = [];\n  for (let i = 0; i < paren_list.length; i += 1) {\n    const paren = paren_list[i];\n    if (paren === ')') {\n      if (stack.length === 0) {\n        groups.push(paren_list.slice(0, i));\n        break;\n      }\n      stack.pop();\n    } else if (paren === '(') {\n      stack.push(paren);\n    }\n  }\n  if (stack.length > 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return groups;\n};\n\nconst freestandingParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('(').map(x => x.slice(0, -1));\n  let stack = [];\n  let groups = [];\n  for (let i = 0; i < paren_list.length; i += 1) {\n    const paren = paren_list[i];\n    if (paren === ')') {\n      if (stack.length === 0) {\n        groups.push(paren_list.slice(0, i));\n        break;\n      }\n      stack.pop();\n    } else if (paren === '(') {\n      stack.push(paren);\n    }\n  }\n  if (stack.length > 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return groups;\n};\n\nconst freestandingParenGroups ="}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = number;\n  let decimalPart = 0;\n  if (number > 0) {\n    integerPart = number.toFixed(0);\n    let integerPartDigits = integerPart.length;\n    let decimalPartLength = 0;\n    if (integerPartDigits > 2) {\n      decimalPart = integerPart.substring(integerPartDigits - 2,\n        integerPartDigits);\n      decimalPartLength = decimalPart.length;\n    }\n    if (decimalPartLength === 0) {\n      decimalPart = 0;\n    }\n  }\n  return decimalPart;\n};\n\nmodule.exports = truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let current = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      current += operations[i];\n    } else {\n      current -= operations[i];\n    }\n    if (current < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "entailAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> entailAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst entailAbsoluteDeviation = (numbers) => {\n  const mean = calculateMean(numbers);\n  return (x) => Math.abs(x - mean);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = (average | x - x_mean |)^2\n  >>> entailSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst entailSquaredDeviation = (numbers) => {\n  const mean = calculateMean(numbers);\n  return (x) => Math.pow(x - mean, 2);\n};\n\n/*\n  For a given list of input numbers, calculate Variance of this dataset.\n  Variance is the average squared difference between each element and a\n  centerpoint (mean in this case):\n  Variance = (average | x - x_mean |)^2\n  >>> entailVariance([1.0, 2.0, 3.0, 4.0])\n  1.25\n  */\nconst entailVariance = (numbers) => {\n  const mean = calculateMean(numbers);\n  return (x) => Math.pow(x - mean, 2);\n};\n\n/*\n  Calculate the mean value of a dataset of numbers.\n  >>> calculateMean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst calculateMean = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n};\n\n/*\n  Calculate the maximum value of a dataset of numbers.\n  >>> calculateMax([1.0, 2.0, 3.0, 4.0])\n  4.0\n  */\nconst calculateMax = (numbers) => {\n  return Math.max(...numbers);\n};\n\n/*\n  Calculate the minimum value of a dataset of numbers.\n  >>> calculateMin([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst calculateMin = (numbers) => {\n  return Math.min(...numbers);\n};\n\n/*\n  Calculate the sum of the numbers in a dataset.\n  >>> calculateSum([1.0, 2.0, 3.0, 4.0])\n  9.0\n  */\nconst calculateSum = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x, 0);\n};\n\n/*\n  Calculate the sum of the squares of the numbers in a dataset.\n  >>> calculateSumSquares([1.0, 2.0, 3.0, 4.0])\n  14.0\n  */\nconst calculateSumSquares = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0);\n};\n\n/*\n  Calculate the average value of a dataset of numbers.\n  >>> calculateMean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst calculateMean = (numbers) => {\n  return calculateSum(numbers) / numbers.length;\n};\n\n/*\n  Calculate the average squared value of a dataset of numbers.\n  >>> calculateMeanSquared([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst calculateMeanSquared = (numbers) => {\n  return calculateSumSquares(numbers) / numbers.length;\n};\n\n/*\n  Calculate the standard deviation of a dataset of numbers.\n  >>> calculateStandardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst calculateStandardDeviation = (numbers) => {\n  const variance = calculateVariance(numbers);\n  const average = calculateMean(numbers);\n  return Math.sqrt(variance);\n};\n\n/*\n  Calculate the variance of a dataset of numbers.\n  >>> calculateVariance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst calculateVariance = (numbers) => {\n  return calculateSumSquares(numbers) / (numbers.length - 1);\n};\n\nmodule.exports = {\n  entailAbsoluteDeviation,\n  entailSquaredDeviation,\n  entailVariance,\n  calculateMean,\n  calculateMax,\n  calculateMin,\n  calculateSum,\n  calculateSumSquares,\n  calculateStandardDeviation\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let output = [];\n  let current = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (current.length === 0) {\n      current.push(numbers[i]);\n    } else {\n      current.push(delimeter);\n      current.push(numbers[i]);\n    }\n    output.push(current);\n    current = [];\n  }\n  if (current.length > 0) {\n    output.push(current);\n  }\n  return output;\n};\n\nexport { intersperse };\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_len = paren_string.length;\n  const level = 1;\n  const max_level = paren_string_len + 1;\n  let level_map = new Array(max_level);\n  let i = 0;\n  let j = 0;\n\n  // Parse the string and store the deepest level of parentheses at each position.\n  while (i < paren_string_len) {\n    if (paren_string[i] === '(') {\n      level_map[level] = i;\n      level++;\n    } else if (paren_string[i] === ')') {\n      level--;\n      level_map[level] = i;\n    }\n    i++;\n  }\n\n  // If the deepest level of parentheses is at the end of the string, then the\n  // string is valid, otherwise return the depth of the deepest level of parentheses\n  // found at each position.\n  if (level_map[max_level] === paren_string_len) {\n    return level_map;\n  } else {\n    return level_map;\n  }\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses\n  separated by spaces. For each of the group, output the deepest level of nesting of\n  parentheses.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_len = paren_string.length;\n  const level = 1;\n  const max_level = paren_string_len + 1;\n  let level_map = new Array(max_level);\n  let i = 0;\n  let j = 0;\n\n  // Parse the string and store the deepest level of parentheses at each position.\n  while (i < paren_string_len) {\n    if (paren_string[i] === '(') {\n      level_map[level] = i;\n      level++;\n    } else if (paren_string[i] === ')') {\n      level--;\n      level_map[level] = i;\n    }\n    i++;\n  }\n\n  // If the deepest level of parentheses is at the end of the string, then the\n  // string is valid, otherwise return the depth of the deepest level of parentheses\n  // found at each position.\n  if (level_map[max_level] === paren_string_len) {\n    return level_map;\n  } else {\n    return level_map;\n  }\n};\n\n/* Input to this function is a string represented multiple groups for nested parentheses\n  separated by spaces. For each of the group, output the deepest level of nesting of\n  parentheses.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_len = paren_string.length;\n  const level = 1;\n  const max_level = paren_string_len + 1;\n  let level_map = new Array(max_level);\n  let i = 0;\n  let j = 0;\n\n  // Parse the string and store the deepest level of parentheses at each position.\n  while (i < paren_string_len) {\n    if (paren_string[i] === '(') {\n      level_map[level] = i;\n      level++;\n    } else if (paren_string[i] === ')') {\n      level--;\n      level_map[level] = i;\n    }\n    i++;\n  }\n\n  // If the deepest level of parentheses is at the end of the string, then the\n  // string is valid, otherwise return the depth of the deepest level of parentheses\n  // found at each position.\n  if (level_map[max_level] === paren_string_len) {\n    return level_map;\n  } else {\n    return level_map;\n  }\n};\n\nmodule.exports = {\n  parseNestedParens\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n}\n\n/*\n  Given a list of strings, print the longest common prefix of them.\n  >>> printLongestCommonPrefix([])\n  []\n  >>> printLongestCommonPrefix(['', '', 'a', 'b'])\n  ['a', 'b']\n  >>> printLongestCommonPrefix(['a', 'b', 'c', 'd'])\n  ['a', 'b']\n  */\nconst printLongestCommonPrefix = (strings) => {\n  const max = strings.reduce((max, current) => {\n    return Math.max(max, current.length);\n  }, 0);\n  let result = '';\n  strings.forEach(string => {\n    let firstChar = 0;\n    let lastChar = 0;\n    while (firstChar < string.length && lastChar < max) {\n      if (string[firstChar]!== strings[lastChar].slice(firstChar, lastChar + 1)) {\n        break;\n      }\n      firstChar++;\n      lastChar++;\n    }\n    result = result + string.slice(0, lastChar);\n  });\n  return result;\n}\n\n/*\n  Given a list of strings, print the longest common suffix of them.\n  >>> printLongestCommonSuffix([])\n  []\n  >>> printLongestCommonSuffix(['', '', 'a', 'b'])\n  ['a', 'b']\n  >>> printLongestCommonSuffix(['a', 'b', 'c', 'd'])\n  ['a', 'b']\n  */\nconst printLongestCommonSuffix = (strings) => {\n  const max = strings.reduce((max, current) => {\n    return Math.max(max, current.length);\n  }, 0);\n  let result = '';\n  strings.forEach(string => {\n    let firstChar = 0;\n    let lastChar = 0;\n    while (firstChar < max && lastChar < string.length) {\n      if (string[lastChar]!== strings[firstChar].slice(firstChar, lastChar + 1)) {\n        break;\n      }\n      firstChar++;\n      lastChar++;\n    }\n    result = result + string.slice(lastChar, string.length);\n  });\n  return result;\n}\n\n/*\n  Given a list of strings, print the longest common substring of them.\n  >>> printLongestCommonSubstring([])\n  []\n  >>> printLongestCommonSubstring(['', '', 'a', 'b'])\n  ['a', 'b']\n  >>> printLongestCommonSubstring(['a', 'b', 'c', 'd'])\n  ['ab', 'bc', 'cd']\n  */\nconst printLongestCommonSubstring = (strings) => {\n  const max = strings.reduce((max, current) => {\n    return Math.max(max, current.length);\n  }, 0);\n  let result = '';\n  strings.forEach(string => {\n    let firstChar = 0;\n    let lastChar = 0;\n    while (firstChar < max && lastChar < max) {\n      if (string[firstChar]!== strings[lastChar].slice(firstChar, lastChar + 1)) {\n        break;\n      }\n      firstChar++;\n      lastChar++;\n    }\n    result = result + string.slice(firstChar, lastChar + 1);\n  });\n  return result;\n}\n\n/*\n  Given a list of strings, print the longest common substring of them,\n  up to the given maximum length.\n  >>> printLongestCommonSubstringByLength([], 0)\n  []\n  >>> printLongestCommonSubstringByLength(['', '', 'a', 'b'], 0)\n  []\n  >>> printLongestCommonSubstringByLength(['a', 'b', 'c', 'd'], 1)\n  ['a', 'b', 'c']\n  >>> printLongestCommonSubstringByLength(['a', 'b', 'c', 'd'], 2)\n  ['ab', 'bc', 'cd']\n  */\nconst printLongestCommonSubstringByLength = (strings, maxLength) => {\n  const max = strings.reduce((max, current) => {\n    return Math.max(max, current.length);\n  }, 0);\n  let result = '';\n  strings.forEach(string => {\n    let firstChar = 0;\n    let lastChar = 0;\n    while (firstChar < max && lastChar < max && lastChar - firstChar <= maxLength) {\n      if (string[firstChar]!== strings[lastChar].slice(firstChar, lastChar + 1)) {\n        break;\n      }\n      firstChar++;\n      lastChar++;\n    }\n    result = result + string.slice(firstChar, lastChar + 1);\n  });\n  return result;\n}\n\n/*\n  Given a list of strings, print the longest common prefix of them.\n  >>> printLongestCommonPrefixByLength([], 0)\n  []\n  >>> printLongestCommonPrefixByLength(['', '', 'a', 'b'], 0)\n  []\n  >>> printLongestCommonPrefixByLength(['a', 'b', 'c', 'd'], 1)\n  ['a', 'b']\n  >>> printLongestCommonPrefixByLength(['a', 'b', 'c', 'd'], 2)\n  ['a', 'b', 'c']\n  */\nconst printLongestCommonPrefixByLength = (strings, maxLength) => {\n  const max = strings.reduce((max, current) => {\n    return Math.max(max, current.length);\n  }, 0);\n  let result = '';\n  strings.forEach(string => {\n    let firstChar = 0;\n    let lastChar = 0;\n    while (firstChar < max && lastChar < max && lastChar - firstChar <= maxLength) {\n      if (string[firstChar]!== strings[lastChar].slice(firstChar, lastChar + 1)) {\n        break;"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "kernelIntersection", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> kernelIntersection([])\n  (0, 1)\n  >>> kernelIntersection([1, 2, 3, 4])\n  (10, 24)\n  */\nconst kernelIntersection = (numbers, int) => {\n  if(numbers.length === 0) {\n    return (0, 1)\n  } else {\n    return (numbers.reduce((acc, number) => (acc + number), 0),\n            numbers.reduce((acc, number) => (acc * number), 1))\n  }\n}\n\n/*\n  Given a list of lists, return a list of the intersecions of the lists.\n  >>> kernelUnion([[], [1], [2, 3], [1, 4]])\n  [1, 2, 3, 4]\n  >>> kernelUnion([[], [1], [2, 3, 4], [1, 4], [1, 2, 3]])\n  [1, 2, 3, 4]\n  */\nconst kernelUnion = (numbers) => {\n  return numbers.reduce((acc, number) => (acc.concat(number)), [])\n}\n\n/*\n  Given two lists, return the difference of the lists.\n  >>> kernelDifference([1, 2, 3, 4], [1, 2])\n  [3, 4]\n  >>> kernelDifference([1, 2, 3, 4], [1, 2, 3])\n  [4]\n  >>> kernelDifference([1, 2, 3, 4], [1, 2, 3, 4])\n  []\n  */\nconst kernelDifference = (a, b) => {\n  return a.filter((value) => {\n    return b.indexOf(value) === -1\n  })\n}\n\n/*\n  Given two lists, return the intersection of the lists.\n  >>> kernelIntersection([1, 2, 3, 4], [1, 2])\n  [1, 2]\n  >>> kernelIntersection([1, 2, 3, 4], [1, 2, 3])\n  [1, 2, 3]\n  >>> kernelIntersection([1, 2, 3, 4], [1, 2, 3, 4])\n  [1, 2, 3, 4]\n  */\nconst kernelIntersection = (a, b) => {\n  return a.filter((value) => {\n    return b.indexOf(value)!== -1\n  })\n}\n\n/*\n  Given two lists, return the union of the lists.\n  >>> kernelUnion([1, 2, 3, 4], [1, 2])\n  [1, 2, 3, 4]\n  >>> kernelUnion([1, 2, 3, 4], [1, 2, 3])\n  [1, 2, 3, 4]\n  >>> kernelUnion([1, 2, 3, 4], [1, 2, 3, 4])\n  [1, 2, 3, 4]\n  */\nconst kernelUnion = (a, b) => {\n  return a.concat(b)\n}\n\n/*\n  Given two lists, return the symmetric difference of the lists.\n  >>> kernelSymmetricDifference([1, 2, 3, 4], [1, 2])\n  [3, 4]\n  >>> kernelSymmetricDifference([1, 2, 3, 4], [1, 2, 3])\n  [2, 4]\n  >>> kernelSymmetricDifference([1, 2, 3, 4], [1, 2, 3, 4])\n  [2, 3]\n  */\nconst kernelSymmetricDifference = (a, b) => {\n  return a.filter((value) => {\n    return b.indexOf(value) === -1\n  }).concat(b.filter((value) => {\n    return a.indexOf(value) === -1\n  }))\n}\n\n/*\n  Given two lists, return the difference of the lists.\n  >>> kernelDifference([1, 2, 3, 4], [1, 2])\n  [3, 4]\n  >>> kernelDifference([1, 2, 3, 4], [1, 2, 3])\n  [4]\n  >>> kernelDifference([1, 2, 3, 4], [1, 2, 3, 4])\n  []\n  */\nconst kernelSymmetricDifference = (a, b) => {\n  return kernelDifference(kernelSymmetricDifference(a, b), kernelDifference(b, a))\n}\n\nmodule.exports = {\n  kernelUnion,\n  kernelIntersection,\n  kernelDifference,\n  kernelSymmetricDifference\n}\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolledMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolledMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolledMax = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    const index = acc.indexOf(acc[acc.length - 1]);\n    acc.splice(index, 1);\n    acc.unshift(num);\n    return acc;\n  }, []);\n};\n\nmodule.exports = rolledMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let reversedString = string;\n  let longestPalindrome = 0;\n  let reversedStringEnd = reversedString.length - 1;\n  while (reversedStringEnd > 0) {\n    let isPalindrome = isPalindrome(reversedString);\n    if (isPalindrome) {\n      longestPalindrome = reversedString.length;\n    }\n    reversedString = reversedString.substring(0, reversedStringEnd) + reversedString.substring(reversedStringEnd + 1);\n    reversedStringEnd--;\n  }\n  return reversedString.substring(0, reversedString.length - longestPalindrome);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'catac'\n  >>> findLongestPalindrome('cata')\n  'catac'\n  */\nconst findLongestPalindrome = (string) => {\n  let reversedString = string;\n  let longestPalindrome = 0;\n  while (reversedString.length > longestPalindrome) {\n    let isPalindrome = isPalindrome(reversedString);\n    if (isPalindrome) {\n      longestPalindrome = reversedString.length;\n    }\n    reversedString = reversedString.substring(0, reversedString.length - longestPalindrome) + reversedString.substring(reversedString.length - longestPalindrome, reversedString.length);\n  }\n  return reversedString;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('cata')\n  'catac'\n  */\nconst findLongestPalindrome = (string) => {\n  let reversedString = string;\n  let longestPalindrome = 0;\n  while (reversedString.length > longestPalindrome) {\n    let isPalindrome = isPalindrome(reversedString);\n    if (isPalindrome) {\n      longestPalindrome = reversedString.length;\n    }\n    reversedString = reversedString.substring(0, reversedString.length - longestPalindrome) + reversedString.substring(reversedString.length - longestPalindrome, reversedString.length);\n  }\n  return reversedString;\n}\n\nmodule.exports = {\n  isPalindrome,\n  makePalindrome,\n  findLongestPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "bowedStringedInstrumentXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> bowedStringedInstrumentXor('010', '110')\n  '100'\n  */\nconst bowedStringedInstrumentXor = (a, b) => {\n  let n = a.length;\n  let aStr = a;\n  let bStr = b;\n  for (let i = 0; i < n; i++) {\n    if (aStr[i] === '1') {\n      if (bStr[i] === '1') {\n        aStr = aStr.replace(`1${i}`, '0');\n        bStr = bStr.replace(`1${i}`, '0');\n      } else {\n        aStr = aStr.replace(`1${i}`, '1');\n        bStr = bStr.replace(`1${i}`, '0');\n      }\n    } else if (aStr[i] === '0') {\n      if (bStr[i] === '1') {\n        aStr = aStr.replace(`0${i}`, '1');\n        bStr = bStr.replace(`0${i}`, '1');\n      } else {\n        aStr = aStr.replace(`0${i}`, '0');\n        bStr = bStr.replace(`0${i}`, '0');\n      }\n    }\n  }\n  return aStr + bStr;\n};\n\nconst main = async () => {\n  const a = '010';\n  const b = '110';\n  const result = bowedStringedInstrumentXor(a, b);\n  console.log(result);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "farseeing", "gc": "/* Out of list of strings, return the farseeing one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> farseeing([])\n\n  >>> farseeing(['a', 'b', 'c'])\n  'a'\n  >>> farseeing(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst farseeing = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let current = strings[0]\n  let length = current.length\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length!== length) {\n      return current\n    }\n    current += strings[i]\n  }\n  return current\n}\n\n/**\n  * Returns the longest common prefix of two strings. Return the empty string if\n  * either of the input strings is empty.\n  *\n  * >>> longestCommonPrefix('a', 'b')\n  * 'a'\n  * >>> longestCommonPrefix('a', '')\n  * 'a'\n  * >>> longestCommonPrefix('', 'a')\n  * ''\n  * >>> longestCommonPrefix('aa', 'ab')\n  * 'aa'\n  * >>> longestCommonPrefix('aa', 'aaa')\n  * 'aa'\n  * >>> longestCommonPrefix('ab', 'bb')\n  * 'ab'\n  * >>> longestCommonPrefix('aab', 'aba')\n  * 'a'\n  * >>> longestCommonPrefix('aaa', 'a')\n  * ''\n  * >>> longestCommonPrefix('aaa', 'aa')\n  * ''\n  *\n  * @param {string} a The first string.\n  * @param {string} b The second string.\n  * @return {string} The longest common prefix of the two strings.\n  * @throws {Error} If either of the input strings is empty.\n  * @example\n  * //\n  * // Returns:\n  * // 'ab'\n  * //\n  * // >>> longestCommonPrefix('a', 'b')\n  * // Error:\n  * // The first string is empty.\n  * //\n  * // >>> longestCommonPrefix('a', '')\n  * // Error:\n  * // The second string is empty.\n  * //\n  * // >>> longestCommonPrefix('', 'a')\n  * // Error:\n  * // The first string is empty.\n  * //\n  * // >>> longestCommonPrefix('aa', 'ab')\n  * // 'aa'\n  * //\n  * // >>> longestCommonPrefix('aa', 'aaa')\n  * // 'aa'\n  * //\n  * // >>> longestCommonPrefix('ab', 'bb')\n  * // 'ab'\n  * //\n  * // >>> longestCommonPrefix('aab', 'aba')\n  * // 'a'\n  * //\n  * // >>> longestCommonPrefix('aaa', 'a')\n  * // ''\n  * //\n  * // >>> longestCommonPrefix('aaa', 'aa')\n  * // ''\n  */\nconst longestCommonPrefix = (a, b) => {\n  if (a.length === 0 || b.length === 0) {\n    throw new Error('The first string is empty.')\n  }\n  let prefix = ''\n  let i = 0\n  while (i < a.length && i < b.length && a[i] === b[i]) {\n    i++\n    prefix += a[i]\n  }\n  return prefix\n}\n\nexport default {\n  fartseeing,\n  longestCommonPrefix\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "capitalCoarseDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n    if(a == 0) return b;\n    if(b == 0) return a;\n\n    let tmp = Math.abs(a);\n    while(tmp!= 0) {\n        tmp = Math.floor(tmp / b);\n    }\n\n    return b;\n};\n\nmodule.exports = capitalCoarseDivisor;<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefix", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefix = (string) => {\n  if(string.length === 0)\n    return []\n  return allPrefix(string.slice(1))\n   .concat([string])\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffix('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffix = (string) => {\n  if(string.length === 0)\n    return []\n  return allSuffix(string.slice(1))\n   .concat([string])\n}\n\n/* Return the longest common prefix of the given string.\n   >>> longestCommonPrefix('abcd', 'abc')\n   'a'\n   >>> longestCommonPrefix('abcd', 'abcd')\n   ''\n   >>> longestCommonPrefix('abcd', 'cd')\n   'c'\n   >>> longestCommonPrefix('abcd', 'abcde')\n   ''\n  */\nconst longestCommonPrefix = (string1, string2) => {\n  if(string1.length === 0)\n    return ''\n  if(string2.length === 0)\n    return string1\n  let index = 0\n  while(index < string1.length && index < string2.length && string1[index] === string2[index])\n    index++\n  return string1.slice(0, index)\n}\n\n/* Return the longest common suffix of the given string.\n   >>> longestCommonSuffix('abcd', 'abc')\n   'd'\n   >>> longestCommonSuffix('abcd', 'abcd')\n   ''\n   >>> longestCommonSuffix('abcd', 'cd')\n   'c'\n   >>> longestCommonSuffix('abcd', 'abcde')\n   ''\n  */\nconst longestCommonSuffix = (string1, string2) => {\n  if(string1.length === 0)\n    return ''\n  if(string2.length === 0)\n    return string1\n  let index = 0\n  while(index < string1.length && index < string2.length && string1[string1.length - 1 - index] === string2[string2.length - 1 - index])\n    index++\n  return string1.slice(string1.length - index)\n}\n\n/* Return the longest common prefix and suffix of the given strings.\n   >>> longestCommonPrefixAndSuffix('abcd', 'abc')\n   'a'\n   >>> longestCommonPrefixAndSuffix('abcd', 'abcd')\n   ''\n   >>> longestCommonPrefixAndSuffix('abcd', 'cd')\n   'c'\n   >>> longestCommonPrefixAndSuffix('abcd', 'abcde')\n   ''\n  */\nconst longestCommonPrefixAndSuffix = (string1, string2) => {\n  if(string1.length === 0)\n    return ''\n  if(string2.length === 0)\n    return string1\n  let index = 0\n  while(index < string1.length && index < string2.length && string1[index] === string2[index])\n    index++\n  let prefix = string1.slice(0, index)\n  let suffix = string1.slice(string1.length - index)\n  return prefix + suffix\n}\n\n/* Return the number of different characters in the given string.\n   >>> countDifferentChars('abcd')\n   4\n  */\nconst countDifferentChars = (string) => {\n  let result = 0\n  for(let i = 0; i < string.length; i++)\n    for(let j = 0; j < string.length; j++)\n      if(string[i]!== string[j])\n        result++\n  return result\n}\n\n/* Return the number of characters in the given string.\n   >>> countChars('abcd')\n   4\n  */\nconst countChars = (string) => {\n  return string.length\n}\n\n/* Return the number of words in the given string.\n   >>> countWords('a b c')\n   3\n  */\nconst countWords = (string) => {\n  let result = 0\n  let index = 0\n  while(index < string.length)\n    if(string[index] ==='')\n      result++\n    index++\n  return result\n}\n\n/* Return the number of lines in the given string.\n   >>> countLines('a b c')\n   2\n  */\nconst countLines = (string) => {\n  return string.split('\\n').length\n}\n\n/* Return the number of words in the given string.\n   >>> countWords('a b c')\n   3\n  */\nconst countWords = (string) => {\n  return string.split(' ').length\n}\n\n/* Return the number of lines in the given string.\n   >>> countLines('a b c')\n   2\n  */\nconst countLines = (string) => {\n  return string.split('\\n').length\n}\n\n/* Return a string made of the given number of copies of the given character.\n   >>> repeat('a', 3)\n   'aaa'\n  */\nconst repeat = (string, count) => {\n  let result = ''\n  for(let i = 0; i < count; i++)\n    result += string\n  return result\n}\n\n/* Return a string made of the given number of copies of the given character.\n   >>> repeat('a', 3)\n   'aaa'\n  */\nconst repeat = (string, count) => {\n  let result = ''\n  for(let i = 0; i < count; i++)\n    result += string\n  return result\n}\n\n/* Return a string made of the given number of copies of the given character.\n   >>> repeat('a', 3)\n   'aaa'\n  */\nconst repeat = (string, count) => {\n  let result = ''\n  for(let i = 0; i < count; i++)\n    result += string\n  return result\n}\n\n/* Return a string made of the given number of copies of the given character.\n   >>> repeat('a', 3)\n   'aaa'\n  */\nconst repeat = (string, count) => {\n  let result = ''\n  for(let i = 0; i < count; i++)\n    result += string\n  return result\n}\n\n/* Return a string made"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "bowedStringedInstrumentSuccession", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> bowedStringedInstrumentSuccession(0)\n  '0'\n  >>> bowedStringedInstrumentSuccession(5)\n  '0 1 2 3 4 5'\n  */\nconst bowedStringedInstrumentSuccession = (n) => {\n  let str = '';\n  for (let i = 0; i <= n; i++) {\n    str +='' + (i + 1);\n  }\n  return str;\n};\n\nexport default bowedStringedInstrumentSuccession;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "considerClearcutCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> considerClearcutCharacters('xyzXYZ')\n  3\n  >>> considerClearcutCharacters('Jerry')\n  4\n  */\nconst considerClearcutCharacters = (string) => {\n  const chars = []\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    if (chars.indexOf(char) === -1) {\n      chars.push(char)\n    }\n  }\n  return chars.length\n}\n\n/*\n  Given a string, find out how many times a character is repeated\n  >>> considerRepeatedCharacters('xyzXYZ')\n  2\n  >>> considerRepeatedCharacters('Jerry')\n  3\n  */\nconst considerRepeatedCharacters = (string) => {\n  const count = {}\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    count[char] = (count[char] || 0) + 1\n  }\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out the number of times that it's preceded by a lower case character\n  >>> considerLowerCasePreceded('')\n  0\n  >>> considerLowerCasePreceded('abcdefg')\n  0\n  >>> considerLowerCasePreceded('Jerry')\n  1\n  >>> considerLowerCasePreceded('ZXYZ')\n  2\n  >>> considerLowerCasePreceded('ABCXYZ')\n  3\n  >>> considerLowerCasePreceded('JERRY')\n  4\n  */\nconst considerLowerCasePreceded = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    if (char.toLowerCase() === char) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, find out the number of times that it's followed by a upper case character\n  >>> considerUpperCaseFollowed('')\n  0\n  >>> considerUpperCaseFollowed('abcdefg')\n  0\n  >>> considerUpperCaseFollowed('Jerry')\n  0\n  >>> considerUpperCaseFollowed('ZXYZ')\n  0\n  >>> considerUpperCaseFollowed('ABCXYZ')\n  1\n  >>> considerUpperCaseFollowed('JERRY')\n  2\n  */\nconst considerUpperCaseFollowed = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    if (char.toUpperCase() === char) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, find out how many times a character is repeated\n  >>> considerRepeatedCharacterCount('')\n  0\n  >>> considerRepeatedCharacterCount('xyzXYZ')\n  2\n  >>> considerRepeatedCharacterCount('JERRY')\n  3\n  >>> considerRepeatedCharacterCount('abcdefg')\n  2\n  >>> considerRepeatedCharacterCount('XYZJERRY')\n  4\n  */\nconst considerRepeatedCharacterCount = (string) => {\n  const count = {}\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    count[char] = (count[char] || 0) + 1\n  }\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out the number of times that it's preceded by a lower case character\n  >>> considerLowerCasePreceded('')\n  0\n  >>> considerLowerCasePreceded('abcdefg')\n  0\n  >>> considerLowerCasePreceded('JERRY')\n  1\n  >>> considerLowerCasePreceded('ZXYZ')\n  2\n  >>> considerLowerCasePreceded('ABCXYZ')\n  3\n  >>> considerLowerCasePreceded('JERRY')\n  4\n  */\nconst considerLowerCasePreceded = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    if (char.toLowerCase() === char) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, find out the number of times that it's followed by a upper case character\n  >>> considerUpperCaseFollowed('')\n  0\n  >>> considerUpperCaseFollowed('abcdefg')\n  0\n  >>> considerUpperCaseFollowed('JERRY')\n  0\n  >>> considerUpperCaseFollowed('ZXYZ')\n  0\n  >>> considerUpperCaseFollowed('ABCXYZ')\n  1\n  >>> considerUpperCaseFollowed('JERRY')\n  2\n  */\nconst considerUpperCaseFollowed = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    if (char.toUpperCase() === char) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, find out the number of times that it's preceded by a lower case character\n  >>> considerRepeatedCharacterCount('')\n  0\n  >>> considerRepeatedCharacterCount('xyzXYZ')\n  2\n  >>> considerRepeatedCharacterCount('JERRY')\n  3\n  >>> considerRepeatedCharacterCount('abcdefg')\n  2\n  >>> considerRepeatedCharacterCount('XYZJERRY')\n  4\n  */\nconst considerRepeatedCharacterCount = (string) => {\n  const count = {}\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    count[char] = (count[char] || 0) + 1\n  }\n  return Object.keys(count).length\n}\n\n/*\n  Given a string, find out the number of times that it's followed by a upper case character\n  >>> considerRepeatedCharacterCount('')\n  0\n  >>> considerRepeatedCharacterCount('xyzXYZ')\n  0\n  >>> considerRepeatedCharacterCount('JERRY')\n  0\n  >>> considerRepeatedCharacterCount('ZXYZ')"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/**\n  * @param {string} note\n  * @return {number}\n  *\n  * This function takes one string representing a note and returns its frequency in Hz.\n  * The note can be:\n  *\n  * o - whole note\n  * o| - half note\n  *.| - quarter note\n  *\n  * Here is a legend:\n  *\n  * o - whole note\n  * o| - half note\n  *.| - quarter note\n  *\n  * Examples:\n  *\n  * parseNote('o') -> 261\n  * parseNote('o|') -> 261\n  * parseNote('.|') -> 262\n  * parseNote('d|') -> 261\n  *\n  *\n  */\nconst parseNote = (note) => {\n  if (note === 'o') {\n    return 261;\n  } else if (note === '|') {\n    return 261;\n  } else if (note === '.') {\n    return 262;\n  } else if (note === 'o') {\n    return 261;\n  }\n};\n\n/**\n  * @param {string} note\n  * @return {number}\n  *\n  * This function takes one string representing a note and returns its duration in seconds.\n  * The note can be:\n  *\n  * o - whole note\n  * o| - half note\n  *.| - quarter note\n  *\n  * Here is a legend:\n  *\n  * o - whole note\n  * o| - half note\n  *.| - quarter note\n  *\n  * Examples:\n  *\n  * parseDuration('o') -> 4\n  * parseDuration('o|') -> 2\n  * parseDuration('.|') -> 1\n  * parseDuration('d|') -> 1\n  *\n  */\nconst parseDuration = (duration_string) => {\n  if (duration_string === 'o') {\n    return 4;\n  } else if (duration_string === '|') {\n    return 2;\n  } else if (duration_string === '.') {\n    return 1;\n  }\n};\n\n/**\n  * @param {string} note\n  * @return {number}\n  *\n  * This function takes one string representing a note and returns its semitone.\n  * The note can be:\n  *\n  * o - whole note\n  * o| - half note\n  *.| - quarter note\n  *\n  * Here is a legend:\n  *\n  * o - whole note\n  * o| - half note\n  *.| - quarter note\n  *\n  * Examples:\n  *\n  * parseSemitone('o') -> 0\n  * parseSemitone('o|') -> 1\n  * parseSemitone('.|') -> 2\n  * parseSemitone('d|') -> 1\n  *\n  */\nconst parseSemitone = (note) => {\n  if (note === 'o') {\n    return 0;\n  } else if (note === '|') {\n    return 1;\n  } else if (note === '.') {\n    return 2;\n  }\n};\n\nexport {\n  parseMusic,\n  parseNote,\n  parseDuration,\n  parseSemitone,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  while (string.indexOf(substring)!== -1) {\n    count += 1;\n  }\n  return count;\n};\n\n// ----------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// ----------------------------------------------------------------------------\n\nvar __ = require('underscore');\nvar C = require('./constants');\n\nmodule.exports = {\n  get: (s, sz) => __.times(sz, () => s.charAt(__.random(0, sz - 1))),\n  set: (s, v) => s.charAt(__.random(0, sz - 1)) === '\\u00A0'? s.replace(/\\u00A0/g, v) : s + v,\n  range: (s, e) => __.range(s, e),\n  random: (s, e) => __.random(s, e),\n  isString: () => __.isString(s),\n  isNumber: () => __.isNumber(s),\n  isBoolean: () => __.isBoolean(s),\n  isArray: () => __.isArray(s),\n  isRegExp: () => __.isRegExp(s),\n  isFunction: () => __.isFunction(s),\n  isDate: () => __.isDate(s),\n  isError: () => __.isError(s),\n  isObject: () => __.isObject(s),\n  isEmpty: () => __.isEmpty(s),\n  isUndefined: () => __.isUndefined(s),\n  isNull: () => __.isNull(s),\n  isNumber: () => __.isNumber(s),\n  isEmptyArray: () => __.isEmpty(s),\n  isEmptyObject: () => __.isEmpty(s),\n  isEmptyString: () => __.isEmpty(s),\n  isEmptyRegExp: () => __.isEmpty(s),\n  isEmptyFunction: () => __.isEmpty(s),\n  isEmptyDate: () => __.isEmpty(s),\n  isEmptyError: () => __.isEmpty(s),\n  isEmptyObject: () => __.isEmpty(s),\n  isEmptyString: () => __.isEmpty(s),\n  isEmptyArray: () => __.isEmpty(s),\n  isEmptyObject: () => __.isEmpty(s),\n  isEmptyString: () => __.isEmpty(s),\n  isEmptyArray: () => __.isEmpty(s),\n  isEmptyRegExp: () => __.isEmpty(s),\n  isEmptyFunction: () => __.isEmpty(s),\n  isEmptyDate: () => __.isEmpty(s),\n  isEmptyError: () => __.isEmpty(s),\n  isEmptyObject: () => __.isEmpty(s),\n  isArrayOfNumbers: () => __.isArray(s) && __.every(s, function(n) { return __.isNumber(n); }),\n  isArrayOfStrings: () => __.isArray(s) && __.every(s, function(n) { return __.isString(n); }),\n  isArrayOfObjects: () => __.isArray(s) && __.every(s, function(n) { return __.isObject(n); }),\n  isArrayOfBooleans: () => __.isArray(s) && __.every(s, function(n) { return __.isBoolean(n); }),\n  isArrayOfNumbers: () => __.isArray(s) && __.every(s, function(n) { return __.isNumber(n); }),\n  isArrayOfDates: () => __.isArray(s) && __.every(s, function(n) { return __.isDate(n); }),\n  isArrayOfErrors: () => __.isArray(s) && __.every(s, function(n) { return __.isError(n); }),\n  isArrayOfObjects: () => __.isArray(s) && __.every(s, function(n) { return __.isObject(n); }),\n  isArrayOfStrings: () => __.isArray(s) && __.every(s, function(n) { return __.isString(n); }),\n  isArrayOfArrays: () => __.isArray(s) && __.every(s, function(n) { return __.isArray(n); }),\n  isArrayOfRegExps: () => __.isArray(s) && __.every(s, function(n) { return __.isRegExp(n); }),\n  isArrayOfFunctions: () => __.isArray(s) && __.every(s, function(n) { return __.isFunction(n); }),\n  isArrayOfDate: () => __.isArray(s) && __.every(s, function(n) { return __.isDate(n); }),\n  isArrayOfError: () => __.isArray(s) && __.every(s, function(n) { return __.isError(n); }),\n  isArrayOfObject: () => __.isArray(s) && __.every(s, function(n) { return __.isObject(n); }),\n  isArrayOfString: () => __.isArray(s) && __.every(s, function(n) { return __.isString(n); }),\n  isArrayOfNumber: () => __.isArray(s) && __.every(s, function(n) { return __.isNumber(n); }),\n  isArrayOfBoolean: () => __.isArray(s) && __.every(s, function(n) { return __.isBoolean(n); }),\n  isArrayOfDate: () => __.isArray(s) && __.every(s, function(n) { return __.isDate(n); }),\n  isArrayOfRegExp: () => __.isArray(s) && __.every(s, function(n) { return __.isRegExp("}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sorted = numbers.split(\" \").sort((a, b) => parseInt(a) - parseInt(b));\n  return sorted.join(\" \");\n};\n\n/*\n  Problem 5: Given two strings, return a new string with the characters of the first string replaced by the first char of the second\n  string, and the characters of the second string replaced by the last char of the second string.\n  For example, if one string is 'abcdefg' and the other is 'xyz', the result will be 'bcfgd'\n  >>> sortLetters('abcdefg', 'xyz')\n  'bcfgd'\n  */\nconst sortLetters = (string1, string2) => {\n  const string1Array = string1.split(\"\");\n  const string2Array = string2.split(\"\");\n  let sorted = string1Array.map(char => string2Array[0]).join('');\n  sorted = sorted.concat(string2Array.slice(1).join(''));\n  return sorted;\n};\n\n/*\n  Problem 6: Given a string, return a new string in which all the repeating characters are made unique\n  >>> sortUniqueLetters('bbbcccddddeeef')\n  'bbbcdddeee'\n  */\nconst sortUniqueLetters = (string) => {\n  const array = string.split(\"\");\n  const sorted = array.sort().join(\"\");\n  return sorted;\n};\n\n/*\n  Problem 7: Given two strings, return the string with all the unique characters of the first string followed by the characters of the second\n  string.\n  For example, if one string is 'abracadabra' and the other is 'banana', the result will be 'abracadabrabanana'\n  >>> sortStrings('abracadabra', 'banana')\n  'abracadabrabanana'\n  */\nconst sortStrings = (string1, string2) => {\n  const string1Array = string1.split(\"\");\n  const string2Array = string2.split(\"\");\n  let sorted = string1Array.concat(string2Array);\n  sorted = sorted.sort().join(\"\");\n  return sorted;\n};\n\n/*\n  Problem 8: Given two strings, return the string with all the characters of the first string followed by the characters of the second\n  string. The string is composed of only lowercase letters.\n  For example, if one string is 'abracadabra' and the other is 'banana', the result will be 'abracadabrabinana'\n  >>> sortLowercaseStrings('abracadabra', 'banana')\n  'abracadabrabinana'\n  */\nconst sortLowercaseStrings = (string1, string2) => {\n  const string1Array = string1.split(\"\");\n  const string2Array = string2.split(\"\");\n  let sorted = string1Array.concat(string2Array);\n  sorted = sorted.sort().join(\"\");\n  return sorted;\n};\n\n/*\n  Problem 9: Given two strings, return a new string with all the unique characters of the first string followed by the unique characters of the\n  second string. The strings are composed of lowercase letters only.\n  For example, if one string is 'abracadabra' and the other is 'banana', the result will be 'abracadabrbanana'\n  >>> sortLowercaseStrings('abracadabra', 'banana')\n  'abracadabrbanana'\n  */\nconst sortLowercaseStrings2 = (string1, string2) => {\n  const string1Array = string1.split(\"\");\n  const string2Array = string2.split(\"\");\n  let sorted = string1Array.concat(string2Array);\n  sorted = sorted.sort().join(\"\");\n  return sorted;\n};\n\n/*\n  Problem 10: Given a string, return a new string with all the unique characters of the first string followed by the characters of the\n  second string. The strings are composed of upper case letters only.\n  For example, if one string is 'ABRACADABRA' and the other is 'BANANA', the result will be 'ABRACADABRBANANA'\n  >>> sortUppercaseStrings('ABRACADABRA', 'BANANA')\n  'ABRACADABRBANANA'\n  */\nconst sortUppercaseStrings = (string1, string2) => {\n  const string1Array = string1.split(\"\");\n  const string2Array = string2.split(\"\");\n  let sorted = string1Array.concat(string2Array);\n  sorted = sorted.sort().join(\"\");\n  return sorted;\n};\n\n/*\n  Problem 11: Given two strings, return a new string with all the unique characters of the first string followed by the unique characters of the\n  second string. The strings are composed of both upper and lower case letters.\n  For example, if one string is 'abracadabra' and the other is 'banana', the result will be 'abracadabrbanana'\n  >>> sortStrings('ABRACADABRA', 'BANANA')\n  'ABRACADABRBANANA'\n  */\nconst sortStrings2 = (string1, string2) => {\n  const string1Array = string1.split(\"\");\n  const string2Array = string2.split(\"\");\n  let sorted = string1Array.concat(string2Array);\n  sorted = sorted.sort().join(\"\");\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "receiveClosestChemicalElement", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> receiveClosestChemicalElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst receiveClosestChemicalElement = (numbers) => {\n  const smallest = numbers[0]\n  const largest = numbers[numbers.length - 1]\n  let smallestValue\n  let largestValue\n  let closestPair\n  let distance\n  for (let i = 1; i < numbers.length - 1; i++) {\n    distance = Math.abs(numbers[i] - largest)\n    if (distance < Math.abs(numbers[i] - smallest)) {\n      smallestValue = largest\n      largestValue = smallest\n      closestPair = [smallest, largest]\n      closestPair.push(smallestValue)\n      closestPair.push(largestValue)\n    } else {\n      smallestValue = smallest\n      largestValue = largest\n      closestPair = [smallest, largest]\n      closestPair.push(largestValue)\n      closestPair.push(smallestValue)\n    }\n  }\n  return closestPair\n}\n\nmodule.exports = receiveClosestChemicalElement\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  return numbers.map(x => (x - Math.min(numbers)) / (Math.max(numbers) - Math.min(numbers)));\n};\n\n// Expose these methods as static members\nmodule.exports = rescaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number' &&!isNaN(value));\n};\n\n/**\n  * Filter given list of any python values only for boolean\n  * @param values\n  * @returns {boolean[]}\n  * @example\n  * // For array of booleans\n  * const filterBooleans = (values) => {\n  *   return values.filter((value) => typeof value === 'boolean');\n  * };\n  * // For array of strings\n  * const filterStrings = (values) => {\n  *   return values.filter((value) => typeof value ==='string');\n  * };\n  * // For array of numbers\n  * const filterNumbers = (values) => {\n  *   return values.filter((value) => typeof value === 'number');\n  * };\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => typeof value === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for string\n  * @param values\n  * @returns {string[]}\n  * @example\n  * // For array of booleans\n  * const filterStrings = (values) => {\n  *   return values.filter((value) => typeof value ==='string');\n  * };\n  * // For array of strings\n  * const filterStrings = (values) => {\n  *   return values.filter((value) => typeof value ==='string');\n  * };\n  * // For array of numbers\n  * const filterNumbers = (values) => {\n  *   return values.filter((value) => typeof value === 'number');\n  * };\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value ==='string');\n};\n\n/**\n  * Filter given list of any python values only for object\n  * @param values\n  * @returns {object[]}\n  * @example\n  * // For array of booleans\n  * const filterBooleans = (values) => {\n  *   return values.filter((value) => typeof value === 'object');\n  * };\n  * // For array of strings\n  * const filterStrings = (values) => {\n  *   return values.filter((value) => typeof value === 'object');\n  * };\n  * // For array of numbers\n  * const filterNumbers = (values) => {\n  *   return values.filter((value) => typeof value === 'object');\n  * };\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => typeof value === 'object');\n};\n\n/**\n  * Filter given list of any python values only for array\n  * @param values\n  * @returns {array[]}\n  * @example\n  * // For array of booleans\n  * const filterBooleans = (values) => {\n  *   return values.filter((value) => typeof value === 'object');\n  * };\n  * // For array of strings\n  * const filterStrings = (values) => {\n  *   return values.filter((value) => typeof value === 'object');\n  * };\n  * // For array of numbers\n  * const filterNumbers = (values) => {\n  *   return values.filter((value) => typeof value === 'object');\n  * };\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => typeof value === 'object');\n};\n\n/**\n  * Returns only first element of given list\n  * @param values\n  * @returns {*}\n  * @example\n  * const first = (values) => {\n  *   return values[0];\n  * };\n  */\nconst first = (values) => {\n  return values[0];\n};\n\n/**\n  * Returns all elements of given list except first\n  * @param values\n  * @returns {array}\n  * @example\n  * const last = (values) => {\n  *   return values.slice(1);\n  * };\n  */\nconst last = (values) => {\n  return values.slice(1);\n};\n\n/**\n  * Returns last element of given list\n  * @param values\n  * @returns {*}\n  * @example\n  * const last = (values) => {\n  *   return values[values.length - 1];\n  * };\n  */\nconst lastElement = (values) => {\n  return values[values.length - 1];\n};\n\nexport default {\n  filterIntegers,\n  filterBooleans,\n  filterStrings,\n  filterObjects,\n  filterArrays,\n  first,\n  last,\n  lastElement\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    let length = 0;\n    for (let i = 0; i < string.length; i++) {\n        length += string.charCodeAt(i);\n    }\n    return length;\n};\n\n/**\n  * Return first index of a character in given string\n  * @param {string} string - String to search\n  * @param {string} character - Character to search\n  * @returns {number} - Index of given character\n  */\nconst strIndexOf = (string, character) => {\n    let index = -1;\n    for (let i = 0; i < string.length; i++) {\n        if (string.charCodeAt(i) === character.charCodeAt(0)) {\n            index = i;\n            break;\n        }\n    }\n    return index;\n};\n\n/**\n  * Return last index of a character in given string\n  * @param {string} string - String to search\n  * @param {string} character - Character to search\n  * @returns {number} - Last index of given character\n  */\nconst strLastIndexOf = (string, character) => {\n    let index = -1;\n    for (let i = string.length - 1; i >= 0; i--) {\n        if (string.charCodeAt(i) === character.charCodeAt(0)) {\n            index = i;\n            break;\n        }\n    }\n    return index;\n};\n\n/**\n  * Returns a random character from given string\n  * @param {string} string - String to search\n  * @returns {string} - Random character\n  */\nconst getRandomCharacter = (string) => {\n    return string.charAt(Math.floor(Math.random() * string.length));\n};\n\n/**\n  * Returns a random character from given string\n  * @param {string} string - String to search\n  * @param {number} index - Index to start search from\n  * @returns {string} - Random character\n  */\nconst getRandomCharacterFrom = (string, index) => {\n    return string.charAt(index + Math.floor(Math.random() * (string.length - index)));\n};\n\nmodule.exports = {\n    getRandomCharacter,\n    getRandomCharacterFrom,\n    strlen,\n    strIndexOf,\n    strLastIndexOf,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "bigDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> bigDivisor(15)\n  5\n  */\nconst bigDivisor = (n) => {\n  let a = n, b = 1;\n  while (a % b === 0) {\n    a = b;\n    b++;\n  }\n  return b;\n};\n\n// Find the largest number that divides n evenly, smaller than n\nconst smallDivisor = (n) => {\n  let a = n, b = 1;\n  while (a % b!== 0) {\n    a = b;\n    b++;\n  }\n  return b;\n};\n\n// For a given number n, find the largest number that divides n evenly, smaller than n\nconst divide = (n) => {\n  let a = n, b = 1;\n  while (a % b!== 0) {\n    a = b;\n    b++;\n  }\n  return a;\n};\n\nconst isPrime = (n) => {\n  let a = n, b = 1;\n  while (a % b!== 0) {\n    a = b;\n    b++;\n  }\n  return a === n;\n};\n\n// Find the largest number that divides n evenly, smaller than n\nconst prime = (n) => {\n  let a = n, b = 1;\n  while (isPrime(a) === false) {\n    a = b;\n    b++;\n  }\n  return a;\n};\n\nconst findPrimes = (n) => {\n  let p = [], b = 1;\n  while (b <= n) {\n    if (isPrime(b)) {\n      p.push(b);\n    }\n    b++;\n  }\n  return p;\n};\n\n// Find the smallest prime number smaller than n\nconst primeSmaller = (n) => {\n  let p = findPrimes(n);\n  return p[0];\n};\n\n// Find the smallest prime number larger than n\nconst primeLarger = (n) => {\n  let p = findPrimes(n);\n  return p[p.length - 1];\n};\n\n// For a given number n, find the largest prime number that divides n evenly, smaller than n\nconst primeDivisor = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p % b!== 0) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// For a given number n, find the largest prime number that divides n evenly, smaller than n\nconst primeSmallerDivisor = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p % b!== 0) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// For a given number n, find the largest prime number that divides n evenly, smaller than n\nconst primeSmallerDivisor2 = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p % b === 0) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// For a given number n, find the largest prime number that divides n evenly, smaller than n\nconst primeLargerDivisor = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p % b!== 0) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// For a given number n, find the largest prime number that divides n evenly, smaller than n\nconst primeLargerDivisor2 = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p % b === 0) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// Find the smallest prime number larger than n\nconst primeLarger = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p < b) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// Find the smallest prime number larger than n\nconst primeLarger2 = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p <= b) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// Find the largest prime number larger than n\nconst primeLarger3 = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p < b) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// Find the smallest prime number larger than n\nconst primeLarger4 = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p <= b) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// Find the largest prime number larger than n\nconst primeLarger5 = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p > b) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// Find the largest prime number larger than n\nconst primeLarger6 = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p >= b) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// Find the smallest prime number larger than n\nconst primeLarger7 = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p <= b) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// Find the smallest prime number larger than n\nconst primeLarger8 = (n) => {\n  let p = prime(n);\n  let a = n, b = 1;\n  while (p > b) {\n    a = b;\n    b++;\n  }\n  return p;\n};\n\n// Find the largest prime number larger than n\n"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  if (n === 0) return []\n  const factors = []\n  const d = 2\n  const nf = (n) => {\n    const factors2 = []\n    while (d * d <= n) {\n      if (n % d === 0) {\n        factors2.push(d)\n        n = n / d\n      }\n      d++\n    }\n    if (n > 1) factors2.push(n)\n    return factors2\n  }\n  while (n > 1) {\n    const factors2 = nf(n)\n    for (let i = 0; i < factors2.length; i++) {\n      factors.push(factors2[i])\n    }\n    n = 1\n  }\n  return factors\n}\n\n/* Return all factors of a given number.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst allFactors = (n) => {\n  if (n === 0) return []\n  const factors = []\n  const d = 2\n  const nf = (n) => {\n    const factors2 = []\n    while (d * d <= n) {\n      if (n % d === 0) {\n        factors2.push(d)\n        n = n / d\n      }\n      d++\n    }\n    if (n > 1) factors2.push(n)\n    return factors2\n  }\n  while (n > 1) {\n    const factors2 = nf(n)\n    for (let i = 0; i < factors2.length; i++) {\n      factors.push(factors2[i])\n    }\n    n = 1\n  }\n  return factors\n}\n\nconst test = () => {\n  console.log(factorize(8))\n  console.log(factorize(25))\n  console.log(factorize(70))\n  console.log(allFactors(8))\n  console.log(allFactors(25))\n  console.log(allFactors(70))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "getRidOfDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> getRidOfDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst getRidOfDuplicate = (numbers) => {\n  const result = [];\n  const seen = {};\n  const removeDuplicates = (arr) => {\n    const i = 0;\n    const j = arr.length - 1;\n    while (i < j) {\n      if (seen[arr[i]]) {\n        result.push(arr[i]);\n        delete seen[arr[i]];\n        j--;\n      } else {\n        i++;\n      }\n    }\n    return result;\n  };\n  return removeDuplicates(numbers);\n};\n\nconst test = require('tape');\ntest('removeDuplicate', function(t) {\n  t.deepEqual(getRidOfDuplicate([1, 2, 3, 2, 4]), [1, 3, 4], 'no duplicates');\n  t.deepEqual(getRidOfDuplicate([1, 2, 3, 4, 5, 3, 3, 2, 4, 5, 6, 3]), [1, 2, 3, 4, 5, 6],'some duplicates');\n  t.end();\n});\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "impudentCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> impudentCase('Hello')\n  'hELLO'\n  */\nconst impudentCase = (string) => {\n  if(!string) {\n    return string;\n  }\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/**\n  * Takes a string and replaces all '_' characters with'' characters.\n  * '_' characters are used as separators in a string in python, but not\n  * in Javascript.\n  *\n  * @param {string} string The string to be manipulated.\n  * @return {string} The string with '_' replaced with'' characters.\n  *\n  * @example\n  * For a given string, flip underscores to spaces:\n  * >>> impudentUnderscore('hello_world')\n  * 'hello world'\n  */\nconst impudentUnderscore = (string) => {\n  if(!string) {\n    return string;\n  }\n  return string.replace(/[_]/g,'');\n};\n\n/**\n  * Takes a string and replaces all '-' characters with '_' characters.\n  * '-' characters are used as separators in a string in python, but not\n  * in Javascript.\n  *\n  * @param {string} string The string to be manipulated.\n  * @return {string} The string with '-' replaced with '_' characters.\n  *\n  * @example\n  * For a given string, flip dashes to underscores:\n  * >>> impudentDash('hello-world')\n  * 'hello_world'\n  */\nconst impudentDash = (string) => {\n  if(!string) {\n    return string;\n  }\n  return string.replace(/-/g, '_');\n};\n\n/**\n  * Takes a string and replaces all \" \" characters with \"_\" characters.\n  * \" \" characters are used as separators in a string in python, but not\n  * in Javascript.\n  *\n  * @param {string} string The string to be manipulated.\n  * @return {string} The string with \" \" replaced with \"_\" characters.\n  *\n  * @example\n  * For a given string, flip spaces to underscores:\n  * >>> impudentSpace('hello world')\n  * 'hello_world'\n  */\nconst impudentSpace = (string) => {\n  if(!string) {\n    return string;\n  }\n  return string.replace(/ /g, '_');\n};\n\nmodule.exports = {\n  impudentCase,\n  impudentUnderscore,\n  impudentDash,\n  impudentSpace\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  strings.forEach((s) => {\n    result += s\n  })\n  return result\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst reverse = (strings) => {\n  strings.reverse()\n  return strings\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst map = (strings, f) => {\n  return strings.map(f)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst reduce = (strings, f, initial) => {\n  return strings.reduce(f, initial)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst reduceRight = (strings, f, initial) => {\n  return strings.reduceRight(f, initial)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst take = (strings, n) => {\n  return strings.slice(0, n)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst drop = (strings, n) => {\n  return strings.slice(n)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concat = (strings) => {\n  return strings.concat()\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst join = (strings, separator) => {\n  return strings.join(separator)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst reverseMap = (strings, f) => {\n  return strings.map(f).reverse()\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst slice = (strings, start, end) => {\n  return strings.slice(start, end)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst compact = (strings) => {\n  return strings.compact()\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst indexOf = (strings, search) => {\n  return strings.indexOf(search)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst contains = (strings, search) => {\n  return strings.contains(search)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst filter = (strings, f) => {\n  return strings.filter(f)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst forEach = (strings, f) => {\n  return strings.forEach(f)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst reduceRight = (strings, f, initial) => {\n  return strings.reduceRight(f, initial)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst mapRight = (strings, f) => {\n  return strings.mapRight(f)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst reduce = (strings, f, initial) => {\n  return strings.reduce(f, initial)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst reduceLeft = (strings, f, initial) => {\n  return strings.reduceLeft(f, initial)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst mapLeft = (strings, f) => {\n  return strings.mapLeft(f)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst find = (strings, search) => {\n  return strings.find(search)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst findIndex = (strings, search) => {\n  return strings.findIndex(search)\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst flatten = (strings) => {\n  return strings.flatten()"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const output = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      output.push(strings[i]);\n    }\n  }\n  return output;\n};\n\nexport default filterByPrefix;\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "catchPositive", "gc": "/*Return only positive numbers in the list.\n  >>> catchPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst catchPositive = (l) => {\n  let list = l.slice();\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] <= 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  return list;\n};\n\nconsole.log(catchPositive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(catchPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPremier", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPremier(6)\n  false\n  >>> isPremier(101)\n  true\n  >>> isPremier(11)\n  true\n  >>> isPremier(13441)\n  true\n  >>> isPremier(61)\n  true\n  >>> isPremier(4)\n  false\n  >>> isPremier(1)\n  false\n  */\nconst isPremier = (n) => {\n  const isPrime = (n) => {\n    if (n === 1) return false\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  let i = 2\n  while (i < n) {\n    if (isPrime(i) && isPrime(n - i)) return true\n    i++\n  }\n  return false\n}\n\nexport default isPremier\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const oddN = (n) => (n % 2)!== 0;\n  const allEven = (xs) => xs.every(x => x % 2 === 0);\n  const largest = (xs) => Math.max(...xs);\n\n  if (oddN(xs.length)) {\n    throw new Error('input must be even and non zero');\n  }\n\n  if (allEven(xs)) {\n    return Math.ceil(-largest(xs) / largest(xs));\n  } else {\n    return largest(xs) - largest(xs) / largest(xs);\n  }\n}\n\n/*\n  Evaluate a polynomial at a point\n  >>> round(evaluate(poly([1, 2, 3, 4]), 2), 2)\n  4.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), 5), 2)\n  2.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -2), 2)\n  4.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -5), 2)\n  2.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -10), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -20), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -30), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -40), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -50), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -60), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -70), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -80), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -90), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -100), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -200), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -300), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -400), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -500), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -600), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -700), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -800), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -900), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1000), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1010), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1020), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1030), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1040), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1050), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1060), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1070), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1080), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1090), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1100), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1110), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1120), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1130), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1140), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1150), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1160), 2)\n  0.0\n  >>> round(evaluate(poly([1, 2, 3, 4]), -1170), 2)\n  0.0\n  "}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = []\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 === 0){\n      sorted.push(l[i])\n    } else {\n      sorted.push(l[i])\n    }\n  }\n  return sorted\n}\n\nmodule.exports = sortThird\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "alone", "gc": "/*Return sorted alone elements in a list\n  >>> alone([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst alone = (l) => {\n  const out = [];\n  for (const i of l) {\n    if (l.indexOf(i) === -1) {\n      out.push(i);\n    }\n  }\n  return out;\n};\n\n/**\n  * Return all the elements of a list\n  * @param {Array} l\n  * @return {Array}\n  */\nconst all = (l) => l.concat([]);\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @param {Array} except\n  * @return {Array}\n  */\nconst except = (l, except) => {\n  return l.filter(x => except.indexOf(x) === -1);\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @return {Array}\n  */\nconst not = (l) => {\n  return except(l, all(l));\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @param {Array} except\n  * @return {Array}\n  */\nconst intersect = (l, except) => {\n  return l.filter(x => except.indexOf(x) === -1);\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @return {Array}\n  */\nconst diff = (l, except) => {\n  return except(l, all(l));\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @return {Array}\n  */\nconst union = (l, except) => {\n  return except(l, all(l));\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @return {Array}\n  */\nconst xor = (l, except) => {\n  return union(l, all(l));\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @return {Array}\n  */\nconst diffset = (l, except) => {\n  return except(l, all(l));\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @return {Array}\n  */\nconst unionset = (l, except) => {\n  return except(l, all(l));\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @return {Array}\n  */\nconst xorset = (l, except) => {\n  return unionset(l, all(l));\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @return {Array}\n  */\nconst diffsetset = (l, except) => {\n  return except(l, all(l));\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @return {Array}\n  */\nconst unionsetset = (l, except) => {\n  return except(l, all(l));\n};\n\n/**\n  * Return a list of all the elements of a list except the ones which are in l\n  * @param {Array} l\n  * @return {Array}\n  */\nconst xorsetset = (l, except) => {\n  return except(l, all(l));\n};\n\nmodule.exports = {\n  all,\n  alone,\n  except,\n  not,\n  intersect,\n  diff,\n  union,\n  xor,\n  diffset,\n  unionset,\n  xorset,\n  diffsetset,\n  unionsetset,\n  xorsetset\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "soapElement", "gc": "/*Return maximum element in the list.\n  >>> soapElement([1, 2, 3])\n  3\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst soapElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> soapElement([])\n  0\n  >>> soapElement([1])\n  1\n  >>> soapElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  >>> soapElement([1, 2, 3, 4])\n  4\n  >>> soapElement([1, 2, 3, 4, 5])\n  5\n  >>> soapElement([1, 2, 3, 4, 5, 6])\n  6\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  11\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  12\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  13\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  14\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  15\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  16\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  17\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  18\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  19\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  20\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  21\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  22\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  23\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  24\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  25\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  26\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  27\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  28\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  29\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  30\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  31\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  32\n  >>> soapElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.filter((x, i) => i % 2 === 0).sort((a, b) => a - b);\n};\n\nexport default sortEven;<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[0] + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0] + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[0] + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic,\n  encode_cyclic,\n  decode_cyclic\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "premierFib", "gc": "/*\n  premierFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> premierFib(1)\n  2\n  >>> premierFib(2)\n  3\n  >>> premierFib(3)\n  5\n  >>> premierFib(4)\n  13\n  >>> premierFib(5)\n  89\n  */\nconst premierFib = (n) => {\n  const fib = fibonacci(n)\n  return (n === 1)? fib : ((n === 2)? fib + fib : fib + fib + fib)\n}\n\nmodule.exports = premierFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "tripleTotalToZero", "gc": "/*\n  tripleTotalToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleTotalToZero([1, 3, 5, 0])\n  false\n  >>> tripleTotalToZero([1, 3, -2, 1])\n  true\n  >>> tripleTotalToZero([1, 2, 3, 7])\n  false\n  >>> tripleTotalToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleTotalToZero([1])\n  false\n  */\nconst tripleTotalToZero = (l) => {\n    const sum = l.reduce((p, c) => p + c, 0)\n    if (sum === 0) {\n        return l.length === 3\n    } else {\n        return false\n    }\n}\n\nexport default tripleTotalToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "cableCarRaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst cableCarRaceCollision = (n) => {\n  return (cars) => {\n    cars.forEach((car, index) => {\n      var direction = car.direction;\n      cars.forEach((otherCar, otherCarIndex) => {\n        if (otherCar.direction === direction && index!== otherCarIndex) {\n          return;\n        }\n\n        // Check for the collision.\n        if (car.location.x + car.width === otherCar.location.x) {\n          return;\n        }\n\n        if (car.location.x <= otherCar.location.x + otherCar.width) {\n          car.collided = true;\n          otherCar.collided = true;\n          return;\n        }\n      });\n    });\n    return cars.reduce((total, car) => {\n      if (car.collided) {\n        return total + 1;\n      }\n      return total;\n    }, 0);\n  };\n};\n\ncableCarRaceCollision(2).should.equal(2);\ncableCarRaceCollision(4).should.equal(4);\ncableCarRaceCollision(6).should.equal(6);\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = [],\n      i = 0,\n      l = l.length;\n  for (; i < l; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst evens = (n) => {\n  return Array.from({ length: n }, (x) => x * 2);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst odds = (n) => {\n  return Array.from({ length: n }, (x) => x * 2 + 1);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst multiples = (n) => {\n  return Array.from({ length: n }, (x) => x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst divisors = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x));\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst divisorTriples = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x));\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst factorTriples = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst divisorQuadruples = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst factorQuadruples = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst divisorQuintuplets = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst factorQuintuplets = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst divisorSeptuplets = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x * x * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst factorSeptuplets = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x * x * x * x * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst divisorOctuplets = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x * x * x * x * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst factorOctuplets = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x * x * x * x * x * x * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst divisorNonagonals = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x * x * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst factorNonagonals = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x * x * x * x * x * x * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst divisorSextuplets = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x * x * x * x * x * x * x * x);\n};\n\n/**\n  * @param {number} n\n  * @return {number[]}\n  */\nconst factorSextuplets = (n) => {\n  return Array.from({ length: n }, (x) => x * Math.sqrt(x) * Math.sqrt(x) * x * x * x *"}
{"task_id": "JavaScript/43", "prompt": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "copulateUnionToZero", "gc": "/*\n  copulateUnionToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> copulateUnionToZero([1, 3, 5, 0])\n  false\n  >>> copulateUnionToZero([1, 3, -2, 1])\n  false\n  >>> copulateUnionToZero([1, 2, 3, 7])\n  false\n  >>> copulateUnionToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> copulateUnionToZero([1])\n  false\n  */\nconst copulateUnionToZero = (l) => {\n  // If the list is empty, return false\n  if (l.length === 0) {\n    return false\n  }\n  // If the list has length 1, return true if the element is zero\n  if (l.length === 1) {\n    return l[0] === 0\n  }\n  // Iterate through the list to find the two elements that sum to zero\n  let zeroCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      zeroCount += 1\n    }\n  }\n  // If the list contains two elements that sum to zero, return false\n  if (zeroCount === 2) {\n    return false\n  }\n  // If the list contains two elements that sum to zero, return true\n  return true\n}\n\nexport default copulateUnionToZero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "varietyBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> varietyBase(8, 3)\n  '22'\n  >>> varietyBase(8, 2)\n  '1000'\n  >>> varietyBase(7, 2)\n  '111'\n  */\nconst varietyBase = (x, base) => {\n  let y = ''\n  while (x > 0) {\n    y = `${y}${x % base}`\n    x = Math.floor(x / base)\n  }\n  return y\n}\n\n/*\n  Convert number x to base.\n  Return value is the number of digits in the string representation of x\n  in base 10.\n  >>> varietyBase(8, 2)\n  4\n  >>> varietyBase(2, 8)\n  2\n  >>> varietyBase(4, 8)\n  4\n  >>> varietyBase(4, 16)\n  4\n  >>> varietyBase(4, 256)\n  4\n  */\nconst varietyBaseDigits = (x, base) => {\n  let y = ''\n  while (x > 0) {\n    y = `${y}${x % base}`\n    x = Math.floor(x / base)\n  }\n  return y.length\n}\n\n/*\n  Convert number x to base.\n  Return value is the string representation of x\n  in base base.\n  >>> varietyBase(8, 2)\n  '10'\n  >>> varietyBase(2, 8)\n  '2'\n  >>> varietyBase(4, 8)\n  '400'\n  >>> varietyBase(4, 16)\n  '111100'\n  >>> varietyBase(4, 256)\n  '11110000'\n  */\nconst varietyBaseString = (x, base) => {\n  let y = ''\n  while (x > 0) {\n    y = `${y}${x % base}`\n    x = Math.floor(x / base)\n  }\n  return y\n}\n\n/*\n  Convert number x to base.\n  Return value is the string representation of x\n  in base base, with trailing zeros.\n  >>> varietyBase(8, 2)\n  '100'\n  >>> varietyBase(2, 8)\n  '2'\n  >>> varietyBase(4, 8)\n  '400'\n  >>> varietyBase(4, 16)\n  '111100'\n  >>> varietyBase(4, 256)\n  '11110000'\n  */\nconst varietyBaseStringZeros = (x, base) => {\n  let y = ''\n  while (x > 0) {\n    y = `${y}${x % base}`\n    x = Math.floor(x / base)\n  }\n  return y + '0' * (y.length % base)\n}\n\n/*\n  Convert number x to base.\n  Return value is the string representation of x\n  in base base, with leading zeros.\n  >>> varietyBase(8, 2)\n  '100'\n  >>> varietyBase(2, 8)\n  '2'\n  >>> varietyBase(4, 8)\n  '400'\n  >>> varietyBase(4, 16)\n  '111100'\n  >>> varietyBase(4, 256)\n  '11110000'\n  */\nconst varietyBaseStringZerosLeft = (x, base) => {\n  let y = ''\n  while (x > 0) {\n    y = `${y}${x % base}`\n    x = Math.floor(x / base)\n  }\n  return '0' + y\n}\n\n/*\n  Convert number x to base.\n  Return value is the string representation of x\n  in base base, with leading and trailing zeros.\n  >>> varietyBase(8, 2)\n  '00100'\n  >>> varietyBase(2, 8)\n  '2'\n  >>> varietyBase(4, 8)\n  '400'\n  >>> varietyBase(4, 16)\n  '111100'\n  >>> varietyBase(4, 256)\n  '11110000'\n  */\nconst varietyBaseStringZerosLeftAndRight = (x, base) => {\n  let y = ''\n  while (x > 0) {\n    y = `${y}${x % base}`\n    x = Math.floor(x / base)\n  }\n  return '0' + y + '0' * (y.length % base)\n}\n\n/*\n  Convert number x to base.\n  Return value is the string representation of x\n  in base base, with leading and trailing zeros,\n  with trailing zeros.\n  >>> varietyBase(8, 2)\n  '00100'\n  >>> varietyBase(2, 8)\n  '2'\n  >>> varietyBase(4, 8)\n  '400'\n  >>> varietyBase(4, 16)\n  '111100'\n  >>> varietyBase(4, 256)\n  '11110000'\n  */\nconst varietyBaseStringZerosLeftAndRightAndTrailingZeros = (x, base) => {\n  let y = ''\n  while (x > 0) {\n    y = `${y}${x % base}`\n    x = Math.floor(x / base)\n  }\n  return '0' + y + '0' * (y.length % base) + '0'\n}\n\n/*\n  Convert number x to base.\n  Return value is the string representation of x\n  in base base, with leading and trailing zeros,\n  with trailing zeros and leading zeros.\n  >>> varietyBase(8, 2)\n  '00100'\n  >>> varietyBase(2, 8)\n  '2'\n  >>> varietyBase(4, 8)\n  '400'\n  >>> varietyBase(4, 16)\n  '111100'\n  >>> varietyBase(4, 256)\n  '11110000'\n  */\nconst varietyBaseStringZerosLeftAndRightAndTrailingZerosAndLeadingZeros = (x, base) => {\n  let y = ''\n  while (x > 0) {\n    y = `${y}${x % base}`\n    x = Math.floor(x / base)\n  }\n  return '0' + y + '0' * (y.length % base) + '0' + '0' * (x % base)\n}\n\n/*\n  Convert number x to base.\n  Return value is the string representation of x\n  in base base, with leading zeros,\n  "}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangulumArea(5, 3)\n  7.5\n  */\nconst triangulumArea = (a, h) => {\n  return Math.sqrt(a * (a - h * h / 4));\n};\n\nexport default triangulumArea;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nconst fib4_opt = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 3;\n    if (n === 4) return 5;\n    return fib4_opt(n - 1) + fib4_opt(n - 2) + fib4_opt(n - 3) + fib4_opt(n - 4);\n}\n\nconsole.log(fib4(5));\nconsole.log(fib4_opt(5));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let c = 0;\n  l.forEach((el) => {\n    if (el < 0) {\n      result = el;\n      i = j;\n      c = 1;\n    } else {\n      result = result + el;\n      j++;\n      c++;\n      if (j === l.length) {\n        j = i;\n        c--;\n      }\n    }\n  });\n  if (c % 2 === 0) {\n    return result / 2;\n  } else {\n    return result;\n  }\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst medianIndex = (l) => {\n  let i = 0;\n  let j = 0;\n  let c = 0;\n  l.forEach((el) => {\n    if (el < 0) {\n      i = j;\n      c = 1;\n    } else {\n      j++;\n      c++;\n      if (j === l.length) {\n        j = i;\n        c--;\n      }\n    }\n  });\n  if (c % 2 === 0) {\n    return i / 2 + 1;\n  } else {\n    return i / 2;\n  }\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst mean = (l) => {\n  let sum = 0;\n  l.forEach((el) => sum += el);\n  return sum / l.length;\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst sum = (l) => {\n  let sum = 0;\n  l.forEach((el) => sum += el);\n  return sum;\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst mode = (l) => {\n  let count = 1;\n  let result = l[0];\n  let tmp = 0;\n  l.forEach((el) => {\n    if (el === result) {\n      count++;\n    } else {\n      if (count > 1) {\n        return;\n      } else {\n        result = el;\n        count = 1;\n      }\n    }\n  });\n  return result;\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst modeIndex = (l) => {\n  let count = 1;\n  let result = l[0];\n  let tmp = 0;\n  l.forEach((el) => {\n    if (el === result) {\n      count++;\n    } else {\n      if (count > 1) {\n        return;\n      } else {\n        result = el;\n        count = 1;\n      }\n    }\n  });\n  return result;\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst min = (l) => {\n  let min = l[0];\n  l.forEach((el) => {\n    if (el < min) {\n      min = el;\n    }\n  });\n  return min;\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst max = (l) => {\n  let max = l[0];\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst sumSqr = (l) => {\n  let sum = 0;\n  l.forEach((el) => sum += el * el);\n  return sum;\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst sumSqrDist = (l) => {\n  let sum = 0;\n  l.forEach((el) => sum += Math.pow(el - mean(l), 2));\n  return sum;\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst variance = (l) => {\n  let avg = mean(l);\n  let sum = 0;\n  l.forEach((el) => {\n    sum += Math.pow(el - avg, 2);\n  });\n  return sum / l.length;\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst varianceDist = (l) => {\n  let avg = mean(l);\n  let sum = 0;\n  l.forEach((el) => {\n    sum += Math.pow(el - avg, 2);\n  });\n  return sum / (l.length - 1);\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst stdDev = (l) => {\n  let avg = mean(l);\n  let sum = 0;\n  l.forEach((el) => {\n    sum += Math.pow(el - avg, 2);\n  });\n  return Math.sqrt(sum / l.length);\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst stdDevDist = (l) => {\n  let avg = mean(l);\n  let sum = 0;\n  l.forEach((el) => {\n    sum += Math.pow(el - avg, 2);\n  });\n  return Math.sqrt(sum / (l.length - 1));\n};\n\n/**\n * @param {number[]} l\n * @return {number}\n */\nconst meanDist = (l) => {\n  let sum = 0;\n  l.forEach((el) => {\n    sum += el;\n  });\n  return sum / l.length;\n};\n\nmodule.exports = {\n  median,\n  medianIndex,\n  mean,\n  sum,\n  mode,\n  modeIndex,\n  min,\n  max,\n  sumSqr,\n  sumS"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let string = text.toString().toLowerCase();\n    let result = true;\n    let index = 0;\n    let length = string.length;\n\n    while (index < length / 2) {\n        if (string[index]!== string[length - 1 - index]) {\n            result = false;\n            break;\n        }\n        index++;\n    }\n\n    return result;\n};\n\nexport default isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    let result = n % p\n    if (result === 0) {\n        return p\n    } else {\n        return result\n    }\n}\n\nmodule.exports = modp\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst encode = (s) => {\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  return s.split(\"\").map(ch => {\n    return alphabet[(ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 62]\n  }).join(\"\");\n}\n\nconst decode = (s) => {\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  return s.split(\"\").map(ch => {\n    return alphabet[(ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 62]\n  }).join(\"\");\n}\n\nconst shift = (s) => {\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  return encodeShift(s).split(\"\").map(ch => {\n    return alphabet[(ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 62]\n  }).join(\"\");\n}\n\nconst reverse = (s) => {\n  return s.split(\"\").reverse().join(\"\");\n}\n\nconst hasDuplicates = (s) => {\n  return s.split(\"\").filter(s => s!== s.split(\"\")[0]).length > 1;\n}\n\nconst hasDuplicatesShift = (s) => {\n  return s.split(\"\").filter(s => s!== s.split(\"\")[0]).length > 1;\n}\n\nconst removeDuplicates = (s) => {\n  return s.split(\"\").filter(s => s!== s.split(\"\")[0]).join(\"\");\n}\n\nconst removeDuplicatesShift = (s) => {\n  return s.split(\"\").filter(s => s!== s.split(\"\")[0]).join(\"\");\n}\n\nconst check = (s) => {\n  if (s.length === 1) return true;\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let check = true;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i]!== s[i + 1]) check = false;\n  }\n  return check;\n}\n\nconst checkShift = (s) => {\n  if (s.length === 1) return true;\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let check = true;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i]!== s[i + 1]) check = false;\n  }\n  return check;\n}\n\nconst test = () => {\n  const s = \"a\";\n  console.log(s, encode(s));\n  console.log(s, decode(s));\n  console.log(s, shift(s));\n  console.log(s, reverse(s));\n  console.log(s, hasDuplicates(s));\n  console.log(s, hasDuplicatesShift(s));\n  console.log(s, removeDuplicates(s));\n  console.log(s, removeDuplicatesShift(s));\n  console.log(s, check(s));\n  console.log(s, checkShift(s));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "getRidOfVowel", "gc": "/*\n  getRidOfVowel is a function that takes string and returns string without vowels.\n  >>> getRidOfVowel('')\n  ''\n  >>> getRidOfVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> getRidOfVowel('abcdef')\n  'bcdf'\n  >>> getRidOfVowel('aaaaa')\n  ''\n  >>> getRidOfVowel('aaBAA')\n  'B'\n  >>> getRidOfVowel('zbcd')\n  'zbcd'\n  */\nconst getRidOfVowel = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let lastVowel = '\\0';\n  let position = 0;\n  const textLength = text.length;\n  const result = '';\n\n  while (position < textLength) {\n    const currentChar = text[position];\n    const index = vowels.indexOf(currentChar);\n    if (index!== -1) {\n      lastVowel = currentChar;\n      position += 1;\n    } else if (index === -1 && lastVowel!== currentChar) {\n      result += currentChar;\n      lastVowel = currentChar;\n      position += 1;\n    } else {\n      lastVowel = '\\0';\n      result += currentChar;\n      position += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  replaceVowels is a function that takes string and returns string without vowels.\n  >>> replaceVowels('aaBAA')\n  'BBB'\n  >>> replaceVowels('zBcd')\n  'Bcd'\n  >>> replaceVowels('zAbcd')\n  'Abcd'\n  >>> replaceVowels('zabcdef')\n  'abcdef'\n  >>> replaceVowels('abcdef')\n  'abcdef'\n  >>> replaceVowels('abcdefg')\n  'abcdefg'\n  >>> replaceVowels('abcdefghijkl')\n  'abcdefghijkl'\n  >>> replaceVowels('abcdefghijklm')\n  'abcdefghijklm'\n  */\nconst replaceVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let lastVowel = '\\0';\n  let position = 0;\n  const textLength = text.length;\n  const result = '';\n\n  while (position < textLength) {\n    const currentChar = text[position];\n    const index = vowels.indexOf(currentChar);\n    if (index!== -1) {\n      lastVowel = currentChar;\n      position += 1;\n    } else if (index === -1 && lastVowel!== currentChar) {\n      result += currentChar;\n      lastVowel = currentChar;\n      position += 1;\n    } else {\n      lastVowel = '\\0';\n      result += currentChar;\n      position += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  trim is a function that takes string and returns string without vowels.\n  >>> trim(' aaa bbb ')\n  'aaa bbb'\n  >>> trim('\\n aaa bbb ')\n  'aaa bbb'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\nccc\\n')\n  'aaa\\nbbb\\nccc'\n  >>> trim('\\n aaa\\nbbb\\ncc"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowDoorway", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowDoorway([1, 2, 4, 10], 100)\n  true\n  >>> belowDoorway([1, 20, 4, 10], 5)\n  false\n  */\nconst belowDoorway = (l, t) => {\n  return l.every(x => x <= t);\n}\n\n/*\n  >>> floor(3.2)\n  3\n  >>> floor(2.5)\n  2\n  >>> floor(3)\n  3\n  >>> floor(3.9)\n  3\n  >>> floor(3.1)\n  3\n  >>> floor(3.7)\n  4\n  >>> floor(2.2)\n  2\n  >>> floor(2.1)\n  2\n  >>> floor(2.9)\n  2\n  >>> floor(2.7)\n  2\n  >>> floor(2.5)\n  2\n  >>> floor(2.4)\n  2\n  >>> floor(2.3)\n  2\n  >>> floor(2.2)\n  2\n  >>> floor(2.1)\n  2\n  >>> floor(2.0)\n  2\n  >>> floor(1.9)\n  1\n  >>> floor(1.7)\n  1\n  >>> floor(1.5)\n  1\n  >>> floor(1.4)\n  1\n  >>> floor(1.3)\n  1\n  >>> floor(1.2)\n  1\n  >>> floor(1.1)\n  1\n  >>> floor(1.0)\n  1\n  >>> floor(0.9)\n  0\n  >>> floor(0.8)\n  0\n  >>> floor(0.7)\n  0\n  >>> floor(0.6)\n  0\n  >>> floor(0.5)\n  0\n  >>> floor(0.4)\n  0\n  >>> floor(0.3)\n  0\n  >>> floor(0.2)\n  0\n  >>> floor(0.1)\n  0\n  >>> floor(0.0)\n  0\n  >>> floor(0.0)\n  0\n  >>> floor(-0.1)\n  -1\n  >>> floor(-0.2)\n  -1\n  >>> floor(-0.3)\n  -1\n  >>> floor(-0.4)\n  -1\n  >>> floor(-0.5)\n  -1\n  >>> floor(-0.6)\n  -1\n  >>> floor(-0.7)\n  -1\n  >>> floor(-0.8)\n  -1\n  >>> floor(-0.9)\n  -1\n  >>> floor(-1.0)\n  -1\n  >>> floor(-1.1)\n  -2\n  >>> floor(-1.2)\n  -2\n  >>> floor(-1.3)\n  -2\n  >>> floor(-1.4)\n  -2\n  >>> floor(-1.5)\n  -2\n  >>> floor(-1.6)\n  -2\n  >>> floor(-1.7)\n  -2\n  >>> floor(-1.8)\n  -2\n  >>> floor(-1.9)\n  -2\n  >>> floor(-2.0)\n  -2\n  >>> floor(-2.1)\n  -2\n  >>> floor(-2.2)\n  -2\n  >>> floor(-2.3)\n  -2\n  >>> floor(-2.4)\n  -2\n  >>> floor(-2.5)\n  -2\n  >>> floor(-2.6)\n  -2\n  >>> floor(-2.7)\n  -2\n  >>> floor(-2.8)\n  -2\n  >>> floor(-2.9)\n  -2\n  >>> floor(-3.0)\n  -3\n  >>> floor(-3.1)\n  -3\n  >>> floor(-3.2)\n  -3\n  >>> floor(-3.3)\n  -3\n  >>> floor(-3.4)\n  -3\n  >>> floor(-3.5)\n  -3\n  >>> floor(-3.6)\n  -3\n  >>> floor(-3.7)\n  -3\n  >>> floor(-3.8)\n  -3\n  >>> floor(-3.9)\n  -3\n  >>> floor(-4.0)\n  -4\n  >>> floor(-4.1)\n  -4\n  >>> floor(-4.2)\n  -4\n  >>> floor(-4.3)\n  -4\n  >>> floor(-4.4)\n  -4\n  >>> floor(-4.5)\n  -4\n  >>> floor(-4.6)\n  -4\n  >>> floor(-4.7)\n  -4\n  >>> floor(-4.8)\n  -4\n  >>> floor(-4.9)\n  -4\n  >>> floor(-5.0)\n  -5\n  >>> floor(-5.1)\n  -5\n  >>> floor(-5.2)\n  -5\n  >>> floor(-5.3)\n  -5\n  >>> floor(-5.4)\n  -5\n  >>> floor(-5.5)\n  -5\n  >>> floor(-5.6)\n  -5\n  >>> floor(-5.7)\n  -5\n  >>> floor(-5.8)\n  -5\n  >>> floor(-5.9)\n  -5\n  >>> floor(-6.0)\n  -6\n  >>> floor(-6.1)\n  -6\n  >>> floor(-6.2)\n  -6\n  >>> floor(-6.3)\n  -6\n  >>> floor(-6.4)\n  -6\n  >>> floor(-6.5)\n  -6\n  >>> floor(-6.6)\n  -6\n  >>> floor(-6.7)\n  -6\n  >>> floor(-6.8)\n  -6\n  >>> floor(-6.9)\n  -6\n  >>> floor(-7.0)\n  -7\n  >>> floor(-7.1)\n  -7\n  >>> floor(-7.2)\n  -7\n  >>> floor(-7.3)\n  -7\n  >>> floor(-7.4)\n  -7\n  >>> floor(-7.5)\n  -7\n  >>> floor(-7.6)\n  -7\n  >>> floor(-7.7)\n  -7\n  >>> floor(-7.8)\n  -7\n  >>> floor(-7.9)\n  -"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Add two numbers x and y\n  >>> lend(2, 3)\n  5\n  >>> lend(5, 7)\n  12\n  */\nconst lend = (x, y) => {\n    return x + y;\n};\n\nexport default lend;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "likeChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> likeChars('abcd', 'dddddddabc')\n  true\n  >>> likeChars('dddddddabc', 'abcd')\n  true\n  >>> likeChars('eabcd', 'dddddddabc')\n  false\n  >>> likeChars('abcd', 'dddddddabce')\n  false\n  >>> likeChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst likeChars = (s0, s1) => {\n    let i = 0, j = 0, l0 = s0.length, l1 = s1.length;\n    while (i < l0 && j < l1) {\n        if (s0[i] == s1[j]) {\n            i++;\n            j++;\n        } else if (s0[i] < s1[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return i == l0 && j == l1;\n}\n\n// Test\n\n// test1(likeChars('abc', 'cdefg'));\n// console.log(likeChars('abc', 'cdefg'));\n\n// test2(likeChars('abcd', 'dddddddabc'));\n// console.log(likeChars('abcd', 'dddddddabc'));\n\n// test3(likeChars('eabcd', 'dddddddabc'));\n// console.log(likeChars('eabcd', 'dddddddabc'));\n\n// test4(likeChars('eabcd', 'dddddddabce'));\n// console.log(likeChars('eabcd', 'dddddddabce'));\n\n// test5(likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc'));\n// console.log(likeChars('eabcdzzzz', 'dddzzzzzzzddeddabc'));\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1;\n  while (b <= n) {\n    a, b = b, a + b;\n  }\n  return a;\n};\n\n/*Return the n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  let a = 1, b = 1, c = 1;\n  while (c <= n) {\n    a, b = b, c = a + b;\n  }\n  return a;\n};\n\n/*Return the n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  while (d <= n) {\n    a, b = b, c = c, d = a + b;\n  }\n  return a;\n};\n\n/* Return the n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1;\n  while (e <= n) {\n    a, b = b, c = c, d = d, e = a + b;\n  }\n  return a;\n};\n\n/* Return the n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1;\n  while (f <= n) {\n    a, b = b, c = c, d = d, e = e, f = a + b;\n  }\n  return a;\n};\n\n/* Return the n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1;\n  while (g <= n) {\n    a, b = b, c = c, d = d, e = e, f = f, g = a + b;\n  }\n  return a;\n};\n\n/* Return the n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1;\n  while (h <= n) {\n    a, b = b, c = c, d = d, e = e, f = f, g = g, h = a + b;\n  }\n  return a;\n};\n\n/* Return the n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1;\n  while (i <= n) {\n    a, b = b, c = c, d = d, e = e, f = f, g = g, h = h, i = a + b;\n  }\n  return a;\n};\n\n/* Return the n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1;\n  while (j <= n) {\n    a, b = b, c = c, d = d, e = e, f = f, g = g, h = h, i = i, j = a + b;\n  }\n  return a;\n};\n\n/* Return the n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1;\n  while (k <= n) {\n    a, b = b, c = c, d = d, e = e, f = f, g = g, h = h, i = i, j = j, k = a + b;\n  }\n  return a;\n};\n\n/* Return the n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1;\n  while (l <= n) {\n    a, b = b, c = c, d = d, e = e, f = f, g = g, h = h, i = i, j = j, k = k, l = a + b;\n  }\n  return a;\n};\n\n/* Return the n-th Fibonacci number"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"<\")\n  false\n  >>> rightBracketing(\"<>\")\n  false\n  >>> rightBracketing(\"<<><>>\")\n  false\n  >>> rightBracketing(\"><<>\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  return (strings) => {\n    let open = 0;\n    let count = 0;\n    let i = 0;\n    for (; i < strings.length; i++) {\n      let string = strings[i];\n      if (string === '<') {\n        open++;\n      }\n      else if (string === '>') {\n        count++;\n      }\n    }\n    if (count === open) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "flat", "gc": "/*Return true is list elements are flatally increasing or decreasing.\n  >>> flat([1, 2, 4, 20])\n  true\n  >>> flat([1, 20, 4, 10])\n  false\n  >>> flat([4, 1, 0, -10])\n  true\n  */\nconst flat = (l) => {\n  let ret = true\n  let i = 1\n  while (i < l.length) {\n    if (l[i - 1] >= l[i]) {\n      ret = false\n      break\n    }\n    i += 1\n  }\n  return ret\n}\n\n/*Return true is list elements are increasing or decreasing.\n  >>> increasing([1, 2, 4, 20])\n  false\n  >>> increasing([1, 20, 4, 10])\n  true\n  >>> increasing([4, 1, 0, -10])\n  true\n  */\nconst increasing = (l) => {\n  let ret = true\n  let i = 1\n  while (i < l.length) {\n    if (l[i - 1] > l[i]) {\n      ret = false\n      break\n    }\n    i += 1\n  }\n  return ret\n}\n\n/*Return true if list is sorted ascending.\n  >>> increasing([1, 2, 4, 20])\n  true\n  >>> increasing([4, 1, 0, -10])\n  true\n  */\nconst ascending = (l) => {\n  let ret = true\n  let i = 1\n  while (i < l.length) {\n    if (l[i - 1] > l[i]) {\n      ret = false\n      break\n    }\n    i += 1\n  }\n  return ret\n}\n\n/*Return true if list is sorted descending.\n  >>> decreasing([1, 2, 4, 20])\n  false\n  >>> decreasing([4, 1, 0, -10])\n  true\n  */\nconst descending = (l) => {\n  let ret = true\n  let i = 1\n  while (i < l.length) {\n    if (l[i - 1] < l[i]) {\n      ret = false\n      break\n    }\n    i += 1\n  }\n  return ret\n}\n\n/* Return a new sorted list that contains the same elements as l but\n  sorted in ascending order.\n  >>> increasing([1, 2, 4, 20])\n  [1, 2, 4, 20]\n  >>> increasing([4, 1, 0, -10])\n  [1, 4, 0, -10]\n  >>> increasing([2, 1, 0, -10])\n  [1, 2, 0, -10]\n  >>> increasing([1, 2, 4, 0, -10])\n  [1, 2, 4, 0, -10]\n  */\nconst increasing_list = (l) => {\n  const ret = []\n  let i = 1\n  while (i < l.length) {\n    ret.push(l[i - 1])\n    i += 1\n  }\n  ret.sort((a, b) => {\n    return a - b\n  })\n  return ret\n}\n\n/* Return a new sorted list that contains the same elements as l but\n  sorted in descending order.\n  >>> decreasing([1, 2, 4, 20])\n  [20, 4, 2, 1]\n  >>> decreasing([4, 1, 0, -10])\n  [-10, 0, 1, 4]\n  >>> decreasing([2, 1, 0, -10])\n  [0, -10, 1, 2]\n  >>> decreasing([1, 2, 4, 0, -10])\n  [0, -10, 2, 4, 1]\n  */\nconst decreasing_list = (l) => {\n  const ret = []\n  let i = 1\n  while (i < l.length) {\n    ret.push(l[i - 1])\n    i += 1\n  }\n  ret.sort((a, b) => {\n    return b - a\n  })\n  return ret\n}\n\n/* Return a new sorted list that contains the same elements as l but\n  sorted in ascending order.\n  >>> ascending([1, 2, 4, 20])\n  [1, 2, 4, 20]\n  >>> ascending([4, 1, 0, -10])\n  [1, 4, 0, -10]\n  >>> ascending([2, 1, 0, -10])\n  [2, 1, 0, -10]\n  >>> ascending([1, 2, 4, 0, -10])\n  [1, 2, 4, 0, -10]\n  */\nconst ascending_sorted_list = (l) => {\n  const ret = []\n  let i = 1\n  while (i < l.length) {\n    ret.push(l[i - 1])\n    i += 1\n  }\n  ret.sort((a, b) => {\n    return a - b\n  })\n  ret.reverse()\n  return ret\n}\n\n/* Return a new sorted list that contains the same elements as l but\n  sorted in descending order.\n  >>> descending([1, 2, 4, 20])\n  [20, 4, 2, 1]\n  >>> descending([4, 1, 0, -10])\n  [-10, 0, 1, 4]\n  >>> descending([2, 1, 0, -10])\n  [0, -10, 1, 2]\n  >>> descending([1, 2, 4, 0, -10])\n  [0, -10, 2, 4, 1]\n  */\nconst descending_sorted_list = (l) => {\n  const ret = []\n  let i = 1\n  while (i < l.length) {\n    ret.push(l[i - 1])\n    i += 1\n  }\n  ret.sort((a, b) => {\n    return b - a\n  })\n  ret.reverse()\n  return ret\n}\n\nmodule.exports = {\n  flat,\n  increasing,\n  increasing_list,\n  increasing_sorted_list,\n  decreasing,\n  decreasing_list,\n  decreasing_sorted_list\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "coarse", "gc": "/*Return sorted unique coarse elements for two lists.\n  >>> coarse([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> coarse([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst coarse = (l1, l2) => {\n  let r = [];\n  let i = 0;\n  while (i < l1.length) {\n    let j = 0;\n    while (j < l2.length) {\n      if (l1[i] === l2[j]) {\n        r.push(l1[i]);\n        break;\n      }\n      j++;\n    }\n    if (j === l2.length) {\n      r.push(l1[i]);\n      i++;\n    }\n  }\n  return r;\n};\n\nmodule.exports = {\n  coarse,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "bigChoiceFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> bigChoiceFactor(13195)\n  29\n  >>> bigChoiceFactor(2048)\n  2\n  */\nconst bigChoiceFactor = (n) => {\n    let prime = false\n    while(prime == false) {\n        prime = true\n        for(let i = 2; i <= Math.sqrt(n); i++) {\n            if(n % i == 0) {\n                prime = false\n                break\n            }\n        }\n    }\n    return prime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "summarizeToN", "gc": "/*summarizeToN is a function that sums numbers from 1 to n.\n  >>> summarizeToN(30)\n  465\n  >>> summarizeToN(100)\n  5050\n  >>> summarizeToN(5)\n  15\n  >>> summarizeToN(10)\n  55\n  >>> summarizeToN(1)\n  1\n  */\nconst summarizeToN = (n) => {\n  const sum = (number) => {\n    return (number < 10)? number : (sum(number - 1) + number);\n  };\n  return sum(n);\n};\n\n/*\n  summarizeToNToN is a function that sums numbers from 1 to n.\n  >>> summarizeToNToN(30)\n  65\n  >>> summarizeToNToN(100)\n  5050\n  >>> summarizeToNToN(5)\n  15\n  >>> summarizeToNToN(10)\n  55\n  >>> summarizeToNToN(1)\n  1\n  */\nconst summarizeToNToN = (n) => {\n  const sum = (number) => {\n    return (number < 10)? number : (sum(number - 1) + number);\n  };\n  return sum(n) + sum(n - 1);\n};\n\n/*\n  summarizeToNToNToN is a function that sums numbers from 1 to n.\n  >>> summarizeToNToNToN(30)\n  65\n  >>> summarizeToNToNToN(100)\n  5050\n  >>> summarizeToNToNToN(5)\n  15\n  >>> summarizeToNToNToN(10)\n  55\n  >>> summarizeToNToNToN(1)\n  1\n  */\nconst summarizeToNToNToN = (n) => {\n  const sum = (number) => {\n    return (number < 10)? number : (sum(number - 1) + number);\n  };\n  return sum(n) + sum(n - 1) + sum(n - 2);\n};\n\n/*\n  summarizeToNToNToNToN is a function that sums numbers from 1 to n.\n  >>> summarizeToNToNToNToN(30)\n  65\n  >>> summarizeToNToNToNToN(100)\n  5050\n  >>> summarizeToNToNToNToN(5)\n  15\n  >>> summarizeToNToNToNToN(10)\n  55\n  >>> summarizeToNToNToNToN(1)\n  1\n  */\nconst summarizeToNToNToNToN = (n) => {\n  const sum = (number) => {\n    return (number < 10)? number : (sum(number - 1) + number);\n  };\n  return sum(n) + sum(n - 1) + sum(n - 2) + sum(n - 3);\n};\n\nmodule.exports = {\n  summarizeToN,\n  summarizeToNToN,\n  summarizeToNToNToN,\n  summarizeToNToNToNToN,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "rightBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> rightBracketing(\"(\")\n  false\n  >>> rightBracketing(\"()\")\n  true\n  >>> rightBracketing(\"(()())\")\n  true\n  >>> rightBracketing(\")(()\")\n  false\n  */\nconst rightBracketing = (brackets) => {\n  // the index of the bracket that was found last\n  const openCount = brackets.split('').reduce((sum, char) => {\n    if (char === '(') {\n      return sum + 1\n    }\n    return sum\n  }, 0)\n\n  // the index of the bracket that was found last\n  const closeCount = brackets.split('').reduce((sum, char) => {\n    if (char === ')') {\n      return sum + 1\n    }\n    return sum\n  }, 0)\n\n  return openCount === closeCount\n}\n\n/*\n  Given a string of brackets, returns a string with all of the brackets\n  converted to their corresponding closing brackets.\n\n  >>> replaceBrackets(\"(())\")\n  ')'\n  >>> replaceBrackets(\"(())\")\n  ')'\n  >>> replaceBrackets(\"(((())()))\")\n  ')'\n  >>> replaceBrackets(\"(()())\")\n  ')'\n  >>> replaceBrackets(\"((()()))\")\n  ')'\n  >>> replaceBrackets(\"(((()()))\")\n  ')'\n  >>> replaceBrackets(\"((()()))\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"(((()()))\")\n  ')'\n  >>> replaceBrackets(\"(((()()))\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()()))\")\n  ')'\n  >>> replaceBrackets(\"((()()))\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()()))\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()()))\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBrackets(\"((()())\")\n  ')'\n  >>> replaceBr"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivative = [0]\n  for (let i = 0; i < xs.length; i++) {\n    derivative.push(xs[i])\n    derivative.push(xs[i] * (i + 1))\n  }\n  return derivative\n}\n\n/**\n  Given a polynomial xs, return a function that evaluates xs at a given point\n  x.\n  >>> evaluate([3, 1, 2, 4, 5], 3)\n  9\n  >>> evaluate([1, 2, 3], 3)\n  6\n  >>> evaluate([3, 1, 2, 4, 5], 2)\n  16\n  >>> evaluate([1, 2, 3], 4)\n  24\n  */\nconst evaluate = (xs, x) => {\n  let f = xs[xs.length - 1]\n  let i = xs.length - 2\n  while (i >= 0) {\n    f = xs[i] + x * f\n    i--\n  }\n  return f\n}\n\n/**\n  Given a polynomial xs, return a function that evaluates xs at a given point\n  x.\n  >>> evaluate([3, 1, 2, 4, 5], 3)\n  9\n  >>> evaluate([1, 2, 3], 3)\n  6\n  >>> evaluate([3, 1, 2, 4, 5], 2)\n  16\n  >>> evaluate([1, 2, 3], 4)\n  24\n  */\nconst evaluate2 = (xs, x) => {\n  let f = xs[xs.length - 1]\n  let i = xs.length - 2\n  while (i >= 0) {\n    f = xs[i] + x * f\n    i--\n  }\n  return f\n}\n\n/**\n  Return polynomial xs.\n  >>> length([3, 1, 2, 4, 5])\n  5\n  >>> length([3, 1, 2, 4, 5, 7])\n  6\n  >>> length([])\n  0\n  >>> length([3, 1, 2])\n  3\n  >>> length([1, 2, 3])\n  3\n  >>> length([3, 1, 2, 4, 5, 7])\n  6\n  */\nconst length = (xs) => xs.length\n\n/**\n  Given a polynomial xs, return a function that evaluates xs at a given point\n  x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 5])\n  [3, 10]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([3, 1, 2, 4, 5, 7])\n  [1, 4, 12, 20, 28, 36]\n  */\nconst derivative2 = (xs) => {\n  let derivative = [0]\n  for (let i = 0; i < xs.length; i++) {\n    derivative.push(xs[i])\n    derivative.push(xs[i] * (i + 1))\n  }\n  return derivative\n}\n\n/**\n  Given a polynomial xs, return a function that evaluates xs at a given point\n  x.\n  >>> evaluate([3, 1, 2, 4, 5], 3)\n  9\n  >>> evaluate([1, 2, 3], 3)\n  6\n  >>> evaluate([3, 1, 2, 4, 5], 2)\n  16\n  >>> evaluate([1, 2, 3], 4)\n  24\n  >>> evaluate([3, 1, 2, 4, 5, 7], 3)\n  21\n  >>> evaluate([1, 2, 3, 5], 3)\n  12\n  >>> evaluate([1, 2, 3], 5)\n  10\n  >>> evaluate([3, 1, 2, 4, 5, 7], 2)\n  28\n  >>> evaluate([1, 2, 3, 5], 4)\n  24\n  >>> evaluate([3, 1, 2, 4, 5, 7], 2)\n  28\n  >>> evaluate([1, 2, 3, 5, 7], 3)\n  27\n  >>> evaluate([1, 2, 3, 5, 7], 4)\n  36\n  */\nconst evaluate3 = (xs, x) => {\n  let f = xs[xs.length - 1]\n  let i = xs.length - 2\n  while (i >= 0) {\n    f = xs[i] + x * f\n    i--\n  }\n  return f\n}\n\n/**\n  Given a polynomial xs, return a function that evaluates xs at a given point\n  x.\n  >>> evaluate([3, 1, 2, 4, 5], 3)\n  9\n  >>> evaluate([1, 2, 3], 3)\n  6\n  >>> evaluate([3, 1, 2, 4, 5], 2)\n  16\n  >>> evaluate([1, 2, 3], 4)\n  24\n  >>> evaluate([3, 1, 2, 4, 5, 7], 3)\n  21\n  >>> evaluate([1, 2, 3, 5], 3)\n  12\n  >>> evaluate([1, 2, 3], 5)\n  10\n  >>> evaluate([3, 1, 2, 4, 5, 7], 2)\n  28\n  >>> evaluate([1, 2, 3, 5], 4)\n  24\n  >>> evaluate([3, 1, 2, 4, 5, 7], 2)\n  28\n  >>> evaluate([1, 2, 3, 5, 7], 3)\n  27\n  >>> evaluate([1, 2, 3, 5, 7], 4)\n  36\n  */\nconst evaluate4 = (xs, x) => {\n  let f = xs[xs.length - 1]\n  let i = xs.length - 2\n  while (i >= 0) {\n    f = x"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    return n <= 2? 1 : fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n// let f = fibfib;\n// console.log(f(1));\n// console.log(f(5));\n// console.log(f(8));\n// console.log(f(100000000));\n\n/*\nThe Fibonacci number sequence is a sequence defined by the recurrence relation:\nf(n) = f(n - 1) + f(n - 2), which produces the sequence 1, 1, 2, 3, 5, 8, 13,...\n\nLet's write a function that will return the nth element of the fibonacci sequence.\n\nPlease write a function to efficiently compute the nth element of the fibonacci number sequence.\n\n>>> fibonacci(1)\n1\n>>> fibonacci(5)\n5\n>>> fibonacci(8)\n8\n>>> fibonacci(100000000)\n10000000000\n\nYour function will accept as its first argument the number of the element you want to return.\n\nYour function should return an integer.\n\nThe fibonacci sequence is defined above:\nfibonacci(0) == 0\nfibonacci(1) == 0\nfibonacci(2) == 1\nfibonacci(n) == fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3).\n\nThe Fibonacci sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibonacci(0) == 0\nfibonacci(1) == 0\nfibonacci(2) == 1\nfibonacci(n) == fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3).\nPlease write a function to efficiently compute the nth element of the fibonacci number sequence.\n\n>>> fibonacci(1)\n1\n>>> fibonacci(5)\n5\n>>> fibonacci(8)\n8\n>>> fibonacci(100000000)\n10000000000\n\n*/\nconst fibonacci = (n) => {\n    return n <= 2? 1 : fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n// let f = fibonacci;\n// console.log(f(1));\n// console.log(f(5));\n// console.log(f(8));\n// console.log(f(100000000));\n\n/*\nYour function will accept as its first argument the number of the element you want to return.\n\nYour function should return an integer.\n\nThe Fibonacci sequence is a sequence defined by the recurrence relation:\nf(n) = f(n - 1) + f(n - 2), which produces the sequence 1, 1, 2, 3, 5, 8, 13,...\n\nLet's write a function that will return the nth element of the fibonacci sequence.\n\nPlease write a function to efficiently compute the nth element of the fibonacci number sequence.\n\n>>> fibonacci(1)\n1\n>>> fibonacci(5)\n5\n>>> fibonacci(8)\n8\n>>> fibonacci(100000000)\n10000000000\n\nThe Fibonacci sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibonacci(0) == 0\nfibonacci(1) == 0\nfibonacci(2) == 1\nfibonacci(n) == fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3).\n\nThe Fibonacci sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibonacci(0) == 0\nfibonacci(1) == 0\nfibonacci(2) == 1\nfibonacci(n) == fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3).\nPlease write a function to efficiently compute the nth element of the fibonacci number sequence.\n\n>>> fibonacci(1)\n1\n>>> fibonacci(5)\n5\n>>> fibonacci(8)\n8\n>>> fibonacci(100000000)\n10000000000\n\n*/\nconst fibonacci = (n) => {\n    return n <= 2? 1 : fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n// let f = fibonacci;\n// console.log(f(1));\n// console.log(f(5));\n// console.log(f(8));\n// console.log(f(100000000));\n\n// console.log(f(100000000));\n\n// console.log(f(10000000000000));\n\n// let f = fibonacci;\n// console.log(f(10000000000000));\n// console.log(f(10000000000000));\n\n// let f = fibonacci;\n// console.log(f(10000000000000));\n// console.log(f(10000000000000));\n\n// let f = fibonacci;\n// console.log(f(10000000000000));\n// console.log(f(10000000000000));\n\n// let f = fibonacci;\n// console.log(f(10000000000000));\n// console.log(f(10000000000000));\n\n// let f = fibonacci;\n// console.log(f(10000000000000));\n// console.log(f(10000000000000));\n\n// let f = fibonacci;\n// console.log(f(10000000000000));\n// console.log(f(10000000000000));\n\n// let f = fibonacci;\n// console.log(f(10000000000000));\n// console.log(f(10000000000000));\n\n// let f = fibonacci;\n// console."}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelReckon", "gc": "/*Write a function vowelReckon which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelReckon(\"abcde\")\n  2\n  >>> vowelReckon(\"ACEDY\")\n  3\n  */\nconst vowelReckon = (s) => {\n  const vowelReckon = {\n    'a': 0,\n    'e': 0,\n    'i': 0,\n    'o': 0,\n    'u': 0,\n    'y': 0\n  };\n\n  const len = s.length;\n\n  for (let i = 0; i < len; i++) {\n    if (vowelReckon[s[i]]) {\n      vowelReckon[s[i]]++;\n    } else {\n      vowelReckon[s[i]] = 1;\n    }\n  }\n\n  return vowelReckon.u;\n};\n\nconsole.log(vowelReckon(\"abcde\")); // 2\nconsole.log(vowelReckon(\"ACEDY\")); // 3\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "roundShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> roundShift(12, 1)\n  \"21\"\n  >>> roundShift(12, 2)\n  \"12\"\n  */\nconst roundShift = (x, shift) => {\n  if (shift > x.length) {\n    const reversed = reverse(x);\n    return reversed.substr(0, shift);\n  } else {\n    return x.substr(0, shift) + x.substr(x.length - shift, x.length);\n  }\n};\n\n/*\n  Convert a string to integer.\n  >>> stringToInt(\"12\")\n  12\n  >>> stringToInt(\"1234\")\n  1234\n  >>> stringToInt(\"a\")\n  NaN\n  */\nconst stringToInt = (s) => {\n  if (s.length === 0) return NaN;\n  const x = parseInt(s);\n  if (isNaN(x)) {\n    return NaN;\n  }\n  return x;\n};\n\n/*\n  Convert a number to a string.\n  >>> intToString(12)\n  \"12\"\n  >>> intToString(1234)\n  \"1234\"\n  >>> intToString(NaN)\n  \"\"\n  */\nconst intToString = (n) => {\n  if (isNaN(n)) {\n    return \"\";\n  }\n  return n.toString();\n};\n\n/*\n  Calculate the difference between two numbers.\n  >>> subtract(1, 2)\n  -1\n  >>> subtract(1, 1)\n  0\n  >>> subtract(2, 1)\n  1\n  >>> subtract(2, 2)\n  0\n  >>> subtract(2, 3)\n  -1\n  */\nconst subtract = (x, y) => {\n  if (x === y) return 0;\n  if (x < y) return -1;\n  return 1;\n};\n\n/*\n  Calculate the sum of two numbers.\n  >>> sum(1, 2)\n  3\n  >>> sum(1, 1)\n  1\n  >>> sum(2, 1)\n  3\n  >>> sum(2, 2)\n  4\n  */\nconst sum = (x, y) => x + y;\n\n/*\n  Calculate the product of two numbers.\n  >>> product(1, 2)\n  2\n  >>> product(1, 1)\n  1\n  >>> product(2, 1)\n  2\n  >>> product(2, 2)\n  4\n  */\nconst product = (x, y) => x * y;\n\n/*\n  Calculate the average of two numbers.\n  >>> average(1, 2)\n  1.5\n  >>> average(1, 1)\n  1\n  >>> average(2, 1)\n  1.5\n  >>> average(2, 2)\n  2\n  */\nconst average = (x, y) => {\n  const sum = sum(x, y);\n  return sum / (x + y);\n};\n\n/*\n  Calculate the median of three numbers.\n  >>> median(1, 2, 3)\n  2.5\n  >>> median(1, 1, 1)\n  1\n  >>> median(2, 1, 1)\n  2\n  >>> median(2, 2, 2)\n  2\n  >>> median(3, 1, 1)\n  2.5\n  >>> median(3, 2, 1)\n  2.5\n  >>> median(3, 2, 2)\n  2.5\n  */\nconst median = (x, y, z) => {\n  const [a, b, c] = [x, y, z];\n  const [p, q, r] = [a, b, c];\n  if (subtract(p, q) === subtract(r, p)) {\n    return (p + q + r) / 3;\n  } else if (subtract(p, q) === subtract(p, r)) {\n    return (p + q + r) / 3;\n  } else if (subtract(p, q) === subtract(q, r)) {\n    return (p + q + r) / 3;\n  } else if (subtract(p, q) === subtract(q, p)) {\n    return (p + q + r) / 3;\n  } else {\n    return NaN;\n  }\n};\n\n/*\n  Calculate the mode of three numbers.\n  >>> mode(1, 2, 3)\n  2\n  >>> mode(1, 1, 1)\n  1\n  >>> mode(2, 1, 1)\n  1\n  >>> mode(2, 2, 2)\n  2\n  >>> mode(3, 1, 1)\n  2\n  >>> mode(3, 2, 1)\n  2\n  >>> mode(3, 2, 2)\n  2\n  */\nconst mode = (x, y, z) => {\n  const [a, b, c] = [x, y, z];\n  const [p, q, r] = [a, b, c];\n  if (subtract(p, q) === subtract(r, p)) {\n    return p;\n  } else if (subtract(p, q) === subtract(p, r)) {\n    return q;\n  } else if (subtract(p, q) === subtract(q, r)) {\n    return r;\n  } else if (subtract(p, q) === subtract(q, p)) {\n    return p;\n  } else {\n    return NaN;\n  }\n};\n\n/*\n  Calculate the sum of all elements in a list.\n  >>> sumList([1, 2, 3])\n  6\n  >>> sumList([])\n  0\n  */\nconst sumList = (xs) => sum(...xs);\n\n/*\n  Calculate the product of all elements in a list.\n  >>> productList([1, 2, 3])\n  6\n  >>> productList([])\n  1\n  */\nconst productList = (xs) => product(...xs);\n\n/*\n  Calculate the average of all elements in a list.\n  >>> averageList([1, 2, 3])\n  2.0\n  >>> averageList([])\n  NaN\n  */\nconst averageList = (xs"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "fingerSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      fingerSum(\"\") => 0\n      fingerSum(\"abAB\") => 131\n      fingerSum(\"abcCd\") => 67\n      fingerSum(\"helloE\") => 69\n      fingerSum(\"woArBld\") => 131\n      fingerSum(\"aAaaaXa\") => 153\n  */\nconst fingerSum = (s) => {\n  return s.replace(/[^A-Z]/g, '')\n   .split('')\n   .reduce((acc, str) => {\n      return acc + str.charCodeAt(0) - 96;\n    }, 0);\n}\n\n/* Task\n  Write a function that takes a string as input and returns the first letter of the string in uppercase\n  Examples:\n      upperCase(\"foo\") => \"Foo\"\n      upperCase(\"Hello\") => \"Hello\"\n      upperCase(\"FooBar\") => \"FooBar\"\n      upperCase(\"HELLO\") => \"HELLO\"\n      upperCase(\"helloHELLO\") => \"HELLO\"\n  */\nconst upperCase = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/* Task\n  Write a function that takes two strings as input and returns the first string in lowercase followed by the second string in uppercase.\n  Examples:\n      lowerUpper(\"FooBar\") => \"fooBar\"\n      lowerUpper(\"HELLO\") => \"hello\"\n      lowerUpper(\"FooBarHELLO\") => \"fooBarHELLO\"\n  */\nconst lowerUpper = (s1, s2) => {\n  return s1.toLowerCase() + s2.toUpperCase();\n}\n\n/* Task\n  Write a function that takes two strings as input and returns the first string in uppercase followed by the second string in lowercase.\n  Examples:\n      upperLower(\"FooBar\") => \"FooBar\"\n      upperLower(\"HELLO\") => \"hello\"\n      upperLower(\"FooBarHELLO\") => \"FooBarhello\"\n  */\nconst upperLower = (s1, s2) => {\n  return s1.toUpperCase() + s2.toLowerCase();\n}\n\n/* Task\n  Write a function that takes a string as input and returns a new string with the same number of characters as the input string but with the first character in uppercase.\n  Examples:\n      upcase(\"foo\") => \"Foo\"\n      upcase(\"HELLO\") => \"HELLO\"\n      upcase(\"FooBar\") => \"FooBar\"\n      upcase(\"HELLO\") => \"HELLO\"\n      upcase(\"helloHELLO\") => \"HELLO\"\n  */\nconst upCase = (s) => {\n  return s.toUpperCase();\n}\n\n/* Task\n  Write a function that takes a string as input and returns a new string with the same number of characters as the input string but with the first character in lowercase.\n  Examples:\n      lowerCase(\"FooBar\") => \"fooBar\"\n      lowerCase(\"HELLO\") => \"hello\"\n      lowerCase(\"FooBarHELLO\") => \"fooBarhello\"\n  */\nconst downCase = (s) => {\n  return s.toLowerCase();\n}\n\n/* Task\n  Write a function that takes a string as input and returns a new string with the same number of characters as the input string but with the first character in uppercase.\n  Examples:\n      upperCase(\"foo\") => \"Foo\"\n      upperCase(\"HELLO\") => \"HELLO\"\n      upperCase(\"FooBar\") => \"FooBar\"\n      upperCase(\"HELLO\") => \"HELLO\"\n      upperCase(\"helloHELLO\") => \"HELLO\"\n  */\nconst first = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/* Task\n  Write a function that takes a string as input and returns a new string with the same number of characters as the input string but with the last character in lowercase.\n  Examples:\n      lowerCase(\"FooBar\") => \"fooBar\"\n      lowerCase(\"HELLO\") => \"hello\"\n      lowerCase(\"FooBarHELLO\") => \"fooBarHELLO\"\n  */\nconst last = (s) => {\n  return s.slice(0, -1).toLowerCase() + s.charAt(s.length - 1);\n}\n\n/* Task\n  Write a function that takes a string as input and returns a new string with the same number of characters as the input string but with the first character in upper case and the last character in lower case.\n  Examples:\n      upperLower(\"FooBar\") => \"FooBar\"\n      upperLower(\"HELLO\") => \"hello\"\n      upperLower(\"FooBarHELLO\") => \"FooBarHELLO\"\n  */\nconst upperLowerLast = (s) => {\n  return first(last(upCase(s)));\n}\n\n/* Task\n  Write a function that takes a string as input and returns a new string with the same number of characters as the input string but with the first character in lower case and the last character in upper case.\n  Examples:\n      upperCase(\"FooBar\") => \"fooBar\"\n      upperCase(\"HELLO\") => \"hello\"\n      upperCase(\"FooBarHELLO\") => \"fooBarhello\"\n  */\nconst lowerUpperLast = (s) => {\n  return first(upCase(last(s)));\n}\n\n/* Task\n  Write a function that takes a string as input and returns a new string with the same number of characters as the input string but with the first character in upper case and the last character in lower case.\n  Examples:\n      upperLower(\"FooBar\") => \"FooBar\"\n      upperLower(\"HELLO\") => \"hello\"\n      upperLower(\"FooBarHELLO\") => \"FooBarhello\"\n  */\nconst upperLowerFirst = (s) => {\n  return last(upCase(first(s)));\n}\n\n/* Task\n  Write a function that takes a string as input and returns a new string with the same number of characters as the input string but with the first character in lower case and the last character in upper case.\n  Examples:\n      lowerUpper(\"FooBar\") => \""}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "yieldDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  yieldDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  yieldDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  yieldDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  yieldDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst yieldDistribution = (s, n) => {\n  let total = 0\n  let arr = s.split(\" \")\n  let appleCount = arr[0].split(\"+\").length - 1\n  let orangeCount = arr[1].split(\"+\").length - 1\n  for (let i = 0; i < n; i++) {\n    if (arr[0].split(\"+\").indexOf(`${i + 1}`) > -1) {\n      total += appleCount\n      appleCount--\n    }\n    if (arr[1].split(\"+\").indexOf(`${i + 1}`) > -1) {\n      total += orangeCount\n      orangeCount--\n    }\n    if (arr[2].split(\"+\").indexOf(`${i + 1}`) > -1) {\n      total += orangeCount\n      orangeCount--\n    }\n  }\n  return total\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list.\n  for examble:\n  add([1,2,3,4]) -> 1 + 2 + 3 + 4\n  add([1,2,3,4,5]) -> 1 + 2 + 3 + 4 + 5\n  add([1,2,3,4,5,6]) -> 1 + 2 + 3 + 4 + 5 + 6\n  add([1,2,3,4,5,6,7]) -> 1 + 2 + 3 + 4 + 5 + 6 + 7\n  add([1,2,3,4,5,6,7,8]) -> 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n*/\nconst add = (list) => {\n  let sum = 0\n  for (let i = 0; i < list.length; i++) {\n    sum += list[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers in the list.\n  For examble:\n  add([1,2,3,4,5,6,7,8]) -> 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n  add([1,2,3,4,5,6,7,8,9]) -> 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n  add([1,2,3,4,5,6,7,8,9,10]) -> 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n  add([1,2,3,4,5,6,7,8,9,10,11]) -> 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11\n  add([1,2,3,4,5,6,7,8,9,10,11,12]) -> 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12\n  add([1,2,3,4,5,6,7,8,9,10,11,12,13]) -> 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13\n  add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) -> 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14\n*/\nconst add = (list) => {\n  let sum = 0\n  for (let i = 0; i < list.length; i++) {\n    sum += list[i]\n  }\n  return sum\n}\n\nconst test = function (a, b) {\n  let t = yieldDistribution(a, b)\n  return t\n}\n\nconst tests = [\n  [\"0 apples and 1 oranges\", 3],\n  [\"1 apples and 2 oranges\", 3],\n  [\"3 apples and 4 oranges\", 3],\n  [\"10 apples and 11 oranges\", 11],\n  [\"100 apples and 1 oranges\", 100],\n  [\"120 apples and 1 oranges\", 120]\n]\n\nconst main = function () {\n  tests.map(t => {\n    let a = t[0]\n    let b = t[1]\n    let res = test(a, b)\n    console.log(`${a} yields ${b}`)\n    console.log(`${a} yields ${res}`)\n  })\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "hustle", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to hustle one of the nodes and return it.\n  The hustleed node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The hustleed node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst hustle = (arr) => {\n    if (!arr.length) {\n        return [];\n    }\n\n    const [ min, index ] = [ arr[0], 0 ];\n\n    for (let i = 1; i < arr.length; i++) {\n        const [ next, _index ] = [ arr[i], i ];\n\n        if (next % 2 === 0) {\n            if (min === next) {\n                return [next, index];\n            } else if (min < next) {\n                [min, index] = [next, _index];\n            }\n        }\n    }\n\n    return [min, index];\n};\n\nexport default hustle;<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "research", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      research([4, 1, 2, 2, 3, 1])) == 2\n      research([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      research([5, 5, 4, 4, 4])) == -1\n  */\nconst research = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, 1);\n    } else {\n      map.set(val, map.get(val) + 1);\n    }\n  }\n  for (let [key, value] of map) {\n    if (value > key) {\n      return key;\n    }\n  }\n  return -1;\n};\n\nconsole.log(research([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(research([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(research([5, 5, 4, 4, 4])); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "foreignSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  foreignSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  foreignSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  foreignSortList([]) == []\n  */\nconst foreignSortList = (lst) => {\n  if (!lst ||!Array.isArray(lst) || lst.length === 0) {\n    return []\n  }\n\n  return lst.map((x, i) => {\n    return [x, i]\n  }).sort(function (a, b) {\n    if (a[0] > b[0]) {\n      return 1\n    } else if (a[0] < b[0]) {\n      return -1\n    } else {\n      if (a[1] < b[1]) {\n        return 1\n      } else if (a[1] > b[1]) {\n        return -1\n      } else {\n        return 0\n      }\n    }\n  })\n}\n\nexport default foreignSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangulumArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  // return Math.round((Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) + 2 * Math.pow(a, 2) * Math.cos(Math.PI / 6) + 2 * Math.pow(b, 2) * Math.cos(Math.PI / 6) - 2 * Math.pow(c, 2) * Math.cos(Math.PI / 6)) / 6)\n  // return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) + 2 * Math.pow(a, 2) * Math.cos(Math.PI / 6) + 2 * Math.pow(b, 2) * Math.cos(Math.PI / 6) - 2 * Math.pow(c, 2) * Math.cos(Math.PI / 6)) / 6\n\n  return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) + 2 * Math.pow(a, 2) * Math.cos(Math.PI / 6) + 2 * Math.pow(b, 2) * Math.cos(Math.PI / 6) - 2 * Math.pow(c, 2) * Math.cos(Math.PI / 6)) / 6\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  // return Math.round((Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) + 2 * Math.pow(a, 2) * Math.cos(Math.PI / 6) + 2 * Math.pow(b, 2) * Math.cos(Math.PI / 6) - 2 * Math.pow(c, 2) * Math.cos(Math.PI / 6)) / 6)\n  // return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) + 2 * Math.pow(a, 2) * Math.cos(Math.PI / 6) + 2 * Math.pow(b, 2) * Math.cos(Math.PI / 6) - 2 * Math.pow(c, 2) * Math.cos(Math.PI / 6)) / 6\n\n  return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) + 2 * Math.pow(a, 2) * Math.cos(Math.PI / 6) + 2 * Math.pow(b, 2) * Math.cos(Math.PI / 6) - 2 * Math.pow(c, 2) * Math.cos(Math.PI / 6)) / 6\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangulumArea(3, 4, 5) == 6.00\n  triangulumArea(1, 2, 10) == -1\n  */\nconst triangulumArea = (a, b, c) => {\n  // return Math.round((Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) + 2 * Math.pow(a, 2) * Math.cos(Math.PI / 6) + 2 * Math.pow(b, 2) * Math.cos(Math.PI / 6) - 2 * Math.pow(c, 2) * Math.cos(Math.PI / 6)) / 6)\n  // return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) + 2 * Math.pow(a, 2) * Math.cos(Math.PI / 6) + 2 * Math.pow(b, 2) * Math.cos(Math.PI / 6) - 2 * Math.pow(c, 2) * Math.cos(Math.PI / 6)) / 6\n\n  return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2) + 2 * Math.pow(a, 2) * Math.cos(Math.PI / 6) + 2 * Math.pow(b, 2) * Math.cos(Math.PI / 6) - 2 * Math.pow(c, 2) * Math.cos(Math.PI / 6)) / 6\n}\n\nconsole.log(triangulumArea(3, 4, 5))\nconsole.log(triangulumArea(1, 2, 10))\nconsole.log(triangulumArea(3, 4, 10))\nconsole.log(triangulumArea(5, 4, 6))\nconsole.log(triangulumArea(3, 6, 8))\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlee", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlee([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlee([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlee([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlee([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlee = (q, w) => {\n  const x = q.reduce((a, b) => a + b, 0);\n  return x <= w && q.length === 2 && isPalindrome(q) && q.every(x => x <= w);\n};\n\nconst isPalindrome = q => {\n  let i = q.length / 2;\n  let j = q.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (q[i]!== q[j]) {\n      return false;\n    }\n    i--;\n    j--;\n  }\n  return true;\n};\n\nexport default willItFlee;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallChange([1,2,3,5,4,7,9,6]) == 4\n  smallChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallChange = (arr) => {\n  let i = 0,\n      j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      i++;\n      j--;\n    } else {\n      i++;\n      j--;\n      let k = i;\n      while (i < j) {\n        if (arr[i]!== arr[j]) {\n          i++;\n          k--;\n          j--;\n        } else {\n          i++;\n          j--;\n        }\n      }\n      i--;\n    }\n  }\n  return i;\n};\n\nconst smallChange = (arr) => {\n  let i = 0,\n      j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      i++;\n      j--;\n    } else {\n      i++;\n      j--;\n      let k = i;\n      while (i < j) {\n        if (arr[i]!== arr[j]) {\n          i++;\n          k--;\n          j--;\n        } else {\n          i++;\n          j--;\n        }\n      }\n      i--;\n    }\n  }\n  return i;\n};\n\nconsole.log(smallChange([1,2,3,4,3,2,2]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "entireCatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  entireCatch([], []) ➞ []\n  entireCatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  entireCatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst entireCatch = (lst1, lst2) => {\n  const total = (lst1.reduce((p, n) => p + n.length, 0) -\n    lst2.reduce((p, n) => p + n.length, 0));\n\n  return lst1.length === total? lst1 : lst2.length === total? lst2 : [];\n};\n\nconsole.log(entireCatch([], []));\nconsole.log(entireCatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(entireCatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(entireCatch(['hi', 'admin'], ['hI', 'hi', 'hi']));\nconsole.log(entireCatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primeCount = 0;\n  for (let i = 2; i <= a; i++) {\n    if (isPrime(i)) {\n      primeCount++;\n    }\n    if (primeCount == 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport { isMultiplyPrime };\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isElementaryWorldPower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isElementaryWorldPower(1, 4) => true\n  isElementaryWorldPower(2, 2) => true\n  isElementaryWorldPower(8, 2) => true\n  isElementaryWorldPower(3, 2) => false\n  isElementaryWorldPower(3, 1) => false\n  isElementaryWorldPower(5, 3) => false\n  */\nconst isElementaryWorldPower = (x, n) => {\n  if (x % n!== 0) {\n    return false;\n  }\n  while (x % n === 0) {\n    x = x / n;\n  }\n  return x === 1;\n};\n\n// Test\nconsole.log(isElementaryWorldPower(4, 2));\nconsole.log(isElementaryWorldPower(2, 2));\nconsole.log(isElementaryWorldPower(8, 2));\nconsole.log(isElementaryWorldPower(3, 2));\nconsole.log(isElementaryWorldPower(3, 1));\nconsole.log(isElementaryWorldPower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a > 0 && (Math.pow(a, 3) === a)\n}\n\nconsole.log(iscube(1))\nconsole.log(iscube(2))\nconsole.log(iscube(-1))\nconsole.log(iscube(64))\nconsole.log(iscube(0))\nconsole.log(iscube(180))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hex = num.split('');\n  let result = 0;\n  for (let i = 0; i < hex.length; i++) {\n    let digit = parseInt(hex[i], 16);\n    if (isPrime(digit)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nfunction isPrime(num) {\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(hexKey(\"AB\")); // 1\nconsole.log(hexKey(\"1077E\")); // 2\nconsole.log(hexKey(\"ABED1A33\")); // 4\nconsole.log(hexKey(\"123456789ABCDEF0\")); // 6\nconsole.log(hexKey(\"2020\")); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst decimalToBinaryTest = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary2 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary3 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary4 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary5 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary6 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary7 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary8 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary9 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary10 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary11 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary12 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary13 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary14 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n}\n\nconst test_decimalToBinary15 = (decimal) => {\n  const decimal_bin = decimal.toString(2).toUpperCase();\n  const bin_bin = decimal_bin.split('').reverse();\n  const binary_str = `${bin_bin.join('')}db`;\n  return binary_str;\n"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isFelicitous", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isFelicitous(a) => false\n  isFelicitous(aa) => false\n  isFelicitous(abcd) => true\n  isFelicitous(aabb) => false\n  isFelicitous(adb) => true\n  isFelicitous(xyy) => false\n  */\nconst isFelicitous = (s) => {\n  const arr = s.split('')\n  if (arr.length < 3) return false\n  const unique = new Set(arr)\n  return unique.size === arr.length\n}\n\nconsole.log(isFelicitous('abcd'))\nconsole.log(isFelicitous('aabb'))\nconsole.log(isFelicitous('adb'))\nconsole.log(isFelicitous('xyy'))\nconsole.log(isFelicitous('adx'))\nconsole.log(isFelicitous('abcx'))\nconsole.log(isFelicitous('ad'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericLetterGrade = (grades) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < grades.length; i++) {\n    sum += grades[i];\n  }\n  let avg = sum / grades.length;\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= avg) {\n      result.push('A+');\n    } else if (grades[i] >= avg - 0.1) {\n      result.push('A');\n    } else if (grades[i] >= avg - 0.3) {\n      result.push('A-');\n    } else if (grades[i] >= avg - 0.7) {\n      result.push('B+');\n    } else if (grades[i] >= avg - 1.3) {\n      result.push('B');\n    } else if (grades[i] >= avg - 1.7) {\n      result.push('B-');\n    } else if (grades[i] >= avg - 2.3) {\n      result.push('C+');\n    } else if (grades[i] >= avg - 2.7) {\n      result.push('C');\n    } else if (grades[i] >= avg - 3.3) {\n      result.push('C-');\n    } else if (grades[i] >= avg - 3.7) {\n      result.push('D+');\n    } else if (grades[i] >= avg - 4.0) {\n      result.push('D');\n    } else {\n      result.push('D-');\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "premierDistance", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  premierDistance('Hello') == true\n  premierDistance('abcdcba') == true\n  premierDistance('kittens') == true\n  premierDistance('orange') == false\n  */\nconst premierDistance = (string) => {\n    if(string.length === 0) return false;\n    if(string.length === 1) return true;\n    if(string.length === 2) return (string % 2 === 0);\n    let charAt = 2;\n    let i = 3;\n    while(i <= string.length) {\n        if(string[i] === string[charAt]) {\n            charAt += 1;\n            i += 2;\n        } else if(charAt === 2) {\n            return false;\n        } else {\n            charAt = 2;\n            i += 2;\n        }\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "beginOneEnd", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst beginOneEnd = (n) => {\n  let x = 1;\n  let cnt = 0;\n  while (x < n) {\n    x = x * 10;\n    cnt++;\n  }\n  return cnt;\n};\n\nconsole.log(beginOneEnd(5));\nconsole.log(beginOneEnd(10));\nconsole.log(beginOneEnd(20));\nconsole.log(beginOneEnd(100));\nconsole.log(beginOneEnd(1000));\nconsole.log(beginOneEnd(10000));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "resolve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst resolve = (N) => {\n  let sum = 0\n  while (N > 0) {\n    sum += N % 2\n    N = Math.floor(N / 2)\n  }\n  return sum\n}\n\nconsole.log(resolve(147))\nconsole.log(resolve(1001))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "lend", "gc": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (acc.indexOf(num)!== -1) {\n      acc[acc.indexOf(num)] = num;\n    }\n    return acc;\n  }, []);\n}\n\n/*Given two lists A and B, return the elements of list B that are not in list A.\n\n  Examples:\n      intersection([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8]) ==> [6, 7, 8]\n      intersection([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 6, 7, 8, 9]) ==> [2, 3, 4, 6, 7, 8]\n      intersection([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 6, 7, 8, 9]) ==> [2, 3, 4, 6, 7, 8]\n*/\nconst intersection = (lst1, lst2) => {\n  return lst2.filter(l => lst1.indexOf(l) === -1);\n}\n\n/*Given a list of numbers, return the largest number in the list.\n\n  Examples:\n      maximum([4, 5, 6, 8, 12, 13]) ==> 13\n      maximum([2, 5, 6, 8, 12, 13]) ==> 12\n*/\nconst maximum = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (acc < num) {\n      acc = num;\n    }\n    return acc;\n  }, 0);\n}\n\n/*Given a list of numbers, return the smallest number in the list.\n\n  Examples:\n      minimum([4, 5, 6, 8, 12, 13]) ==> 4\n      minimum([2, 5, 6, 8, 12, 13]) ==> 2\n*/\nconst minimum = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (acc > num) {\n      acc = num;\n    }\n    return acc;\n  }, 0);\n}\n\n/*Given two lists A and B, return the intersection of list A and B.\n\n  Examples:\n      intersection([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8]) ==> [2, 3, 4]\n      intersection([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 6, 7, 8, 9]) ==> [2, 3, 4]\n      intersection([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 6, 7, 8, 9]) ==> [2, 3, 4]\n*/\nconst intersection = (lst1, lst2) => {\n  return intersection(lend(lst1), lend(lst2));\n}\n\n/*Given two lists A and B, return the symmetric difference of list A and B.\n\n  Examples:\n      symmetricDifference([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8]) ==> [1, 4, 5, 7, 8]\n      symmetricDifference([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 6, 7, 8, 9]) ==> [1, 4, 5, 7, 8, 9]\n      symmetricDifference([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 6, 7, 8, 9]) ==> [1, 4, 5, 7, 8, 9]\n*/\nconst symmetricDifference = (lst1, lst2) => {\n  return intersection(lend(lst1), lend(lst2).reverse());\n}\n\n/*Given two lists A and B, return the union of list A and B.\n\n  Examples:\n      union([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8]) ==> [1, 2, 3, 4, 5, 6, 7, 8]\n      union([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 6, 7, 8, 9]) ==> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n      union([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 6, 7, 8, 9]) ==> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n*/\nconst union = (lst1, lst2) => {\n  return intersection(lend(lst1), lend(lst2));\n}\n\n/*Given two lists A and B, return the difference of list A and B.\n\n  Examples:\n      difference([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8]) ==> [1, 5]\n      difference([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 6, 7, 8, 9]) ==> [1, 5, 7]\n      difference([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 6, 7, 8, 9]) ==> [1, 5, 7, 8]\n*/\nconst difference = (lst1, lst2) => {\n  return intersection(lend(lst1), lend(lst2).reverse());\n}\n\n/*Given two lists A and B, return the Cartesian product of list A and B.\n\n  Examples:\n      cartesianProduct([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8]) ==> [1, 2, 3, 4, 5, 2, 3, 4, 6, 7, 8]\n      cartesianProduct([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 6, 7, 8, 9]) ==> [1, 2, 3, 4, 5, 2, 3, 4, 6, 7, 8, 9]\n      cartesianProduct([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 6, 7,"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(' ')\n  let shuffle = []\n  for (let i = 0; i < arr.length; i++) {\n    let index = getIndex(arr[i])\n    shuffle.push(arr[index])\n    arr.splice(index, 1)\n  }\n  return shuffle.join(' ')\n}\n\nfunction getIndex (word) {\n  let index = 0\n  for (let i = 0; i < word.length; i++) {\n    if (word.charCodeAt(i) >= 97 && word.charCodeAt(i) <= 122) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "catchRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst catchRow = (lst, x) => {\n    const rows = sort(lst, rowSort);\n    const cols = sort(rows, colSort);\n    const [row, col] = sort([x], rowSort);\n    const rowCol = [row, col];\n    const rowColReverse = [row, col]\n    const xs = rows.map(row => row.map(rowColReverse));\n    const ys = cols.map(col => col.map(rowCol));\n    const tuples = xs.reduce((a, b) => a.concat(b), []);\n    const sortedTuples = tuples.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return sortedTuples;\n};\n\nconst rowSort = (a, b) => a[0] - b[0];\nconst colSort = (a, b) => b[1] - a[1];\n\n/*\n  Given a 2 dimensional data,\n  as a nested lists,\n  which is similar to matrix,\n  but unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, return a list of lists,\n  each inner list containing the coordinates\n  - (row, columns), starting with 0.\n  \n  Examples:\n  catchRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n  catchRow([], 1) == []\n  catchRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n  */\nconst catchRow2 = (lst, x) => {\n    const rows = sort(lst, rowSort);\n    const [row, col] = sort([x], rowSort);\n    const rowCol = [row, col];\n    const rowColReverse = [row, col]\n    const xs = rows.map(row => row.map(rowColReverse));\n    const ys = xs.reduce((a, b) => a.concat(b), []);\n    return ys;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array\n  }\n\n  const index = {\n    start: 0,\n    end: array.length - 1\n  }\n\n  while (index.end > index.start) {\n    const mid = Math.floor((index.start + index.end) / 2)\n\n    const sum = array[index.start] + array[index.end]\n\n    if (sum % 2 === 0) {\n      const tmp = array[index.start]\n      array[index.start] = array[index.end]\n      array[index.end] = tmp\n    }\n\n    index.start = mid\n    index.end = mid\n  }\n\n  return array\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let length = s.length;\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    let char = s[i];\n    let index = char.charCodeAt(0) - 97;\n    let newIndex = index + (index % 2) * 2;\n    result += String.fromCharCode(newIndex);\n  }\n  return result;\n};\n\nmodule.exports = encrypt;\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 1) return null\n  const i = 1\n  let j = lst.length - 1\n  while (i < j) {\n    const k = (i + j) >> 1\n    if (lst[k] < lst[i]) i = k\n    else j = k\n  }\n  return lst[i]\n}\n\n// const nextSmallest = (lst) => {\n//   if (lst.length === 1) return null\n//   const i = 1\n//   let j = lst.length - 1\n//   while (i < j) {\n//     const k = (i + j) >> 1\n//     if (lst[k] < lst[i]) i = k\n//     else j = k\n//   }\n//   return lst[i]\n// }\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\nconsole.log(nextSmallest([1, 2, 3]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlase", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlase(\"Hello world\")\n  0\n  >>> isBlase(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlase = (S) => {\n  let n = 0;\n  let str = S;\n  let s = 0;\n  let b = 0;\n  let bs = str.split(/[.,!?]/);\n  let sbs = str.split(/[.?]/);\n  for(let i = 0; i < bs.length; i++) {\n    let s = bs[i].length;\n    if(bs[i] === \"I\") {\n      s = 1;\n    }\n    b += s;\n  }\n  for(let i = 0; i < sbs.length; i++) {\n    let s = sbs[i].length;\n    if(sbs[i] === \"?\") {\n      s = 1;\n    }\n    s += 1;\n    s += 1;\n    b += s;\n  }\n  return b;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z && x === parseInt(x) && y === parseInt(y) && z === parseInt(z);\n};\n\nconst test = (message, result) => {\n  console.log(`${message} ${result? 'TRUE' : 'FALSE'}`);\n};\n\ntest('anyInt(5, 2, 7)', anyInt(5, 2, 7));\ntest('anyInt(3, 2, 2)', anyInt(3, 2, 2));\ntest('anyInt(3, -2, 1)', anyInt(3, -2, 1));\ntest('anyInt(3.6, -2.2, 2)', anyInt(3.6, -2.2, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let message = message.toLowerCase()\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let result = ''\n  let index = 0\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    if (letter.match(/[a-z]/i)) {\n      if (letter.match(/[aeiou]/i)) {\n        letter = alphabet[(alphabet.indexOf(letter) + 2) % 26]\n      } else {\n        letter = alphabet[alphabet.indexOf(letter) + 1]\n      }\n    }\n    result += letter\n  }\n  return result\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places behind that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('THKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let message = message.toLowerCase()\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let result = ''\n  let index = 0\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    if (letter.match(/[a-z]/i)) {\n      if (letter.match(/[aeiou]/i)) {\n        letter = alphabet[(alphabet.indexOf(letter) - 2) % 26]\n      } else {\n        letter = alphabet[alphabet.indexOf(letter) - 1]\n      }\n    }\n    result += letter\n  }\n  return result\n}\n\nmodule.exports = {\n  encode,\n  decode\n}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1159, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003]\n\n  let max = 0\n  let sum = 0\n  for (let i = 0; i < primes.length; i++) {\n    let p = primes[i]\n    let digit = lst.map((v) => v % p)\n    let s = sum(digit)\n    if (s > max) {\n      max = s\n      sum = p\n    }\n  }\n  return sum\n}\n\nfunction sum(digit) {\n  let s = 0\n  for (let i = digit.length - 1; i >= 0; i--) {\n    s += digit[i]\n  }\n  return s\n}\n\nconst t = (n) => {\n  let p = []\n  for (let i = 1; i <= n; i++) {\n    p.push(i)\n  }\n  let s = 0\n  let i = 0\n  while (p[i] <= n) {\n    s += p[i++]\n  }\n  return s\n}\n\nconst tt = (n) => {\n  let p = []\n  for (let i = 1; i <= n; i++) {\n    p.push(i)\n  }\n  let s = 0\n  let i = 0\n  while (p[i] <= n) {\n    s += p[i++]\n  }\n  return s\n}\n\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\nconsole.log(skjkasdkd([0, 724"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "determineDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  determineDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  determineDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  determineDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  determineDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  determineDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst determineDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const allLower = keys.every((key) => key.toLowerCase() === key)\n  const allUpper = keys.every((key) => key.toUpperCase() === key)\n\n  if (allLower) {\n    return true\n  }\n  if (allUpper) {\n    return false\n  }\n  return false\n}\n\nmodule.exports = determineDictCase\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "considerUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  considerUpTo(5) => [2,3]\n  considerUpTo(11) => [2,3,5,7]\n  considerUpTo(0) => []\n  considerUpTo(20) => [2,3,5,7,11,13,17,19]\n  considerUpTo(1) => []\n  considerUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst considerUpTo = (n) => {\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(primes.indexOf(i) === -1){\n      primes.push(i);\n      for(let j = 2; j < Math.sqrt(i); j++){\n        if(i % j === 0){\n          break;\n        }\n        if(primes.indexOf(j) === -1){\n          primes.push(j);\n        }\n      }\n    }\n  }\n  return primes;\n}\n\nconsole.log(considerUpTo(5));\nconsole.log(considerUpTo(11));\nconsole.log(considerUpTo(0));\nconsole.log(considerUpTo(20));\nconsole.log(considerUpTo(1));\nconsole.log(considerUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "breed", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  breed(148, 412) should return 16.\n  breed(19, 28) should return 72.\n  breed(2020, 1851) should return 0.\n  breed(14,-15) should return 20.\n  */\nconst breed = (a, b) => {\n  if (isNaN(a) || isNaN(b)) return 0;\n  let a = parseInt(a);\n  let b = parseInt(b);\n  let prod = 1;\n  for (let i = 0; i < Math.min(a, b); i++) {\n    prod *= Math.pow(10, i);\n  }\n  return prod;\n}\n\nconsole.log(breed(2, 3));\nconsole.log(breed(10, 0));\nconsole.log(breed(5, 8));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "considerUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  considerUpper('aBCdEf') returns 1\n  considerUpper('abcdefg') returns 0\n  considerUpper('dBBE') returns 0\n  */\nconst considerUpper = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result.push(1);\n    }\n    else {\n      result.push(0);\n    }\n  }\n  return result;\n};\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closeInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closeInteger(\"10\")\n  10\n  >>> closeInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closeInteger(\"14.5\") should\n  return 15 and closeInteger(\"-14.5\") should return -15.\n  */\nconst closeInteger = (value) => {\n  const split = value.split('.');\n  const whole = split[0];\n  const decimal = split[1] || '0';\n  const i = parseInt(whole);\n  let j = 0;\n\n  if (i!== whole) {\n    const t = parseInt(whole.substring(1));\n    j = t + (parseInt(decimal) - (i % t));\n  } else {\n    j = parseInt(whole);\n  }\n\n  return j;\n};\n\nexport default closeInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "holdAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> holdAPile(3)\n  [3, 5, 7]\n  */\nconst holdAPile = (n) => {\n  let p = 1\n  while (p < n) {\n    p += Math.ceil(Math.random() * 2)\n  }\n  return p\n}\n\nconsole.log(holdAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "bibleString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  bibleString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  bibleString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst bibleString = (s) => {\n  let words = s.split(/(\\s|,)/)\n  return words\n}\n\n/*\n  Your task is to write a function that reads in an integer value and returns the number\n  of bits it takes to represent the integer (eg. 32 is 5 bits).\n  \n  For example:\n  bitsToInt(8) = 8\n  bitsToInt(15) = 4\n  bitsToInt(17) = 3\n  bitsToInt(23) = 2\n  bitsToInt(32) = 5\n  bitsToInt(33) = 0\n  bitsToInt(64) = 9\n  bitsToInt(65) = 0\n  bitsToInt(128) = 18\n  bitsToInt(129) = 0\n  bitsToInt(256) = 32\n  bitsToInt(257) = 0\n  bitsToInt(512) = 61\n  bitsToInt(513) = 0\n  bitsToInt(1024) = 122\n  bitsToInt(1025) = 0\n  */\nconst bitsToInt = (n) => {\n  if (n > 0) {\n    return Math.floor(Math.log(n) / Math.log(2))\n  }\n  return 0\n}\n\n/*\n  Your task is to write a function that accepts an integer value and returns the number\n  of bits in the number that represent the integer (eg. 32 is 5 bits).\n  \n  For example:\n  intToBits(8) = 8\n  intToBits(15) = 4\n  intToBits(17) = 3\n  intToBits(23) = 2\n  intToBits(32) = 5\n  intToBits(33) = 0\n  intToBits(64) = 9\n  intToBits(65) = 0\n  intToBits(128) = 18\n  intToBits(129) = 0\n  intToBits(256) = 32\n  intToBits(257) = 0\n  intToBits(512) = 61\n  intToBits(513) = 0\n  intToBits(1024) = 122\n  intToBits(1025) = 0\n  */\nconst intToBits = (n) => {\n  return bitsToInt(n)\n}\n\n/*\n  Your task is to write a function that accepts an integer value and returns a string\n  representing the binary number that contains the bits of the integer.\n  \n  For example:\n  intToBinary(8) = 1010\n  intToBinary(15) = 1111\n  intToBinary(17) = 1001\n  intToBinary(23) = 1011\n  intToBinary(32) = 1100\n  intToBinary(33) = 1000\n  intToBinary(64) = 1101\n  intToBinary(65) = 1000\n  intToBinary(128) = 1110\n  intToBinary(129) = 0000\n  intToBinary(256) = 1110\n  intToBinary(257) = 0000\n  intToBinary(512) = 1110\n  intToBinary(513) = 0000\n  intToBinary(1024) = 1110\n  intToBinary(1025) = 0000\n  */\nconst intToBinary = (n) => {\n  let num = n\n  let binary = []\n  while (num > 0) {\n    let remainder = num % 2\n    binary.unshift(remainder)\n    num = Math.floor(num / 2)\n  }\n  return binary.join('')\n}\n\n/*\n  Your task is to write a function that accepts an integer value and returns a string\n  that contains the binary representation of the integer.\n  \n  For example:\n  intToBinary(8) = 1010\n  intToBinary(15) = 1111\n  intToBinary(17) = 1001\n  intToBinary(23) = 1011\n  intToBinary(32) = 1100\n  intToBinary(33) = 1000\n  intToBinary(64) = 1101\n  intToBinary(65) = 1000\n  intToBinary(128) = 1110\n  intToBinary(129) = 0000\n  intToBinary(256) = 1110\n  intToBinary(257) = 0000\n  intToBinary(512) = 1110\n  intToBinary(513) = 0000\n  intToBinary(1024) = 1110\n  intToBinary(1025) = 0000\n  */\nconst intToBinary = (n) => {\n  return intToBits(n) + 'b'\n}\n\n/*\n  Your task is to write a function that takes a string and a character and returns the\n  number of times the character occurs in the string.\n  \n  For example:\n  stringCount('Hi, my name is John', ',') = 2\n  stringCount('Hi, my name is John', 'h') = 1\n  stringCount('Hi, my name is John', 'o') = 0\n  stringCount('Hi, my name is John', 'n') = 1\n  stringCount('Hi, my name is John','s') = 1\n  stringCount('Hi, my name is John', 'j') = 0\n  stringCount('Hi, my name is John', 'o') = 1\n  stringCount('Hi, my name is John', 'N') = 1\n  */\nconst stringCount = (s, c) => {\n  return s.split(c).length\n}\n\n/*\n  Your task is to write a function that accepts two strings and returns the longest common\n  substring.\n  \n  For example:\n  longestCommonSubstring('Hi, my name is John', 'Hi, my name is John') = 'John'\n  longestCommonSubstring('Hi, my name is John', 'Hi, my name is J') = 'John'\n  longestCommonSubstring('Hi, my name is John', 'Hi, my name is Joe') ="}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return Math.max(x, y);\n  }\n  if (x % 2 === 1 && y % 2 === 1) {\n    return Math.min(x, y);\n  }\n  return -1;\n};\n\nconst numberOfSmallerNumbers = (n) => {\n  const small = Math.ceil(n / 2);\n  return Math.pow(2, small) - 1;\n};\n\nconst chooseNumber = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return chooseNum(numberOfSmallerNumbers(n), n);\n};\n\nconst chooseNumFromArray = (nums) => {\n  const len = nums.length;\n  let res = nums[0];\n  for (let i = 1; i < len; i++) {\n    res = chooseNum(res, nums[i]);\n  }\n  return res;\n};\n\nconst isPal = (num) => {\n  let arr = num.split(\"\");\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalArray = (nums) => {\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst isPalSum = (num) => {\n  const arr = num.split(\"\");\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst palSum = (n) => {\n  const sum = 0;\n  let num = \"\";\n  while (n > 0) {\n    num = n % 10 + \"\" + num;\n    sum += num.charAt(0);\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\nconst testPal = () => {\n  console.log(\"testPal\");\n  console.log(isPal(palSum(\"12345\")));\n  console.log(isPal(palSum(\"2\")));\n  console.log(isPal(palSum(\"12345\")));\n  console.log(isPal(palSum(\"1234567890\")));\n  console.log(isPal(palSum(\"123456789012345\")));\n  console.log(isPal(palSum(\"1234\")));\n  console.log(isPal(palSum(\"123456\")));\n  console.log(isPal(palSum(\"12345678\")));\n  console.log(isPal(palSum(\"123456789\")));\n  console.log(isPal(palSum(\"123456789012\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"12345678901234567890123456789012345678901234567890\")));\n  console.log(isPal(palSum(\"123456789012345678901234567890123456789"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const num = Math.ceil((n + m) / 2);\n  const avg = (n + m) / 2;\n  return roundedAvg(num, m);\n}\n\nmodule.exports = roundedAvg;<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "aloneDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> aloneDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> aloneDigit([152, 323, 1422, 10])\n  []\n  */\nconst aloneDigit = (x) => {\n    const output = [];\n    for(let i=0; i<x.length; i++){\n        if(x[i] % 2 == 0){\n            continue;\n        }\n        output.push(x[i]);\n    }\n    return output;\n};\n\nexport default aloneDigit;<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byDuration", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byDuration = (arr) => {\n  let len = arr.length;\n  if (!len) return [];\n  let sorted = [arr[0]];\n  let index = 0;\n  let count = 1;\n  while (count < len) {\n    let current = sorted[index];\n    let next = arr[count];\n    if (current < next) {\n      sorted.push(next);\n      index = count;\n    }\n    count++;\n  }\n  let reversed = sorted.reverse();\n  let nameList = [];\n  let len = reversed.length;\n  let i = 0;\n  while (i < len) {\n    nameList.push(reversed[i].toString(10));\n    i++;\n  }\n  return nameList;\n};\n\nmodule.exports = byDuration;\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n === 1) return [1];\n  return [...new Array(n)].map((_, i) => n * (n - i) / i);\n};\n\nconst test = () => {\n  let actual = f(5);\n  let expected = [1, 2, 6, 24, 15];\n  let result = actual;\n  console.log(`The result of f(5) is: ${result}`);\n  console.log(`The expected result is: ${expected}`);\n  assert.deepEqual(actual, expected);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    const odd = 0,\n        even = 0;\n\n    for (let i = 1; i < n; i++) {\n        if (i % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n\n    return [even, odd];\n};\n\nconst evenOddPalindrome2 = (n) => {\n    let odd = 0,\n        even = 0;\n\n    for (let i = 1; i < n; i++) {\n        if (i % 2 === 1) {\n            odd++;\n        } else {\n            even++;\n        }\n    }\n\n    return [odd, even];\n};\n\nexport { evenOddPalindrome, evenOddPalindrome2 };\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "considerNums", "gc": "/*\n  Write a function considerNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> considerNums([]) == 0\n  >>> considerNums([-1, 11, -11]) == 1\n  >>> considerNums([1, 1, 2]) == 3\n  */\nconst considerNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(10, i);\n  }\n  return sum.toString().length;\n};\n\nconsole.log(considerNums([-1, 11, -11]));\nconsole.log(considerNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "affectOneTestis", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  affectOneTestis([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  affectOneTestis([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const last = sorted.pop();\n  let shift = 0;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === last) {\n      i++;\n    } else {\n      shift += 1;\n      arr[i] = arr[i] - shift;\n      arr[i - 1] = arr[i - 1] + shift;\n    }\n  }\n  return sorted.every(el => el === arr[i - 1]);\n};\n\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const last = sorted.pop();\n  let shift = 0;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === last) {\n      i++;\n    } else {\n      shift += 1;\n      arr[i] = arr[i] - shift;\n      arr[i - 1] = arr[i - 1] + shift;\n    }\n  }\n  return sorted.every(el => el === arr[i - 1]);\n};\n\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const last = sorted.pop();\n  let shift = 0;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === last) {\n      i++;\n    } else {\n      shift += 1;\n      arr[i] = arr[i] - shift;\n      arr[i - 1] = arr[i - 1] + shift;\n    }\n  }\n  return sorted.every(el => el === arr[i - 1]);\n};\n\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const last = sorted.pop();\n  let shift = 0;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === last) {\n      i++;\n    } else {\n      shift += 1;\n      arr[i] = arr[i] - shift;\n      arr[i - 1] = arr[i - 1] + shift;\n    }\n  }\n  return sorted.every(el => el === arr[i - 1]);\n};\n\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const last = sorted.pop();\n  let shift = 0;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === last) {\n      i++;\n    } else {\n      shift += 1;\n      arr[i] = arr[i] - shift;\n      arr[i - 1] = arr[i - 1] + shift;\n    }\n  }\n  return sorted.every(el => el === arr[i - 1]);\n};\n\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const last = sorted.pop();\n  let shift = 0;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === last) {\n      i++;\n    } else {\n      shift += 1;\n      arr[i] = arr[i] - shift;\n      arr[i - 1] = arr[i - 1] + shift;\n    }\n  }\n  return sorted.every(el => el === arr[i - 1]);\n};\n\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const last = sorted.pop();\n  let shift = 0;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === last) {\n      i++;\n    } else {\n      shift += 1;\n      arr[i] = arr[i] - shift;\n      arr[i - 1] = arr[i - 1] + shift;\n    }\n  }\n  return sorted.every(el => el === arr[i - 1]);\n};\n\nconst affectOneTestis = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  "}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "central", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an central of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of centrald elements between lst1 and lst2.\n  If it is possible to central elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  central([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  central([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst central = (lst1, lst2) => {\n  const lst1Size = lst1.length\n  const lst2Size = lst2.length\n  const sum = lst1Size + lst2Size\n  if (sum % 2 === 0) return \"YES\"\n  return \"NO\"\n}\n\nconsole.log(central([1, 2, 3, 4], [1, 2, 3, 4])) //\"YES\"\nconsole.log(central([1, 2, 3, 4], [1, 5, 3, 4])) //\"NO\"\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    const alphabet = test.split(' ').filter(v => v.length > 0);\n    const result = {};\n    for(const letter of alphabet) {\n        result[letter] = test.split(letter).length;\n    }\n    return result;\n}\n\nconst test = histogram('a b c');\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "invertDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst invertDelete = (s, c) => {\n  const result = s.split('');\n  let i = 0;\n  while(i < result.length){\n    if(result[i] === c){\n      result.splice(i,1);\n    }\n    i++;\n  }\n  return result.join('');\n};\n\nconst checkPalindrome = (s) => {\n  const result = invertDelete(s, s[s.length - 1]);\n  return result === s;\n};\n\nmodule.exports = {\n  checkPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "curiousCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> curiousCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> curiousCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst curiousCount = (lst) => {\n  const result = [];\n  const len = lst.length;\n\n  for (let i = 0; i < len; i++) {\n    const count = countOddDigits(lst[i]);\n    result.push(`the number of odd elements ${i} of the ${i}`);\n    result.push(`the number of odd elements ${count} of the ${i}`);\n  }\n\n  return result;\n};\n\nexport default curiousCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minuteSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minuteSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minuteSubArraySum([-1, -2, -3]) == -6\n  */\nconst minuteSubArraySum = (nums) => {\n  let currentSum = nums[0]\n  let minSum = currentSum\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      currentSum += nums[i]\n      minSum = Math.min(minSum, currentSum)\n    }\n  }\n  return minSum\n}\n\nconsole.log(minuteSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minuteSubArraySum([-1, -2, -3]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "soapFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst soapFill = (grid, capacity) => {\n  let gridLen = grid.length;\n  let buckets = grid.map(row => row.length);\n  let res = 0;\n\n  for (let i = 0; i < gridLen; i += 1) {\n    let row = grid[i];\n    let bucket = row.reduce((acc, elem, i) => {\n      if (acc === capacity) {\n        return -1;\n      } else if (elem) {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n\n    if (bucket!== -1) {\n      res += bucket;\n      bucket = bucket - 1;\n    }\n  }\n  return res;\n};\n\nlet f = (grid, capacity) => {\n  let buckets = grid.map(row => row.length);\n  let res = 0;\n  let row = 0;\n\n  for (let i = 0; i < gridLen; i += 1) {\n    let row = grid[i];\n    let bucket = row.reduce((acc, elem, i) => {\n      if (acc === capacity) {\n        return -1;\n      } else if (elem) {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n\n    if (bucket!== -1) {\n      res += bucket;\n      bucket = bucket - 1;\n    }\n  }\n  return res;\n};\n\nlet f2 = (grid, capacity) => {\n  let buckets = grid.map(row => row.length);\n  let row = 0;\n  let res = 0;\n\n  for (let i = 0; i < gridLen; i += 1) {\n    let row = grid[i];\n    let bucket = row.reduce((acc, elem, i) => {\n      if (acc === capacity) {\n        return -1;\n      } else if (elem) {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n\n    if (bucket!== -1) {\n      res += bucket;\n      bucket = bucket - 1;\n    }\n  }\n  return res;\n};\n\nlet f3 = (grid, capacity) => {\n  let buckets = grid.map(row => row.length);\n  let res = 0;\n\n  for (let i = 0; i < gridLen; i += 1) {\n    let row = grid[i];\n    let bucket = row.reduce((acc, elem, i) => {\n      if (acc === capacity) {\n        return -1;\n      } else if (elem) {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n\n    if (bucket!== -1) {\n      res += bucket;\n      bucket = bucket - 1;\n    }\n  }\n  return res;\n};\n\nlet f4 = (grid, capacity) => {\n  let buckets = grid.map(row => row.length);\n  let row = 0;\n  let res = 0;\n\n  for (let i = 0; i < gridLen; i += 1) {\n    let row = grid[i];\n    let bucket = row.reduce((acc, elem, i) => {\n      if (acc === capacity) {\n        return -1;\n      } else if (elem) {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n\n    if (bucket!== -1) {\n      res += bucket;\n      bucket = bucket - 1;\n    }\n  }\n  return res;\n};\n\nlet f5 = (grid, capacity) => {\n  let buckets = grid.map(row => row.length);\n  let row = 0;\n  let res = 0;\n\n  for (let i = 0; i < gridLen; i += 1) {\n    let row = grid[i];\n    let bucket = row.reduce((acc, elem, i) => {\n      if (acc === capacity) {\n        return -1;\n      } else if (elem) {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n\n    if (bucket!== -1) {\n      res += bucket;\n      bucket = bucket - 1;\n    }\n  }\n  return res;\n};\n\nlet f6 = (grid, capacity) => {\n  let buckets = grid.map(row => row.length);\n  let row = 0;\n  let res = 0;\n\n  for (let i = 0; i < gridLen; i += 1) {\n    let row = grid[i];\n    let bucket = row.reduce((acc, elem, i) => {\n      if (acc === capacity) {\n        return -1;\n      } else if (elem) {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n\n    if (bucket!== -1) {\n      res += bucket;\n      bucket = bucket - 1;\n    }\n  }\n  return res;\n};\n\nlet f7 = ("}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  if (arr.length === 0) {\n    return arr;\n  }\n\n  let sortedArray = arr.slice();\n  let sortedArr = [0, 0];\n  sortedArr[0] = sortedArray[0];\n\n  sortedArray.forEach((number, index) => {\n    sortedArr = sortedArray.concat([index, sortedArr[1]]);\n    sortedArr[1] = sortedArr[1] + number;\n  });\n\n  return sortedArr;\n};\n\nexport { sortArray };\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "choiceDiscussion", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  choiceDiscussion(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  choiceDiscussion(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  choiceDiscussion(\"simple white space\", 2) ==> []\n  choiceDiscussion(\"Hello world\", 4) ==> [\"world\"]\n  choiceDiscussion(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst choiceDiscussion = (s, n) => {\n    const result = [];\n    const char = s.charAt(0);\n    const consonants = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let word = '';\n    for (let i = 0; i < s.length; i++) {\n        const c = s.charAt(i);\n        if (consonants.indexOf(c) === -1) {\n            word += c;\n        } else {\n            if (word.length === n) {\n                result.push(word);\n            }\n            word = '';\n        }\n    }\n    if (word.length === n) {\n        result.push(word);\n    }\n    return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "catchClosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  catchClosestVowel(\"yogurt\") ==> \"u\"\n  catchClosestVowel(\"FULL\") ==> \"U\"\n  catchClosestVowel(\"quick\") ==> \"\"\n  catchClosestVowel(\"ab\") ==> \"\"\n  */\nconst catchClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const closest = word.charAt(word.length - 1)\n  let pos = word.length - 2\n  let closestVowel = closest\n  while (pos >= 0) {\n    if (vowels.indexOf(word.charAt(pos)) > -1) {\n      closestVowel = word.charAt(pos)\n      break\n    }\n    pos--\n  }\n  return closestVowel\n}\n\nexport default catchClosestVowel\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "catchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  catchParens(['()(', ')']) == 'Yes'\n  catchParens([')', ')']) == 'No'\n  */\nconst catchParens = (lst) => {\n  if(lst.length === 0) {\n    return 'No';\n  }\n  if(lst.length === 1) {\n    return 'Yes';\n  }\n\n  if(lst[0].length!== lst[1].length) {\n    return 'No';\n  }\n  return catchParens(lst.slice(1));\n};\n\nmodule.exports = catchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximal", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximal k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximal = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n\n  let count = 0;\n  let last = -1;\n  let current = -1;\n\n  for (let i = 0; i < len; i++) {\n    if (count < k) {\n      result[count++] = arr[i];\n    } else if (arr[i] > last) {\n      current = result[count - 1];\n      result[count++] = arr[i];\n      if (arr[i] - current > k - count) {\n        result[count++] = arr[i];\n      }\n      last = arr[i];\n    } else {\n      break;\n    }\n  }\n\n  return result;\n};\n\nexport default maximal;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const isOdd = (num) => num % 2 === 1\n  const sumOdd = (num) => (num - 1)\n  const sumEven = (num) => num\n  const sum = (lst) => lst.reduce((sumOdd, num) => sumOdd(sumEven(num))\n   , 0)\n  return sum(lst)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "lendElement", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst lendElement = (arr, k) => {\n  let len = arr.length,\n      sums = [0, 0],\n      res = 0,\n      carry = 0;\n\n  while (k--) {\n    sums[1] += arr[k];\n    sums[0] += sums[1];\n    res += sums[0];\n\n    carry = sums[1] - (sums[0] % 10);\n    sums[0] = carry;\n  }\n\n  return res;\n};\n\nconsole.log(lendElement([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\nconsole.log(lendElement([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3));\nconsole.log(lendElement([111, 21, 3, 4000, 5, 6, 7, 8, 9], 2));\nconsole.log(lendElement([111, 21, 3, 4000, 5, 6, 7, 8, 9], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "catchOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  catchOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst catchOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n\n    const prev = n % 2 === 1? n : 3 * n + 1;\n    const res = [prev];\n\n    while (prev!== 1) {\n      prev = collatz(prev);\n      res.push(prev);\n    }\n\n    return res;\n  }\n\n  return collatz(n);\n}\n\nconst test = {\n  catchOddCollatz(5) {\n    console.log(JSON.stringify(catchOddCollatz(5)));\n  },\n}<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if(!date ||!date.length ||!date.length || date.length < 2) return false;\n  if(date.length === 2) return true;\n  const year = parseInt(date.substr(0,2));\n  const month = parseInt(date.substr(3,2));\n  const day = parseInt(date.substr(6,2));\n  if(year < 1 || year > 3000) return false;\n  if(month < 1 || month > 12) return false;\n  if(day < 1 || day > 31) return false;\n  if(month === 2 && day > 29) return false;\n  if(month === 4 || month === 6 || month === 9 || month === 11) {\n    if(day > 30) return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "disconnectedWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  disconnectedWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  disconnectedWords(\"abcdef\") == 3\n  */\nconst disconnectedWords = (txt) => {\n  const words = txt.split(/\\s+/g)\n  return words.filter((item, index) => item.length > 0)\n}\n\nconst findOrder = (txt) => {\n  let order = 0\n  for (let i = 0; i < txt.length; i++) {\n    const c = txt[i].toLowerCase()\n    if (c >= 'a' && c <= 'z') {\n      if (c > order) order = c\n    }\n  }\n  return order\n}\n\nmodule.exports = {\n  disconnectedWords,\n  findOrder\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isScreen", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isScreen([5]) ➞ true\n  isScreen([1, 2, 3, 4, 5]) ➞ true\n  isScreen([1, 3, 2, 4, 5]) ➞ false\n  isScreen([1, 2, 3, 4, 5, 6]) ➞ true\n  isScreen([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isScreen([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isScreen([1, 2, 2, 3, 3, 4]) ➞ true\n  isScreen([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isScreen = (lst) => {\n  return lst.reduce((acc, n) => {\n    if (acc === true) return false;\n    if (acc === false) return true;\n    if (acc === undefined) return false;\n    if (acc === null) return false;\n    if (acc.constructor === Number) return lst.indexOf(n)!== -1;\n    if (acc.constructor === Array) {\n      return lst.indexOf(n)!== -1 &&\n        lst.indexOf(n) === acc.indexOf(n);\n    }\n    return false;\n  }, true);\n};\n\nmodule.exports = isScreen;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "overlap", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of overlap of these two \n  intervals is a prime number.\n  Example, the overlap of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the overlap is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  overlap((1, 2), (2, 3)) ==> \"NO\"\n  overlap((-1, 1), (0, 4)) ==> \"NO\"\n  overlap((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst overlap = (interval1, interval2) => {\n  const [a1, b1] = interval1;\n  const [a2, b2] = interval2;\n  const isIntersect = (a1 <= a2) && (b1 <= b2);\n  if (!isIntersect) {\n    return \"NO\";\n  }\n  const length = b1 - a1 + 1;\n  if (!(length % 2)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\nexport {overlap};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "goadSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> goadSigns([1, 2, 2, -4]) == -9\n  >>> goadSigns([0, 1]) == 0\n  >>> goadSigns([]) == null\n  */\nconst goadSigns = (arr) => {\n  const result = 0\n  const sign = (number) => {\n    if (number > 0) {\n      return 1\n    } else if (number < 0) {\n      return -1\n    } else {\n      return 0\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    result += Math.abs(arr[i]) * sign(arr[i])\n  }\n  return result\n}\n\nmodule.exports = goadSigns\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minutePath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minutePath = (grid, k) => {\n  const len = grid.length\n  if(k === 0) {\n    return []\n  }\n  const visited = new Set(grid)\n  const minPath = []\n  let path = []\n  for(let i = 0; i < len; i++) {\n    let cell = grid[i]\n    const neighbors = []\n    for(let j = 0; j < len; j++) {\n      if(i!== j) {\n        const neighbor = grid[j]\n        if(!visited.has(neighbor)) {\n          neighbors.push(neighbor)\n          visited.add(neighbor)\n        }\n      }\n    }\n    if(k > 0) {\n      let min = 99999999\n      let index = 0\n      for(let j = 0; j < neighbors.length; j++) {\n        const neighbor = neighbors[j]\n        const pathLen = path.length\n        if(pathLen === 0) {\n          if(path.length === 0) {\n            min = Math.min(min, neighbor)\n          } else {\n            min = Math.min(min, neighbor, path[pathLen - 1])\n          }\n        } else {\n          if(path[pathLen - 1] === neighbor) {\n            min = Math.min(min, path[pathLen - 1])\n          } else {\n            min = Math.min(min, path[pathLen - 1], neighbor)\n          }\n        }\n      }\n      if(min === 99999999) {\n        return []\n      }\n      path.push(min)\n      k--\n    }\n    minPath.push(path.slice())\n    path = []\n  }\n  return minPath\n}\n\nexport default minutePath<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    let a = 1, b = 1, c = 1, result = [];\n    while (n--) {\n        let temp = a + b;\n        result.push(temp);\n        a = b;\n        b = c;\n        c = temp;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst tri = (n) => {\n    let a = 1, b = 1, c = 1, result = [];\n    while (n--) {\n        let temp = a + b;\n        result.push(temp);\n        a = b;\n        b = c;\n        c = temp;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result = [];\n    while (n--) {\n        result.push(a + b);\n        a = b;\n        b = a + b;\n    }\n    return result;\n}\n\nconst fib = (n) => {\n    let a = 1, b = 1, result"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let x = 1;\n  let t = n;\n  while (t) {\n    if (t % 2) {\n      x = x * t;\n    }\n    t = t / 2;\n  }\n  return x;\n};\n\n/*\nGiven two numbers represented as strings, return multiplication of the numbers.\n\nNote: The numbers may be arbitrarily large and contain both digits 0 to 9.\n\n**Example 1:**\n\nInput: \"123\", \"456\"\nOutput: \"1296\"\n\n**Example 2:**\n\nInput: \"101\", \"1011\"\nOutput: \"110101\"\n\n**Example 3:**\n\nInput: \"123\", \"321\"\nOutput: \"43\"\n*/\nconst multiply = (a, b) => {\n  let res = 0;\n  let c = a.length - 1;\n  let d = b.length - 1;\n  while (c >= 0 && d >= 0) {\n    res += (digit(a.charCodeAt(c--)) * digit(b.charCodeAt(d--))) % 10;\n  }\n  return res;\n};\n\n/*\nGiven two numbers represented as strings, return subtraction of the numbers.\n\nNote: The numbers may be arbitrarily large and contain both digits 0 to 9.\n\n**Example 1:**\n\nInput: \"123\", \"456\"\nOutput: \"333\"\n\n**Example 2:**\n\nInput: \"101\", \"1011\"\nOutput: \"9\"\n\n**Example 3:**\n\nInput: \"123\", \"321\"\nOutput: \"-12\"\n*/\nconst subtract = (a, b) => {\n  let res = multiply(a, b);\n  if (res > 0) {\n    res = res % 10;\n  } else {\n    res = (10 - res) % 10;\n  }\n  return res;\n};\n\n/*\nGiven two numbers represented as strings, return their sum.\n\nNote: The numbers may be arbitrarily large and contain both digits 0 to 9.\n\n**Example 1:**\n\nInput: \"123\", \"456\"\nOutput: \"579\"\n\n**Example 2:**\n\nInput: \"101\", \"1011\"\nOutput: \"1111\"\n\n**Example 3:**\n\nInput: \"123\", \"321\"\nOutput: \"402\"\n*/\nconst add = (a, b) => subtract(b, a);\n\n/*\nGiven two numbers represented as strings, return their difference.\n\nNote: The numbers may be arbitrarily large and contain both digits 0 to 9.\n\n**Example 1:**\n\nInput: \"123\", \"456\"\nOutput: \"333\"\n\n**Example 2:**\n\nInput: \"101\", \"1011\"\nOutput: \"0\"\n\n**Example 3:**\n\nInput: \"123\", \"321\"\nOutput: \"222\"\n*/\nconst subtract = (a, b) => {\n  let res = add(a, b);\n  if (res > 0) {\n    res = res % 10;\n  } else {\n    res = (10 - res) % 10;\n  }\n  return res;\n};\n\n/*\nGiven two numbers represented as strings, return their product.\n\nNote: The numbers may be arbitrarily large and contain both digits 0 to 9.\n\n**Example 1:**\n\nInput: \"123\", \"456\"\nOutput: \"1296\"\n\n**Example 2:**\n\nInput: \"101\", \"1011\"\nOutput: \"110101\"\n\n**Example 3:**\n\nInput: \"123\", \"321\"\nOutput: \"43\"\n*/\nconst multiply = (a, b) => {\n  let res = 0;\n  let c = a.length - 1;\n  let d = b.length - 1;\n  while (c >= 0 && d >= 0) {\n    res += (digit(a.charCodeAt(c--)) * digit(b.charCodeAt(d--))) % 10;\n  }\n  return res;\n};\n\n/*\nGiven two numbers represented as strings, return their difference.\n\nNote: The numbers may be arbitrarily large and contain both digits 0 to 9.\n\n**Example 1:**\n\nInput: \"123\", \"456\"\nOutput: \"333\"\n\n**Example 2:**\n\nInput: \"101\", \"1011\"\nOutput: \"0\"\n\n**Example 3:**\n\nInput: \"123\", \"321\"\nOutput: \"222\"\n*/\nconst subtract = (a, b) => {\n  let res = multiply(a, b);\n  if (res > 0) {\n    res = res % 10;\n  } else {\n    res = (10 - res) % 10;\n  }\n  return res;\n};\n\n/*\nGiven two numbers represented as strings, return their sum.\n\nNote: The numbers may be arbitrarily large and contain both digits 0 to 9.\n\n**Example 1:**\n\nInput: \"123\", \"456\"\nOutput: \"579\"\n\n**Example 2:**\n\nInput: \"101\", \"1011\"\nOutput: \"1111\"\n\n**Example 3:**\n\nInput: \"123\", \"321\"\nOutput: \"402\"\n*/\nconst add = (a, b) => {\n  let res = subtract(b, a);\n  if (res > 0) {\n    res = res % 10;\n  } else {\n    res = (10 - res) % 10;\n  }\n  return res;\n};\n\n/*\nGiven two numbers represented as strings, return their product.\n\nNote: The numbers may be arbitrarily large and contain both digits 0 to 9.\n\n**Example 1:**\n\nInput: \"123\", \"456\"\nOutput: \"1296\"\n\n**Example 2:**\n\nInput: \"101\", \"1011\"\nOutput: \"110101\"\n\n**Example 3:**\n\nInput: \"123\", \"321\"\nOutput: \"43\"\n*/\nconst multiply = (a, b) => {\n  let res = add(a, b);\n  if (res > 0) {\n    res = res % 10;\n  } else {\n    res = (10 - res) % 10;\n  }\n  return res;\n};\n\n/*\nGiven two numbers represented as strings, return their difference.\n\nNote: The numbers"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  let stack = [];\n  let i = 0;\n  while (i < string.length) {\n    const c = string[i];\n    if (c === '[') {\n      stack.push(c);\n    } else if (c === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[' && stack[stack.length - 2] === '[' && stack[stack.length - 3] === ']') {\n        stack.pop();\n        stack.pop();\n        stack.pop();\n      } else if (stack[stack.length - 1] === '[' && stack[stack.length - 2] === ']') {\n        stack.pop();\n      }\n    }\n    i++;\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNest('[[]]'));\nconsole.log(isNest('[]]]]]]][[[[[]'));\nconsole.log(isNest('[][]'));\nconsole.log(isNest('[]'));\nconsole.log(isNest('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst summarizeSquare = (lst) => {\n  let res = 0;\n  for(let i=0; i < lst.length; i++) {\n    res += Math.round(Math.pow(lst[i],2))\n  }\n  return res;\n}\n\nexport default summarizeSquare\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "determineIfConcludingCharConstituteALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  determineIfConcludingCharConstituteALetter(\"apple pie\") ➞ false\n  determineIfConcludingCharConstituteALetter(\"apple pi e\") ➞ true\n  determineIfConcludingCharConstituteALetter(\"apple pi e \") ➞ false\n  determineIfConcludingCharConstituteALetter(\"\") ➞ false\n  */\nconst determineIfConcludingCharConstituteALetter = (txt) => {\n  const firstChars = txt.split(\"\").map((char) => char.charCodeAt(0));\n  return firstChars.reduce((acc, code) => (\n    (acc && firstChars.indexOf(code) === -1)? false : acc\n  ), true);\n};\n\nexport const getFirstWord = (txt) => txt.split(\" \")[0];\n\nexport const getSecondWord = (txt) => txt.split(\" \")[1];\n\nexport const getThirdWord = (txt) => txt.split(\" \")[2];\n\nexport const getLastWord = (txt) => txt.split(\" \")[txt.split(\" \").length - 1];\n\n/*\n  Create a function that splits a string into an array of\n  words, based on a regular expression.\n\n  Note:\n  * The function must not modify the input string.\n  * The function must return an array of strings.\n  * The first string in the array must be the first word.\n  * The last string in the array must be the last word.\n  * The string between the first and last word, if any, must\n    be a space.\n  * The function must ignore any such strings that are a\n    part of a word.\n\n  Examples:\n  splitIntoWords(\"apple pie\") ➞ [\"apple\", \"pie\"]\n  splitIntoWords(\"apple pi e\") ➞ [\"apple\", \"pi\", \"e\"]\n  splitIntoWords(\"apple pi e \") ➞ [\"apple\", \"pi\", \"e\"]\n  splitIntoWords(\"\") ➞ []\n  */\nconst splitIntoWords = (txt) => txt.split(/\\s+/).filter((word) => word.length > 0);\n\nexport const isWord = (txt) => txt.length > 0 && determineIfConcludingCharConstituteALetter(txt);\n\n/*\n  Create a function that determines if a string contains\n  a given word.\n\n  Note:\n  * The function must not modify the input string.\n  * The function must return a boolean.\n\n  Examples:\n  containsWord(\"apple pie\", \"apple\") ➞ true\n  containsWord(\"apple pie\", \"pie\") ➞ true\n  containsWord(\"apple pie\", \"pear\") ➞ false\n  containsWord(\"\", \"pie\") ➞ false\n  */\nconst containsWord = (txt, word) => txt.indexOf(word) > -1;\n\n/*\n  Create a function that determines if a string contains\n  all of a given list of words.\n\n  Note:\n  * The function must not modify the input string.\n  * The function must return a boolean.\n\n  Examples:\n  containsAllWords(\"apple pie\", [\"apple\", \"pie\"]) ➞ true\n  containsAllWords(\"apple pie\", [\"apple\", \"pie\", \"apple\"]) ➞ true\n  containsAllWords(\"apple pie\", [\"apple\", \"pie\", \"pear\"]) ➞ false\n  containsAllWords(\"\", [\"apple\", \"pie\"]) ➞ false\n  */\nconst containsAllWords = (txt, words) => words.every((word) => containsWord(txt, word));\n\n/*\n  Create a function that determines if a string contains\n  any of a given list of words.\n\n  Note:\n  * The function must not modify the input string.\n  * The function must return a boolean.\n\n  Examples:\n  containsAnyWords(\"apple pie\", [\"apple\", \"pie\"]) ➞ true\n  containsAnyWords(\"apple pie\", [\"apple\", \"pie\", \"apple\"]) ➞ true\n  containsAnyWords(\"apple pie\", [\"apple\", \"pie\", \"pear\"]) ➞ true\n  containsAnyWords(\"\", [\"apple\", \"pie\"]) ➞ true\n  */\nconst containsAnyWords = (txt, words) => words.some((word) => containsWord(txt, word));\n\n/*\n  Create a function that determines if a string contains\n  a given list of words.\n\n  Note:\n  * The function must not modify the input string.\n  * The function must return a boolean.\n\n  Examples:\n  containsWords(\"apple pie\", [\"apple\", \"pie\"]) ➞ true\n  containsWords(\"apple pie\", [\"apple\", \"pie\", \"apple\"]) ➞ true\n  containsWords(\"apple pie\", [\"apple\", \"pie\", \"pear\"]) ➞ false\n  containsWords(\"\", [\"apple\", \"pie\"]) ➞ false\n  */\nconst containsWords = (txt, words) => containsAllWords(txt, words) && containsAnyWords(txt, words);\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canStage", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,4,3,5]) = 3\n  canStage([1,2,3]) = -1\n  */\nconst canStage = (arr) => {\n  const length = arr.length\n  let high = 0\n  let low = 0\n  while (low < length) {\n    if (arr[low] < arr[high]) {\n      high = low\n    }\n    low += 1\n  }\n  if (high == length) {\n    return -1\n  }\n  return high\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canStage([1,2,3,4,5]) = 1\n  canStage([1,2,3]) = -1\n  */\nconst canStop = (arr) => {\n  const length = arr.length\n  let low = 0\n  let high = length - 1\n  while (low < high) {\n    if (arr[low] < arr[high]) {\n      return high\n    }\n    low += 1\n    high -= 1\n  }\n  if (low == high) {\n    return -1\n  }\n  return low\n}\n\n// Create a function which returns the largest index of an element which\n// is less than the element immediately preceding it. If no such element\n// exists then return -1. The given array will not contain duplicate values.\nconst canStart = (arr) => {\n  const length = arr.length\n  let low = length - 1\n  let high = 0\n  while (low >= 0) {\n    if (arr[low] > arr[high]) {\n      return low\n    }\n    high = low\n    low -= 1\n  }\n  return -1\n}\n\nconst isEven = (x) => x % 2 === 0\nconst isOdd = (x) => x % 2 === 1\n\n/*\n  Create a function which returns a boolean value indicating whether or\n  not all elements of the given array are even or odd.\n\n  Examples:\n  isEven([2,4,6,8]) = true\n  isEven([1,3,5,7]) = false\n  isEven([0,1,2]) = false\n  */\nconst isEqual = (arr) => {\n  const len = arr.length\n  let isEven = true\n  for (let i = 0; i < len; i++) {\n    if (isEven && isOdd(arr[i])) {\n      isEven = false\n    }\n    if (!isEven &&!isOdd(arr[i])) {\n      isEven = true\n    }\n  }\n  return isEven\n}\n\nconst isLessThan = (arr) => {\n  const len = arr.length\n  let isLess = true\n  for (let i = 0; i < len; i++) {\n    if (isLess && isGreaterThan(arr[i])) {\n      isLess = false\n    }\n    if (!isLess &&!isGreaterThan(arr[i])) {\n      isLess = true\n    }\n  }\n  return isLess\n}\n\nconst isLessThanOrEqual = (arr) => {\n  const len = arr.length\n  let isLess = false\n  for (let i = 0; i < len; i++) {\n    if (isLess &&!isGreaterThan(arr[i])) {\n      isLess = false\n    }\n    if (!isLess && isGreaterThan(arr[i])) {\n      isLess = true\n    }\n  }\n  return isLess\n}\n\nconst isGreaterThan = (arr) => {\n  const len = arr.length\n  let isGreater = true\n  for (let i = 0; i < len; i++) {\n    if (isGreater &&!isLessThan(arr[i])) {\n      isGreater = false\n    }\n    if (!isGreater &&!isLessThan(arr[i])) {\n      isGreater = true\n    }\n  }\n  return isGreater\n}\n\nconst isGreaterThanOrEqual = (arr) => {\n  const len = arr.length\n  let isGreater = false\n  for (let i = 0; i < len; i++) {\n    if (isGreater &&!isLessThan(arr[i])) {\n      isGreater = false\n    }\n    if (!isGreater && isLessThan(arr[i])) {\n      isGreater = true\n    }\n  }\n  return isGreater\n}\n\nconst isEvenOrOdd = (arr) => {\n  const len = arr.length\n  let isOdd = false\n  let isEven = false\n  for (let i = 0; i < len; i++) {\n    if (isOdd && isEven(arr[i])) {\n      isOdd = false\n    }\n    if (isEven &&!isOdd(arr[i])) {\n      isEven = false\n    }\n    if (!isOdd &&!isEven(arr[i])) {\n      isOdd = true\n    }\n  }\n  return isOdd\n}\n\nconst isUnique = (arr) => {\n  const len = arr.length\n  let unique = true\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j]) {\n        unique = false\n      }\n    }\n  }\n  return unique\n}\n\nconst isUniqueOrConsecutive = (arr) => {\n  const len = arr.length\n  let unique = true\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j]) {\n        unique = false\n      }\n    }\n  }\n  return unique\n}\n\nconst isUniqueOrRepeated = (arr) => {\n  "}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "bigSmallIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  bigSmallIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  bigSmallIntegers([]) == (null, null)\n  bigSmallIntegers([0]) == (null, null)\n  */\nconst bigSmallIntegers = (lst) => {\n  let max = null,\n    min = null;\n  lst.forEach((v) => {\n    if (v > max) {\n      max = v;\n    }\n    if (v < min) {\n      min = v;\n    }\n  });\n  if (max === null) {\n    return (null, null);\n  }\n  if (min === null) {\n    return (null, max);\n  }\n  return (max, min);\n};\n\n/* Create a function that returns the maximum of two given numbers.\n  Examples:\n  maximum(3, 5) == 5\n  maximum(1, 3) == 3\n  maximum(2, 4) == 6\n  maximum(6, 9) == 9\n  */\nconst maximum = (a, b) => {\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\n/* Create a function that returns the minimum of two given numbers.\n  Examples:\n  minimum(3, 5) == 3\n  minimum(1, 3) == 1\n  minimum(2, 4) == 2\n  minimum(6, 9) == 6\n  */\nconst minimum = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\n/* Create a function that returns the sum of two given numbers.\n  Examples:\n  sum(3, 5) == 8\n  sum(1, 3) == 4\n  sum(2, 4) == 6\n  sum(6, 9) == 15\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/* Create a function that returns the average of two given numbers.\n  Examples:\n  average(3, 5) == 4\n  average(1, 3) == 2\n  average(2, 4) == 3\n  average(6, 9) == 6\n  */\nconst average = (a, b) => {\n  return sum(a, b) / 2;\n};\n\n/* Create a function that returns the product of two given numbers.\n  Examples:\n  product(3, 5) == 15\n  product(1, 3) == 3\n  product(2, 4) == 16\n  product(6, 9) == 81\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/* Create a function that returns the modulo of two given numbers.\n  Examples:\n  modulo(3, 5) == 3\n  modulo(1, 3) == 1\n  modulo(2, 4) == 2\n  modulo(6, 9) == 6\n  */\nconst modulo = (a, b) => {\n  return a % b;\n};\n\n/* Create a function that returns the largest of two given numbers.\n  Examples:\n  max(3, 5) == 5\n  max(1, 3) == 3\n  max(2, 4) == 4\n  max(6, 9) == 9\n  */\nconst max = (a, b) => {\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\n/* Create a function that returns the smallest of two given numbers.\n  Examples:\n  min(3, 5) == 3\n  min(1, 3) == 1\n  min(2, 4) == 2\n  min(6, 9) == 6\n  */\nconst min = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\n/* Create a function that returns the floor of two given numbers.\n  Examples:\n  floor(3, 5) == 3\n  floor(1, 3) == 1\n  floor(2, 4) == 2\n  floor(6, 9) == 6\n  */\nconst floor = (a, b) => {\n  return Math.floor(a / b) * b;\n};\n\n/* Create a function that returns the ceiling of two given numbers.\n  Examples:\n  ceiling(3, 5) == 5\n  ceiling(1, 3) == 2\n  ceiling(2, 4) == 4\n  ceiling(6, 9) == 9\n  */\nconst ceiling = (a, b) => {\n  return Math.ceil(a / b) * b;\n};\n\n/* Create a function that returns the largest of the given list of numbers.\n  Examples:\n  max([3, 5, 7, 8, 9]) == 9\n  max([1, 3, 7, 8, 9]) == 9\n  max([2, 4, 6, 8, 9]) == 9\n  max([0, 2, 4, 6, 8, 9]) == 9\n  */\nconst max = (lst) => {\n  let max = null;\n  lst.forEach((v) => {\n    if (v > max) {\n      max = v;\n    }\n  });\n  return max;\n};\n\n/* Create a function that returns the smallest of the given list of numbers.\n  Examples:\n  min([3, 5, 7, 8, 9]) == 3\n  min([1, 3, 7, 8, 9]) == 1\n  min([2, 4, 6, 8, 9]) == 2\n  min([0, 2, 4, 6, 8, 9]) == 0\n  */\nconst min = (lst) => {\n  let min = null;\n  lst.forEach((v) => {\n    if (v < min) {\n      min = v;\n    }\n  });\n  return min;\n};\n\n/* Create a function that returns the average of the given list of numbers.\n  Examples:\n  average([3, 5, 7, 8, 9]) == 5\n  average([1, 3, 7, 8, 9]) == 4\n  average([2, 4, 6, 8, 9]) == 5\n  average([0, 2, 4, 6, 8, 9]) =="}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  string.  This is done using a loop.\n*/\nconst countString = (s) => {\n  let count = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    count += (s.charAt(i) === s.charAt(i + 1))? 1 : 0;\n  }\n\n  return count;\n};\n\n/*\n  Given two strings, return the number of times the two strings are\n  the same.  This is done using a loop.\n*/\nconst countSame = (a, b) => {\n  let count = 0;\n\n  for (let i = 0; i < a.length; i++) {\n    count += (a.charAt(i) === b.charAt(i))? 1 : 0;\n  }\n\n  return count;\n};\n\n/*\n  Given two strings, return the length of the longest common subsequence.\n  This is done using a loop.\n*/\nconst longestCommonSubsequenceLength = (a, b) => {\n  let i = 0;\n  let j = 0;\n  let length = 0;\n\n  for (i = 0; i < a.length; i++) {\n    while (j < b.length && a.charAt(i) === b.charAt(j)) {\n      j++;\n    }\n\n    if (j === b.length) {\n      length++;\n    } else {\n      j++;\n    }\n  }\n\n  return length;\n};\n\n/*\n  Given two strings, return the length of the shortest common subsequence.\n  This is done using a loop.\n*/\nconst shortestCommonSubsequenceLength = (a, b) => {\n  let i = 0;\n  let j = 0;\n  let length = 0;\n\n  while (i < a.length && j < b.length) {\n    if (a.charAt(i) === b.charAt(j)) {\n      length++;\n      i++;\n      j++;\n    } else if (a.charAt(i) < b.charAt(j)) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return length;\n};\n\n/*\n  Given two strings, return the length of the longest common subsequence.\n  This is done using a loop.\n*/\nconst longestCommonSubsequence = (a, b) => {\n  let length = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < a.length && j < b.length) {\n    if (a.charAt(i) === b.charAt(j)) {\n      length++;\n      count++;\n      i++;\n      j++;\n    } else if (a.charAt(i) < b.charAt(j)) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return length;\n};\n\n/*\n  Given two strings, return the length of the shortest common subsequence.\n  This is done using a loop.\n*/\nconst shortestCommonSubsequence = (a, b) => {\n  let length = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < a.length && j < b.length) {\n    if (a.charAt(i) === b.charAt(j)) {\n      length++;\n      count++;\n      i++;\n      j++;\n    } else if (a.charAt(i) < b.charAt(j)) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return length;\n};\n\n/*\n  Given two strings, return the longest common subsequence.\n  This is done using a loop.\n*/\nconst longestCommonSubsequence = (a, b) => {\n  let length = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let c = '';\n\n  while (i < a.length && j < b.length) {\n    if (a.charAt(i) === b.charAt(j)) {\n      c = a.charAt(i);\n      length++;\n      count++;\n      i++;\n      j++;\n    } else if (a.charAt(i) < b.charAt(j)) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return c;\n};\n\n/*\n  Given two strings, return the shortest common subsequence.\n  This is done using a loop.\n*/\nconst shortestCommonSubsequence = (a, b) => {\n  let length = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let c = '';\n\n  while (i < a.length && j < b.length) {\n    if (a.charAt(i) === b.charAt(j)) {\n      c = a.charAt(i);\n      length++;\n      count++;\n      i++;\n      j++;\n    } else if (a.charAt(i) < b.charAt(j)) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return c;\n};\n\n/*\n  Given two strings, return the sum of their lengths.\n*/\nconst sum = (a, b) => {\n  let length = a.length + b.length;\n  "}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isAdequateToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isAdequateToSumEven(4) == false\n  isAdequateToSumEven(6) == false\n  isAdequateToSumEven(8) == true\n  */\nconst isAdequateToSumEven = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += i\n  }\n  return sum % 2 === 0\n}\n\n// EOF\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "extraFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> extraFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst extraFactorial = (n) => {\n  const factorial = Array.from(Array(n+1).keys());\n  return factorial[n];\n}\n\n/* The function will receive a list of integers and will return the sum of\n   their factorials.\n   Example:\n   >>> extraFactorial([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n   5040\n */\nconst extraFactorialList = (nums) => {\n  const factorial = Array.from(nums);\n  const sum = nums.reduce((a, b) => a + b, 0);\n  return sum;\n}\n\n/*The function will receive an integer and will return the number of divisors\n  of this integer. The divisors are the numbers that divide the number.\n  Example:\n  >>> numberOfDivisors(15)\n  6\n  */\nconst numberOfDivisors = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    const temp = n / i;\n    if (temp > 1 && i!= temp) {\n      divisors.push(temp);\n    }\n  }\n  return divisors.length;\n}\n\n/* The function will receive an integer and return the number of divisors of\n   this integer, including 1. The divisors are the numbers that divide the\n   number.\n   Example:\n   >>> numberOfDivisors(15)\n   6\n   */\nconst numberOfDivisorsWithOne = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    const temp = n / i;\n    if (temp > 1 && i!= temp) {\n      divisors.push(temp);\n    }\n  }\n  return divisors.length + 1;\n}\n\n/*The function will receive an integer and return the number of divisors of\n  this integer, including 1 and 2. The divisors are the numbers that divide the\n  number.\n  Example:\n  >>> numberOfDivisors(15)\n  6\n  */\nconst numberOfDivisorsWithOneAndTwo = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    const temp = n / i;\n    if (temp > 1 && i!= temp) {\n      divisors.push(temp);\n    }\n  }\n  return divisors.length + 2;\n}\n\n/*The function will receive an integer and return the number of divisors of\n  this integer, including 1, 2 and 3. The divisors are the numbers that divide\n  the number.\n  Example:\n  >>> numberOfDivisors(15)\n  6\n  */\nconst numberOfDivisorsWithOneAndTwoAndThree = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    const temp = n / i;\n    if (temp > 1 && i!= temp) {\n      divisors.push(temp);\n    }\n  }\n  return divisors.length + 3;\n}\n\n/*The function will receive an integer and return the number of divisors of\n  this integer, including 1, 2, 3 and 4. The divisors are the numbers that\n  divide the number.\n  Example:\n  >>> numberOfDivisors(15)\n  6\n  */\nconst numberOfDivisorsWithOneAndTwoAndThreeAndFour = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    const temp = n / i;\n    if (temp > 1 && i!= temp) {\n      divisors.push(temp);\n    }\n  }\n  return divisors.length + 4;\n}\n\n/*The function will receive an integer and return the number of divisors of\n  this integer, including 1, 2, 3, 4 and 5. The divisors are the numbers that\n  divide the number.\n  Example:\n  >>> numberOfDivisors(15)\n  6\n  */\nconst numberOfDivisorsWithOneAndTwoAndThreeAndFourAndFive = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    const temp = n / i;\n    if (temp > 1 && i!= temp) {\n      divisors.push(temp);\n    }\n  }\n  return divisors.length + 5;\n}\n\n/*The function will receive an integer and return the number of divisors of\n  this integer, including 1, 2, 3, 4, 5, 6, 7, 8 and 9. The divisors are the\n  numbers that divide the number.\n  Example:\n  >>> numberOfDivisors(15)\n  6\n  */\nconst numberOfDivisorsWithOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    const temp = n / i;\n    if (temp > 1 && i!= temp) {\n      divisors.push(temp);\n    }\n  }\n  return divisors.length + 6;\n}\n\n/*The function will receive an integer and return the number of divisors of\n  this integer, including 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. The divisors are the\n  numbers that divide the number.\n  Example:\n  >>> numberOfDivisors(15)\n  6\n  */\nconst numberOfDivisorsWithOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    const temp = n / i;\n    if (temp > 1 && i!= temp) {\n      divisors"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "repairSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  repairSpace(\"Example\") == \"Example\"\n  repairSpace(\"Example 1\") == \"Example_1\"\n  repairSpace(\" Example 2\") == \"_Example_2\"\n  repairSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst repairSpace = (text) => {\n    text = text.trim().replace(/\\s+/g, '_');\n    if (text.indexOf(' ') > 2) {\n        text = text.replace(/\\s+/g, '-');\n    }\n    return text;\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  replaceAll(\"Example\") == \"Example\"\n  replaceAll(\"Example 1\") == \"Example_1\"\n  replaceAll(\" Example 2\") == \"Example-2\"\n  replaceAll(\" Example   3\") == \"Example-3\"\n  */\nconst replaceAll = (text) => {\n    return text.replace(/\\s+/g, '_');\n};\n\nconst replace = (text, toReplace, replaceWith) => {\n    return text.replace(toReplace, replaceWith);\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  replace(\"Example\",'', '-') == \"Example\"\n  replace(\"Example 1\",'', '-') == \"Example_1\"\n  replace(\" Example 2\",'', '-') == \"Example-2\"\n  replace(\" Example   3\",'', '-') == \"Example-3\"\n  */\nconst replaceSpace = (text, toReplace, replaceWith) => {\n    return replace(text, toReplace, replaceWith);\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  replaceAll(\"Example\",'', '-') == \"Example\"\n  replaceAll(\"Example 1\",'', '-') == \"Example_1\"\n  replaceAll(\" Example 2\",'', '-') == \"Example-2\"\n  replaceAll(\" Example   3\",'', '-') == \"Example-3\"\n  */\nconst replaceAllSpace = (text, toReplace, replaceWith) => {\n    return replaceAll(text, toReplace, replaceWith);\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  replace(\"Example\",'', '-') == \"Example\"\n  replace(\"Example 1\",'', '-') == \"Example_1\"\n  replace(\" Example 2\",'', '-') == \"Example-2\"\n  replace(\" Example   3\",'', '-') == \"Example-3\"\n  */\nconst replaceAllSpace2 = (text, toReplace, replaceWith) => {\n    return replaceAll(text, toReplace, replaceWith);\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  replace(\"Example\",'', '-') == \"Example\"\n  replace(\"Example 1\",'', '-') == \"Example_1\"\n  replace(\" Example 2\",'', '-') == \"Example-2\"\n  replace(\" Example   3\",'', '-') == \"Example-3\"\n  */\nconst replaceAllSpace3 = (text, toReplace, replaceWith) => {\n    return replaceAll(text, toReplace, replaceWith);\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  replace(\"Example\",'', '-') == \"Example\"\n  replace(\"Example 1\",'', '-') == \"Example_1\"\n  replace(\" Example 2\",'', '-') == \"Example-2\"\n  replace(\" Example   3\",'', '-') == \"Example-3\"\n  */\nconst replaceAllSpace4 = (text, toReplace, replaceWith) => {\n    return replaceAll(text, toReplace, replaceWith);\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  replace(\"Example\",'', '-') == \"Example\"\n  replace(\"Example 1\",'', '-') == \"Example_1\"\n  replace(\" Example 2\",'', '-') == \"Example-2\"\n  replace(\" Example   3\",'', '-') == \"Example-3\"\n  */\nconst replaceAllSpace5 = (text, toReplace, replaceWith) => {\n    return replaceAll(text, toReplace, replaceWith);\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  replace(\"Example\",'', '-') == \"Example\"\n  replace(\"Example 1\",'', '-') == \"Example_1\"\n  replace(\" Example 2\",'', '-') == \"Example-2\"\n  replace(\" Example   3\",'', '-') == \"Example-3\"\n  */\nconst replaceAllSpace6 = (text, toReplace, replaceWith) => {\n    return replaceAll(text, toReplace, replaceWith);\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  replace(\"Example\",'', '-') == \"Example\"\n  replace(\"Example 1\",'', '-') == \"Example_1\"\n  replace(\" Example 2\",'', '-') == \"Example-2\"\n  replace(\" Example   3\",'', '-') == \"Example-3\"\n  */\nconst"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    return file_name.match(/^[a-zA-Z][a-zA-Z0-9.]*$/) && file_name.match(/^[a-zA-Z]\\./);\n}\n\n/*\n  Create a function which takes a string representing a file's path, and returns\n  'Yes' if the the path is valid, and returns 'No' otherwise.\n  A path is considered to be valid if and only if:\n  - It starts with a forward slash '/'\n  - All the other path components are valid file names.\n  - The path does not end with a forward slash '/'\n  Examples:\n  pathCheck(\"/home/example/\") # => 'Yes'\n  pathCheck(\"/home/example\") # => 'No' (the path is not valid)\n  pathCheck(\"/home/example/\") # => 'No' (the path is not valid)\n  */\nconst pathCheck = (path) => {\n    return path.match(/^[\\/].*/) && path.match(/[a-zA-Z][a-zA-Z0-9]*/) && path.slice(-1)!= \"/\";\n}\n\n/*\n  Create a function which takes a string representing a file's path, and returns\n  'Yes' if the the path is valid, and returns 'No' otherwise.\n  A path is considered to be valid if and only if:\n  - It starts with a forward slash '/'\n  - All the other path components are valid file names.\n  - The path does not end with a forward slash '/'\n  Examples:\n  pathCheck(\"/home/example/\") # => 'Yes'\n  pathCheck(\"/home/example\") # => 'No' (the path is not valid)\n  pathCheck(\"/home/example/\") # => 'No' (the path is not valid)\n  */\nconst fileCheck = (file) => {\n    return pathCheck(file) && fileNameCheck(file);\n}\n\n/*\n  Create a function which takes a string representing a file's path, and returns\n  'Yes' if the the path is valid, and returns 'No' otherwise.\n  A path is considered to be valid if and only if:\n  - It starts with a forward slash '/'\n  - All the other path components are valid file names.\n  - The path does not end with a forward slash '/'\n  Examples:\n  pathCheck(\"/home/example/\") # => 'Yes'\n  pathCheck(\"/home/example\") # => 'No' (the path is not valid)\n  pathCheck(\"/home/example/\") # => 'No' (the path is not valid)\n  */\nconst folderCheck = (folder) => {\n    return pathCheck(folder) && pathCheck(folder + \"/\");\n}\n\nmodule.exports = {\n    fileCheck,\n    folderCheck,\n    pathCheck\n}<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "summarizeSquare", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeSquare = (lst) => {\n  let sum = 0;\n  for (let item of lst) {\n    if (Math.abs(Math.floor(item / 3)) % 1 === 0) {\n      sum += item * item;\n    }\n    if (Math.abs(Math.floor(item / 4)) % 1 === 0) {\n      sum += item * item * item;\n    }\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of numbers. For all entries in the list, the function shall square the number if its index is a \n  multiple of 3 and will cube the number if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCube = (lst) => {\n  let sum = 0;\n  for (let item of lst) {\n    if (Math.abs(Math.floor(item / 3)) % 1 === 0) {\n      sum += item * item * item;\n    }\n    if (Math.abs(Math.floor(item / 4)) % 1 === 0) {\n      sum += item * item * item * item;\n    }\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of numbers. For all entries in the list, the function shall square the number if its index is a \n  multiple of 3 and will cube the number if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeSq = (lst) => {\n  let sum = 0;\n  for (let item of lst) {\n    if (Math.abs(Math.floor(item / 3)) % 1 === 0) {\n      sum += item * item * item;\n    }\n    if (Math.abs(Math.floor(item / 4)) % 1 === 0) {\n      sum += item * item * item * item;\n    }\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of numbers. For all entries in the list, the function shall square the number if its index is a \n  multiple of 3 and will cube the number if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeSqSq = (lst) => {\n  let sum = 0;\n  for (let item of lst) {\n    if (Math.abs(Math.floor(item / 3)) % 1 === 0) {\n      sum += item * item * item;\n    }\n    if (Math.abs(Math.floor(item / 4)) % 1 === 0) {\n      sum += item * item * item * item;\n    }\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of numbers. For all entries in the list, the function shall square the number if its index is a \n  multiple of 3 and will cube the number if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeSqSqSq = (lst) => {\n  let sum = 0;\n  for (let item of lst) {\n    if (Math.abs(Math.floor(item / 3)) % 1 === 0) {\n      sum += item * item * item;\n    }\n    if (Math.abs(Math.floor(item / 4)) % 1 === 0) {\n      sum += item * item * item * item;\n    }\n  }\n  return sum;\n}\n\n/*\n  This function will take a list of numbers. For all entries in the list, the function shall square the number if its index is a \n  multiple of 3 and will cube the number if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst summarizeCubeSqSqSqSq = (lst) => {\n  let sum ="}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "bibleInPrisonTerm", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst bibleInPrisonTerm = (sentence) => {\n  let array = sentence.split(' ')\n  let newArray = []\n\n  for (let i = 0; i < array.length; i++) {\n    let num = array[i].length\n    if (isPrime(num)) {\n      newArray.push(array[i])\n    }\n  }\n\n  let newSentence = newArray.join(' ')\n  return newSentence\n}\n\nexport default bibleInPrisonTerm\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const denominator = parseInt(n.replace(/\\//g, ''), 10)\n  const numerator = parseInt(x.replace(/\\//g, ''), 10)\n  return (numerator % denominator === 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "holyOrderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> holyOrderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> holyOrderByPoint([]) == []\n  */\nconst holyOrderByPoint = (nums) => {\n  const list = Array.from(nums).sort((a, b) => {\n    const [ai, bi] = [parseInt(a, 10), parseInt(b, 10)]\n    const sum = ai + bi\n    return sum - ai - bi || (ai - bi) || ai - bi\n  })\n\n  const listLen = list.length\n  let [start, end] = [0, listLen - 1]\n  let sum = 0\n  let index = 0\n  let diff = 0\n  while (end - start > 1) {\n    const middle = (end + start) >> 1\n    const [numA, numB] = [list[start], list[middle]]\n    const [ai, bi] = [parseInt(numA, 10), parseInt(numB, 10)]\n    const sumA = ai + bi\n    const sumB = ai + bi\n    const sumC = sumA + sumB\n    sum = sumA - sumB\n    if (sum == 0) {\n      sum = sumC\n    } else if (sum == 1) {\n      sum = sumC + ai - bi\n    }\n    if (sum > numB) {\n      end = middle\n    } else if (sum < numA) {\n      start = middle\n    } else {\n      index = middle\n      diff = sum\n      break\n    }\n  }\n  return [...list.slice(start, index + 1),...list.slice(index + 1, end + 1)]\n}\n\nconst test = [\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [3, 1, 2, 5, 6, 7, 8, 9, 10, 11],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  [1, 3, 2, 5, 6, 7, 8, 9, 10, 11]\n]\n\ntest.forEach(t => {\n  console.log(t.map(n => parseInt(n, 10)).sort((a, b) => a - b).join(', '))\n})\n\nconst test2 = [\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n]\n\ntest2.forEach(t => {\n  console.log(t.map(n => parseInt(n, 10)).sort((a, b) => a - b).join(', '))\n})\n\nconst test3 = [\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n]\n\ntest3.forEach(t => {\n  console.log(t.map(n => parseInt(n, 10)).sort((a, b) => a - b).join(', '))\n})\n\nconst test4 = [\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n]\n\ntest4.forEach(t => {\n  console.log(t.map(n => parseInt(n, 10)).sort((a, b) => a - b).join(', '))\n})\n\nconst test5 = [\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n]\n\ntest5.forEach(t => {\n  console.log(t.map(n => parseInt(n, 10)).sort((a, b) => a - b).join(', '))\n})\n\nconst test6 = [\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n]\n\ntest6.forEach(t => {\n  console.log(t.map(n => parseInt(n, 10)).sort((a, b) => a - b).join(', '))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "extraFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  extraFilter([15, -73, 14, -15]) => 1 \n  extraFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst extraFilter = (nums) => {\n  const filter = (elem) => {\n    return elem % 10 === 0? elem >= 10? 1 : 0 : elem >= 10? 0 : elem >= 10? -1 : 0;\n  }\n  let first = true;\n  let last = true;\n  let count = 0;\n  nums.forEach((elem, index) => {\n    if (filter(elem) > 0) {\n      if (first) {\n        first = false;\n      } else {\n        last = false;\n      }\n      count++;\n    }\n  });\n  return count;\n}\n\n// console.log(extraFilter([15, -73, 14, -15]));\n// console.log(extraFilter([33, -2, -3, 45, 21, 109]));\n\n// console.log(extraFilter([1, 3, 5, 7, 9]));\n// console.log(extraFilter([4, 6, 7, 8, 9, 10]));\n// console.log(extraFilter([5, 6, 7, 8, 9, 10]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10]));\n// console.log(extraFilter([1, 5, 6, 7, 9, 10]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10]));\n// console.log(extraFilter([1, 5, 6, 7, 9, 10, 11, 12]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]));\n// console.log(extraFilter([3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "catchMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst catchMaxTriples = (n) => {\n    const a = Array(n).fill(0);\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            const k = i + j;\n            if (a[i] + a[j] + a[k] % 3 === 0) {\n                console.log(i, j, k);\n            }\n        }\n    }\n    return a.filter(e => e!== 0).length;\n};\n\nconst testCase = [\n    {\n        input: 3,\n        output: 1\n    },\n    {\n        input: 5,\n        output: 2\n    },\n    {\n        input: 7,\n        output: 1\n    },\n    {\n        input: 13,\n        output: 0\n    },\n    {\n        input: 21,\n        output: 0\n    }\n];\n\ntestCase.forEach(({ input, output }) => {\n    console.log(`Input: ${input}`, `Expected output: ${output}`);\n    console.log(`Actual output: ${catchMaxTriples(input)}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const result = []\n  const earth = 'Earth'\n  const jupiter = 'Jupiter'\n  const mercury = 'Mercury'\n  const venus = 'Venus'\n  const mars = 'Mars'\n  const mercury_in_earth = (earth.indexOf(mercury) > -1)\n  const mercury_in_jupiter = (jupiter.indexOf(mercury) > -1)\n  const venus_in_earth = (earth.indexOf(venus) > -1)\n  const venus_in_jupiter = (jupiter.indexOf(venus) > -1)\n\n  if (mercury_in_earth && venus_in_earth) {\n    result.push(mercury)\n    result.push(venus)\n  }\n\n  if (venus_in_earth && mercury_in_jupiter) {\n    result.push(venus)\n    result.push(mercury)\n  }\n\n  if (mercury_in_jupiter && venus_in_jupiter) {\n    result.push(mercury)\n    result.push(venus)\n  }\n\n  if (venus_in_earth && mercury_in_jupiter) {\n    result.push(venus)\n    result.push(mercury)\n  }\n\n  if (venus_in_jupiter && mercury_in_earth) {\n    result.push(venus)\n    result.push(mercury)\n  }\n\n  if (mercury_in_earth && venus_in_jupiter) {\n    result.push(mercury)\n    result.push(venus)\n  }\n\n  if (mercury_in_jupiter && venus_in_earth) {\n    result.push(mercury)\n    result.push(venus)\n  }\n\n  if (venus_in_jupiter && mercury_in_earth) {\n    result.push(venus)\n    result.push(mercury)\n  }\n\n  if (venus_in_earth && mercury_in_jupiter) {\n    result.push(venus)\n    result.push(mercury)\n  }\n\n  if (venus_in_jupiter && mercury_in_earth) {\n    result.push(venus)\n    result.push(mercury)\n  }\n\n  if (mercury_in_earth && venus_in_jupiter) {\n    result.push(mercury)\n    result.push(venus)\n  }\n\n  if (mercury_in_jupiter && venus_in_earth) {\n    result.push(mercury)\n    result.push(venus)\n  }\n\n  return result\n}\n\nmodule.exports = bf\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "screenTiltSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst screenTiltSum = (lst) => {\n  const {length: len} = lst;\n  let total = 0;\n  for (let i = 0; i < len; i++) {\n    total += +lst[i].length;\n  }\n  let l = 0;\n  let r = len - 1;\n  while (l <= r) {\n    const mid = Math.floor((l + r) / 2);\n    const left = lst[mid].length;\n    const right = rst[mid].length;\n    if (left > right) {\n      l = mid + 1;\n    } else if (left < right) {\n      r = mid - 1;\n    } else {\n      l++;\n    }\n  }\n  return lst.slice(l).concat(lst.slice(0, r)).sort((a, b) => a.length - b.length);\n};\n\nmodule.exports = screenTiltSum;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrYttrium", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrYttrium(7, 34, 12) == 34\n  for xOrYttrium(15, 8, 5) == 5\n  \n  */\nconst xOrYttrium = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  const d = 2\n  while (d <= n) {\n    if (n % d === 0) {\n      return false\n    }\n    d += 1\n  }\n  return true\n}\n\nexport default xOrYttrium<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDeviation", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDeviation([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDeviation([-1, -2, 0]) == 0\n  doubleTheDeviation([9, -2]) == 81\n  doubleTheDeviation([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDeviation = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n\n  const total = lst.reduce((total, val) => {\n    if (val % 2!== 0) {\n      total += val * val\n    }\n    return total\n  }, 0)\n\n  return total\n}\n\n// Test\nconst test = [1, 3, 2, 0]\nconsole.log(doubleTheDeviation(test))\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  if (game.length!== guess.length) {\n    return [1, 1, 1, 1, 1, 1]\n  }\n\n  const is_correct = game.every(g => g === guess[g])\n  const score = game.reduce((prev, curr) => prev + curr, 0)\n\n  return [is_correct? 0 : Math.abs(score - guess[0]),...is_correct? [0] : [Math.abs(score - guess[0]),...guess.slice(1)] ]\n}\n\n//console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n//console.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "hardExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for hardExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst hardExtension = (class_name, extensions) => {\n  const len = extensions.length\n  const cap = Math.max(...extensions.map(ext => ext.length))\n  const strength = (cap - class_name.length) / cap\n  const sorted = extensions.sort((a, b) => strength(a) - strength(b))\n  return `${class_name}.${sorted[0]}`\n}\n\nmodule.exports = hardExtension\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aWords = a.split(\" \");\n  let bWords = b.split(\" \");\n  \n  let aWordsLength = aWords.length;\n  let bWordsLength = bWords.length;\n  \n  for(let i = 0; i < aWordsLength; i++) {\n    for(let j = 0; j < bWordsLength; j++) {\n      if(aWords[i] === bWords[j]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nconsole.log(cycpatternCheck(\"abcd\", \"abd\"));\nconsole.log(cycpatternCheck(\"hello\", \"ell\"));\nconsole.log(cycpatternCheck(\"whassup\", \"psus\"));\nconsole.log(cycpatternCheck(\"abab\", \"baa\"));\nconsole.log(cycpatternCheck(\"efef\", \"eeff\"));\nconsole.log(cycpatternCheck(\"himenss\", \"simen\"));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    let i = 0;\n    while(num) {\n        count += (num % 2);\n        num = num >> 1;\n        i++;\n    }\n    return {\n        'odd': count,\n        'even': i\n    };\n};\n\nexport default evenOddCount;<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number\n  let result = ''\n\n  if (num < 4) {\n    result += 'i'\n  } else if (num < 9) {\n    result += 'ii'\n  } else if (num < 39) {\n    result += 'iii'\n  } else if (num < 99) {\n    result += 'iv'\n  } else if (num < 399) {\n    result += 'v'\n  } else if (num < 4999) {\n    result += 'vi'\n  } else if (num < 9999) {\n    result += 'vii'\n  } else if (num < 19999) {\n    result += 'viii'\n  } else if (num < 999999) {\n    result += 'ix'\n  } else {\n    result += 'x'\n  }\n\n  return result\n}\n\nconst isRoman = (number) => {\n  return (\n    number === 'i' ||\n    number === 'ii' ||\n    number === 'iii' ||\n    number === 'iv' ||\n    number === 'v' ||\n    number === 'vi' ||\n    number === 'vii' ||\n    number === 'viii' ||\n    number === 'ix'\n  )\n}\n\nconst isNotRoman = (number) => {\n  return (\n    number === 'x' ||\n    number === 'xii' ||\n    number === 'xiii' ||\n    number === 'xiv' ||\n    number === 'xv' ||\n    number === 'xvi' ||\n    number === 'xvii' ||\n    number === 'xviii' ||\n    number === 'xix'\n  )\n}\n\nconst romanToInt = (number) => {\n  return {\n    'i': 1,\n    'ii': 2,\n    'iii': 3,\n    'iv': 4,\n    'v': 5,\n    'vi': 6,\n    'vii': 7,\n    'viii': 8,\n    'ix': 9,\n    'x': 10,\n    'xii': 11,\n    'xiii': 12,\n    'xiv': 13,\n    'xv': 14,\n    'xvi': 15,\n    'xvii': 16,\n    'xviii': 17,\n    'xix': 18,\n  }[number.toLowerCase()]\n}\n\nconst romanToIntArray = (number) => {\n  const result = []\n  let roman = number\n\n  while (roman) {\n    result.push(romanToInt(roman))\n    roman = romanToInt(roman)\n  }\n\n  return result\n}\n\nconst miniRomanToInt = (number) => {\n  const result = []\n\n  for (let i = 0; i < number.length; i += 1) {\n    result.push(romanToInt(number[i]))\n  }\n\n  return result\n}\n\nconst intToRoman = (number) => {\n  const roman = []\n\n  for (let i = 0; i < number.length; i += 1) {\n    if (number[i] === 1) {\n      roman.push('i')\n    } else if (number[i] === 2) {\n      roman.push('ii')\n    } else if (number[i] === 3) {\n      roman.push('iii')\n    } else if (number[i] === 4) {\n      roman.push('iv')\n    } else if (number[i] === 5) {\n      roman.push('v')\n    } else if (number[i] === 6) {\n      roman.push('vi')\n    } else if (number[i] === 7) {\n      roman.push('vii')\n    } else if (number[i] === 8) {\n      roman.push('viii')\n    } else if (number[i] === 9) {\n      roman.push('ix')\n    } else if (number[i] === 10) {\n      roman.push('x')\n    } else if (number[i] === 11) {\n      roman.push('xii')\n    } else if (number[i] === 12) {\n      roman.push('xiii')\n    } else if (number[i] === 13) {\n      roman.push('xiv')\n    } else if (number[i] === 14) {\n      roman.push('xv')\n    } else if (number[i] === 15) {\n      roman.push('xvi')\n    } else if (number[i] === 16) {\n      roman.push('xvii')\n    } else if (number[i] === 17) {\n      roman.push('xviii')\n    } else if (number[i] === 18) {\n      roman.push('xix')\n    }\n  }\n\n  return roman.join('')\n}\n\nexport {\n  intToRoman,\n  intToMiniRoman,\n  romanToInt,\n  romanToIntArray,\n  miniRomanToInt,\n  isRoman,\n  isNotRoman,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "goodSlantTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  goodSlantTriangle(3, 4, 5) == true\n  goodSlantTriangle(1, 2, 3) == false\n  */\nconst goodSlantTriangle = (a, b, c) => {\n  const g = (a + b + c) / 2;\n  return (a * a + b * b == g * g) && (b * b + c * c == g * g) && (a * a + c * c == g * g);\n};\n\nconst rightAngleTriangle = (a, b) => {\n  return a * b > 0;\n};\n\nconst isRightAngled = (a, b, c) => {\n  return goodSlantTriangle(a, b, c) && rightAngleTriangle(a, b);\n};\n\nmodule.exports = isRightAngled;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "receiveMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  receiveMax([\"name\", \"of\", \"string\"]) === \"string\"\n  receiveMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  receiveMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst receiveMax = (words) => {\n  return words.sort((a, b) => {\n    const maxA = getMaxUniqueCharacters(a);\n    const maxB = getMaxUniqueCharacters(b);\n\n    if (maxA > maxB) {\n      return -1;\n    } else if (maxA < maxB) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n};\n\nconst getMaxUniqueCharacters = (word) => {\n  const uniqueChars = [];\n  const chars = word.split(\"\");\n\n  for (let i = 0; i < chars.length; i++) {\n    if (uniqueChars.indexOf(chars[i]) === -1) {\n      uniqueChars.push(chars[i]);\n    }\n  }\n\n  return uniqueChars.length;\n};\n\nconsole.log(receiveMax([\"name\", \"of\", \"string\"])); // string\nconsole.log(receiveMax([\"name\", \"enam\", \"game\"])); // enam\nconsole.log(receiveMax([\"aaaaaaa\", \"bb\",\"cc\"])); // \"\"aaaaaaa\"\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "feed", "gc": "/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed = (number, need, remaining) => {\n  if (need > remaining) {\n    return [remaining, number];\n  }\n  const result = [number, number - need];\n  return result;\n}\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed2 = (number, need, remaining) => {\n  if (need > remaining) {\n    return [remaining, number];\n  }\n  return [number, number - need];\n}\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed3 = (number, need, remaining) => {\n  if (need > remaining) {\n    return [remaining, number];\n  }\n  return [number, number - need];\n}\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst feed4 = (number, need, remaining) => {\n  if (need > remaining) {\n    return [remaining, number];\n  }\n  return [number, number - need];\n}\n\n/*\n  You're a hungry rabbit, and you already have feeden a certain number of carrots,\n  but now you need to feed more carrots to complete the day's meals.\n  you should return an array of [ total number of feeden carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will feed all remaining carrots, but will still be hungry.\n  \n  Example:\n  * feed(5, 6, 10) -> [11, 4]\n  * feed(4, 8, 9) -> [12, 1]\n  * feed(1, 10, 10) -> [11, 0]\n  * feed(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have feeden.\n  @need : integer\n      the number of carrots that you need to feed.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "sufficeAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst sufficeAlgebra = (operator, operand) => {\n    let operandSum = 0,\n        operandLength = operand.length,\n        operatorLength = operator.length,\n        operatorSum = 0,\n        operatorValue = 0;\n\n    for (let i = 0; i < operandLength; i++) {\n        operandSum += operand[i];\n    }\n\n    for (let j = 0; j < operatorLength; j++) {\n        operatorValue = operator[j];\n        operatorSum += operandSum / operandLength * (Math.pow(operandLength, j) - 1);\n        operatorSum -= operatorValue * (Math.pow(operandLength, j) - 1);\n    }\n\n    return operatorSum;\n};\n\nconsole.log(sufficeAlgebra([1, 2, 3, 4], [2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "resolve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  resolve(\"1234\") = \"4321\"\n  resolve(\"ab\") = \"AB\"\n  resolve(\"#a@C\") = \"#A@c\"\n  */\nconst resolve = (s) => {\n  let p = new RegExp(\"[a-z]+\", \"g\")\n  let s = s.replace(p, (match) => {\n    let p = match.toUpperCase()\n    let p2 = p.toLowerCase()\n    return p2\n  })\n  return s\n}\n\n/*\n  Given an array of strings, find all pairs of strings, \n  where the first string contains the second.\n  For example:\n  arr = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  arr[0] = \"a\"\n  arr[1] = \"b\"\n  arr[2] = \"c\"\n  arr[3] = \"d\"\n  arr[4] = \"e\"\n  arr[5] = \"f\"\n  arr[6] = \"g\"\n  arr[7] = \"h\"\n  arr[8] = \"i\"\n  arr[9] = \"j\"\n  arr[10] = \"k\"\n  arr[11] = \"l\"\n  arr[12] = \"m\"\n  arr[13] = \"n\"\n  arr[14] = \"o\"\n  arr[15] = \"p\"\n  arr[16] = \"q\"\n  arr[17] = \"r\"\n  arr[18] = \"s\"\n  arr[19] = \"t\"\n  arr[20] = \"u\"\n  arr[21] = \"v\"\n  arr[22] = \"w\"\n  arr[23] = \"x\"\n  arr[24] = \"y\"\n  arr[25] = \"z\"\n  Return all possible pairs, \n  where the first string contains the second.\n  Return an empty array if no possible pairs are found.\n  Examples\n  arr = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  arr[0] = \"a\"\n  arr[1] = \"b\"\n  arr[2] = \"c\"\n  arr[3] = \"d\"\n  arr[4] = \"e\"\n  arr[5] = \"f\"\n  arr[6] = \"g\"\n  arr[7] = \"h\"\n  arr[8] = \"i\"\n  arr[9] = \"j\"\n  arr[10] = \"k\"\n  arr[11] = \"l\"\n  arr[12] = \"m\"\n  arr[13] = \"n\"\n  arr[14] = \"o\"\n  arr[15] = \"p\"\n  arr[16] = \"q\"\n  arr[17] = \"r\"\n  arr[18] = \"s\"\n  arr[19] = \"t\"\n  arr[20] = \"u\"\n  arr[21] = \"v\"\n  arr[22] = \"w\"\n  arr[23] = \"x\"\n  arr[24] = \"y\"\n  arr[25] = \"z\"\n  return [['a', 'b'], ['a', 'c'], ['a', 'd'], ['a', 'e'], ['b', 'c'], ['b', 'd'], ['b', 'e'], ['c', 'd'], ['c', 'e'], ['d', 'e'], ['e', 'f'], ['e', 'g'], ['e', 'h'], ['e', 'i'], ['e', 'j'], ['e', 'k'], ['e', 'l'], ['e','m'], ['e', 'n'], ['e', 'o'], ['e', 'p'], ['e', 'q'], ['e', 'r'], ['e','s'], ['e', 't'], ['e', 'u'], ['e', 'v'], ['e', 'w'], ['e', 'x'], ['e', 'y'], ['e', 'z'], ['f', 'g'], ['f', 'h'], ['f', 'i'], ['f', 'j'], ['f', 'k'], ['f', 'l'], ['f','m'], ['f', 'n'], ['f', 'o'], ['f', 'p'], ['f', 'q'], ['f', 'r'], ['f','s'], ['f', 't'], ['f', 'u'], ['f', 'v'], ['f', 'w'], ['f', 'x'], ['f', 'y'], ['f', 'z'], ['g', 'h'], ['g', 'i'], ['g', 'j'], ['g', 'k'], ['g', 'l'], ['g','m'], ['g', 'n'], ['g', 'o'], ['g', 'p'], ['g', 'q'], ['g', 'r'], ['g','s'], ['g', 't'], ['g', 'u'], ['g', 'v'], ['g', 'w'], ['g', 'x'], ['g', 'y'], ['g', 'z'], ['h', 'i'], ['h', 'j'], ['h', 'k'], ['h', 'l'], ['h','m'], ['h', 'n'], ['h', 'o'], ['h', 'p'], ['h', 'q'], ['h', 'r'], ['h','s'], ['h', 't'], ['h', 'u'], ['h', 'v'], ['h', 'w'], ['h', 'x'], ['h', 'y'], ['h', 'z'], ['i', 'j'], ['i', 'k'], ['i', 'l'], ['i','m'], ['i', 'n'], ['i', 'o'], ['i', 'p'], ['i', 'q'], ['i', 'r'], ['i','s'], ['i', 't'], ['i', 'u'], ['i', 'v'], ['i', 'w'], ['"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "bowedStringedInstrumentToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> bowedStringedInstrumentToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst bowedStringedInstrumentToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n\n  return md5.digest('hex');\n};\n\nmodule.exports = bowedStringedInstrumentToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "renderInteger", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  renderInteger(2, 8) => [2, 4, 6, 8]\n  renderInteger(8, 2) => [2, 4, 6, 8]\n  renderInteger(10, 14) => []\n  */\nconst renderInteger = (a, b) => {\n  if (a > b) return []\n  return [...Array(b - a).keys()].map(x => a + x)\n}\n\nconst render = (a, b) => {\n  const x = renderInteger(a, b)\n  return x.filter(x => x % 2 === 0)\n}\n\nmodule.exports = render\n<|endoftext|>"}
