{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vector of numbers, are any two numbers closer to each early than \n given threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 0, "perturbed": true, "gc": "/*\nCheck if in given vector of numbers, are any two numbers closer to each early than \n given threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n\tfor(int i = 0; i<numbers.size()-1; i++){\n\t\tfor(int j = i+1; j<numbers.size(); j++){\n\t\t\tif(fabs(numbers[i]-numbers[j]) < threshold)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tvector<float> numbers;\n\tnumbers.push_back(1.0);\n\tnumbers.push_back(2.0);\n\tnumbers.push_back(3.0);\n\tnumbers.push_back(4.0);\n\tnumbers.push_back(5.0);\n\tnumbers.push_back(6.0);\n\tnumbers.push_back(7.0);\n\tnumbers.push_back(8.0);\n\tnumbers.push_back(9.0);\n\tnumbers.push_back(10.0);\n\tnumbers.push_back(11.0);\n\tnumbers.push_back(12.0);\n\tnumbers.push_back(13.0);\n\tnumbers.push_back(14.0);\n\tnumbers.push_back(15.0);\n\tnumbers.push_back(16.0);\n\tnumbers.push_back(17.0);\n\tnumbers.push_back(18.0);\n\tnumbers.push_back(19.0);\n\tnumbers.push_back(20.0);\n\tnumbers.push_back(21.0);\n\tnumbers.push_back(22.0);\n\tnumbers.push_back(23.0);\n\tnumbers.push_back(24.0);\n\tnumbers.push_back(25.0);\n\tnumbers.push_back(26.0);\n\tnumbers.push_back(27.0);\n\tnumbers.push_back(28.0);\n\tnumbers.push_back(29.0);\n\tnumbers.push_back(30.0);\n\tnumbers.push_back(31.0);\n\tnumbers.push_back(32.0);\n\tnumbers.push_back(33.0);\n\tnumbers.push_back(34.0);\n\tnumbers.push_back(35.0);\n\tnumbers.push_back(36.0);\n\tnumbers.push_back(37.0);\n\tnumbers.push_back(38.0);\n\tnumbers.push_back(39.0);\n\tnumbers.push_back(40.0);\n\tnumbers.push_back(41.0);\n\tnumbers.push_back(42.0);\n\tnumbers.push_back(43.0);\n\tnumbers.push_back(44.0);\n\tnumbers.push_back(45.0);\n\tnumbers.push_back(46.0);\n\tnumbers.push_back(47.0);\n\tnumbers.push_back(48.0);\n\tnumbers.push_back(49.0);\n\tnumbers.push_back(50.0);\n\tnumbers.push_back(51.0);\n\tnumbers.push_back(52.0);\n\tnumbers.push_back(53.0);\n\tnumbers.push_back(54.0);\n\tnumbers.push_back(55.0);\n\tnumbers.push_back(56.0);\n\tnumbers.push_back(57.0);\n\tnumbers.push_back(58.0);\n\tnumbers.push_back(59.0);\n\tnumbers.push_back(60.0);\n\tnumbers.push_back(61.0);\n\tnumbers.push_back(62.0);\n\tnumbers.push_back(63.0);\n\tnumbers.push_back(64.0);\n\tnumbers.push_back(65.0);\n\tnumbers.push_back(66.0);\n\tnumbers.push_back(67.0);\n\tnumbers.push_back(68.0);\n\tnumbers.push_back(69.0);\n\tnumbers.push_back(70.0);\n\tnumbers.push_back(71.0);\n\tnumbers.push_back(72.0);\n\tnumbers.push_back(73.0);\n\tnumbers.push_back(74.0);\n\tnumbers.push_back(75.0);\n\tnumbers.push_back(76.0);\n\tnumbers.push_back(77.0);\n\tnumbers.push_back(78.0);\n\tnumbers.push_back(79.0);\n\tnumbers.push_back(80.0);\n\tnumbers.push_back(81.0);\n\tnumbers.push_back(82.0);\n\tnumbers.push_back(83.0);\n\tnumbers.push_back(84.0);\n\tnumbers.push_back(85.0);\n\tnumbers.push_back(86.0);\n\tnumbers.push_back(87.0);\n\tnumbers.push_back(88.0);\n\tnumbers.push_back(89.0);\n\tnumbers.push_back(90.0);\n\tnumbers.push_back(91.0);\n\tnumbers.push_back(92.0);\n\tnumbers.push_back(93.0);\n\tnumbers.push_back(94.0);\n\tnumbers.push_back(95.0);\n\tnumbers.push_back(96.0);\n\tnumbers.push_back(97.0);\n\tnumbers.push_back(98.0);\n\tnumbers.push_back(99.0);\n\tnumbers.push_back(100.0);\n\tnumbers."}
{"task_id": "CPP/1", "prompt": "/*\nInput to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n separate those group into separate strings and return the vector of those. \n disjoined group are balanced (each open brace is properly shut) and not nested within each early \n Ignore any space in the input chain.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string containing multiple groups of cuddle parenthesis. Your finish is to \n separate those group into separate strings and return the vector of those. \n disjoined group are balanced (each open brace is properly shut) and not nested within each early \n Ignore any space in the input chain.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> groups;\n    int count = 0;\n    int start = 0;\n    int end = 0;\n    while(end < paren_string.length()){\n        if(paren_string[end] == '('){\n            count++;\n        }\n        else if(paren_string[end] == ')'){\n            count--;\n        }\n        if(count == 0){\n            string group = paren_string.substr(start, end - start);\n            groups.push_back(group);\n            start = end + 1;\n            end = start;\n        }\n        end++;\n    }\n    string group = paren_string.substr(start, end - start);\n    groups.push_back(group);\n    return groups;\n}\nint main(){\n    string paren_string = \"( ) (( )) (( )( ))\";\n    vector<string> groups = separate_paren_groups(paren_string);\n    for(int i = 0; i < groups.size(); i++){\n        printf(\"%s\\n\", groups[i].c_str());\n    }\n}\n<|endoftext|>"}
{"task_id": "CPP/2", "prompt": "/*\nGiven a positive floating point number, it can be disintegrate into \n and integer region (largest integer smaller than given number) and decimals \n (leftover function always little than 1). \n\n Return the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive floating point number, it can be disintegrate into \n and integer region (largest integer smaller than given number) and decimals \n (leftover function always little than 1). \n\n Return the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n\tint int_number,int_number_2;\n\tfloat float_number;\n\tint_number = (int)number;\n\tfloat_number = number - int_number;\n\tint_number_2 = int_number*10;\n\tif(float_number < 0.5){\n\t\treturn int_number_2;\n\t}else{\n\t\treturn int_number_2 + 1;\n\t}\n}\nint main(){\n\tfloat number;\n\tprintf(\"Enter number: \");\n\tscanf(\"%f\",&number);\n\tprintf(\"%.2f\\n\",truncate_number(number));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vector of deposit and withdrawal operations on a savings bank history that starts with \n zero balance wheel. Your task is to detect if at any degree the remainder of account fall below zero, and \n at that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 0, "perturbed": true, "gc": "/*\nYou\"re given a vector of deposit and withdrawal operations on a savings bank history that starts with \n zero balance wheel. Your task is to detect if at any degree the remainder of account fall below zero, and \n at that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return true;\n    }\n    return false;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> ops;\n    for(int i = 0; i < n; i++){\n        int x;\n        scanf(\"%d\", &x);\n        ops.push_back(x);\n    }\n    bool result = below_zero(ops);\n    printf(\"%d\\n\", result);\n}<|endoftext|>"}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation \n around the mean of this dataset. \n Mean Absolute Deviation is the average absolute remainder between each \n element and a centerpoint (intend in this lawsuit ): \n MAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation \n around the mean of this dataset. \n Mean Absolute Deviation is the average absolute remainder between each \n element and a centerpoint (intend in this lawsuit ): \n MAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum = sum + (numbers[i] - mean(numbers));\n    }\n    float mean_absolute_deviation = sum / numbers.size();\n    return(mean_absolute_deviation);\n}\n\nfloat mean(vector<float> numbers){\n    float mean = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        mean = mean + numbers[i];\n    }\n    mean = mean / numbers.size();\n    return(mean);\n}\n\n<|endoftext|>"}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n\tint i, j;\n\tvector<int> output;\n\tfor (i = 0; i < numbers.size(); i++){\n\t\tif (i!= 0){\n\t\t\toutput.push_back(numbers[i]);\n\t\t}\n\t\tfor (j = i + 1; j < numbers.size(); j++){\n\t\t\tif (j!= i + 1){\n\t\t\t\toutput.push_back(delimeter);\n\t\t\t}\n\t\t\toutput.push_back(numbers[j]);\n\t\t}\n\t}\n\treturn output;\n}\n\nint main(){\n\tvector<int> numbers = {1, 2, 3};\n\tvector<int> output = intersperse(numbers, 4);\n\tfor (int i = 0; i < output.size(); i++){\n\t\tprintf(\"%d \", output[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/6", "prompt": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by space. \n For each of the group, output the thick level of nest of parentheses. \n E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by space. \n For each of the group, output the thick level of nest of parentheses. \n E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n\tvector<int> level_nest;\n\tint level = 0;\n\tint curr_level = 0;\n\tint start = 0;\n\tfor(int i = 0; i < paren_string.length(); i++){\n\t\tif(paren_string[i] == '('){\n\t\t\tlevel++;\n\t\t\tif(curr_level == 0){\n\t\t\t\tstart = i+1;\n\t\t\t}\n\t\t}\n\t\telse if(paren_string[i] == ')'){\n\t\t\tlevel--;\n\t\t\tif(curr_level == 0){\n\t\t\t\tlevel_nest.push_back(level);\n\t\t\t}\n\t\t}\n\t\telse if(paren_string[i] =='' && level == 0){\n\t\t\tlevel_nest.push_back(level);\n\t\t\tlevel = 0;\n\t\t\tcurr_level = 0;\n\t\t}\n\t\telse{\n\t\t\tcurr_level++;\n\t\t}\n\t}\n\tlevel_nest.push_back(level);\n\treturn level_nest;\n}\nint main(){\n\tstring paren_string;\n\tcin >> paren_string;\n\tvector<int> level_nest = parse_nested_parens(paren_string);\n\tfor(int i = 0; i < level_nest.size(); i++){\n\t\tcout << level_nest[i] << \" \";\n\t}\n\tcout << endl;\n}<|endoftext|>"}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vector of strings only for ones that hold feed substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 0, "perturbed": true, "gc": "/*\nFilter an input vector of strings only for ones that hold feed substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n  vector<string> filtered_strings;\n  for(int i = 0; i < strings.size(); i++){\n    if(strings[i].find(substring)!= string::npos){\n      filtered_strings.push_back(strings[i]);\n    }\n  }\n  return filtered_strings;\n}\n\n/*\nGiven a string, this function returns the number of characters in that string.\n>>> string_length(\"a\")\n1\n>>> string_length(\"aaaa\")\n5\n>>> string_length(\"\")\n0\n>>> string_length(None)\n0\n*/\n#include<string.h>\nint string_length(string s){\n  return s.length();\n}\n\n/*\nGiven a string, this function returns a reversed copy of that string.\n>>> string_reverse(\"a\")\n\"a\"\n>>> string_reverse(\"a\")\n\"a\"\n>>> string_reverse(\"\")\n\"\"\n>>> string_reverse(None)\n\"\"\n*/\n#include<string>\n#include<iostream>\nstring string_reverse(string s){\n  string reversed_s = \"\";\n  for(int i = s.length()-1; i >= 0; i--){\n    reversed_s += s[i];\n  }\n  return reversed_s;\n}\n\n/*\nGiven a list of strings, this function returns the maximum length of\nthe longest string in the list.\n>>> list_length([])\n0\n>>> list_length([\"a\", \"b\"])\n2\n>>> list_length([\"a\", \"b\", \"c\"])\n3\n>>> list_length(None)\n0\n*/\n#include<string>\n#include<iostream>\nint list_length(vector<string> strings){\n  int max_len = 0;\n  for(int i = 0; i < strings.size(); i++){\n    int len = strings[i].length();\n    if(len > max_len){\n      max_len = len;\n    }\n  }\n  return max_len;\n}\n\n/*\nGiven a string, this function returns a list of all substrings in that string.\n>>> list_all_substrings(\"a\")\n[\"a\"]\n>>> list_all_substrings(\"abcd\")\n[\"ab\", \"ac\", \"ad\", \"bc\", \"bd\", \"cd\"]\n>>> list_all_substrings(None)\n[]\n*/\n#include<string>\n#include<iostream>\n#include<list>\n#include<algorithm>\nvector<string> list_all_substrings(string s){\n  vector<string> substrings;\n  for(int i = 0; i < s.length(); i++){\n    string substring = s.substr(i, s.length()-i);\n    substrings.push_back(substring);\n  }\n  return substrings;\n}\n\n/*\nGiven a string and a number, this function returns the string shifted\nby the given number of characters to the left.\n>>> shift_left(\"abc\", 0)\n\"abc\"\n>>> shift_left(\"abc\", 2)\n\"bcd\"\n>>> shift_left(\"abc\", 3)\n\"cde\"\n>>> shift_left(\"abc\", 5)\n\"abc\"\n>>> shift_left(\"abc\", None)\n\"abc\"\n*/\n#include<string>\n#include<iostream>\n#include<list>\n#include<algorithm>\nstring shift_left(string s, int amount){\n  string new_string = \"\";\n  for(int i = 0; i < s.length(); i++){\n    new_string += s[i+amount];\n  }\n  return new_string;\n}\n\n/*\nGiven a string and a number, this function returns the string shifted\nby the given number of characters to the right.\n>>> shift_right(\"abc\", 0)\n\"abc\"\n>>> shift_right(\"abc\", 2)\n\"bc\"\n>>> shift_right(\"abc\", 3)\n\"c\"\n>>> shift_right(\"abc\", 5)\n\"abc\"\n>>> shift_right(\"abc\", None)\n\"abc\"\n*/\n#include<string>\n#include<iostream>\n#include<list>\n#include<algorithm>\nstring shift_right(string s, int amount){\n  string new_string = \"\";\n  for(int i = s.length()-1; i >= 0; i--){\n    new_string += s[i-amount];\n  }\n  return new_string;\n}\n<|endoftext|>"}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, return a vector consist of a sum and a product of all the integer in a vector. \n Empty sum should equal equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of integers, return a vector consist of a sum and a product of all the integer in a vector. \n Empty sum should equal equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n\tvector<int> sum_prod;\n\tint sum=0,prod=1;\n\tfor(int i=0;i<numbers.size();i++){\n\t\tsum+=numbers[i];\n\t\tprod*=numbers[i];\n\t}\n\tsum_prod.push_back(sum);\n\tsum_prod.push_back(prod);\n\treturn sum_prod;\n}\n\nint main(){\n\tvector<int> numbers;\n\tint n,sum,prod;\n\tprintf(\"Enter the number of numbers: \");\n\tscanf(\"%d\",&n);\n\tprintf(\"Enter the number: \");\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&numbers[i]);\n\t}\n\tsum_prod=sum_product(numbers);\n\tprintf(\"Sum is %d\",sum_prod[0]);\n\tprintf(\"Product is %d\",sum_prod[1]);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, generate a vector of rolling maximal element found until give moment \n in the succession.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 0, "perturbed": true, "gc": "/*\nFrom a given vector of integers, generate a vector of rolling maximal element found until give moment \n in the succession.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int max_index = 0;\n    int max = numbers[0];\n    for(int i = 1; i < numbers.size(); ++i){\n        if(numbers[i] > max){\n            max_index = i;\n            max = numbers[i];\n        }\n    }\n    int start = max_index - max_index%3;\n    while(start > 0){\n        result.push_back(numbers[start]);\n        start = start - 1;\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 2, 3, 4, 2};\n    vector<int> result = rolling_max(numbers);\n    for(int i = 0; i < result.size(); ++i){\n        printf(\"%d \", result[i]);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a issue chain. \n     Algorithm mind is childlike: - Find the long postfix of issue string that equal a palindrome. \n     - Append to the end of the string reverse of a chain prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a issue chain. \n     Algorithm mind is childlike: - Find the long postfix of issue string that equal a palindrome. \n     - Append to the end of the string reverse of a chain prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string result=\"\";\n    int i=0,j=str.size()-1;\n    while(i<j){\n        if(str[i]==str[j]){\n            result+=str[i];\n            i++;\n            j--;\n        }else{\n            break;\n        }\n    }\n    return result;\n}\nint main(){\n    /*\n    Inputs:\n    4\n    cata\n    3\n    cata\n    2\n    cata\n    1\n    cata\n    Outputs:\n    1\n    2\n    3\n    4\n    */\n    int t;\n    string s;\n    cin>>t;\n    while(t--){\n        cin>>s;\n        if(is_palindrome(s)){\n            cout<<s<<endl;\n        }else{\n            cout<<make_palindrome(s)<<endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/11", "prompt": "/*\nInput are two strings a and b consisting only of 1s and zero. \n Perform binary XOR on these inputs and return result besides as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 0, "perturbed": true, "gc": "/*\nInput are two strings a and b consisting only of 1s and zero. \n Perform binary XOR on these inputs and return result besides as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    int i,j,lena=a.size();\n    int lenb=b.size();\n    string c=\"\";\n    for(i=0;i<lena;i++){\n        for(j=0;j<lenb;j++){\n            if(a[i]==b[j]){\n                c+=a[i];\n            }\n            else{\n                c+=b[j];\n            }\n        }\n    }\n    return c;\n}\nint main(){\n    string a,b;\n    cin>>a>>b;\n    cout<<string_xor(a,b);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest one. Return the first one in sheath of multiple \n string of the same duration. Return None in lawsuit the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/*\nOut of vector of strings, return the longest one. Return the first one in sheath of multiple \n string of the same duration. Return None in lawsuit the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if(strings.size()==0)\n        return \"\";\n    int maxLength = 0;\n    for(vector<string>::iterator it = strings.begin(); it!= strings.end(); ++it){\n        if(it->size()>maxLength)\n            maxLength = it->size();\n    }\n    return strings[0].substr(0,maxLength);\n}\n\nint main(){\n    vector<string> test = { \"abcd\", \"bacd\", \"cbad\"};\n    printf(\"%s\\n\",longest(test));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest common divisor of two integer a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 0, "perturbed": true, "gc": "/*\nReturn a greatest common divisor of two integer a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    int c;\n    while(b!= 0)\n    {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}\nint main(){\n    int a, b;\n    while(scanf(\"%d%d\", &a, &b)!= EOF){\n        printf(\"%d\\n\", greatest_common_divisor(a, b));\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of all prefixes from shortest to long of the stimulation bowed stringed instrument\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 0, "perturbed": true, "gc": "/*\nReturn vector of all prefixes from shortest to long of the stimulation bowed stringed instrument\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    for(int i=0; i<str.size(); i++){\n        for(int j=0; j<str.size(); j++){\n            if(j+1<str.size()){\n                string prefix = str.substr(0, j+1);\n                if(prefix!= \"\"){\n                    result.push_back(prefix);\n                }\n            }\n        }\n    }\n    return result;\n}\n<|endoftext|>"}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string containing space - subtend number starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 0, "perturbed": true, "gc": "/*\nReturn a string containing space - subtend number starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n\tstring s = \"\";\n\twhile(n > 0){\n\t\ts = string(1,'') + s;\n\t\tn--;\n\t}\n\treturn s;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tprintf(\"%s\", string_sequence(n).c_str());\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 0, "perturbed": false, "gc": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n  int num = 0;\n  for(int i=0;i<str.size();i++){\n    for(int j=i+1;j<str.size();j++){\n      if(str[i]==str[j]){\n        num++;\n      }\n    }\n  }\n  return num;\n}\nint main(){\n  string str;\n  cin>>str;\n  cout<<count_distinct_characters(str)<<endl;\n  return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/17", "prompt": "/*\nInput to this function is a string representing melodious notes in a particular ASCII format. \n Your task is to parse this string and return vector of integer represent to how many beat generation does each \n not last. \n\n Here is a caption: \n \" o \" - unharmed note, lasts four beats \n \" o| \" - one-half bill, last two beat \n \" .| \" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string representing melodious notes in a particular ASCII format. \n Your task is to parse this string and return vector of integer represent to how many beat generation does each \n not last. \n\n Here is a caption: \n \" o \" - unharmed note, lasts four beats \n \" o| \" - one-half bill, last two beat \n \".| \" - quater note, lasts one beat\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n\tvector<int> notes;\n\tint i = 0, j = 0, last_beat = 0, beat_counter = 0;\n\twhile(i < music_string.size()){\n\t\tif(music_string[i] == 'o'){\n\t\t\tif(music_string[i+1] == 'o'){\n\t\t\t\tlast_beat = beat_counter;\n\t\t\t\tbeat_counter++;\n\t\t\t\ti+=2;\n\t\t\t}else{\n\t\t\t\tlast_beat = beat_counter;\n\t\t\t\tbeat_counter++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}else{\n\t\t\tlast_beat = beat_counter;\n\t\t\tbeat_counter++;\n\t\t\ti++;\n\t\t}\n\t\tif(last_beat!= 0){\n\t\t\tnotes.push_back(last_beat);\n\t\t}\n\t}\n\treturn notes;\n}\n<|endoftext|>"}
{"task_id": "CPP/18", "prompt": "/*\nFind how many times a grant substring can be determine in the original drawstring. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 0, "perturbed": true, "gc": "/*\nFind how many times a grant substring can be determine in the original drawstring. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n\tint cnt=0;\n\tfor(int i=0;i<str.size();i++){\n\t\tfor(int j=0;j<substring.size();j++){\n\t\t\tif(str[i]==substring[j]){\n\t\t\t\tcnt++;\n\t\t\t\tif(i+j+1<str.size()){\n\t\t\t\t\tif(str[i+j+1]==substring[j]){\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(i-j-1>=0){\n\t\t\t\t\tif(str[i-j-1]==substring[j]){\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(i+j+1<str.size() && i-j-1>=0){\n\t\t\t\t\tif(str[i-j-1]==substring[j] && str[i+j+1]==substring[j]){\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\ti--;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;\n}\nint main(){\n\tstring str=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space - delimited string of numberals from \" zero \" to \" nine \". \n Valid option are \" zero \", \" one \",' two \",' three \", \" four \", \" five \",' six \",' seven \", \" eight \" and \" nine \". \n revert the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 0, "perturbed": true, "gc": "/*\nInput is a space - delimited string of numberals from \" zero \" to \" nine \". \n Valid option are \" zero \", \" one \",' two \",' three \", \" four \", \" five \",' six \",' seven \", \" eight \" and \" nine \". \n revert the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<char,int> m;\n    string result;\n    string::iterator it = numbers.begin();\n    int i = 0;\n    for( ; it!= numbers.end(); it++,i++){\n        if(*it ==''){\n            result = result +'';\n            continue;\n        }\n        else{\n            m[*it] = i;\n            result = result + *it;\n        }\n    }\n    string::iterator it2 = result.begin();\n    for( ; it2!= result.end(); it2++){\n        if(m[*it2] == m[*(it2-1)]+1){\n            *(it2-1) = *(it2-2);\n            *(it2) = *(it2-1);\n        }\n        else{\n            *it2 = *(it2-1);\n        }\n    }\n    return result;\n}\nint main(){\n    string numbers;\n    int i = 0;\n    while(cin >> numbers){\n        cout << sort_numbers(numbers) << endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that constitute the close to each \n early and return them in order (smaller number, large number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 0, "perturbed": true, "gc": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that constitute the close to each \n early and return them in order (smaller number, large number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=0; j<numbers.size(); j++){\n            if(numbers[i] == numbers[j])\n                continue;\n            float a = numbers[i] - numbers[j];\n            float b = numbers[j] - numbers[i];\n            if(a*a + b*b < 0.01){\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n                break;\n            }\n        }\n    }\n    return result;\n}\nint main(){\n    vector<float> numbers = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    vector<float> result = find_closest_elements(numbers);\n    for(int i=0; i<numbers.size(); i++){\n        printf(\"%f \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least two element), use a linear transform to that vector, \n such that the smallest number will become 0 and the big will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 0, "perturbed": true, "gc": "/*\nGiven vector of numbers (of at least two element), use a linear transform to that vector, \n such that the smallest number will become 0 and the big will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n\tfloat min=numbers[0];\n\tfloat max=numbers[0];\n\tfor(int i=1; i<numbers.size(); i++){\n\t\tif(numbers[i]<min){\n\t\t\tmin=numbers[i];\n\t\t}\n\t\tif(numbers[i]>max){\n\t\t\tmax=numbers[i];\n\t\t}\n\t}\n\tvector<float> result;\n\tfor(int i=0; i<numbers.size(); i++){\n\t\tresult.push_back(1-(numbers[i]-min)/(max-min));\n\t}\n\treturn result;\n}\n<|endoftext|>"}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python values only for integer\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 0, "perturbed": true, "gc": "/*\nFilter given vector of any python values only for integer\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n  vector<int> res;\n  for(list_any::iterator it = values.begin(); it!= values.end(); it++){\n    if(boost::any_cast<int>(*it))\n      res.push_back(boost::any_cast<int>(*it));\n  }\n  return res;\n}\n<|endoftext|>"}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n\tint i=0;\n\twhile(str[i]!='\\0'){\n\t\ti++;\n\t}\n\treturn i;\n}\n\n/*\nReturn first character in given string\n>>> first(\"abc\")\na\n>>> first(\"a\")\na\n>>> first(\"a \")\na\n>>> first(\"\")\n*/\n#include<iostream>\n#include<string>\nusing namespace std;\nstring first(string str){\n\tint i=0;\n\twhile(str[i]!='\\0'){\n\t\ti++;\n\t}\n\treturn str[0];\n}\n\n/*\nReturn first character in given string\n>>> last(\"abc\")\nc\n>>> last(\"a\")\na\n>>> last(\"a \")\na\n>>> last(\"\")\n*/\n#include<iostream>\n#include<string>\nusing namespace std;\nstring last(string str){\n\tint i=str.length()-1;\n\twhile(str[i]!='\\0'){\n\t\ti--;\n\t}\n\treturn str[i];\n}\n\n/*\nReturn first character in given string\n>>> left(\"abc\")\na\n>>> left(\"a\")\na\n>>> left(\"a \")\na\n>>> left(\"\")\n*/\n#include<iostream>\n#include<string>\nusing namespace std;\nstring left(string str){\n\tint i=0;\n\twhile(str[i]!='\\0'){\n\t\ti++;\n\t}\n\treturn str[0];\n}\n\n/*\nReturn last character in given string\n>>> right(\"abc\")\nc\n>>> right(\"a\")\na\n>>> right(\"a \")\na\n>>> right(\"\")\n*/\n#include<iostream>\n#include<string>\nusing namespace std;\nstring right(string str){\n\tint i=str.length()-1;\n\twhile(str[i]!='\\0'){\n\t\ti--;\n\t}\n\treturn str[i];\n}\n\nint main(){\n\tstring str=\"abc\";\n\tcout<<\"strlen(\"<<str<<\") = \"<<strlen(str)<<endl;\n\tcout<<\"first(\"<<str<<\") = \"<<first(str)<<endl;\n\tcout<<\"last(\"<<str<<\") = \"<<last(str)<<endl;\n\tcout<<\"left(\"<<str<<\") = \"<<left(str)<<endl;\n\tcout<<\"right(\"<<str<<\") = \"<<right(str)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find the largest phone number that divide n evenly, little than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 0, "perturbed": true, "gc": "/*\nFor a given number n, find the largest phone number that divide n evenly, little than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n\tint count=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(n%i==0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\n\nint main(){\n\tint n;\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tprintf(\"%d\\n\",largest_divisor(n));\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/25", "prompt": "/*\nReturn vector of prime factors of grant integer in the ordering from smallest to big. \n Each of the factors should be vectored phone number of meter corresponding to how many multiplication it appeares in factorization. \n stimulation number should be equal to the product of all agent\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/*\nReturn vector of prime factors of grant integer in the ordering from smallest to big. \n Each of the factors should be vectored phone number of meter corresponding to how many multiplication it appeares in factorization. \n stimulation number should be equal to the product of all agent\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> result;\n    if(n <= 1) return result;\n    if(n == 2) return {2};\n    int tmp = n;\n    while(tmp % 2 == 0){\n        tmp /= 2;\n        result.push_back(2);\n    }\n    if(tmp == 1){\n        result.push_back(1);\n    }\n    while(tmp!= 1){\n        int div = 3;\n        while(tmp % div == 0){\n            tmp /= div;\n            result.push_back(div);\n        }\n    }\n    return result;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> factors = factorize(n);\n    for(int i = 0; i < factors.size(); i++){\n        printf(\"%d\", factors[i]);\n        if(i!= factors.size() - 1){\n            printf(\" * \");\n        }\n    }\n    printf(\" = %d\\n\", n);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove all elements that happen more than once. \n Keep order of element left the like as in the remark.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 0, "perturbed": true, "gc": "/*\nFrom a vector of integers, remove all elements that happen more than once. \n Keep order of element left the like as in the remark.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n\tvector<int> result;\n\tsort(numbers.begin(), numbers.end());\n\tint i=0;\n\tint j=1;\n\twhile(j<numbers.size()){\n\t\tif(numbers[j]!= numbers[i]){\n\t\t\tresult.push_back(numbers[j]);\n\t\t\ti++;\n\t\t}\n\t\tj++;\n\t}\n\treturn result;\n}\n\nint main(){\n\tvector<int> numbers = {1, 2, 3, 2, 4};\n\tvector<int> result = remove_duplicates(numbers);\n\tfor(int i=0; i<result.size(); i++){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/27", "prompt": "/*\nFor a given string, flip lowercase character to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 0, "perturbed": true, "gc": "/*\nFor a given string, flip lowercase character to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n    int len=str.size();\n    for(int i=0;i<len;i++)\n        if(str[i]>='a'&&str[i]<='z'){\n            str[i]=str[i]+'A'-'a';\n        }\n    else if(str[i]>='A'&&str[i]<='Z'){\n        str[i]=str[i]+'a'-'A';\n    }\n    return str;\n}\nint main(){\n    string str;\n    while(cin>>str){\n        cout<<filp_case(str)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string out = \"\";\n    for(string str:strings){\n        out+=str;\n    }\n    return out;\n}\nint main(){\n    string out = concatenate({\"a\", \"b\", \"c\"});\n    printf(\"%s\\n\",out.c_str());\n}\n<|endoftext|>"}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vector of strings only for ones that startle with a feed prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 0, "perturbed": true, "gc": "/*\nFilter an input vector of strings only for ones that startle with a feed prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> output;\n    for(string str: strings){\n        if(str.substr(0, prefix.length()) == prefix)\n            output.push_back(str);\n    }\n    return output;\n}\n\nint main(){\n    vector<string> input = { \"abc\", \"bcd\", \"cde\", \"vector\" };\n    vector<string> output = filter_by_prefix(input, \"a\");\n    for(string str: output){\n        printf(\"%s\\n\", str.c_str());\n    }\n}\n<|endoftext|>"}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 0, "perturbed": false, "gc": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main(){\n    vector<float> v;\n    v.push_back(-10);\n    v.push_back(1);\n    v.push_back(-1);\n    v.push_back(0);\n    v.push_back(10);\n    v.push_back(20);\n    v.push_back(30);\n    v.push_back(40);\n    v.push_back(50);\n    v.push_back(60);\n    v.push_back(70);\n    v.push_back(80);\n    v.push_back(90);\n    v.push_back(100);\n    v.push_back(110);\n    v.push_back(120);\n    v.push_back(130);\n    v.push_back(140);\n    v.push_back(150);\n    v.push_back(160);\n    v.push_back(170);\n    v.push_back(180);\n    v.push_back(190);\n    v.push_back(200);\n    v.push_back(210);\n    v.push_back(220);\n    v.push_back(230);\n    v.push_back(240);\n    v.push_back(250);\n    v.push_back(260);\n    v.push_back(270);\n    v.push_back(280);\n    v.push_back(290);\n    v.push_back(300);\n    v.push_back(310);\n    v.push_back(320);\n    v.push_back(330);\n    v.push_back(340);\n    v.push_back(350);\n    v.push_back(360);\n    v.push_back(370);\n    v.push_back(380);\n    v.push_back(390);\n    v.push_back(400);\n    v.push_back(410);\n    v.push_back(420);\n    v.push_back(430);\n    v.push_back(440);\n    v.push_back(450);\n    v.push_back(460);\n    v.push_back(470);\n    v.push_back(480);\n    v.push_back(490);\n    v.push_back(500);\n    v.push_back(510);\n    v.push_back(520);\n    v.push_back(530);\n    v.push_back(540);\n    v.push_back(550);\n    v.push_back(560);\n    v.push_back(570);\n    v.push_back(580);\n    v.push_back(590);\n    v.push_back(600);\n    v.push_back(610);\n    v.push_back(620);\n    v.push_back(630);\n    v.push_back(640);\n    v.push_back(650);\n    v.push_back(660);\n    v.push_back(670);\n    v.push_back(680);\n    v.push_back(690);\n    v.push_back(700);\n    v.push_back(710);\n    v.push_back(720);\n    v.push_back(730);\n    v.push_back(740);\n    v.push_back(750);\n    v.push_back(760);\n    v.push_back(770);\n    v.push_back(780);\n    v.push_back(790);\n    v.push_back(800);\n    v.push_back(810);\n    v.push_back(820);\n    v.push_back(830);\n    v.push_back(840);\n    v.push_back(850);\n    v.push_back(860);\n    v.push_back(870);\n    v.push_back(880);\n    v.push_back(890);\n    v.push_back(900);\n    v.push_back(910);\n    v.push_back(920);\n    v.push_back(930);\n    v.push_back(940);\n    v.push_back(950);\n    v.push_back(960);\n    v.push_back(970);\n    v.push_back(980);\n    v.push_back(990);\n    v.push_back(1000);\n    v.push_back(1010);\n    v.push_back(1020);\n    v.push_back(1030);\n    v.push_back(1040);\n    v.push_back(1050);\n    v.push_back(1060);\n    v.push_back(1070);\n    v.push_back(1080);\n    v.push_back(1090);\n    v.push_back(1100);\n    v.push_back(1110);\n    v.push_back(1120);\n    v.push_back(1130);\n    v.push_back(1140);\n    v.push_back(1150);\n    v.push_back(1160);\n    v.push_back(1170);\n    v.push_back(1180);\n    v.push_back(1190);\n    v.push_back(1200);\n    v.push_back(1210);\n    v.push_back(1220);\n    v.push_back(1230);\n    v.push_back(1240);\n    v.push_back(1250);\n    v.push_back(1260);\n    v.push_back(1270"}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given number equal choice, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 0, "perturbed": true, "gc": "/*\nReturn true if a given number equal choice, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n\tif(n<1)\n\t\treturn false;\n\tfor(long long i=2;i*i<=n;i++){\n\t\tif(n%i==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tlong long n,x;\n\tscanf(\"%lld\",&n);\n\twhile(n--){\n\t\tscanf(\"%lld\",&x);\n\t\tif(is_prime(x))\n\t\t\tprintf(\"true\\n\");\n\t\telse\n\t\t\tprintf(\"false\\n\");\n\t}\n}\n<|endoftext|>"}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n     * / \n     bivalent sum=0;\n     int i;\n     for (i=0;i<xs.size();i++)\n     { \n         sum+=xs[i]*pow(x,i);\n     } \n     return sum;\n}\n\ndouble find_zero(vector < double > xs){\n     / * \n     xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero degree, even if there equal many. \n     Moreover, find_zero only takes list xs receive even number of coefficients and largest non zero coefficient as it undertake a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n     * / \n     bivalent sum=0;\n     int i;\n     for (i=0;i<xs.size();i++)\n     { \n         sum+=xs[i]*pow(x,i);\n     } \n     return sum;\n}\n\ndouble find_zero(vector < double > xs){\n     / * \n     xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero degree, even if there equal many. \n     Moreover, find_zero only takes list xs receive even number of coefficients and largest non zero coefficient as it undertake a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    int i;\n    double x = 1;\n    double f = poly(xs,x);\n    double a = 1;\n    double b = 0;\n    double r = 0;\n    double epsilon = 1e-10;\n    while (abs(r - a) > epsilon){\n        r = (a + b)/2;\n        f = poly(xs,r);\n        if (f == 0){\n            return r;\n        }\n        if (f > 0){\n            b = r;\n        } else {\n            a = r;\n        }\n    }\n    return r;\n}\n\nint main(){\n    vector<double> xs = {1, 2, 3};\n    cout << find_zero(xs);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that \n lambert' is identical to l in the indicies that be not divisible by three, while its values at the indicies that be divisible by three equal equal \n to the values of the corresponding indicies of l, but classify.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes a vector l and returns a vector l' such that \n lambert' is identical to l in the indicies that be not divisible by three, while its values at the indicies that be divisible by three equal equal \n to the values of the corresponding indicies of l, but classify.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n\tint i=0,j=0;\n\tvector<int> sort(l.size());\n\tfor(i=0;i<l.size();i++){\n\t\tsort[i]=l[i];\n\t}\n\tsort(l.begin(),l.end());\n\tfor(i=0;i<l.size();i++){\n\t\tif(l[i]%3!=0){\n\t\t\tsort[j]=l[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn sort;\n}\nint main(){\n\tvector<int> l;\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tl.clear();\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\twhile(x--){\n\t\t\tint a;\n\t\t\tscanf(\"%d\",&a);\n\t\t\tl.push_back(a);\n\t\t}\n\t\tvector<int> sort=sort_third(l);\n\t\tprintf(\"%d\\n\",sort.size());\n\t\tfor(int i=0;i<sort.size();i++){\n\t\t\tprintf(\"%d \",sort[i]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> res;\n    for(int i=0;i<l.size();i++){\n        if(find(res.begin(),res.end(),l[i])==res.end()){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> v;\n    for(int i=0;i<n;i++){\n        int t;\n        scanf(\"%d\",&t);\n        v.push_back(t);\n    }\n    vector<int> u=unique(v);\n    for(int i=0;i<u.size();i++)\n        printf(\"%d \",u[i]);\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 0, "perturbed": false, "gc": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n\tint i;\n\tfloat m=0.0;\n\tfor(i=0;i<l.size();i++)\n\t\tif(l[i]>m)\n\t\t\tm=l[i];\n\treturn m;\n}\n<|endoftext|>"}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 0, "perturbed": true, "gc": "/*\nReturn the number of times the digit 7 appear in integer less than n which be divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n\tint num = 0;\n\twhile (n > 0){\n\t\tnum += n % 11 == 7;\n\t\tn /= 11;\n\t}\n\treturn num;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\",fizz_buzz(n));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that \n lambert' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n to the value of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes a vector l and returns a vector l' such that \n lambert' is identical to l in the leftover indicies, while its values at the even indicies are adequate \n to the value of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tint i;\n\tvector<float> l1;\n\tl1.insert(l1.begin(), l.begin(), l.end());\n\tint j;\n\tint k;\n\tvector<float> l2;\n\tfor(i = 0; i < l1.size() - 1; i += 2){\n\t\tj = i + 1;\n\t\twhile(j < l1.size() && l1[j] == l1[i])\n\t\t\tj++;\n\t\tif(j < l1.size())\n\t\t\tl2.push_back(l1[j]);\n\t\tfor(k = i + 2; k < l1.size(); k += 2){\n\t\t\tl2.push_back(l1[k]);\n\t\t}\n\t}\n\treturn l2;\n}\n<|endoftext|>"}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. recurrence decode drawstring. \n     * /\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. recurrence decode drawstring. \n     * /\n    int l=s.length();\n    int i,k,t,g;\n    string output;\n    for (i=0;i<l;i+=3)\n    {\n        k=0;\n        g=0;\n        t=i;\n        while (t<l)\n        {\n            if (s[t]==s[t+1] && s[t+2]==s[t]){\n                k++;\n            }\n            t+=3;\n        }\n        output+=s.substr(i,k);\n        output+='\\0';\n        g+=k;\n    }\n    return output;\n    */\n    return \"\";\n}\n\nint main()\n{\n    string s;\n    cout<<\"Enter string to be encoded: \";\n    cin>>s;\n    cout<<\"Encoded string: \"<<encode_cyclic(s)<<endl;\n    cout<<\"Decoded string: \"<<decode_cyclic(encode_cyclic(s))<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-th number that is a Fibonacci phone number and it's besides premier.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 0, "perturbed": true, "gc": "/*\nprime_fib returns n-th number that is a Fibonacci phone number and it's besides premier.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int i,j;\n    i=0;\n    j=1;\n    while(i+j<=n){\n        if(j==1){\n            j=2;\n            i++;\n        }else{\n            int temp=i+j;\n            if(temp>n){\n                return prime_fib(n);\n            }\n            if(temp%2==0){\n                j=2;\n                i++;\n            }else{\n                j++;\n            }\n        }\n    }\n    return j-1;\n}\n\nint main(){\n    int n;\n    printf(\"Enter a number to find the prime Fibonacci number: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\",prime_fib(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero takes a vector of integers as an remark. \n it retort true if there are three discrete elements in the vector that \n union to zero, and fake otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\ntriples_sum_to_zero takes a vector of integers as an remark. \n it retort true if there are three discrete elements in the vector that \n union to zero, and fake otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n\tint sum = 0;\n\tfor(int i=0; i<l.size(); i++){\n\t\tsum += l[i];\n\t\tif(sum == 0){\n\t\t\tif(i!= l.size()-1){\n\t\t\t\tsum += l[i+1];\n\t\t\t\tif(sum == 0){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tint n;\n\twhile(scanf(\"%d\", &n)!= EOF){\n\t\tvector<int> l;\n\t\tfor(int i=0; i<n; i++){\n\t\t\tint x;\n\t\t\tscanf(\"%d\", &x);\n\t\t\tl.push_back(x);\n\t\t}\n\t\tif(triples_sum_to_zero(l)){\n\t\t\tprintf(\"%s\\n\", \"True\");\n\t\t}else{\n\t\t\tprintf(\"%s\\n\", \"False\");\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfectly square boundlessly long line. \n n car are drive exit to correctly;   simultaneously, a unlike set of n car \n are drive right to left.    The two sets of cars start out be very far from \n each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n when a car that's move left to proper hit a car that's move good to left. \n However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n in their trajectory as if they did not clash. \n\n This function output the number of such collisions. \n * / \n # include < stdio.h > \n using namespace std;\nint car_race_collision(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 0, "perturbed": true, "gc": "/*\nImagine a road that's a perfectly square boundlessly long line. \n n car are drive exit to correctly;   simultaneously, a unlike set of n car \n are drive right to left.    The two sets of cars start out be very far from \n each early.   All cars motivate in the like amphetamine.   Two cars are said to clash \n when a car that's move left to proper hit a car that's move good to left. \n However, the cars are infinitely sturdy and hard; as a solution, they continue be active \n in their trajectory as if they did not clash. \n\n This function output the number of such collisions. \n * / \n # include < stdio.h > \n using namespace std;\nint car_race_collision(int n){\n    int i,j;\n    int m,n,k,l;\n    for(i=0;i<n;i++){\n        for(j=0;j<n;j++){\n            for(m=0;m<n;m++){\n                for(n=0;n<n;n++){\n                    if(i!=m&&j!=n){\n                        k=abs(i-m);\n                        l=abs(j-n);\n                        if(k+l==1){\n                            k=abs(i-m);\n                            l=abs(j-n);\n                            if(k==0||l==0){\n                                k=abs(i-m);\n                                l=abs(j-n);\n                                if(k==0||l==0){\n                                    k=abs(i-m);\n                                    l=abs(j-n);\n                                    if(k==0||l==0){\n                                        k=abs(i-m);\n                                        l=abs(j-n);\n                                        if(k==0||l==0){\n                                            k=abs(i-m);\n                                            l=abs(j-n);\n                                            if(k==0||l==0){\n                                                k=abs(i-m);\n                                                l=abs(j-n);\n                                                if(k==0||l==0){\n                                                    k=abs(i-m);\n                                                    l=abs(j-n);\n                                                    if(k==0||l==0){\n                                                        k=abs(i-m);\n                                                        l=abs(j-n);\n                                                        if(k==0||l==0){\n                                                            k=abs(i-m);\n                                                            l=abs(j-n);\n                                                            if(k==0||l==0){\n                                                                k=abs(i-m);\n                                                                l=abs(j-n);\n                                                                if(k==0||l==0){\n                                                                    k=abs(i-m);\n                                                                    l=abs(j-n);\n                                                                    if(k==0||l==0){\n                                                                        k=abs(i-m);\n                                                                        l=abs(j-n);\n                                                                        if(k==0||l==0){\n                                                                            k=abs(i-m);\n                                                                            l=abs(j-n);\n                                                                            if(k==0||l==0){\n                                                                                k=abs(i-m);\n                                                                                l=abs(j-n);\n                                                                                if(k==0||l==0){\n                                                                                    k=abs(i-m);\n                                                                                    l=abs(j-n);\n                                                                                    if(k==0||l==0){\n                                                                                        k=abs(i-m);\n                                                                                        l=abs(j-n);\n                                                                                        if(k==0||l==0){\n                                                                                            k=abs(i-m);\n                                                                                            l=abs(j-n);\n                                                                                            if(k==0||l==0){\n                                                                                                k=abs(i-m);\n                                                                                                l=abs(j-n);\n                                                                                                if(k==0||l==0){\n                                                                                                    k=abs(i-m);\n                                                                                                    l=abs(j-n);\n                                                                                                    if(k==0||l==0){\n                                                                                                        k=abs(i-m);\n                                                                                                        l=abs(j-n);\n                                                                                                        if(k==0||l==0){\n                                                                                                            k=abs(i-m);\n                                                                                                            l=abs(j-n);\n                                                                                                            if(k==0||l==0){\n                                                                                                               k=abs(i-m);\n                                                                                                               l=abs(j-n);\n                                                                                                               if(k==0||l==0){\n                                                                                                                     k=abs(i-m);\n                                                                                                                     l=abs(j-n);\n                                                                                                                     if(k==0||l==0){\n                                                                                                                         k=abs(i-m);\n                                                                                                                         l=abs(j-n);\n                                                                                                                         if(k==0||l==0){\n                                                                                                                            k=abs(i-m);\n                                                                                                                            l=abs(j-n);\n                                                                                                                            if(k==0||l==0){\n                                                                                                                                k=abs(i-m);\n                                                                                                                                l=abs(j-n);\n                                                                                                                                if(k==0||l==0){\n                                                                                                                                  k=abs(i-m);\n                                                                                                                                  l=abs(j-n);\n                                                                                                                                  if(k==0||l==0){\n                                                                                                                                    k=abs(i-m);\n                                                                                                                                    l=abs(j-n);\n                                                                                                                                    if(k==0||"}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 0, "perturbed": false, "gc": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> res;\n    for(int i=0; i<l.size(); i++){\n        res.push_back(l[i]+1);\n    }\n    return res;\n}\nint main(){\n    vector<int> v1 = {1, 2, 3};\n    vector<int> v2 = incr_list(v1);\n    for(int i=0; i<v1.size(); i++){\n        printf(\"%d \", v1[i]);\n    }\n    printf(\"\\n\");\n    for(int i=0; i<v2.size(); i++){\n        printf(\"%d \", v2[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes a vector of integers as an remark. \n it retort true if there are two discrete elements in the vector that \n union to zero, and fake otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\npairs_sum_to_zero takes a vector of integers as an remark. \n it retort true if there are two discrete elements in the vector that \n union to zero, and fake otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    int i, j;\n    int n = l.size();\n    if(n <= 1)\n        return false;\n    vector<int> v;\n    for(i = 0; i < n; i++){\n        if(l[i] < 0)\n            continue;\n        else{\n            v.push_back(l[i]);\n        }\n    }\n    for(i = 0; i < n; i++){\n        for(j = i+1; j < n; j++){\n            if(l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nint main(){\n    vector<int> v;\n    int n;\n    cin>>n;\n    for(int i = 0; i < n; i++){\n        int a;\n        cin>>a;\n        v.push_back(a);\n    }\n    bool t = pairs_sum_to_zero(v);\n    if(t)\n        printf(\"true\\n\");\n    else\n        printf(\"false\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input number x to base.\nreturn drawstring theatrical performance after the conversion. \n basis issue are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 0, "perturbed": true, "gc": "/*\nChange numerical base of input number x to base.\nreturn drawstring theatrical performance after the conversion. \n basis issue are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string str = \"\";\n    if(x<0){\n        x = -x;\n        str = '-';\n    }\n    long long int n = x;\n    int i = 0;\n    int j = 0;\n    while(n){\n        int c = n % base;\n        if(c == 0){\n            str += \"0\";\n        }else{\n            str += char(c + 97);\n        }\n        n = n / base;\n        i++;\n        if(i>10){\n            i = 0;\n            j++;\n        }\n    }\n    return str;\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int x;\n        string str;\n        scanf(\"%d\",&x);\n        str = change_base(x,10);\n        str.erase(0,1);\n        printf(\"%s\\n\",str.c_str());\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high return sphere for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGiven length of a side and high return sphere for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    float area;\n    area=(pow(a,2)-pow(h,2))/2;\n    return sqrt(area);\n}\nint main(){\n    float a,h;\n    while(scanf(\"%f%f\",&a,&h)==2){\n        printf(\"%.2f\\n\",triangle_area(a,h));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n fib4(0) - > 0 \n fib4(1) - > 0 \n fib4(2) - > 2 \n fib4(3) - > 0 \n fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease compose a function to efficiently calculate the n-th component of the fib4 number sequence.   Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n fib4(0) - > 0 \n fib4(1) - > 0 \n fib4(2) - > 2 \n fib4(3) - > 0 \n fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease compose a function to efficiently calculate the n-th component of the fib4 number sequence.   Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n<4){\n        return 1;\n    }\n    else{\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter the number of fib4 to calculate: \");\n    scanf(\"%d\",&n);\n    printf(\"fib4(%d) = %d\\n\",n,fib4(n));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    float middle;\n    float median;\n    int size = l.size();\n    int middle_index = size/2;\n    if(size%2 == 0){\n        middle = (l[middle_index]-l[middle_index-1])/2+l[middle_index-1];\n        return middle;\n    }\n    else{\n        middle = l[middle_index];\n        return middle;\n    }\n}\nint main(){\n    vector<float> v;\n    int size;\n    float median;\n    scanf(\"%d\", &size);\n    for(int i=0; i<size; i++){\n        scanf(\"%f\", &v[i]);\n    }\n    sort(v.begin(), v.end());\n    median = median(v);\n    printf(\"%f\", median);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 0, "perturbed": false, "gc": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left=0;\n    int right=text.size()-1;\n    while(left<right){\n        if(text[left]!=text[right])\n            return false;\n        left++;\n        right--;\n    }\n    return true;\n}\nint main(){\n    string str;\n    cin>>str;\n    if(is_palindrome(str))\n        cout<<\"It is a palindrome\"<<endl;\n    else\n        cout<<\"It is not a palindrome\"<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n\treturn n%p;\n}\n\nint main(){\n\tint n,p;\n\tscanf(\"%d%d\",&n,&p);\n\tprintf(\"%d\\n\",modp(n,p));\n}\n<|endoftext|>"}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every quality by 5 in the rudiment. \n     bowed stringed instrument out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\nstring decode_shift(string s){\n     // take as input drawstring encoded with encode_shift routine. Returns decode string.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every quality by 5 in the rudiment. \n     bowed stringed instrument out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\nstring decode_shift(string s){\n     // take as input drawstring encoded with encode_shift routine. Returns decode string.\n     bowed stringed instrument out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]-5+(int)'a')%26+(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\n\nint main()\n{\n    int testcases,i,j;\n    string s,s1,s2,s3,s4,s5;\n    string test;\n    cout<<\"Enter number of testcases: \";\n    cin>>testcases;\n    for(i=1;i<=testcases;i++)\n    {\n        cout<<\"Enter Testcase #\"<<i<<\": \";\n        cin>>test;\n        cout<<\"Original: \"<<test<<endl;\n        s=encode_shift(test);\n        cout<<\"Shifted: \"<<s<<endl;\n        s1=decode_shift(s);\n        cout<<\"Decoded: \"<<s1<<endl;\n        if(test==s1)\n            cout<<\"Passed\"<<endl;\n        else\n            cout<<\"FAILED\"<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that takes string and return chain without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 0, "perturbed": true, "gc": "/*\nremove_vowels is a function that takes string and return chain without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels = \"aeiouAEIOU\";\n    string vow = \"AEIOU\";\n    string vow2 = \"AEIOUaeiou\";\n    transform(text.begin(), text.end(), text.begin(), ::tolower);\n    for (int i = 0; i < text.length(); i++){\n        if (vowels.find(text[i])!= string::npos){\n            text[i] = vow;\n        }\n    }\n    return text;\n}\n<|endoftext|>"}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all numbers in the vector l equal below brink t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 0, "perturbed": true, "gc": "/*\nReturn true if all numbers in the vector l equal below brink t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n\tint i;\n\tfor(i = 0; i < l.size(); i++){\n\t\tif(l[i] > t){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint n, m, i, j;\n\tvector<int> l;\n\tscanf(\"%d %d\", &n, &m);\n\tfor(i = 0; i < n; i++){\n\t\tscanf(\"%d\", &l[i]);\n\t}\n\tfor(i = 0; i < m; i++){\n\t\tscanf(\"%d\", &l[i]);\n\t}\n\tprintf(\"%d\\n\", below_threshold(l, l[0]));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    printf(\"Enter first number: \");\n    scanf(\"%d\",&x);\n    printf(\"Enter second number: \");\n    scanf(\"%d\",&y);\n    printf(\"Sum is: %d\\n\",add(x,y));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same character.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 0, "perturbed": true, "gc": "/*\nCheck if two words have the same character.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n\tint i=0,j=0,n=s0.length(),m=s1.length();\n\twhile(i<n && j<m){\n\t\tif(s0[i]==s1[j])\n\t\t\ti++;\n\t\telse\n\t\t\tj++;\n\t}\n\tif(i==n && j==m)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tstring s0,s1;\n\t\tcin>>s0>>s1;\n\t\tbool s=same_chars(s0,s1);\n\t\tif(s)\n\t\t\tprintf(\"same\\n\");\n\t\telse\n\t\t\tprintf(\"not same\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n<1)return 0;\n    else{\n        int a=1;\n        int b=1;\n        int c=0;\n        while(n>0){\n            c=a+b;\n            a=b;\n            b=c;\n            n--;\n        }\n        return c;\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter number: \");\n    scanf(\"%d\",&n);\n    printf(\"Fibonacci(%d) is %d\\n\",n,fib(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of' <' and '>'.\nreturn true if every opening bracket take a comparable closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of' <' and '>'.\nreturn true if every opening bracket take a comparable closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int len=brackets.size();\n    int count=0;\n    for(int i=0;i<len;i++){\n        if(brackets[i]=='<')\n            count++;\n        else if(brackets[i]=='>'){\n            if(count==0)\n                return false;\n            else\n                count--;\n        }\n    }\n    return count==0;\n}\n\nint main(){\n    string brackets;\n    while(getline(cin,brackets)){\n        cout<<correct_bracketing(brackets)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements are monotonically increasing or decrease.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*\nReturn true is vector elements are monotonically increasing or decrease.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n\tint i,j;\n\tfloat diff;\n\ti = 0;\n\tif(l.at(0) <= l.at(1)){\n\t\treturn true;\n\t}\n\tfor(i = 1; i<l.size(); i++){\n\t\tdiff = l.at(i) - l.at(i-1);\n\t\tif(diff < 0){\n\t\t\treturn false;\n\t\t}\n\t\telse if(diff == 0){\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn true;\n}\n\nint main(){\n\tvector<float> l;\n\tl.push_back(10);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(1);\n\tl.push_back(0);\n\tl.push_back(-10);\n\tif(monotonic(l)){\n\t\tprintf(\"true\\n\");\n\t}\n\telse{\n\t\tprintf(\"false\\n\");\n\t}\n}<|endoftext|>"}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    int i=0,j=0,k=0,n1=l1.size(),n2=l2.size();\n    vector<int> res;\n    while(i<n1&&j<n2){\n        if(l1[i]==l2[j]){\n            res.push_back(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i]<l2[j]){\n            i++;\n        }\n        else if(l1[i]>l2[j]){\n            j++;\n        }\n    }\n    return res;\n}\nint main(){\n    int n1,n2;\n    scanf(\"%d%d\",&n1,&n2);\n    vector<int> l1(n1);\n    for(int i=0;i<n1;i++){\n        scanf(\"%d\",&l1[i]);\n    }\n    vector<int> l2(n2);\n    for(int i=0;i<n2;i++){\n        scanf(\"%d\",&l2[i]);\n    }\n    vector<int> res=common(l1,l2);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest prime factor of n. Assume n > 1 and equal not a flower.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 0, "perturbed": true, "gc": "/*\nReturn the largest prime factor of n. Assume n > 1 and equal not a flower.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i=2,j=2,k=n;\n    while(k>1){\n        while(k%i==0){\n            k=k/i;\n        }\n        i=i+1;\n        if(k==1)\n            return i;\n    }\n    return 0;\n}\nint main(){\n    int n;\n    printf(\"Enter the number: \");\n    scanf(\"%d\",&n);\n    printf(\"The largest prime factor of %d is %d\",n,largest_prime_factor(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 0, "perturbed": false, "gc": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\n\nint main(){\n    int n;\n    printf(\"Enter the number n: \");\n    scanf(\"%d\",&n);\n    printf(\"sum to %d is %d\",n,sum_to_n(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of' (' and ')'.\nreturn true if every opening bracket take a comparable closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of' (' and ')'.\nreturn true if every opening bracket take a comparable closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tif(brackets.size()==0)\n\t\treturn true;\n\tchar c=brackets[0];\n\tfor(int i=1;i<brackets.size();i++){\n\t\tif(brackets[i]==c&&brackets[i-1]!='(')\n\t\t\treturn false;\n\t\telse if(brackets[i]==c&&brackets[i-1]=='(')\n\t\t\treturn correct_bracketing(brackets.substr(i+1));\n\t\telse if(brackets[i]!='('&&brackets[i]!=')'&&brackets[i]!='(')\n\t\t\treturn false;\n\t\telse\n\t\t\tc=brackets[i];\n\t}\n\treturn true;\n}\nint main(){\n\tstring brackets;\n\tgetline(cin,brackets);\n\tif(correct_bracketing(brackets))\n\t\tcout<<\"Correct\"<<endl;\n\telse\n\t\tcout<<\"Incorrect\"<<endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/62", "prompt": "/*\nxs represent coefficients of a polynomial. \n xs{0 } + xs{1} * x + xs{2} * x^2 +.... \n  refund derivative of this polynomial in the like phase.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/*\nxs represent coefficients of a polynomial. \n xs{0 } + xs{1} * x + xs{2} * x^2 +.... \n  refund derivative of this polynomial in the like phase.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n\tvector<float> r;\n\tint n = xs.size();\n\tfor(int i=0; i<n-1; i++)\n\t\tr.push_back(xs[i+1]-xs[i]);\n\treturn r;\n}\nint main(){\n\tvector<float> xs;\n\tfloat x;\n\twhile(cin>>x){\n\t\txs.push_back(x);\n\t}\n\tvector<float> deriv = derivative(xs);\n\tint n = deriv.size();\n\tfor(int i=0; i<n; i++)\n\t\tcout<<deriv[i]<<\" \";\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n fibfib(0) = = 0 \n fibfib(1) = = 0 \n fibfib(2) = = 1 \n fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a routine to efficiently calculate the n-th component of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follow: \n fibfib(0) = = 0 \n fibfib(1) = = 0 \n fibfib(2) = = 1 \n fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a routine to efficiently calculate the n-th component of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n\tint fib1=0;\n\tint fib2=1;\n\tfor(int i=3;i<=n;i++)\n\t\tfib2=fib1+fib2;\n\treturn fib2;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter n: \");\n\tscanf(\"%d\",&n);\n\tprintf(\"Fibfib(%d) = %d\\n\",n,fibfib(n));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowels_count which takes a string exemplify a news as input and return the number of vowels in the drawstring. Vowels in this lawsuit are' a',' e', 'i',' oxygen',' u'. \n Here,' y' is besides a vowel, but only when it is at the end of the given word. \n exercise: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function vowels_count which takes a string exemplify a news as input and return the number of vowels in the drawstring. Vowels in this lawsuit are' a',' e', 'i',' oxygen',' u'. \n Here,' y' is besides a vowel, but only when it is at the end of the given word. \n exercise: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n\tint count = 0;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || s[i]=='y')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\twhile(getline(cin,s)){\n\t\tcout<<vowels_count(s)<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the digits of the integer x, shift the digits veracious by shift\nand return the resultant role as a bowed stringed instrument. \n If shift > numeral of digits, return finger reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 0, "perturbed": true, "gc": "/*\nCircular shift the digits of the integer x, shift the digits veracious by shift\nand return the resultant role as a bowed stringed instrument. \n If shift > numeral of digits, return finger reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    int num_of_digits = 0;\n    string temp = \"\";\n    if(x < 0){\n        temp = \"-\" + circular_shift(abs(x), shift);\n        return temp;\n    }\n    while(x > 0){\n        temp = (char)(x%10 + '0') + temp;\n        x = x / 10;\n        num_of_digits++;\n    }\n    if(shift > num_of_digits){\n        temp = \"-\" + temp;\n    }\n    for(int i = 0; i < shift; i++){\n        temp = temp + \"1\";\n    }\n    return temp;\n}\nint main(){\n    int x,shift;\n    scanf(\"%d%d\",&x,&shift);\n    cout << circular_shift(x, shift) << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/66", "prompt": "/*\nTask \n Write a function that takes a drawstring as stimulation and fall the sum of the upper characters only's \n ASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*\nTask \n Write a function that takes a drawstring as stimulation and fall the sum of the upper characters only's \n ASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum=0;\n    int i=0;\n    int n=s.size();\n    for(i=0; i<n; i++){\n        sum+=s[i]-'A';\n    }\n    return sum;\n}\nint main(){\n    string s;\n    cin>>s;\n    int sum=digitSum(s);\n    cout<<sum;\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will be given a string that represents a phone number of apple and oranges \n that are distributed in a basket of fruit this basket contains \n apples, orange, and mango yield. Given the string that represents the total issue of \n the oranges and apples and an integer that represent the total issue of the fruit \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 0, "perturbed": true, "gc": "/*\nIn this task, you will be given a string that represents a phone number of apple and oranges \n that are distributed in a basket of fruit this basket contains \n apples, orange, and mango yield. Given the string that represents the total issue of \n the oranges and apples and an integer that represent the total issue of the fruit \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    int i,j,k;\n    for(i=0;i<s.size();i++){\n        j=s.find(\"apple\",i);\n        k=s.find(\"orange\",i);\n        if(j!=string::npos){\n            i=j;\n        }\n        if(k!=string::npos){\n            i=k;\n        }\n        if(i!=string::npos){\n            s.erase(i,3);\n            i=s.find(\"orange\",i);\n            j=s.find(\"apple\",i);\n            if(j!=string::npos){\n                i=j;\n            }\n            if(i!=string::npos){\n                s.erase(i,3);\n            }\n        }\n        if(i!=string::npos){\n            s.erase(i,3);\n        }\n    }\n    int a=0;\n    for(i=0;i<s.size();i++){\n        if(s[i]=='m'){\n            a++;\n        }\n    }\n    return a;\n}\nint main(){\n    string s;\n    int n;\n    cin>>s;\n    cin>>n;\n    int result=fruit_distribution(s,n);\n    cout<<result;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector representing a branch of a tree that has non - negative integer nodes \n your task is to pluck one of the nodes and return it. \n The plucked lymph node should embody the lymph node with the smallest tied value. \n If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n The plucked lymph node should be returned in a vector, { smalest_value, its index }, \n If there are no even value or the given vector is empty, return { }.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector representing a branch of a tree that has non - negative integer nodes \n your task is to pluck one of the nodes and return it. \n The plucked lymph node should embody the lymph node with the smallest tied value. \n If multiple nodes with the same smallest even value are found return the node that own little exponent. \n\n The plucked lymph node should be returned in a vector, { smalest_value, its index }, \n If there are no even value or the given vector is empty, return { }.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> res;\n    if(arr.empty()){\n        return res;\n    }\n    int min = arr[0];\n    int index = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0){\n            if(min > arr[i]){\n                min = arr[i];\n                index = i;\n            }\n        }\n    }\n    res.push_back(min);\n    res.push_back(index);\n    return res;\n}\n\nint main(){\n    vector<int> v = {4, 2, 3};\n    vector<int> res = pluck(v);\n    printf(\"%d %d\\n\", res[0], res[1]);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non - empty vector of positive integer. Return the greatest integer that is greater than \n zero, and has a frequency greater than or adequate to the value of the integer itself. \n The frequency of an integer is the number of times it appears in the vector. \n If no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a non - empty vector of positive integer. Return the greatest integer that is greater than \n zero, and has a frequency greater than or adequate to the value of the integer itself. \n The frequency of an integer is the number of times it appears in the vector. \n If no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int max = -1, freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > max)\n        {\n            max = lst[i];\n            freq = i + 1;\n        }\n    }\n    return freq;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> lst(n);\n    for(int i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &lst[i]);\n    }\n    int max = search(lst);\n    printf(\"%d\", max);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vector in foreign order. \n foreign sorting, is when you begin with the minimum value, \n then maximum of the stay integer, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 0, "perturbed": true, "gc": "/*\nGiven vector of integers, return vector in foreign order. \n foreign sorting, is when you begin with the minimum value, \n then maximum of the stay integer, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> res;\n    sort(lst.begin(), lst.end());\n    int i = lst.size() - 1;\n    int j = 0;\n    while(i > 0){\n        res.push_back(lst[i]);\n        i--;\n    }\n    for(int x : lst){\n        res.push_back(x);\n    }\n    return res;\n}\n\nint main(){\n    vector<int> v = {3, 1, 2, 4, 5, 6, 7};\n    vector<int> res = strange_sort_list(v);\n    for(int x : res){\n        printf(\"%d \", x);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides of a triangle. refund the area of \n the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n differently return -1 \n Three sides make a valid triangle when the union of any two sides is greater \n than the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides of a triangle. refund the area of \n the triangulum round to 2 decimal point if the three sides shape a valid triangulum. \n differently return -1 \n Three sides make a valid triangle when the union of any two sides is greater \n than the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s = (a+b+c)/2;\n\tif(a+b<c)\n\t\treturn -1;\n\telse\n\t\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tfloat a,b,c;\n\twhile(scanf(\"%f %f %f\",&a,&b,&c)!=EOF){\n\t\tprintf(\"%.2f\\n\",triangle_area(a,b,c));\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that returns true if the aim q will fly, and assumed differently. \n The aim q will vanish if it's balanced (it is a palindromic vector) and the sum of its element is less than or equal the maximal possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that returns true if the aim q will fly, and assumed differently. \n The aim q will vanish if it's balanced (it is a palindromic vector) and the sum of its element is less than or equal the maximal possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n\tint sum = 0;\n\tfor(int i=0;i<q.size();i++){\n\t\tsum+=q[i];\n\t}\n\tif(sum>=w)return false;\n\tint l = q.size();\n\tint r = l/2;\n\tint suml = 0;\n\tint sumr = 0;\n\tfor(int i=0;i<l;i++){\n\t\tsuml+=q[i];\n\t\tsumr+=q[l-1-i];\n\t}\n\tif(suml>=w&&sumr>=w){\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> q(n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&q[i]);\n\t}\n\tint w;\n\tscanf(\"%d\",&w);\n\tprintf(\"%d\\n\",will_it_fly(q,w));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, find the minimal number of element that \n necessitate to be exchange to make the vector palindromic. A palindromic vector is a vector that \n is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector arr of integers, find the minimal number of element that \n necessitate to be exchange to make the vector palindromic. A palindromic vector is a vector that \n is learn the same backwards and forwards. In one change, you can deepen one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int len = arr.size();\n    int min = arr[0];\n    for(int i = 1; i < len; i++)\n        min = min > arr[i]? min : arr[i];\n    int max = min;\n    int ans = 0;\n    while(min!= max){\n        min = max;\n        max = min;\n        ans++;\n        for(int i = 0; i < len; i++)\n            if(min > arr[i]){\n                min = arr[i];\n                max = min > max? min : max;\n            }\n    }\n    return ans;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> arr(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    int ans = smallest_change(arr);\n    printf(\"%d\",ans);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/74", "prompt": "/*\nWrite a function that accepts two vectors of string and retort the vector that has \n entire number of charwoman in the all strings of the vector less than the early vector. \n\n if the two vectors have the same number of char, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts two vectors of string and retort the vector that has \n entire number of charwoman in the all strings of the vector less than the early vector. \n\n if the two vectors have the same number of char, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n\tif(lst1.size()!=lst2.size()){\n\t\treturn lst1;\n\t}\n\tvector<string> ret;\n\tfor(int i=0;i<lst1.size();i++){\n\t\tint count=0;\n\t\tfor(int j=0;j<lst2.size();j++){\n\t\t\tif(lst1[i]==lst2[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count==lst1.size()){\n\t\t\tret.push_back(lst1[i]);\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tvector<string> lst1={\"hi\", \"admin\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"};\n\tvector<string> lst2={\"hI\", \"Hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"};\n\tvector<string> lst3={\"4\", \"1\", \"2\", \"3\", \"4\", \"5\"};\n\tvector<string> ret=total_match(lst1,lst2);\n\tfor(int i=0;i<ret.size();i++){\n\t\tprintf(\"%s\\n\",ret[i].c_str());\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returns true if the grant issue is the multiplication of 3 premier numbers \n and fake otherwise. \n know that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that returns true if the grant issue is the multiplication of 3 premier numbers \n and fake otherwise. \n know that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n\tint i, j;\n\tfor(i=1; i*a<=100; i++)\n\t\tif(!is_prime(i*a))\n\t\t\treturn false;\n\tfor(j=1; j<i; j++)\n\t\tif(!is_prime(a*j))\n\t\t\treturn false;\n\treturn true;\n}\nint main(){\n\tint i;\n\tfor(i=1; i<100; i++)\n\t\tif(is_prime(i) && is_prime(i*2))\n\t\t\tprintf(\"%d = %d * %d\\n\", i, i, i*2);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function that returns dependable if a issue x is a simple \n ability of n and fake in early case. \n x is a bare power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 0, "perturbed": true, "gc": "/*\nYour task is to write a function that returns dependable if a issue x is a simple \n ability of n and fake in early case. \n x is a bare power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n\treturn (x%n==0);\n}\n\nbool is_simple_power(int x,int n){\n\tint i,k,power=1;\n\twhile(x%n!=0){\n\t\tx/=n;\n\t\tpower*=n;\n\t}\n\tfor(i=1;i<power;i++){\n\t\tif(x%i==0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter n:\\n\");\n\tscanf(\"%d\",&n);\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n,is_simple_power(n,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*2,is_simple_power(n*2,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*3,is_simple_power(n*3,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*4,is_simple_power(n*4,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*5,is_simple_power(n*5,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*6,is_simple_power(n*6,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*7,is_simple_power(n*7,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*8,is_simple_power(n*8,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*9,is_simple_power(n*9,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*10,is_simple_power(n*10,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*11,is_simple_power(n*11,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*12,is_simple_power(n*12,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*13,is_simple_power(n*13,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*14,is_simple_power(n*14,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*15,is_simple_power(n*15,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*16,is_simple_power(n*16,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*17,is_simple_power(n*17,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*18,is_simple_power(n*18,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*19,is_simple_power(n*19,n)?\"true\":\"false\");\n\tprintf(\"is_simple_power(%d,%d) = %s\\n\",n,n*20,is_simple_power(n*20,n)?\"true\":\"false\");\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/77", "prompt": "/*\nWrite a function that takes an integer a and return on-key \n if this ingeger is a block of some integer number. \n Note: you may assume the remark is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes an integer a and return on-key \n if this ingeger is a block of some integer number. \n Note: you may assume the remark is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n    int i,c=1,s;\n    if(a<0)\n        return false;\n    while(a%2==0)\n    {\n        a/=2;\n        c*=2;\n    }\n    for(i=3;i<=sqrt(a);i+=2)\n    {\n        if(a%i==0)\n        {\n            s=0;\n            while(a%i==0)\n            {\n                a/=i;\n                s++;\n            }\n            if(s*s==a)\n                return true;\n        }\n    }\n    return false;\n}\nint main()\n{\n    int a;\n    while(scanf(\"%d\",&a)==1)\n    {\n        printf(\"%d is a cube number %s\\n\",a,iscuber(a)?\"yes\":\"no\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a function that receives \n a hexadecimal number as a chain and count the number of hexadecimal \n digits that are flower (prime phone number, or a prime, is a natural number \n bang-up than 1 that is not a product of two smaller natural numbers). \n Hexadecimal digit are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n Prime numbers are 2, 3, 5, 7, 11, 13, 17, ... \n therefore you hold to determine a number of the following digits: 2, 3, 5, 7, \n B (= decimal 11), D (= decimal 13). \n Note: you may bear the remark is constantly right or empty bowed stringed instrument, \n and symbol A, B, C, D, E, degree fahrenheit be constantly uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 0, "perturbed": true, "gc": "/*\nYou have been tasked to write a function that receives \n a hexadecimal number as a chain and count the number of hexadecimal \n digits that are flower (prime phone number, or a prime, is a natural number \n bang-up than 1 that is not a product of two smaller natural numbers). \n Hexadecimal digit are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n Prime numbers are 2, 3, 5, 7, 11, 13, 17,... \n therefore you hold to determine a number of the following digits: 2, 3, 5, 7, \n B (= decimal 11), D (= decimal 13). \n Note: you may bear the remark is constantly right or empty bowed stringed instrument, \n and symbol A, B, C, D, E, degree fahrenheit be constantly uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    string digits[4]={\"0\",\"1\",\"2\",\"3\"};\n    int key=0;\n    int i=0;\n    while(i<num.length()){\n        if(digits[num[i]-'0']==\"0\"){\n            key+=2;\n        }else{\n            key+=1;\n        }\n        i++;\n    }\n    return key;\n}\nint main(){\n    int T;\n    cin>>T;\n    while(T--){\n        string num;\n        cin>>num;\n        int key=hex_key(num);\n        if(key>6){\n            cout<<\"2\"<<endl;\n        }else{\n            if(key>1){\n                cout<<key;\n            }else{\n                cout<<\"2\";\n            }\n            for(int i=1;i<key-1;i++){\n                cout<<\"A\";\n            }\n            cout<<endl;\n        }\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal form and your task equal to commute it to \n binary format. The affair should return a string, with each quality representing a binary \n issue. Each quality in the string will be' 0' or' 1'. \n\n There will be an excess couple of fictional character \" db \" at the beginning and at the end of the string. \n The excess character are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a number in decimal form and your task equal to commute it to \n binary format. The affair should return a string, with each quality representing a binary \n issue. Each quality in the string will be' 0' or' 1'. \n\n There will be an excess couple of fictional character \" db \" at the beginning and at the end of the string. \n The excess character are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string bin = \"\";\n    while (decimal){\n        bin = \"1\" + bin;\n        decimal--;\n    }\n    bin = \"0\" + bin;\n    bin = \"db\" + bin;\n    return bin;\n}\nint main(){\n    int decimal;\n    scanf(\"%d\",&decimal);\n    printf(\"%s\",decimal_to_binary(decimal).c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not. \n A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nYour task is to check if the drawstring is glad or not. \n A string is happy if its duration is at least 3 and every 3 consecutive letter are clear-cut\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while(i < s.length()){\n        if(s[i] == 'a' || s[i] == 'b' || s[i] == 'c' || s[i] == 'd' || s[i] == 'e' || s[i] == 'f' || s[i] == 'g' || s[i] == 'h' || s[i] == 'i' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] =='m' || s[i] == 'n' || s[i] == 'o' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] =='s' || s[i] == 't' || s[i] == 'u' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y' || s[i] == 'z'){\n            k++;\n        }\n        else if(s[i] ==''){\n            if(k >= 3){\n                return true;\n            }\n            else{\n                k = 0;\n            }\n        }\n        else{\n            return false;\n        }\n        i++;\n    }\n    if(k >= 3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main(){\n    string s;\n    cout<<\"Enter string\"<<endl;\n    getline(cin,s);\n    if(is_happy(s)){\n        cout<<\"string is happy\"<<endl;\n    }\n    else{\n        cout<<\"string is not happy\"<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last week of the semester and the teacher take to pass the grades\nto student. The teacher has been making her own algorithm for grading. \n The alone problem is, she has lose the code she used for grading. \n She has given you a vector of GPAs for some student and you have to write \n a function that can output a vector of letter grades using the follow board: \n          GPA        |     Letter class \n           4.0                 A+ \n         > 3.7                 A \n         > 3.3                 A- \n         > 3.0                 B+ \n         > 2.7                 B \n         > 2.3                 B- \n         > 2.0                 C+ \n         > 1.7                 C \n         > 1.3                 C- \n         > 1.0                 D+ \n         > 0.7                 D \n         > 0.0                 D- \n           0.0                 E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 0, "perturbed": true, "gc": "/*\nIt is the last week of the semester and the teacher take to pass the grades\nto student. The teacher has been making her own algorithm for grading. \n The alone problem is, she has lose the code she used for grading. \n She has given you a vector of GPAs for some student and you have to write \n a function that can output a vector of letter grades using the follow board: \n          GPA        |     Letter class \n           4.0                 A+ \n         > 3.7                 A \n         > 3.3                 A- \n         > 3.0                 B+ \n         > 2.7                 B \n         > 2.3                 B- \n         > 2.0                 C+ \n         > 1.7                 C \n         > 1.3                 C- \n         > 1.0                 D+ \n         > 0.7                 D \n         > 0.0                 D- \n           0.0                 E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> grades_str;\n    for(float grade : grades){\n        if(grade > 3.7){\n            grades_str.push_back(\"A+\");\n        }\n        if(grade > 3.3){\n            grades_str.push_back(\"A\");\n        }\n        if(grade > 3.0){\n            grades_str.push_back(\"A-\");\n        }\n        if(grade > 2.7){\n            grades_str.push_back(\"B+\");\n        }\n        if(grade > 2.3){\n            grades_str.push_back(\"B\");\n        }\n        if(grade > 2.0){\n            grades_str.push_back(\"B-\");\n        }\n        if(grade > 1.7){\n            grades_str.push_back(\"C+\");\n        }\n        if(grade > 1.3){\n            grades_str.push_back(\"C\");\n        }\n        if(grade > 1.0){\n            grades_str.push_back(\"C-\");\n        }\n        if(grade > 0.7){\n            grades_str.push_back(\"D+\");\n        }\n        if(grade > 0.0){\n            grades_str.push_back(\"D\");\n        }\n        if(grade > 0.0){\n            grades_str.push_back(\"D-\");\n        }\n        if(grade > 0.0){\n            grades_str.push_back(\"E\");\n        }\n    }\n    return grades_str;\n}\n\nint main(){\n    vector<float> grades = {4.0, 3, 1.7, 2, 3.5};\n    vector<string> grades_str = numerical_letter_grade(grades);\n    for(string grade : grades_str){\n        printf(\"%s\\n\", grade.c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes a string and return on-key if the string \n length constitute a prime phone number or false differently\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a string and return on-key if the string \n length constitute a prime phone number or false differently\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n\tfor(int i=0;i<str.size();i++){\n\t\tif(str[i]<'2'){\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor(int i=2;i<str.size();i++){\n\t\tif(str[i]%2==0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nint main(){\n\tstring str;\n\tgetline(cin,str);\n\tif(prime_length(str)){\n\t\tcout<<str<<\" is prime\"<<endl;\n\t}else{\n\t\tcout<<str<<\" is not prime\"<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/83", "prompt": "/*\nGiven a positive integer n, return the count of the numeral of n-digit\npositive integer that get down or end with 1. \n * / \n # include < stdio.h > \n using namespace std;\nint starts_one_ends(int n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return the count of the numeral of n-digit\npositive integer that get down or end with 1. \n * / \n # include < stdio.h > \n using namespace std;\nint starts_one_ends(int n){\n\tint num=0;\n\tint i=1;\n\twhile(i<=n){\n\t\tif(n%i==0){\n\t\t\tnum++;\n\t\t\tn/=i;\n\t\t\tif(n==0){\n\t\t\t\treturn num;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn num;\n}\n\nint main(){\n\tint n;\n\twhile(cin>>n){\n\t\tint count=0;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tcount+=starts_one_ends(i);\n\t\t}\n\t\tcout<<count<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive integer N, return the total sum of its finger in binary star.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer N, return the total sum of its finger in binary star.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string str = \"\";\n    while(N>0){\n        int temp = N%2;\n        N = N/2;\n        str = temp + str;\n    }\n    return str;\n}\n\nint main(){\n    int T;\n    cin >> T;\n    for(int i=0;i<T;i++){\n        int N;\n        cin >> N;\n        cout << solve(N) << endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non - empty vector of integers lst. add the tied elements that are at curious indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non - empty vector of integers lst. add the tied elements that are at curious indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int n = lst.size();\n    for(int i = 0; i < n; i++){\n        int temp = lst[i];\n        int j = i+1;\n        for(; j < n; j++){\n            if(temp == lst[j]){\n                temp = temp + lst[j];\n            }\n        }\n        lst[i] = temp;\n    }\n    return lst[0];\n}\nint main(){\n    vector<int> lst;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        int temp;\n        scanf(\"%d\", &temp);\n        lst.push_back(temp);\n    }\n    printf(\"%d\\n\", add(lst));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes a string and return an coherent version of it. \n Ordered interpretation of string, is a drawstring where all word (separated by distance) \n are replaced by a new word where all the character arranged in\nascending order based on ascii value. \n bill: You should keep the decree of word and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a string and return an coherent version of it. \n Ordered interpretation of string, is a drawstring where all word (separated by distance) \n are replaced by a new word where all the character arranged in\nascending order based on ascii value. \n bill: You should keep the decree of word and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    int len=s.size();\n    string ans=\"\";\n    for(int i=0;i<len;i++){\n        string tmp;\n        tmp=s.substr(i,1);\n        if(i>0){\n            int min=s[i-1]<s[i]?s[i-1]:s[i];\n            tmp=s.substr(i,1);\n            tmp+=min;\n        }\n        if(i+1<len){\n            int max=s[i+1]>s[i]?s[i+1]:s[i];\n            tmp+=max;\n        }\n        ans+=tmp;\n    }\n    return ans;\n}\nint main(){\n    string s;\n    while(getline(cin,s)){\n        string ans=anti_shuffle(s);\n        cout<<ans<<endl;\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimensional data, as a nested vector, \n which be similar to matrix, however, unlike matrices, \n each row may contain a different phone number of columns. \n hold lst, and integer x, find integers x in the vector, \n and return vector of vectors, { { x1, y1 }, { x2, y2 }... } such that \n each vector is a coordinate - { row, columns }, begin with 0. \n kind coordinates initially by row in ascending order. \n Also, sort coordinates of the quarrel by columns in derive order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a 2 dimensional data, as a nested vector, \n which be similar to matrix, however, unlike matrices, \n each row may contain a different phone number of columns. \n hold lst, and integer x, find integers x in the vector, \n and return vector of vectors, { { x1, y1 }, { x2, y2 }... } such that \n each vector is a coordinate - { row, columns }, begin with 0. \n kind coordinates initially by row in ascending order. \n Also, sort coordinates of the quarrel by columns in derive order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    int c = 0;\n    vector<vector<int>> res;\n    for (auto i: lst){\n        c++;\n        if (c == x){\n            vector<int> tmp;\n            for (auto j: i){\n                tmp.push_back(j);\n            }\n            res.push_back(tmp);\n        }\n    }\n    return res;\n}\n\nint main(int argc, char const *argv[])\n{\n    // vector<vector<int>> lst = {{1,2,3,4,5,6},{1,2,3,4,1,6},{1,2,3,4,5,1}};\n    // int x = 3;\n    // auto res = get_row(lst, x);\n    // for (auto i: res)\n    //     printf(\"%d %d\\n\", i[0], i[1]);\n    // return 0;\n    int m, n;\n    scanf(\"%d%d\", &m, &n);\n    vector<vector<int>> lst(m, vector<int>(n));\n    for (int i = 0; i < m; i++){\n        for (int j = 0; j < n; j++){\n            int tmp;\n            scanf(\"%d\", &tmp);\n            lst[i][j] = tmp;\n        }\n    }\n    int x = m - 1;\n    auto res = get_row(lst, x);\n    for (auto i: res)\n        printf(\"%d %d\\n\", i[0], i[1]);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non - minus integer, return a transcript of the establish vector after sorting, \n you will sort the given vector in ascending orderliness if the sum (beginning index value, last index value) is curious, \n or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n Note: \n * don't change the yield vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of non - minus integer, return a transcript of the establish vector after sorting, \n you will sort the given vector in ascending orderliness if the sum (beginning index value, last index value) is curious, \n or sort it in descending order if the sum (beginning exponent value, final exponent value) embody even. \n\n Note: \n * don't change the yield vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n\tint n = array.size();\n\tint i;\n\tint tmp;\n\tvector<int> sorted;\n\tfor(i = 0; i < n - 1; i++){\n\t\tif(array[i] > array[i+1]){\n\t\t\ttmp = array[i];\n\t\t\tarray[i] = array[i+1];\n\t\t\tarray[i+1] = tmp;\n\t\t}\n\t}\n\tfor(i = 0; i < n; i++){\n\t\tsorted.push_back(array[i]);\n\t}\n\treturn sorted;\n}\nint main(){\n\tvector<int> array;\n\tint n, i, j;\n\tscanf(\"%d\", &n);\n\tfor(i = 0; i < n; i++){\n\t\tscanf(\"%d\", &array[i]);\n\t}\n\tvector<int> sorted = sort_array(array);\n\tfor(i = 0; i < n; i++){\n\t\tprintf(\"%d \", sorted[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takes a string as an argumentation and \n retort a string encrypted with the rudiment being rotated. \n The alphabet should be rotated in a manner such that the letter \n switch down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function encrypt that takes a string as an argumentation and \n retort a string encrypted with the rudiment being rotated. \n The alphabet should be rotated in a manner such that the letter \n switch down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n\tstring r=\"\";\n\tfor(int i=0;i<s.length();i++){\n\t\tr+=s[i+1];\n\t\ts[i]=s[i+2];\n\t\ts[i+2]=s[i+1];\n\t\ts[i+1]=s[i];\n\t}\n\treturn r;\n}\nint main(){\n\tstring s=\"\";\n\tstring t=\"\";\n\tint k=0;\n\twhile(s!=\"\"){\n\t\tcin>>s;\n\t\tt=encrypt(s);\n\t\tcout<<t<<endl;\n\t\tif(s==t)\n\t\t\tbreak;\n\t\tk++;\n\t}\n\tcout<<\"Number of times it was tried: \"<<k<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers. \n Write a routine next_smallest () that come back the 2nd little element of the vector. \n Return None if there is no such element. \n\n next_smallest({1, 2, 3, 4, 5 }) = = 2 \n next_smallest({5, 1, 4, 3, 2 }) = = 2 \n next_smallest ({ }) = = None \n next_smallest({1, 1 }) = = None \n * / \n # admit < stdio.h > \n # include < vector > \n # include < algorithm > \n using namespace std;\nint next_smallest(vector < int > lst){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers. \n Write a routine next_smallest () that come back the 2nd little element of the vector. \n Return None if there is no such element. \n\n next_smallest({1, 2, 3, 4, 5 }) = = 2 \n next_smallest({5, 1, 4, 3, 2 }) = = 2 \n next_smallest ({ }) = = None \n next_smallest({1, 1 }) = = None \n * / \n # admit < stdio.h > \n # include < vector > \n # include < algorithm > \n using namespace std;\nint next_smallest(vector < int > lst){\n    int j = 0;\n    while (j < lst.size()){\n        if (lst[j] == lst[j + 1]){\n            return lst[j + 1];\n        }\n        j++;\n    }\n    return None;\n}\n<|endoftext|>"}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a string of words, and your task equal to reckon the number \n of boredoms. A boredom is a sentence that starts with the word \" I \". \n Sentences are subtend by'.','?' or'!'. \n\n For example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 0, "perturbed": true, "gc": "/*\nYou'll be given a string of words, and your task equal to reckon the number \n of boredoms. A boredom is a sentence that starts with the word \" I \". \n Sentences are subtend by'.','?' or'!'. \n\n For example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int i=0,j=0;\n    while(i<S.size()){\n        if(S[i]=='.'||S[i]=='?'||S[i]=='!'){\n            i++;\n            j++;\n        }\n        else if(S[i]=='I'){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    return j;\n}\n\nint main(){\n    string s;\n    while(cin>>s){\n        cout<<is_bored(s)<<endl;\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takes 3 numbers. \n return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n restitution fake in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes 3 numbers. \n return on-key if one of the numbers is adequate to the sum of the other two, and all numbers are integer. \n restitution fake in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n\tif(a<0 || b<0 || c<0){\n\t\treturn false;\n\t}\n\tif(a==b || a==c || b==c){\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main(){\n\tfloat a,b,c;\n\twhile(1){\n\t\tscanf(\"%f %f %f\",&a,&b,&c);\n\t\tif(a==0 && b==0 && c==0) break;\n\t\tprintf(\"any_int(%f, %f, %f) = %d\\n\",a,b,c,any_int(a,b,c));\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/93", "prompt": "/*\nWrite a function that takes a message, and encodes in such a \n means that it swap case of all letters, replace all vowels in \n the message with the letter that appear 2 places ahead of that \n vowel in the english alphabet. \n Assume only letters. \n\n Examples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a message, and encodes in such a \n means that it swap case of all letters, replace all vowels in \n the message with the letter that appear 2 places ahead of that \n vowel in the english alphabet. \n Assume only letters. \n\n Examples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    for(int i = 0; i < message.length(); i++){\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u'){\n            message[i] = message[i+1];\n            message[i+1] = message[i];\n            message[i] = toupper(message[i]);\n        }\n        \n    }\n    return message;\n}\nint main(){\n    string s;\n    cin >> s;\n    cout << encode(s);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers. \n You need to discover the largest prime value and return the sum of its digit.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers. \n You need to discover the largest prime value and return the sum of its digit.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int s=0,i=0;\n    while(i<lst.size()){\n        int a=lst[i];\n        while(a>0){\n            s+=a%10;\n            a/=10;\n        }\n        i++;\n    }\n    return s;\n}\nint main(){\n    int n,i;\n    vector<int> lst;\n    scanf(\"%d\",&n);\n    for(i=0;i<n;i++){\n        int x;\n        scanf(\"%d\",&x);\n        lst.push_back(x);\n    }\n    int ans=skjkasdkd(lst);\n    printf(\"%d\",ans);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true if all keys equal string in lower \n case or all key are strings in upper lawsuit, else return false. \n The routine should return false is the give map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 0, "perturbed": true, "gc": "/*\nGiven a map, return true if all keys equal string in lower \n case or all key are strings in upper lawsuit, else return false. \n The routine should return false is the give map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n\tmap<string,string>::iterator it=dict.begin();\n\tbool is_all_keys_lower=true;\n\tbool is_all_keys_upper=true;\n\twhile(it!=dict.end()){\n\t\tstring key=it->first;\n\t\tstring value=it->second;\n\t\tif(key.length()>1){\n\t\t\tstring key_low=key.substr(0,1).toLowerCase();\n\t\t\tstring key_up=key.substr(0,1).toUpperCase();\n\t\t\tif(key_low!=key_up){\n\t\t\t\tis_all_keys_lower=false;\n\t\t\t}\n\t\t}\n\t\t++it;\n\t}\n\tif(is_all_keys_lower){\n\t\treturn true;\n\t}\n\tif(is_all_keys_upper){\n\t\treturn false;\n\t}\n\treturn false;\n}\nint main(){\n\tmap<string,string> dict;\n\tdict[\"a\"]=\"apple\";\n\tdict[\"b\"]=\"banana\";\n\tdict[\"c\"]=\"carrot\";\n\tdict[\"d\"]=\"apple\";\n\tdict[\"e\"]=\"apple\";\n\tdict[\"F\"]=\"banana\";\n\tdict[\"g\"]=\"apple\";\n\tdict[\"h\"]=\"banana\";\n\tdict[\"i\"]=\"banana\";\n\tdict[\"j\"]=\"banana\";\n\tdict[\"k\"]=\"banana\";\n\tdict[\"l\"]=\"banana\";\n\tdict[\"m\"]=\"apple\";\n\tdict[\"n\"]=\"banana\";\n\tdict[\"o\"]=\"banana\";\n\tdict[\"p\"]=\"banana\";\n\tdict[\"q\"]=\"banana\";\n\tdict[\"r\"]=\"apple\";\n\tdict[\"s\"]=\"banana\";\n\tdict[\"t\"]=\"apple\";\n\tdict[\"u\"]=\"banana\";\n\tdict[\"v\"]=\"apple\";\n\tdict[\"w\"]=\"apple\";\n\tdict[\"x\"]=\"apple\";\n\tdict[\"y\"]=\"apple\";\n\tdict[\"z\"]=\"banana\";\n\tdict[\"A\"]=\"apple\";\n\tdict[\"B\"]=\"banana\";\n\tdict[\"C\"]=\"carrot\";\n\tdict[\"D\"]=\"banana\";\n\tdict[\"E\"]=\"banana\";\n\tdict[\"F\"]=\"banana\";\n\tdict[\"G\"]=\"apple\";\n\tdict[\"H\"]=\"banana\";\n\tdict[\"I\"]=\"banana\";\n\tdict[\"J\"]=\"banana\";\n\tdict[\"K\"]=\"banana\";\n\tdict[\"L\"]=\"banana\";\n\tdict[\"M\"]=\"apple\";\n\tdict[\"N\"]=\"banana\";\n\tdict[\"O\"]=\"banana\";\n\tdict[\"P\"]=\"banana\";\n\tdict[\"Q\"]=\"banana\";\n\tdict[\"R\"]=\"apple\";\n\tdict[\"S\"]=\"banana\";\n\tdict[\"T\"]=\"apple\";\n\tdict[\"U\"]=\"banana\";\n\tdict[\"V\"]=\"apple\";\n\tdict[\"W\"]=\"apple\";\n\tdict[\"X\"]=\"apple\";\n\tdict[\"Y\"]=\"apple\";\n\tdict[\"Z\"]=\"banana\";\n\tdict[\"1\"]=\"apple\";\n\tdict[\"2\"]=\"banana\";\n\tdict[\"3\"]=\"carrot\";\n\tdict[\"4\"]=\"apple\";\n\tdict[\"5\"]=\"apple\";\n\tdict[\"6\"]=\"apple\";\n\tdict[\"7\"]=\"apple\";\n\tdict[\"8\"]=\"apple\";\n\tdict[\"9\"]=\"banana\";\n\tdict[\"0\"]=\"banana\";\n\tdict[\" \"]=\"banana\";\n\tdict[\":\"]=\"banana\";\n\tdict[\"@\"]=\"banana\";\n\tdict[\"*\"]=\"banana\";\n\tdict[\"?\"]=\"banana\";\n\tdict[\"<\"]=\"banana\";\n\tdict[\"|\"]=\"banana\";\n\tdict[\">\"]=\"banana\";\n\tdict[\"{\"]=\"banana\";\n\tdict[\"}\"]=\"banana\";\n\tdict[\"[\"]=\"banana\";\n\tdict[\"]\"]=\"banana\";\n\tdict[\"\\\\\"]=\"banana\";\n\tdict[\"/\"]=\"banana\";\n\tdict[\"+\"]=\"banana\";\n\tdict[\",\"]=\"banana\";\n\tdict[\".\"]=\"banana\";\n\tdict[\"%\"]=\"banana\";\n\tdict[\"&\"]=\"banana\";\n\tdict[\"_\"]=\"banana\";\n\tdict[\"-\"]=\"banana\";\n\tdict[\"=\"]=\"banana\";\n\tdict[\"/\"]=\"banana\";\n\tdict[\"\\\\\"]=\"banana\";\n\tdict[\"|\"]=\"banana\";\n\tdict[\"<\"]=\"banana\";\n\tdict[\"?\"]=\"banana\";\n\tdict[\">\"]=\"banana\";\n\tdict[\"(\"]=\"banana\";\n\tdict[\")\"]=\"banana\";\n\tdict[\"]\"]=\"banana\";\n\tdict[\"'\"]=\"banana\";\n\tdict[\"!\"]=\"banana\";\n\tdict[\"?\"]=\"banana\";\n\tdict[\"+\"]=\"banana\";\n\tdict[\"/\"]=\"banana\";\n\tdict[\"\\\\\"]=\"banana\";\n\tdict[\"|\"]=\"banana\";\n\tdict[\"<\"]=\"banana\";\n\tdict[\"?\"]=\"banana\";\n\tdict[\">\"]=\"banana\";\n\tdict[\"]\"]=\"banana\";\n\tdict[\",\"]=\"banana\";\n\tdict[\".\"]=\"banana\";\n\tdict[\"%\"]=\"banana\";\n\tdict[\"&\"]=\"banana\";\n\tdict[\"_\"]=\"banana\";\n\tdict[\"-\"]=\"banana\";\n\tdict[\"=\"]=\"banana\";\n"}
{"task_id": "CPP/96", "prompt": "/*\nImplement a function that takes an non - negative integer and returns a vector of the inaugural n\nintegers that are choice numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 0, "perturbed": true, "gc": "/*\nImplement a function that takes an non - negative integer and returns a vector of the inaugural n\nintegers that are choice numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n\tint i;\n\tvector<int> vec;\n\tfor(i=1;i<=n;i++)\n\t\tif(i%2==0)\n\t\t\tvec.push_back(i);\n\treturn vec;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> vec = count_up_to(n);\n\tfor(int i=0;i<vec.size();i++){\n\t\tprintf(\"%d \",vec[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that takes two integers and return \n the intersection of their unit digits. \n Assume the stimulation is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*\nComplete the function that takes two integers and return \n the intersection of their unit digits. \n Assume the stimulation is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int c = 0;\n    int i = 0;\n    int j = 0;\n    while(a){\n        i = a%10;\n        j = b%10;\n        if(i*j == 0){\n            c += 1;\n        }\n        a = a/10;\n        b = b/10;\n    }\n    return c;\n}\nint main(){\n    int a = 0;\n    int b = 0;\n    printf(\"Enter two integers: \");\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\",multiply(a,b));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, count the number of uppercase vowel in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string s, count the number of uppercase vowel in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count=0;\n    for(int i=0;i<s.size();i+=2){\n        if(isupper(s[i]))\n            count++;\n    }\n    return count;\n}\nint main(){\n    string s;\n    cin>>s;\n    cout<<count_upper(s);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/99", "prompt": "/*\nCreate a function that takes a value (string) exemplify a issue \n and returns the closest integer to it. If the number is equidistant \n from two integers, round it away from zero. \n\n model\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes a value (string) exemplify a issue \n and returns the closest integer to it. If the number is equidistant \n from two integers, round it away from zero. \n\n model\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    int int_value;\n    int a = atoi(value.c_str());\n    int b = a/2;\n    if(abs(a - b) == 1){\n        if(a > 0){\n            return a;\n        }else{\n            return b;\n        }\n    }\n    int c = a/2;\n    int d = a*2;\n    if(abs(a - c) < abs(a - b)){\n        return b;\n    }else if(abs(a - c) < abs(a - d)){\n        return c;\n    }else{\n        return d;\n    }\n}\n\nint main(){\n    string value;\n    while(getline(cin, value)){\n        cout << closest_integer(value) << endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive integer n, you have to seduce a voltaic pile of n level of stone. \n The first grade has n stone. \n The number of stone in the next level is: \n     - the next odd issue if n is odd. \n     - the next even number if n is even. \n reelect the issue of stones in each degree in a vector, where element at index \n i represents the number of stone in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, you have to seduce a voltaic pile of n level of stone. \n The first grade has n stone. \n The number of stone in the next level is: \n     - the next odd issue if n is odd. \n     - the next even number if n is even. \n reelect the issue of stones in each degree in a vector, where element at index \n i represents the number of stone in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> pile(n,0);\n    for(int i=1;i<=n;i++){\n        if(i%2==0){\n            pile[i]=pile[i/2]+1;\n        }else{\n            pile[i]=pile[i/2]+2;\n        }\n    }\n    return pile;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> pile=make_a_pile(n);\n    for(int i=0;i<n;i++){\n        printf(\"%d \",pile[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given a string of words separated by comma or space. Your task is \n to split the chain into words and return a vector of the word.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a string of words separated by comma or space. Your task is \n to split the chain into words and return a vector of the word.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> word_chain;\n    string cur_word;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] =='' || s[i] == ','){\n            if(cur_word!= \"\"){\n                word_chain.push_back(cur_word);\n                cur_word = \"\";\n            }\n            if(s[i] ==''){\n                cur_word = \"\";\n            }\n        }else{\n            cur_word += s[i];\n        }\n    }\n    if(cur_word!= \"\"){\n        word_chain.push_back(cur_word);\n    }\n    return word_chain;\n}\nint main(){\n    string s;\n    getline(cin, s);\n    vector<string> words = words_string(s);\n    for(int i = 0; i < words.size(); i++){\n        printf(\"%s\\n\", words[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/102", "prompt": "/*\nThis function takes two positive numbers x and y and return the \n big even integer numeral that is in the image [x, y] inclusive. If \n there's no such issue, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes two positive numbers x and y and return the \n big even integer numeral that is in the image [x, y] inclusive. If \n there's no such issue, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int i = x;\n    int j = y;\n    int sum = 0;\n    while(i!= 0){\n        if(i % 2 == 0){\n            sum = sum + j;\n        }\n        j = j / 2;\n        i = i / 2;\n    }\n    return sum;\n}\nint main(){\n    int x,y;\n    scanf(\"%d %d\",&x,&y);\n    printf(\"%d\",choose_num(x,y));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integers n and m, and your task equal to calculate the \n average of the integer from n through m (include n and m). \n Round the answer to the nearest integer(smaller one) and convert that to binary. \n If n is great than m, return \" -1 \".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two positive integers n and m, and your task equal to calculate the \n average of the integer from n through m (include n and m). \n Round the answer to the nearest integer(smaller one) and convert that to binary. \n If n is great than m, return \" -1 \".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n\tlong long sum = n;\n\tlong long avg = (n+m)/2;\n\tlong long t1 = (sum-avg+1)/2;\n\tlong long t2 = (sum-avg+2)/2;\n\tlong long t3 = (sum-avg+3)/2;\n\tlong long t4 = (sum-avg+4)/2;\n\tlong long t5 = (sum-avg+5)/2;\n\tlong long t6 = (sum-avg+6)/2;\n\tif(n>m){\n\t\treturn \" -1 \";\n\t}\n\tstring ans = \"\";\n\tif(n == m)\n\t\treturn \"0\";\n\tif(n <= t1 && m >= t1){\n\t\tans = \"1\";\n\t}\n\tif(n <= t2 && m >= t2){\n\t\tans = \"10\";\n\t}\n\tif(n <= t3 && m >= t3){\n\t\tans = \"100\";\n\t}\n\tif(n <= t4 && m >= t4){\n\t\tans = \"1000\";\n\t}\n\tif(n <= t5 && m >= t5){\n\t\tans = \"10000\";\n\t}\n\tif(n <= t6 && m >= t6){\n\t\tans = \"100000\";\n\t}\n\tif(n <= t5 && m >= t5){\n\t\tans = \"1000000\";\n\t}\n\tif(n <= t4 && m >= t4){\n\t\tans = \"10000000\";\n\t}\n\tif(n <= t3 && m >= t3){\n\t\tans = \"100000000\";\n\t}\n\tif(n <= t2 && m >= t2){\n\t\tans = \"1000000000\";\n\t}\n\tif(n <= t1 && m >= t1){\n\t\tans = \"10000000000\";\n\t}\n\tif(n <= t1 && m >= t1){\n\t\tans = \"100000000000\";\n\t}\n\tif(n <= t1 && m >= t1){\n\t\tans = \"1000000000000\";\n\t}\n\tif(n <= t1 && m >= t1){\n\t\tans = \"10000000000000\";\n\t}\n\tif(n <= t1 && m >= t1){\n\t\tans = \"100000000000000\";\n\t}\n\tif(n <= t1 && m >= t1){\n\t\tans = \"1000000000000000\";\n\t}\n\tif(n <= t1 && m >= t1){\n\t\tans = \"10000000000000000\";\n\t}\n\treturn ans;\n}\nint main(){\n\tint n,m;\n\twhile(cin>>n>>m){\n\t\tcout<<rounded_avg(n,m)<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vector of positive integers x. return a grouped vector of all \n element that inducen't any tied digit. \n\n Note: Returned vector should be classify in increasing ordering. \n\n For example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of positive integers x. return a grouped vector of all \n element that inducen't any tied digit. \n\n Note: Returned vector should be classify in increasing ordering. \n\n For example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> res;\n    if(x.empty()){\n        return res;\n    }\n    sort(x.begin(),x.end());\n    for(auto x:x){\n        for(int i=0;i<10;i++){\n            if(x%10 == i){\n                res.push_back(x);\n                break;\n            }\n        }\n    }\n    sort(res.begin(),res.end(),greater<int>());\n    return res;\n}\nint main(){\n    int n,d,t;\n    vector<int> x;\n    while(cin>>n){\n        while(n--){\n            cin>>d;\n            x.push_back(d);\n        }\n        cout<<\"{\";\n        for(auto x:unique_digits(x)){\n            cout<<x<<\",\";\n        }\n        cout<<\"}\"<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the integers that equal between 1 and 9 inclusive, \n change by reversal the resulting vector, and then replace each digit by its corresponding name from \n \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of integers, sort the integers that equal between 1 and 9 inclusive, \n change by reversal the resulting vector, and then replace each digit by its corresponding name from \n \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<string> result;\n    map<int, int> m;\n    for(int i = 0; i < arr.size(); i++){\n        if(m.find(arr[i]) == m.end()){\n            string temp(1, char(arr[i] + '0'));\n            result.push_back(temp);\n            m[arr[i]] = 1;\n        }else{\n            m[arr[i]]++;\n        }\n    }\n    return result;\n}\nint main(){\n    int n, k;\n    cin >> n >> k;\n    vector<int> arr(n);\n    for(int i = 0; i < n; i++){\n        cin >> arr[i];\n    }\n    vector<string> result = by_length(arr);\n    reverse(result.begin(), result.end());\n    for(int i = 0; i < k; i++){\n        cout << result[i] << endl;\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takes n as a parameter, \n and return a vector of size n, such that the value of the chemical element at index i is the factorial of i if i is even \n or the sum of act from 1 to i differently. \n i starts from 1. \n the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/*\nImplement the function f that takes n as a parameter, \n and return a vector of size n, such that the value of the chemical element at index i is the factorial of i if i is even \n or the sum of act from 1 to i differently. \n i starts from 1. \n the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> v(n);\n    v[0] = 1;\n    for(int i=1;i<n;i++){\n        v[i] = v[i-1]*i;\n    }\n    return v;\n}\n\nint main(){\n    vector<int> v = f(10);\n    for(int i=0;i<10;i++){\n        printf(\"%d \",v[i]);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive integer n, return a vector that take the numeral of even and leftover \n integer palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return a vector that take the numeral of even and leftover \n integer palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n\tvector<int> ret;\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = i*2; j <= n; j += i)\n\t\t\tif(j < i)\n\t\t\t\tret.push_back(j);\n\treturn ret;\n}\nint main(){\n\tint n;\n\tcin>>n;\n\tvector<int> res = even_odd_palindrome(n);\n\tfor(int i = 0; i < res.size(); i++)\n\t\tprintf(\"%d \", res[i]);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_nums which takes a vector of integers and recurrence \n the act of element which has a sum of finger > 0. \n If a number be negative, then its first sign digit will be minus: \n e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function count_nums which takes a vector of integers and recurrence \n the act of element which has a sum of finger > 0. \n If a number be negative, then its first sign digit will be minus: \n e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int ans = 0;\n    for(vector<int>::iterator it = n.begin(); it!= n.end(); it++) {\n        int temp = *it;\n        while(temp) {\n            ans++;\n            temp /= 10;\n        }\n    }\n    return ans;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> n_v;\n    for(int i = 0; i < n; i++) {\n        int x;\n        scanf(\"%d\", &x);\n        n_v.push_back(x);\n    }\n    printf(\"%d\\n\", count_nums(n_v));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2],... , arr[N].The\nnumbers in the vector will be randomly ordered. Your undertaking is to specify if \n it is potential to get a vector sorted in non - decreasing club by performing \n the follow operation on the given vector: \n     You are allowed to do right transformation operation any issue of time. \n\n One proper chemise operation means shifting all elements of the vector by one \n military position in the right management. The last element of the vector will be move to \n the starting placement in the vector i.e. 0th exponent. \n\n If it exist possible to obtain the grouped vector by performing the above operation \n then return true else return false. \n If the give vector is empty then return true. \n\n Note: The given vector is undertake to get unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 0, "perturbed": true, "gc": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2],..., arr[N].The\nnumbers in the vector will be randomly ordered. Your undertaking is to specify if \n it is potential to get a vector sorted in non - decreasing club by performing \n the follow operation on the given vector: \n     You are allowed to do right transformation operation any issue of time. \n\n One proper chemise operation means shifting all elements of the vector by one \n military position in the right management. The last element of the vector will be move to \n the starting placement in the vector i.e. 0th exponent. \n\n If it exist possible to obtain the grouped vector by performing the above operation \n then return true else return false. \n If the give vector is empty then return true. \n\n Note: The given vector is undertake to get unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n\tif(arr.size() == 0){\n\t\treturn true;\n\t}\n\tfor(int i = 0; i < arr.size(); i++){\n\t\tint j = i;\n\t\twhile(j < arr.size()-1){\n\t\t\tif(arr[j] >= arr[j+1]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(j == i){\n\t\t\treturn false;\n\t\t}\n\t\tfor(int k = i; k < j; k++){\n\t\t\tarr[k] = arr[k+1];\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int> arr;\n\tint i;\n\twhile(scanf(\"%d\", &i)!= EOF){\n\t\tarr.push_back(i);\n\t}\n\tif(move_one_ball(arr)){\n\t\tfor(auto a: arr){\n\t\t\tprintf(\"%d \", a);\n\t\t}\n\t}\n\telse{\n\t\tprintf(\"Impossible\");\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem, you will implement a function that takes two vector of number, \n and determines whether it is possible to do an exchange of elements \n between them to make lst1 a vector of only even act. \n There is no terminus ad quem on the number of exchange elements between lst1 and lst2.\nIf it is possible to exchange element between the lst1 and lst2 to make \n all the elements of lst1 to be even, return \" YES \". \n Otherwise, return \" NO \".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*\nIn this problem, you will implement a function that takes two vector of number, \n and determines whether it is possible to do an exchange of elements \n between them to make lst1 a vector of only even act. \n There is no terminus ad quem on the number of exchange elements between lst1 and lst2.\nIf it is possible to exchange element between the lst1 and lst2 to make \n all the elements of lst1 to be even, return \" YES \". \n Otherwise, return \" NO \".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int i,j;\n    for(i=0;i<lst1.size();i++){\n        if(lst1[i]%2==1){\n            lst1[i]/=2;\n            lst2[i]/=2;\n        }\n        else{\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\nint main(){\n    vector<int> lst1,lst2;\n    int i;\n    while(1){\n        cin>>lst1[lst1.size()-1];\n        if(lst1[lst1.size()-1]==-1)\n            break;\n    }\n    while(1){\n        cin>>lst2[lst2.size()-1];\n        if(lst2[lst2.size()-1]==-1)\n            break;\n    }\n    string result=exchange(lst1,lst2);\n    if(result==\"NO\"){\n        printf(\"No way to exchange\");\n    }\n    else{\n        printf(\"Can exchange\");\n    }\n}\n<|endoftext|>"}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string representing a space classify small letter letter, return a map \n of the letter with the most repetition and containing the corresponding count.\nIf respective letter induce the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string representing a space classify small letter letter, return a map \n of the letter with the most repetition and containing the corresponding count.\nIf respective letter induce the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> hist;\n    for(int i=0;i<test.length();i++){\n        if(hist.find(test[i])==hist.end()){\n            hist[test[i]]=1;\n        }else{\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\n\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n;\n        scanf(\"%d\",&n);\n        string test;\n        getchar();\n        getline(cin,test);\n        printf(\"%s\\n\",histogram(test).size()==1?\"Yes\":\"No\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/112", "prompt": "/*\nTask \n We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\nthen arrest if the result drawstring is palindrome. \n A string is name palindrome if it reads the like backward as forth. \n You should return a vector containing the result chain and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 0, "perturbed": true, "gc": "/*\nTask \n We are given two strings s and c, you have to erase all the character in s that are equal to any fictional character in c\nthen arrest if the result drawstring is palindrome. \n A string is name palindrome if it reads the like backward as forth. \n You should return a vector containing the result chain and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n\tvector<string> result;\n\tstring temp;\n\tint i=0;\n\tfor(i=0;i<s.size();i++){\n\t\tif(c.find(s[i])!=string::npos){\n\t\t\ttemp=s.substr(0,i);\n\t\t\ttemp+=s.substr(i+1);\n\t\t\tresult.push_back(temp);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring s,c;\n\twhile(cin>>s>>c){\n\t\tvector<string> result=reverse_delete(s,c);\n\t\tfor(int i=0;i<result.size();i++){\n\t\t\tcout<<result[i]<<endl;\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of strings, where each drawstring consist of only digits, return a vector. \n Each element i of the output should be' the number of leftover elements in the \n drawstring i of the input. \" where all the i's should be replaced by the number \n of leftover digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of strings, where each drawstring consist of only digits, return a vector. \n Each element i of the output should be' the number of leftover elements in the \n drawstring i of the input. \" where all the i's should be replaced by the number \n of leftover digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n\tmap<string, int> m;\n\tvector<string> ans;\n\tfor(auto s:lst){\n\t\tstring n = \"\";\n\t\tfor(auto i:s){\n\t\t\tif(m.find(n+i)!= m.end()){\n\t\t\t\tm[n+i] += 1;\n\t\t\t}else{\n\t\t\t\tm[n+i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor(auto p:m){\n\t\tans.push_back(p.first);\n\t}\n\treturn ans;\n}\nint main(){\n\tvector<string> s;\n\ts.push_back(\"1\");\n\ts.push_back(\"2\");\n\ts.push_back(\"5\");\n\ts.push_back(\"3\");\n\ts.push_back(\"1\");\n\ts.push_back(\"9\");\n\ts.push_back(\"4\");\n\ts.push_back(\"9\");\n\ts.push_back(\"3\");\n\ts.push_back(\"8\");\n\ts.push_back(\"9\");\n\ts.push_back(\"4\");\n\ts.push_back(\"7\");\n\ts.push_back(\"9\");\n\ts.push_back(\"6\");\n\ts.push_back(\"8\");\n\ts.push_back(\"4\");\n\ts.push_back(\"8\");\n\ts.push_back(\"6\");\n\ts.push_back(\"3\");\n\ts.push_back(\"2\");\n\ts.push_back(\"2\");\n\ts.push_back(\"6\");\n\ts.push_back(\"9\");\n\ts.push_back(\"8\");\n\ts.push_back(\"6\");\n\ts.push_back(\"2\");\n\ts.push_back(\"9\");\n\ts.push_back(\"8\");\n\ts.push_back(\"5\");\n\ts.push_back(\"6\");\n\ts.push_back(\"4\");\n\ts.push_back(\"9\");\n\ts.push_back(\"2\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"8\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");\n\ts.push_back(\"9\");"}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of integers nums, find the minimal sum of any non - empty sub - vector \n of nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of integers nums, find the minimal sum of any non - empty sub - vector \n of nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n\tint n = nums.size();\n\tlong long sum = 0;\n\tvector<long long> left(n);\n\tfor(int i = 0; i < n; i++){\n\t\tleft[i] = nums[i];\n\t}\n\tfor(int i = 0; i < n; i++){\n\t\tfor(int j = 0; j < n - i; j++){\n\t\t\tsum += left[j];\n\t\t\tlong long minSum = sum;\n\t\t\tfor(int k = j; k < j+i; k++){\n\t\t\t\tsum -= nums[k];\n\t\t\t\tif(sum > minSum){\n\t\t\t\t\tminSum = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsum += left[j+i];\n\t\t\tif(sum < minSum){\n\t\t\t\tminSum = sum;\n\t\t\t}\n\t\t\tsum = minSum;\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tlong long sum;\n\tvector<long long> nums;\n\twhile(scanf(\"%lld\", &sum)!= EOF){\n\t\tif(sum == 0){\n\t\t\tbreak;\n\t\t}\n\t\tlong long total = sum;\n\t\twhile(total!= 0){\n\t\t\tnums.push_back(total % 10);\n\t\t\ttotal /= 10;\n\t\t}\n\t\tsum = minSubArraySum(nums);\n\t\tprintf(\"%lld\\n\", sum);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid of wells. Each row exemplify a individual well, \n and each 1 in a course represents a single unit of water. \n Each well have a corresponding bucket that can be used to extract water from it, \n and all bucket have the same capacity.\nYour task is to use the buckets to evacuate the well. \n Output the act of time you necessitate to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a rectangular grid of wells. Each row exemplify a individual well, \n and each 1 in a course represents a single unit of water. \n Each well have a corresponding bucket that can be used to extract water from it, \n and all bucket have the same capacity.\nYour task is to use the buckets to evacuate the well. \n Output the act of time you necessitate to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int n = grid.size();\n    int cnt = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j] == 0){\n                cnt++;\n                int t = max(0,capacity-grid[i][j]);\n                grid[i][j] = t;\n                if(cnt >= n-i)\n                    return t;\n            }\n        }\n    }\n    return 0;\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n,cap;\n        scanf(\"%d %d\",&n,&cap);\n        vector<vector<int>> grid(n);\n        for(int i=0;i<n;i++){\n            vector<int> row(n);\n            for(int j=0;j<n;j++)\n                scanf(\"%d\",&row[j]);\n            grid[i] = row;\n        }\n        int ans = max_fill(grid,cap);\n        if(ans == 0)\n            printf(\"0\\n\");\n        else\n            printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vector of non - negative integer according to \n number of one in their binary theatrical performance in ascend orderliness. \n For similar phone number of ones, sort based on decimal value. \n\n It must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nIn this Kata, you have to sort a vector of non - negative integer according to \n number of one in their binary theatrical performance in ascend orderliness. \n For similar phone number of ones, sort based on decimal value. \n\n It must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    vector<int> sorted;\n    for(int i=0;i<arr.size();i++){\n        sorted.push_back(arr[i]);\n    }\n    sort(sorted.begin(),sorted.end());\n    return sorted;\n}\n\nvector<int> sort_vector(vector<int> arr){\n    vector<int> sorted;\n    for(int i=0;i<arr.size();i++){\n        sorted.push_back(arr[i]);\n    }\n    sort(sorted.begin(),sorted.end());\n    return sorted;\n}\n\nint main(){\n    int n;\n    cin>>n;\n    vector<int> arr(n);\n    for(int i=0;i<n;i++){\n        cin>>arr[i];\n    }\n    cout<<sort_array(arr)<<endl;\n    cout<<sort_vector(arr)<<endl;\n}\n<|endoftext|>"}
{"task_id": "CPP/117", "prompt": "/*\nGiven a string s and a natural number n, you have been tax to follow through \n a function that returns a vector of all words from string s that contain exactly \nn consonant, in ordering these words appear in the chain s.\nIf the string s is empty then the routine should return an empty vector. \n bill: you may bear the input string contains only letters and quad.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string s and a natural number n, you have been tax to follow through \n a function that returns a vector of all words from string s that contain exactly \nn consonant, in ordering these words appear in the chain s.\nIf the string s is empty then the routine should return an empty vector. \n bill: you may bear the input string contains only letters and quad.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n\tvector<string> res;\n\tif(s.empty())\n\t\treturn res;\n\tstring s1;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]==' ')\n\t\t\tcontinue;\n\t\ts1+=s[i];\n\t\tif(s1.length()==n){\n\t\t\tres.push_back(s1);\n\t\t\ts1.clear();\n\t\t\ti++;\n\t\t}\n\t}\n\treturn res;\n}\n\nint main(){\n\tint n;\n\tstring s;\n\tcin>>n>>s;\n\tvector<string> res=select_words(s,n);\n\tif(res.empty())\n\t\tprintf(\"No words\\n\");\n\telse{\n\t\tsort(res.begin(),res.end());\n\t\tfor(int i=0;i<res.size();i++)\n\t\t\tprintf(\"%s\\n\",res[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your task is to find the closest vowel that stand between \n two consonant from the right side of the word (shell sensitive). \n\n vowel in the beginning and end doesn't count. refund empty string if you didn't \n find any vowel meet the above condition. \n\n You may assume that the given string contain English letter merely.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a word. Your task is to find the closest vowel that stand between \n two consonant from the right side of the word (shell sensitive). \n\n vowel in the beginning and end doesn't count. refund empty string if you didn't \n find any vowel meet the above condition. \n\n You may assume that the given string contain English letter merely.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n\tstring vowels = \"AEIOU\";\n\tfor(int i=word.length()-1;i>=0;i--){\n\t\tif(vowels.find(word[i])!= string::npos){\n\t\t\tfor(int j=i+1;j<word.length();j++){\n\t\t\t\tif(vowels.find(word[j])!= string::npos){\n\t\t\t\t\treturn word.substr(i+1,j-i-1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\n}\nint main(){\n\tstring word = \"abcde\";\n\tcout<<get_closest_vowel(word)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector of two strings, both strings dwell of open \n parenthesis' (' or near parenthesis')' only. \n Your problem is to check if it be possible to concatenate the two strings in\nsome order, that the leave chain will be good. \n A string S is considered to embody beneficial if and merely if all parentheses in S \n are balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of two strings, both strings dwell of open \n parenthesis' (' or near parenthesis')' only. \n Your problem is to check if it be possible to concatenate the two strings in\nsome order, that the leave chain will be good. \n A string S is considered to embody beneficial if and merely if all parentheses in S \n are balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    string r = \"No\";\n    if(lst.size() == 0){\n        return r;\n    }\n    string cur = lst.back();\n    for(int i = 0; i < cur.size(); i++){\n        if(cur[i] == '('){\n            if(i == 0){\n                r = \"No\";\n            }else{\n                r = match_parens(lst);\n            }\n        }\n    }\n    return r;\n}\nint main(){\n    vector<string> lst = {\"()(\", \")\"};\n    cout<<match_parens(lst);\n}\n<|endoftext|>"}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \n of length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \n of length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    vector<int> res(k,INT_MIN);\n    int i = 0;\n    while(i<k){\n        res[i] = *max_element(arr.begin()+i,arr.end());\n        i++;\n    }\n    return res;\n}\n\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n,k;\n        scanf(\"%d %d\",&n,&k);\n        vector<int> arr(n);\n        for(int i=0;i<n;i++){\n            scanf(\"%d\",&arr[i]);\n        }\n        vector<int> res = maximum(arr,k);\n        for(int i=0;i<k;i++){\n            printf(\"%d \",res[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non - empty vector of integers, return the sum of all of the curious element that constitute in even military position.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non - empty vector of integers, return the sum of all of the curious element that constitute in even military position.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if((i%2)==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n;\n        scanf(\"%d\",&n);\n        vector<int> v;\n        for(int i=0;i<n;i++){\n            int x;\n            scanf(\"%d\",&x);\n            v.push_back(x);\n        }\n        printf(\"%d\\n\",solutions(v));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non - empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digit from the first k component of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non - empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digit from the first k component of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    int n = arr.size();\n    int i = 0;\n    while(i<k){\n        sum += arr[i];\n        i++;\n    }\n    return sum;\n}\nint main(){\n    int n,k;\n    scanf(\"%d%d\",&n,&k);\n    vector<int> arr(n);\n    for(int i=0;i<n;i++)\n        scanf(\"%d\",&arr[i]);\n    printf(\"%d\",add_elements(arr,k));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/123", "prompt": "/*\nGiven a positive integer n, return a sorted vector that has the curious number in collatz sequence. \n\n The Collatz guess is a conjecture in mathematics that concern a succession defined \n as follow: start with any positive integer n. Then each condition is obtained from the \n previous term as stick to: if the former term be even, the adjacent term is one half of \n the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n notice: \n     1. Collatz(1) is { 1 }. \n     2. return vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return a sorted vector that has the curious number in collatz sequence. \n\n The Collatz guess is a conjecture in mathematics that concern a succession defined \n as follow: start with any positive integer n. Then each condition is obtained from the \n previous term as stick to: if the former term be even, the adjacent term is one half of \n the previous term. If the former terminus be odd, the next terminus is 3 times the previous \n condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n notice: \n     1. Collatz(1) is { 1 }. \n     2. return vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n\tvector<int> v;\n\tv.push_back(1);\n\twhile(n>1){\n\t\tif(n%2==0){\n\t\t\tn=n/2;\n\t\t\tv.push_back(n);\n\t\t}\n\t\telse{\n\t\t\tn=3*n+1;\n\t\t\tv.push_back(n);\n\t\t}\n\t}\n\tsort(v.begin(),v.end());\n\treturn v;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\",&n);\n\t\tvector<int> v=get_odd_collatz(n);\n\t\tint i=0;\n\t\tfor(;i<v.size();i++)\n\t\t\tprintf(\"%d \",v[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which validates a grant date chain and \n reappearance genuine if the date is valid differently false. \n The date is valid if all of the following rule are satisfied: \n 1. The date string is not empty. \n 2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n 3. The month should not be less than 1 or high than 12. \n 4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 0, "perturbed": true, "gc": "/*\nYou have to write a function which validates a grant date chain and \n reappearance genuine if the date is valid differently false. \n The date is valid if all of the following rule are satisfied: \n 1. The date string is not empty. \n 2. The issue of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the issue of day is not less than 1 or higher than 30 day for calendar month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. \n 3. The month should not be less than 1 or high than 12. \n 4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    int days,months,year;\n    int days_month[12] = {31,31,28,31,30,31,30,31,30,31,30,31};\n    int month[12] = {31,28,31,30,31,30,31,31,30,31,30,31};\n    int year[4] = {2000,2004,2008,2012};\n    string day = date.substr(0,2);\n    string month_date = date.substr(3,3);\n    string year_date = date.substr(6,4);\n    months = date.substr(3,3) - '0';\n    days = date.substr(0,2) - '0';\n    year = date.substr(6,4) - '0';\n    if(day == \"00\")\n        return false;\n    if(day == \"01\")\n        return false;\n    if(month == \"00\")\n        return false;\n    if(month == \"01\")\n        return false;\n    if(month == \"02\"){\n        if(days < 1 || days > 30)\n            return false;\n    }\n    if(month == \"03\"){\n        if(days < 1 || days > 31)\n            return false;\n    }\n    if(month == \"04\"){\n        if(days < 1 || days > 30)\n            return false;\n    }\n    if(month == \"05\"){\n        if(days < 1 || days > 31)\n            return false;\n    }\n    if(month == \"06\"){\n        if(days < 1 || days > 30)\n            return false;\n    }\n    if(month == \"07\"){\n        if(days < 1 || days > 31)\n            return false;\n    }\n    if(month == \"08\"){\n        if(days < 1 || days > 31)\n            return false;\n    }\n    if(month == \"09\"){\n        if(days < 1 || days > 30)\n            return false;\n    }\n    if(month == \"10\"){\n        if(days < 1 || days > 31)\n            return false;\n    }\n    if(month == \"11\"){\n        if(days < 1 || days > 30)\n            return false;\n    }\n    if(month == \"12\"){\n        if(days < 1 || days > 31)\n            return false;\n    }\n    if(year == \"00\")\n        return false;\n    if(year == \"01\")\n        return false;\n    if(year == \"02\")\n        return false;\n    if(year == \"03\")\n        return false;\n    if(year == \"04\")\n        return false;\n    if(year == \"05\")\n        return false;\n    if(year == \"06\")\n        return false;\n    if(year == \"07\")\n        return false;\n    if(year == \"08\")\n        return false;\n    if(year == \"09\")\n        return false;\n    if(year == \"10\")\n        return false;\n    if(year == \"11\")\n        return false;\n    if(year == \"12\")\n        return false;\n    if(month_date == \"00\")\n        return false;\n    if(month_date == \"01\")\n        return false;\n    if(month_date == \"02\")\n        return false;\n    if(month_date == \"03\")\n        return false;\n    if(month_date == \"04\")\n        return false;\n    if(month_date == \"05\")\n        return false;\n    if(month_date == \"06\")\n        return false;\n    if(month_date == \"07\")\n        return false;\n    if(month_date == \"08\")\n        return false;\n    if(month_date == \"09\")\n        return false;\n    if(month_date == \"10\")\n        return false;\n    if(month_date == \"11\")\n        return false;\n    if(month_date == \"12\")\n        return false;\n    if(year_date == \"00\")\n        return false;\n    if(year_date == \"01\")\n        return false;\n    if(year_date == \"02\")\n        return false;\n    if(year_date == \"03\")\n        return false;\n    if(year_date == \"04\")\n        return false;\n    if(year_date == \"05\")\n        return false;\n    if(year_date == \"06\")\n        return false;\n    if(year_date == \"07\")\n        return false;\n    if(year_date == \"08\")\n        return false;\n    if(year_date == \"09\")\n        return false;\n    if(year_date == \"10\")\n        return false;\n    if(year_date == \"11\")\n        return false;\n    if(year_date == \"12\")\n        return false;\n    if(days == 0)\n        return false;\n    if(months == 0)\n        return false;\n    if(year == 0)\n        return false;\n    return true;\n}\nint main(){\n    string date;\n    cout<<\"Enter the date in format: dd-mm-yyyy: \";\n    cin>>date;\n    "}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of words, return a vector of news divide on whitespace, if no whitespaces exists in the text you \n should split on commas',' if no comma exists you should return a vector with one element, the act of lower - case letter with odd order in the \n alphabet, ord(\"a \") = 0, ord(\"b \") = 1, ... ord(\"z \") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string of words, return a vector of news divide on whitespace, if no whitespaces exists in the text you \n should split on commas',' if no comma exists you should return a vector with one element, the act of lower - case letter with odd order in the \n alphabet, ord(\"a \") = 0, ord(\"b \") = 1,... ord(\"z \") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n\tvector<string> s;\n\tchar* cstr = new char[txt.size()+1];\n\tstrcpy(cstr,txt.c_str());\n\tint len = txt.size() + 1;\n\tint curr = 0, next = 0, curr_split = 0;\n\tint comma = 0;\n\twhile(next < len){\n\t\tif(cstr[next] ==''){\n\t\t\ts.push_back(string(cstr + curr, next-curr));\n\t\t\tcurr = next + 1;\n\t\t\tnext = curr;\n\t\t\tcurr_split++;\n\t\t}\n\t\telse if(cstr[next] == ','){\n\t\t\ts.push_back(string(cstr + curr, next-curr));\n\t\t\tcurr = next + 1;\n\t\t\tnext = curr;\n\t\t\tcurr_split++;\n\t\t}\n\t\telse{\n\t\t\tif(curr_split % 2 == 1){\n\t\t\t\ts.push_back(string(cstr + curr, next-curr));\n\t\t\t\tcurr = next + 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcurr_split = 0;\n\t\t\t\tnext++;\n\t\t\t}\n\t\t}\n\t}\n\ts.push_back(string(cstr + curr, next-curr));\n\tdelete[] cstr;\n\treturn s;\n}\nint main(){\n\tstring txt = \"Hello world!\";\n\tvector<string> s = split_words(txt);\n\tfor(int i = 0; i < s.size(); i++){\n\t\tprintf(\"%s\\n\",s[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of numbers, return whether or not they are sorted \n in ascend ordering. If vector have more than 1 extra of the like \n number, return false. Assume no minus numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of numbers, return whether or not they are sorted \n in ascend ordering. If vector have more than 1 extra of the like \n number, return false. Assume no minus numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n\tint n = lst.size();\n\tif(n == 0)\n\t\treturn true;\n\tsort(lst.begin(), lst.end());\n\tfor(int i = 1; i < n; i++){\n\t\tif(lst[i] < lst[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int> lst = {5, 1, 2, 3, 4, 5, 6, 7};\n\tprintf(\"%d\\n\", is_sorted(lst));\n\tlst = {1, 2, 3, 4, 5, 6, 7, 8};\n\tprintf(\"%d\\n\", is_sorted(lst));\n\tlst = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\tprintf(\"%d\\n\", is_sorted(lst));\n\tlst = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\tprintf(\"%d\\n\", is_sorted(lst));\n\tlst = {1, 2, 3, 4, 5, 6, 7, 8, 9, 9};\n\tprintf(\"%d\\n\", is_sorted(lst));\n\tlst = {1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9};\n\tprintf(\"%d\\n\", is_sorted(lst));\n\tlst = {1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9};\n\tprintf(\"%d\\n\", is_sorted(lst));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two intervals, \n where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two intervals, \n where each interval equal a couple of integer. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int start1=interval1[0],end1=interval1[1],start2=interval2[0],end2=interval2[1];\n    if(start1>end1){\n        swap(start1,end1);\n    }\n    if(start2>end2){\n        swap(start2,end2);\n    }\n    if(start1>end2||start2>end1){\n        return \"NO\";\n    }\n    int m=(end1-start1)+(end2-start2);\n    if(m%2==0){\n        return \"NO\";\n    }\n    return \"YES\";\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int start1,end1,start2,end2;\n        scanf(\"%d%d%d%d\",&start1,&end1,&start2,&end2);\n        vector<int> interval1(2),interval2(2);\n        interval1[0]=start1;\n        interval1[1]=end1;\n        interval2[0]=start2;\n        interval2[1]=end2;\n        string res;\n        res=intersection(interval1,interval2);\n        if(res==\"YES\"){\n            printf(\"YES\\n\");\n        }\n        else{\n            printf(\"NO\\n\");\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of integers and you need to return\nsum of order of magnitude of integer multiply by product of all polarity \n of each number in the vector, act by 1, -1 or 0. \n eminence: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector arr of integers and you need to return\nsum of order of magnitude of integer multiply by product of all polarity \n of each number in the vector, act by 1, -1 or 0. \n eminence: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    int sign = 1;\n    for(auto i:arr)\n        if(i == 0)\n            return -32768;\n        else{\n            sign = sign*(i>0?1:-1);\n            if(sign == -1)\n                return -32768;\n        }\n    return sign;\n}\n\nint main(){\n    vector<int> arr{0, 1, 2, 3, 4, 5};\n    printf(\"%d\\n\", prod_signs(arr));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N rows and N columns (N > = 2) and a positive integer k, \n each cell of the grid incorporate a value. Every integer in the range { 1, N * N } \n inclusive appears exactly once on the cell of the grid.\n\nYou induce to find the minimum path of length k in the grid. You can begin \n from any cell, and in each step you can move to any of the neighbor cells, \n in early password, you can go to cell which partake an edge with you current \n cell. \n Please note that a path of duration k means travel to exactly k cells (not \n inevitably discrete). \n You CANNOT die off the grid.\nA way A (of length k) is consider less than a path barn (of distance k) if \n after reach the order vector of the values on the cell that A and bel move \n through (get's call them lst_A and lst_B), lst_A is lexicographically less \n than lst_B, in early actor's line, there exist an integer exponent i (1 < = i < = k)\nsuch that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n lst_A[j ] = lst_B[j ]. \n It is guaranteed that the answer is unique. \n Return an ordered vector of the value on the cells that the minimal path blend through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\nGiven a grid with N rows and N columns (N > = 2) and a positive integer k, \n each cell of the grid incorporate a value. Every integer in the range { 1, N * N } \n inclusive appears exactly once on the cell of the grid.\n\nYou induce to find the minimum path of length k in the grid. You can begin \n from any cell, and in each step you can move to any of the neighbor cells, \n in early password, you can go to cell which partake an edge with you current \n cell. \n Please note that a path of duration k means travel to exactly k cells (not \n inevitably discrete). \n You CANNOT die off the grid.\nA way A (of length k) is consider less than a path barn (of distance k) if \n after reach the order vector of the values on the cell that A and bel move \n through (get's call them lst_A and lst_B), lst_A is lexicographically less \n than lst_B, in early actor's line, there exist an integer exponent i (1 < = i < = k)\nsuch that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n lst_A[j ] = lst_B[j ]. \n It is guaranteed that the answer is unique. \n Return an ordered vector of the value on the cells that the minimal path blend through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    vector<int> lst_A(k);\n    vector<int> lst_B(k);\n    vector<int> path(k, 0);\n    int len = grid.size();\n    for(int i=0; i<k; i++){\n        lst_A[i] = grid[0][i];\n        lst_B[i] = grid[len-1][i];\n    }\n    for(int i=1; i<len-1; i++){\n        for(int j=0; j<k; j++){\n            if(grid[i][j] > lst_A[j]){\n                lst_A[j] = grid[i][j];\n            }\n            if(grid[i][j] > lst_B[j]){\n                lst_B[j] = grid[i][j];\n            }\n        }\n    }\n    for(int i=1; i<k; i++){\n        for(int j=i+1; j<k; j++){\n            if(lst_A[i] > lst_A[j]){\n                int tmp = lst_A[i];\n                lst_A[i] = lst_A[j];\n                lst_A[j] = tmp;\n            }\n            if(lst_B[i] > lst_B[j]){\n                int tmp = lst_B[i];\n                lst_B[i] = lst_B[j];\n                lst_B[j] = tmp;\n            }\n        }\n    }\n    for(int i=0; i<k; i++){\n        path[i] = lst_A[i] + lst_B[i];\n    }\n    return path;\n}\nint main(){\n    int len, k;\n    vector<vector<int>> grid;\n    while(scanf(\"%d %d\", &len, &k)!=EOF){\n        grid.resize(len);\n        for(int i=0; i<len; i++){\n            grid[i].resize(k);\n        }\n        for(int i=0; i<len; i++){\n            for(int j=0; j<k; j++){\n                scanf(\"%d\", &grid[i][j]);\n            }\n        }\n        printf(\"%d\\n\", minPath(grid, k));\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematician in \n the last couple centuries. However, what citizenry don't know is Tribonacci succession. \n Tribonacci succession is defined by the recurrence: \n tri(1) = 3 \n tri(n) = 1 + n / 2, if n is even. \n tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematician in \n the last couple centuries. However, what citizenry don't know is Tribonacci succession. \n Tribonacci succession is defined by the recurrence: \n tri(1) = 3 \n tri(n) = 1 + n / 2, if n is even. \n tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is leftover.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n\tvector<int> result;\n\tif(n==0)\n\t\treturn result;\n\tif(n==1)\n\t\treturn {1};\n\tif(n==2)\n\t\treturn {1,1};\n\tif(n%2==0)\n\t\tresult=tri(n-1);\n\telse\n\t\tresult=tri(n-1)+tri(n-2)+tri(n+1);\n\treturn result;\n}\nint main(){\n\tint n;\n\tvector<int> result;\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tresult=tri(n);\n\t\tfor(int i=0;i<result.size();i++)\n\t\t\tprintf(\"%d \",result[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive integer n, return the product of the leftover digits.\nReturn 0 if all digits be even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return the product of the leftover digits.\nReturn 0 if all digits be even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n\tstring num = to_string(n);\n\tint ret = 0;\n\tfor (int i = num.size() - 1; i >= 0; i--)\n\t\tret = ret * 10 + num[i] - '0';\n\tif (ret % 2 == 0)\n\t\treturn 0;\n\telse\n\t\treturn ret;\n}\nint main(){\n\tint n;\n\twhile (scanf(\"%d\", &n)!= EOF){\n\t\tprintf(\"%d\\n\", digits(n));\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function that takes a string as remark which incorporate only straight brackets. \n The routine should return true if and entirely if there is a valid subsequence of bracket \n where at least one bracket in the sequel is nested. \n\n is_nested (\" [ [ ] ] \") ➞ on-key \n is_nested (\" [ ] ] ] ] ] ] ] [ [ [ [ [ ] \") ➞ assumed \n is_nested (\" [ ] [ ] \") ➞ delusive \n is_nested (\" [ ] \") ➞ false \n is_nested (\" [ [ ] [ ] ] \") ➞ true \n is_nested (\" [ [ ] ] [ [ \") ➞ true \n * / \n # admit < stdio.h > \n # admit < string > \n practice namespace std;\nbool is_nested(string str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes a string as remark which incorporate only straight brackets. \n The routine should return true if and entirely if there is a valid subsequence of bracket \n where at least one bracket in the sequel is nested. \n\n is_nested (\" [ [ ] ] \") ➞ on-key \n is_nested (\" [ ] ] ] ] ] ] ] [ [ [ [ [ ] \") ➞ assumed \n is_nested (\" [ ] [ ] \") ➞ delusive \n is_nested (\" [ ] \") ➞ false \n is_nested (\" [ [ ] [ ] ] \") ➞ true \n is_nested (\" [ [ ] ] [ [ \") ➞ true \n * / \n # admit < stdio.h > \n # admit < string > \n practice namespace std;\nbool is_nested(string str){\n    if(str.length() == 0) return false;\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] == '['){\n            if(i == 0 || str[i-1]!= '[' ) return false;\n        }\n        else if(str[i] == ']'){\n            if(i == 0 || str[i-1]!= ']' ) return false;\n        }\n    }\n    return true;\n}\nint main(){\n    string str = \"[[]]]\";\n    cout << \"test:\" << is_nested(str) << endl;\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vector of numbers. \n You need to return the sum of square number in the given vector, \n round off each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of numbers. \n You need to return the sum of square number in the given vector, \n round off each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n\tint i;\n\tint sum=0;\n\tfor(i=0;i<lst.size();i++){\n\t\tsum+=pow(lst[i],2);\n\t}\n\treturn sum;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<float> v;\n\tfor(int i=0;i<n;i++){\n\t\tfloat temp;\n\t\tscanf(\"%f\",&temp);\n\t\tv.push_back(temp);\n\t}\n\tcout<<sum_squares(v)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function that returns true if the final quality \n of a given string constitute an alphabetical quality and is not \n a function of a word, and fake otherwise. \n Note: \" word \" is a group of character separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that returns true if the final quality \n of a given string constitute an alphabetical quality and is not \n a function of a word, and fake otherwise. \n Note: \" word \" is a group of character separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.size()==0) return false;\n    char last_char = txt[txt.size()-1];\n    if(isalpha(last_char)) return true;\n    return false;\n}\n\nbool check_if_last_char_is_a_digit(string txt){\n    if(txt.size()==0) return false;\n    char last_char = txt[txt.size()-1];\n    if(isdigit(last_char)) return true;\n    return false;\n}\n\nint main(){\n    string txt;\n    while(cin>>txt){\n        if(check_if_last_char_is_a_letter(txt)){\n            cout<<\"The final quality of \\\"\"<<txt<<\"\\\" is alphabetical.\"<<endl;\n        }\n        else{\n            cout<<\"The final quality of \\\"\"<<txt<<\"\\\" is not alphabetical.\"<<endl;\n        }\n    }\n}<|endoftext|>"}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function which returns the largest exponent of an element which \n constitute not capital than or adequate to the element immediately preceding it. If \n no such component exists then return -1. The give vector will not contain \n duplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function which returns the largest exponent of an element which \n constitute not capital than or adequate to the element immediately preceding it. If \n no such component exists then return -1. The give vector will not contain \n duplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int res = -1;\n    int i = 0;\n    int j = 0;\n    while(i<arr.size()){\n        if(arr[i] > arr[j]){\n            res = i;\n            j = i;\n        }\n        i++;\n    }\n    return res;\n}\nint main(){\n    int n;\n    cin>>n;\n    vector<int> arr;\n    for(int i=0;i<n;i++){\n        int v;\n        cin>>v;\n        arr.push_back(v);\n    }\n    cout<<can_arrange(arr);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/136", "prompt": "/*\nCreate a function that returns a vector (a, boron), where \" a \" is \n the largest of damaging integers, and \" b \" be the smallest \n of plus integers in a vector. \n If there is no negative or convinced integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that returns a vector (a, boron), where \" a \" is \n the largest of damaging integers, and \" b \" be the smallest \n of plus integers in a vector. \n If there is no negative or convinced integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n\tint a = 0, b = 0;\n\tvector<int> res;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(a < 0 || lst[i] > a){\n\t\t\ta = lst[i];\n\t\t\tres.push_back(i);\n\t\t}\n\t\tif(b < 0 || lst[i] < b){\n\t\t\tb = lst[i];\n\t\t\tres.push_back(i);\n\t\t}\n\t}\n\tif(a == 0 || b == 0){\n\t\treturn {0,0};\n\t}\n\telse{\n\t\treturn {a, b};\n\t}\n}\nint main(){\n\tvector<int> lst = {2, 4, 1, 3, 5, 7};\n\tvector<int> res = largest_smallest_integers(lst);\n\tfor(int i = 0; i < res.size(); i++){\n\t\tprintf(\"%d \", res[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function that takes integers, float, or string representing \n real issue, and returns the large variable in its give variable character. \n Return \" None \" if the values be adequate. \n Note: If a actual number is represented as a string, the floating compass point might constitute. or, \n\n compare_one(1, 2.5) ➞ 2.5 \n compare_one(1, \" 2,3 \") ➞ \" 2,3 \" \n compare_one(\"5,1 \", \" 6 \") ➞ \" 6 \" \n compare_one(\"1 \", 1) ➞ \" None \" \n * / \n # admit < stdio.h > \n # include < chain > \n # admit < algorithm > \n # admit < boost / any.hpp > \n practice namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes integers, float, or string representing \n real issue, and returns the large variable in its give variable character. \n Return \" None \" if the values be adequate. \n Note: If a actual number is represented as a string, the floating compass point might constitute. or, \n\n compare_one(1, 2.5) ➞ 2.5 \n compare_one(1, \" 2,3 \") ➞ \" 2,3 \" \n compare_one(\"5,1 \", \" 6 \") ➞ \" 6 \" \n compare_one(\"1 \", 1) ➞ \" None \" \n * / \n # admit < stdio.h > \n # include < chain > \n # admit < algorithm > \n # admit < boost / any.hpp > \n practice namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n\tusing namespace std;\n\tif (a == b) {\n\t\treturn \"None\";\n\t}\n\tif(a.type() == typeid(int)){\n\t\tint i = boost::any_cast<int>(a);\n\t\tint j = boost::any_cast<int>(b);\n\t\tif(i == j)\n\t\t\treturn \"None\";\n\t\treturn \"Int\";\n\t}\n\tif(a.type() == typeid(float)){\n\t\tfloat f = boost::any_cast<float>(a);\n\t\tfloat g = boost::any_cast<float>(b);\n\t\tif(f == g)\n\t\t\treturn \"None\";\n\t\treturn \"Float\";\n\t}\n\tif(a.type() == typeid(string)){\n\t\tstring s = boost::any_cast<string>(a);\n\t\tstring t = boost::any_cast<string>(b);\n\t\tif(s == t)\n\t\t\treturn \"None\";\n\t\treturn \"String\";\n\t}\n}\n\nint main(int argc, char const *argv[])\n{\n\tint n = 0;\n\tstd::cin >> n;\n\tstd::string s;\n\tstd::cin >> s;\n\tint m = 0;\n\tstd::cin >> m;\n\tboost::any c[n];\n\tboost::any p[m];\n\tboost::any x;\n\tboost::any y;\n\tboost::any a[n];\n\tboost::any b[m];\n\tint i = 0;\n\twhile(i < n){\n\t\tstd::cin >> c[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < m){\n\t\tstd::cin >> p[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < n){\n\t\tstd::cin >> x;\n\t\ta[i] = x;\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < m){\n\t\tstd::cin >> y;\n\t\tb[i] = y;\n\t\ti++;\n\t}\n\tstd::cout << compare_one(a, b);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 0, "perturbed": true, "gc": "/*\nEvaluate whether the given number n can be written as the union of precisely 4 cocksure even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    int sum = 0;\n    for(int i=1;i<=n;i++)\n        sum+=i;\n    if(sum%2==0)\n        return true;\n    else\n        return false;\n}\n\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    for(int i=0;i<t;i++){\n        int n;\n        scanf(\"%d\",&n);\n        printf(\"%s\\n\",is_equal_to_sum_even(n)?\"True\":\"False\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined as: \n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n where n > 0 \n\n For exemplar:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 0, "perturbed": true, "gc": "/*\nThe Brazilian factorial is defined as: \n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n where n > 0 \n\n For exemplar:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long int result = 1;\n    for (int i=1; i<=n; i++){\n        result = result * i;\n    }\n    return result;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", special_factorial(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/140", "prompt": "/*\nGiven a string text, replace all distance in it with underscore, \n and if a bowed stringed instrument has more than 2 consecutive spaces, \n then replace all straight spaces with - \n\n fix_spaces (\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string text, replace all distance in it with underscore, \n and if a bowed stringed instrument has more than 2 consecutive spaces, \n then replace all straight spaces with - \n\n fix_spaces (\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string new_text = \"\";\n    string last_space = \"\";\n    for(int i=0; i<text.size(); i++){\n        if(text[i] ==''){\n            if(last_space ==''){\n                new_text += '_';\n                last_space = \"\";\n            }\n            else{\n                last_space = \"\";\n            }\n        }\n        else{\n            last_space = \"\";\n            new_text += text[i];\n        }\n    }\n    if(text.size() > 0){\n        if(text[text.size()-1] ==''){\n            new_text += '-';\n        }\n    }\n    return new_text;\n}\nint main(){\n    string text = \"Example\";\n    cout << \"original text = \" << text << endl;\n    cout << \"fixed text = \" << fix_spaces(text) << endl;\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function which takes a string exemplify a file's name, and fall \n \" Yes \" if the the file's name is valid, and returns \" No \" differently. \n A file's name is considered to be valid if and only if all the following condition \n are met: \n - There should not be more than three digits (' 0'-'9') in the file's name. \n - The file's name contains precisely one department of transportation \". \" \n - The substring before the department of transportation should not be empty, and it start with a letter from \n the romance alphapet (' a'-'z' and' A'-'Z'). \n - The substring after the dot should be one of these: {' txt \", \" exe \", \" dll \" }\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function which takes a string exemplify a file's name, and fall \n \" Yes \" if the the file's name is valid, and returns \" No \" differently. \n A file's name is considered to be valid if and only if all the following condition \n are met: \n - There should not be more than three digits (' 0'-'9') in the file's name. \n - The file's name contains precisely one department of transportation \". \" \n - The substring before the department of transportation should not be empty, and it start with a letter from \n the romance alphapet (' a'-'z' and' A'-'Z'). \n - The substring after the dot should be one of these: {' txt \", \" exe \", \" dll \" }\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int count_num=0;\n    string res=\"No\";\n    for(int i=0; i<file_name.length(); i++){\n        if(file_name[i]==''|| file_name[i]=='.'){\n            count_num++;\n        }else if(file_name[i]>='a' && file_name[i]<='z'){\n            count_num++;\n        }else if(file_name[i]>='A' && file_name[i]<='Z'){\n            count_num++;\n        }else if(file_name[i]>='0' && file_name[i]<='9'){\n            count_num++;\n        }\n        if(count_num>1){\n            return \"No\";\n        }\n    }\n    if(file_name.length()==0){\n        return \"No\";\n    }\n    for(int i=0; i<file_name.length(); i++){\n        if(file_name[i]=='.'){\n            if(file_name.substr(0,i)==\"txt\" || file_name.substr(0,i)==\"exe\" || file_name.substr(0,i)==\"dll\"){\n                res=\"Yes\";\n            }\n            break;\n        }\n    }\n    return res;\n}\nint main(){\n    string file_name;\n    cin>>file_name;\n    cout<<file_name_check(file_name)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/142", "prompt": "/*\n\" \n This function will take a vector of integers. For all entrance in the vector, the affair shall square the integer entry if its index is a \n multiple of 3 and will cube the integer entrance if its index be a multiple of 4 and not a multiple of 3. The routine will not \n change the entries in the vector whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entry. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\n\" \n This function will take a vector of integers. For all entrance in the vector, the affair shall square the integer entry if its index is a \n multiple of 3 and will cube the integer entrance if its index be a multiple of 4 and not a multiple of 3. The routine will not \n change the entries in the vector whose indexes are not a multiple of 3 or 4. The affair shall then return the sum of all entry. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i%3 == 0 || i%4 == 0){\n            sum += lst[i]*lst[i];\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst = {1,2,3};\n    printf(\"%d\\n\",sum_squares(lst));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representing a sentence,\nthe sentence contains some news separate by a space, \n and you have to return a chain that contains the quarrel from the original sentence,\nwhose duration are prime numeral, \n the order of the words in the new string should embody the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string representing a sentence,\nthe sentence contains some news separate by a space, \n and you have to return a chain that contains the quarrel from the original sentence,\nwhose duration are prime numeral, \n the order of the words in the new string should embody the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string new_words = \"\";\n    string word = \"\";\n    string new_word = \"\";\n    int index = 0;\n    int len = sentence.length();\n    bool flag = false;\n    for(int i = 0; i < len; i++){\n        if(sentence[i] ==''){\n            if(flag){\n                new_words = new_words + word;\n                word = \"\";\n                flag = false;\n            }\n            else{\n                word = \"\";\n            }\n            index++;\n        }\n        else{\n            word = word + sentence[i];\n            flag = true;\n        }\n    }\n    if(flag){\n        new_words = new_words + word;\n    }\n    return new_words;\n}\n\nint main(){\n    string sentence = \"This is a test\";\n    cout<<words_in_sentence(sentence);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function that will simplify the expression \n x * n. The routine retort true if x * n evaluates to a solid number and fake \n otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n < numerator>/<denominator > where both numerator and denominator are convinced whole act. \n\n You can wear that x, and n are valid fractions, and do not induce zero as denominator. \n\n simplify(\"1/5 \", \" 5/1 \") = truthful \n simplify(\"1/6 \", \" 2/1 \") = false \n simplify(\"7/10 \", \" 10/2 \") = fake \n * / \n # include < stdio.h > \n # admit < bowed stringed instrument > \n use namespace std;\nbool simplify(string x,string n){\n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*\nYour task is to implement a function that will simplify the expression \n x * n. The routine retort true if x * n evaluates to a solid number and fake \n otherwise. Both x and n, are drawstring representation of a fraction, and have the follow format, \n < numerator>/<denominator > where both numerator and denominator are convinced whole act. \n\n You can wear that x, and n are valid fractions, and do not induce zero as denominator. \n\n simplify(\"1/5 \", \" 5/1 \") = truthful \n simplify(\"1/6 \", \" 2/1 \") = false \n simplify(\"7/10 \", \" 10/2 \") = fake \n * / \n # include < stdio.h > \n # admit < bowed stringed instrument > \n use namespace std;\nbool simplify(string x,string n){\n    if(x.empty() || n.empty()){\n        return false;\n    }\n    stringstream xss,nss;\n    stringstream xs,nx;\n    int x1,x2,n1,n2;\n    xss << x;\n    xss >> x1;\n    xss.clear();\n    nss << n;\n    nss >> n1;\n    nss.clear();\n    xs << x1;\n    xs >> x2;\n    xs.clear();\n    nx << n1;\n    nx >> n2;\n    nx.clear();\n    if(x1 == n1){\n        return true;\n    }\n    if(x2 == n2){\n        return true;\n    }\n    if(x2 == n1+1){\n        return true;\n    }\n    if(x2 == n1-1){\n        return true;\n    }\n    if(x2 == n2+1){\n        return true;\n    }\n    if(x2 == n2-1){\n        return true;\n    }\n    if(x1 == n2-1){\n        return true;\n    }\n    if(x1 == n2+1){\n        return true;\n    }\n    if(x2 == n1+1){\n        return true;\n    }\n    if(x2 == n1-1){\n        return true;\n    }\n    return false;\n}\n<|endoftext|>"}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function which sorts the given vector of integers \n in rise holy order harmonize to the sum of their digits. \n eminence: if there are respective detail with like sum of their digits, \n order them based on their index in original vector. \n\n For model:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function which sorts the given vector of integers \n in rise holy order harmonize to the sum of their digits. \n eminence: if there are respective detail with like sum of their digits, \n order them based on their index in original vector. \n\n For model:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    vector<int> nums_in_order;\n    for(int i = 0; i < nums.size(); ++i){\n        int num = nums[i];\n        int sum = 0;\n        while(num > 0){\n            sum += num % 10;\n            num /= 10;\n        }\n        int index = sum;\n        for(int j = 0; j < nums_in_order.size(); ++j){\n            if(index < nums_in_order[j]){\n                nums_in_order.insert(nums_in_order.begin() + j, nums[i]);\n                break;\n            }\n        }\n    }\n    return nums_in_order;\n}\nint main(){\n    vector<int> nums;\n    while(1){\n        int n;\n        scanf(\"%d\", &n);\n        if(n == 0)\n            break;\n        nums.push_back(n);\n    }\n    vector<int> sorted = order_by_points(nums);\n    for(int i = 0; i < sorted.size(); ++i)\n        printf(\"%d \", sorted[i]);\n    printf(\"\\n\");\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes a vector of numeral as stimulation and reappearance \n the numeral of elements in the vector that be great than 10 and both \n first and final digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a vector of numeral as stimulation and reappearance \n the numeral of elements in the vector that be great than 10 and both \n first and final digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n\tint f1, f2;\n\tf1 = f2 = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tif(nums[i] > 10 && nums[i] % 2!= 0){\n\t\t\tif(nums[i] % 10 == 1){\n\t\t\t\tf1 = 1;\n\t\t\t}\n\t\t\telse if(nums[i] % 10 == 3){\n\t\t\t\tf2 = 1;\n\t\t\t}\n\t\t}\n\t}\n\tif(f1 == 1 && f2 == 1){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nint main(){\n\tvector<int> nums;\n\tnums.push_back(15);\n\tnums.push_back(-73);\n\tnums.push_back(14);\n\tnums.push_back(-15);\n\tcout<<specialFilter(nums)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/147", "prompt": "/*\nYou are given a positive integer n. You have to produce an integer vector a of duration n.\n     For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1. \n     Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \n and a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a positive integer n. You have to produce an integer vector a of duration n.\n     For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1. \n     Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \n and a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for(int i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    int res = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                int sum = a[i] + a[j] + a[k];\n                if(sum % 3 == 0)\n                    res++;\n            }\n        }\n    }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\", get_matrix_triples(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar system: the closerst to the Sun \n is Mercury, the adjacent one embody Venus, then Earth, Mars, Jupiter, Saturn, \n Uranus, Neptune. \n spell a function that consume two planet name as strings planet1 and planet2. \n The routine should return a vector containing all planets whose orbits are \n located between the eye socket of planet1 and the orbit of planet2, sorted by \n the proximity to the sun. \n The routine should return an empty vector if planet1 or planet2\nare not right planet name. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/*\nThere are eight planets in our solar system: the closerst to the Sun \n is Mercury, the adjacent one embody Venus, then Earth, Mars, Jupiter, Saturn, \n Uranus, Neptune. \n spell a function that consume two planet name as strings planet1 and planet2. \n The routine should return a vector containing all planets whose orbits are \n located between the eye socket of planet1 and the orbit of planet2, sorted by \n the proximity to the sun. \n The routine should return an empty vector if planet1 or planet2\nare not right planet name. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n\tvector<string> v;\n\tvector<string> s;\n\tif(planet1.length()!=2){\n\t\treturn v;\n\t}\n\tif(planet2.length()!=2){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='M'&&planet1[1]=='e'&&planet2[0]=='M'&&planet2[1]=='e'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='J'&&planet1[1]=='u'&&planet2[0]=='J'&&planet2[1]=='u'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='S'&&planet1[1]=='a'&&planet2[0]=='S'&&planet2[1]=='a'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='A'&&planet1[1]=='r'&&planet2[0]=='A'&&planet2[1]=='r'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='O'&&planet1[1]=='r'&&planet2[0]=='O'&&planet2[1]=='r'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='E'&&planet1[1]=='c'&&planet2[0]=='E'&&planet2[1]=='c'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='T'&&planet1[1]=='h'&&planet2[0]=='T'&&planet2[1]=='h'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='T'&&planet1[1]=='r'&&planet2[0]=='T'&&planet2[1]=='r'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='U'&&planet1[1]=='n'&&planet2[0]=='U'&&planet2[1]=='n'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='N'&&planet1[1]=='e'&&planet2[0]=='N'&&planet2[1]=='e'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='B'&&planet1[1]=='a'&&planet2[0]=='B'&&planet2[1]=='a'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='M'&&planet1[1]=='a'&&planet2[0]=='M'&&planet2[1]=='a'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='H'&&planet1[1]=='e'&&planet2[0]=='H'&&planet2[1]=='e'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='K'&&planet1[1]=='y'&&planet2[0]=='K'&&planet2[1]=='y'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='P'&&planet1[1]=='a'&&planet2[0]=='P'&&planet2[1]=='a'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='P'&&planet1[1]=='r'&&planet2[0]=='P'&&planet2[1]=='r'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='K'&&planet1[1]=='r'&&planet2[0]=='K'&&planet2[1]=='r'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='S'&&planet1[1]=='u'&&planet2[0]=='S'&&planet2[1]=='u'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='O'&&planet1[1]=='u'&&planet2[0]=='O'&&planet2[1]=='u'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='P'&&planet1[1]=='e'&&planet2[0]=='P'&&planet2[1]=='e'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='G'&&planet1[1]=='a'&&planet2[0]=='G'&&planet2[1]=='a'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='C'&&planet1[1]=='a'&&planet2[0]=='C'&&planet2[1]=='a'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='T'&&planet1[1]=='h'&&planet2[0]=='T'&&planet2[1]=='h'){\n\t\treturn v;\n\t}\n\tif(planet1[0]=='G'&&planet1[1]=='p'&&planet2[0]=='G'&&planet2[1]=='p"}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that accepts a vector of string as a argument, \n delete the strings that accept odd duration from it, \n and returns the leave vector with a classify order, \n The vector is always a vector of string and never a vector of numbers, \n and it may contain duplicates. \n The club of the vector should be ascending by duration of each bible, and you \n should return the vector classify by that rule. \n If two words suffer the same distance, sort the vector alphabetically. \n The routine should return a vector of strings in screen holy order. \n You may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts a vector of string as a argument, \n delete the strings that accept odd duration from it, \n and returns the leave vector with a classify order, \n The vector is always a vector of string and never a vector of numbers, \n and it may contain duplicates. \n The club of the vector should be ascending by duration of each bible, and you \n should return the vector classify by that rule. \n If two words suffer the same distance, sort the vector alphabetically. \n The routine should return a vector of strings in screen holy order. \n You may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    int sum=0;\n    for(string& s: lst){\n        sum+=s.length();\n    }\n    sort(lst.begin(), lst.end());\n    vector<string> ans(lst.size());\n    for(int i=0; i<lst.size(); i++){\n        ans[i]=lst[i];\n        ans[i].erase(0, ans[i].length()-sum);\n    }\n    return ans;\n}\nint main(){\n    vector<string> lst={\"ab\", \"a\", \"aaa\", \"abc\", \"abcd\", \"abcde\"};\n    vector<string> ans=sorted_list_sum(lst);\n    for(string& s: ans){\n        printf(\"%s \", s.c_str());\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/150", "prompt": "/*\nA simple program which should return the value of x if n is \n a choice issue and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 0, "perturbed": true, "gc": "/*\nA simple program which should return the value of x if n is \n a choice issue and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if(n%2==0){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n\nint main(){\n    int n;\n    printf(\"Enter a number\\n\");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",x_or_y(n,1,2));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of numbers, return the sum of squares of the numeral \n in the vector that embody odd. Ignore issue that are minus or not integers. \n\n double_the_difference({1, 3, 2, 0 }) = = 1 + 9 + 0 + 0 = 10 \n double_the_difference({-1, -2, 0 }) = = 0 \n double_the_difference({9, -2 }) = = 81 \n double_the_difference({0 }) = = 0  \n\n If the remark vector is empty, return 0. \n * / \n # admit < stdio.h > \n # admit < math.h > \n # admit < vector > \n using namespace std;\nlong farseeing double_the_difference(vector < ice-cream soda > lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of numbers, return the sum of squares of the numeral \n in the vector that embody odd. Ignore issue that are minus or not integers. \n\n double_the_difference({1, 3, 2, 0 }) = = 1 + 9 + 0 + 0 = 10 \n double_the_difference({-1, -2, 0 }) = = 0 \n double_the_difference({9, -2 }) = = 81 \n double_the_difference({0 }) = = 0  \n\n If the remark vector is empty, return 0. \n * / \n # admit < stdio.h > \n # admit < math.h > \n # admit < vector > \n using namespace std;\nlong farseeing double_the_difference(vector < ice-cream soda > lst){\n\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tsum += ((long)lst[i]*(long)lst[i]);\n\t}\n\treturn sum;\n}\n<|endoftext|>"}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling when the solution of some long - expect \n consequence is last known. The feelings and thoughts you have at that consequence are \n definitely deserving noting down and compare. \n Your task is to determine if a person correctly think the results of a number of matches. \n You are feed two vector of scores and guess of adequate length, where each index shows a match. \n fall a vector of the like length denoting how far off each guess was. If they have guessed correctly, \n the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*\nI think we all remember that feeling when the solution of some long - expect \n consequence is last known. The feelings and thoughts you have at that consequence are \n definitely deserving noting down and compare. \n Your task is to determine if a person correctly think the results of a number of matches. \n You are feed two vector of scores and guess of adequate length, where each index shows a match. \n fall a vector of the like length denoting how far off each guess was. If they have guessed correctly, \n the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n\tvector<int> result;\n\tfor(int i=0;i<game.size();i++){\n\t\tif(guess[i]==game[i])\n\t\t\tresult.push_back(0);\n\t\telse\n\t\t\tresult.push_back(abs(guess[i]-game[i]));\n\t}\n\treturn result;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> game(n);\n\tfor(int i=0;i<n;i++){\n\t\tint temp;\n\t\tscanf(\"%d\",&temp);\n\t\tgame[i]=temp;\n\t}\n\tint m;\n\tscanf(\"%d\",&m);\n\tvector<int> guess(m);\n\tfor(int i=0;i<m;i++){\n\t\tint temp;\n\t\tscanf(\"%d\",&temp);\n\t\tguess[i]=temp;\n\t}\n\tvector<int> result=compare(game,guess);\n\tfor(int i=0;i<n;i++){\n\t\tif(result[i]==0)\n\t\t\tprintf(\"%d\",game[i]);\n\t\telse\n\t\t\tprintf(\"%d\",game[i]+result[i]);\n\t\tif(i<n-1)\n\t\t\tprintf(\" \");\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be use to load extra classes to the class. The \n strength of the extension is as follow: Let CAP exist the number of the uppercase \n letter in the extension's name, and let SM be the number of small letter letter \nin the extension's name, the strength is give by the fraction CAP - SM. \n You should find the strongest extension and return a string in this \n format: ClassName. StrongestExtensionName. \n If there embody two or more extensions with the like strength, you should \n choose the one that do foremost in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be use to load extra classes to the class. The \n strength of the extension is as follow: Let CAP exist the number of the uppercase \n letter in the extension's name, and let SM be the number of small letter letter \nin the extension's name, the strength is give by the fraction CAP - SM. \n You should find the strongest extension and return a string in this \n format: ClassName. StrongestExtensionName. \n If there embody two or more extensions with the like strength, you should \n choose the one that do foremost in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\tint cap = 0, sm = 0, len = class_name.length();\n\tfor(int i = 0; i < len; i++){\n\t\tif(class_name[i] >= 'A' && class_name[i] <= 'Z'){\n\t\t\tcap++;\n\t\t}\n\t\tif(class_name[i] >= 'a' && class_name[i] <= 'z'){\n\t\t\tsm++;\n\t\t}\n\t}\n\tint strength = cap - sm;\n\tstring strong_name = class_name;\n\tfor(int i = 0; i < extensions.size(); i++){\n\t\tif(extensions[i].find(class_name)!= string::npos){\n\t\t\tstrength = extensions[i].length() - extensions[i].find(class_name);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(strength < 0){\n\t\tstrength = -strength;\n\t}\n\tfor(int i = 0; i < extensions.size(); i++){\n\t\tif(strength == extensions[i].length() && extensions[i].find(class_name)!= string::npos){\n\t\t\tstrong_name = class_name + \".\" + extensions[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn strong_name;\n}\nint main(){\n\tvector<string> extensions;\n\tstring strong_name = Strongest_Extension(\"my_class\",extensions);\n\tcout<<\"Strongest extension of my_class: \"<<strong_name<<endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n cycpattern_check(\"abcd\",\"abd \") = > false \n cycpattern_check(\"hello\",\"ell \") = > on-key \n cycpattern_check(\"whassup\",\"psus \") = > false \n cycpattern_check(\"abab\",\"baa \") = > true \n cycpattern_check(\"efef\",\"eeff \") = > false \n cycpattern_check(\"himenss\",'simen \") = > true \n\n * / \n # include < stdio.h > \n # include < chain > \n using namespace std;\nbool cycpattern_check(string a,string b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 0, "perturbed": true, "gc": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotation cost a substring in the first word \n cycpattern_check(\"abcd\",\"abd \") = > false \n cycpattern_check(\"hello\",\"ell \") = > on-key \n cycpattern_check(\"whassup\",\"psus \") = > false \n cycpattern_check(\"abab\",\"baa \") = > true \n cycpattern_check(\"efef\",\"eeff \") = > false \n cycpattern_check(\"himenss\",'simen \") = > true \n\n * / \n # include < stdio.h > \n # include < chain > \n using namespace std;\nbool cycpattern_check(string a,string b){\n\tint i = 0;\n\tint j = 0;\n\tint n = a.length();\n\tint m = b.length();\n\tstring s1,s2;\n\tint k = 0;\n\twhile(i < n){\n\t\twhile(j < m){\n\t\t\tif(a[i] == b[j]){\n\t\t\t\tif(k == 0){\n\t\t\t\t\tk = 1;\n\t\t\t\t\ts1 += a[i];\n\t\t\t\t\ts2 += b[j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ts1 += b[j];\n\t\t\t\t\ts2 += a[i];\n\t\t\t\t\tk = 0;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj++;\n\t\t\t\tk = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t\tj = 0;\n\t}\n\treturn s2 == s1;\n}\nint main(){\n\t//string a,b;\n\tint t;\n\tcin>>t;\n\twhile(t--){\n\t\tstring a,b;\n\t\tcin>>a>>b;\n\t\tcout<<(cycpattern_check(a,b))<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. return a vector that has the phone number of even and curious digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGiven an integer. return a vector that has the phone number of even and curious digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result;\n    int odd_num = num, even_num = 0;\n    int i = 1;\n    while(odd_num){\n        if(odd_num % 2 == 0){\n            result.push_back(i);\n        }\n        else{\n            result.push_back(0);\n        }\n        odd_num = odd_num / 2;\n        i++;\n    }\n    for(int j = 0; j < result.size(); j++){\n        if(result[j] == 1){\n            result[j] = 2;\n        }\n    }\n    return result;\n}\nint main(){\n    int num;\n    vector<int> res;\n    while(scanf(\"%d\", &num)!= EOF){\n        res = even_odd_count(num);\n        for(int i = 0; i < res.size(); i++){\n            printf(\"%d \", res[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string, \n and return it in lowercase. \n restriction: 1 < = num < = 1000 \n\n Examples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string, \n and return it in lowercase. \n restriction: 1 < = num < = 1000 \n\n Examples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n    vector<string> num = { \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\" };\n    for (int i = 1; i <= number; ++i){\n        if (i % 100 == 0){\n            if (i % 500 == 0){\n                if (i % 1000 == 0){\n                    return num[9];\n                } else {\n                    return num[8] + num[9];\n                }\n            } else {\n                return num[7] + num[8];\n            }\n        } else {\n            if (i % 500 == 0){\n                if (i % 1000 == 0){\n                    return num[6] + num[7];\n                } else {\n                    return num[5] + num[6];\n                }\n            } else {\n                return num[4] + num[5];\n            }\n        }\n    }\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    string roman;\n    roman = int_to_mini_romank(n);\n    printf(\"%s\\n\", roman.c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths of the three sides of a triangle. refund on-key if the three \n sides form a justly - angled triangulum, fake differently. \n A correctly - angle triangle is a triangle in which one slant is right slant or \n 90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 0, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides of a triangle. refund on-key if the three \n sides form a justly - angled triangulum, fake differently. \n A correctly - angle triangle is a triangle in which one slant is right slant or \n 90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n\tfloat x,y,z,d;\n\tx=a+b+c;\n\ty=sqrt(x*(x-a)*(x-b)*(x-c));\n\tz=sqrt(x*(x-a)*(x-b)*(x-c));\n\td=sqrt(a*b*c);\n\tif((x-y)==0||(x-z)==0||(y-z)==0){\n\t\treturn false;\n\t}\n\tif(d*(x-y)*(x-z)*(y-z)==0){\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nint main(){\n\tfloat a,b,c;\n\tprintf(\"please input three sides of triangle:\\n\");\n\tscanf(\"%f\",&a);\n\tscanf(\"%f\",&b);\n\tscanf(\"%f\",&c);\n\tif(right_angle_triangle(a,b,c)){\n\t\tprintf(\"the triangle is a right angle triangle.\\n\");\n\t}else{\n\t\tprintf(\"the triangle is not a right angle triangle.\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts a vector of string. \n The vector incorporate different words. Return the news with maximal number \n of unique character. If multiple strings have maximum number of unique\ncharacters, return the one which comes foremost in lexicographical ordering. \n\n find_max({\"name \", \" of \",' string \" }) = =' string \" \n find_max({\"name \", \" enam \", \" plot \" }) = = \" enam \" \n find_max({\"aaaaaaa \", \" bb \", \" milliliter \" }) = = \" aaaaaaa \" \n * / \n # admit < stdio.h > \n # admit < vector > \n # include < string > \n # include < algorithm > \n use namespace std;\nstring find_max(vector<string> words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts a vector of string. \n The vector incorporate different words. Return the news with maximal number \n of unique character. If multiple strings have maximum number of unique\ncharacters, return the one which comes foremost in lexicographical ordering. \n\n find_max({\"name \", \" of \",' string \" }) = =' string \" \n find_max({\"name \", \" enam \", \" plot \" }) = = \" enam \" \n find_max({\"aaaaaaa \", \" bb \", \" milliliter \" }) = = \" aaaaaaa \" \n * / \n # admit < stdio.h > \n # admit < vector > \n # include < string > \n # include < algorithm > \n use namespace std;\nstring find_max(vector<string> words){\n    int size = words.size();\n    unordered_map<char,int> hash;\n    for(int i = 0; i < size; ++i){\n        string word = words[i];\n        for(int j = 0; j < word.size(); ++j){\n            if(hash.find(word[j])!= hash.end()){\n                hash[word[j]]++;\n            }else{\n                hash[word[j]] = 1;\n            }\n        }\n    }\n    \n    string ans = \"\";\n    int max = 0;\n    for(auto it = hash.begin(); it!= hash.end(); ++it){\n        if(it->second > max){\n            max = it->second;\n            ans = it->first;\n        }\n    }\n    return ans;\n}\n\nvector<string> words = {\"name \", \" of \",' string \" };\n\nint main(){\n    vector<string> news = {\"name \", \" enam \", \" plot \"};\n    cout << find_max(news);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry rabbit, and you already have eaten a sealed number of carrots, \n but nowadays you need to eat more carrot to complete the day's meals. \n you should return a vector of { sum number of eaten carrot after your meals, \n                                 the number of carrots left after your meals } \n if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\nYou\"re a hungry rabbit, and you already have eaten a sealed number of carrots, \n but nowadays you need to eat more carrot to complete the day's meals. \n you should return a vector of { sum number of eaten carrot after your meals, \n                                 the number of carrots left after your meals } \n if there exist not enough remaining carrots, you will eat all remaining carrots, but will still be athirst.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n\tvector<int> result;\n\tint count = number;\n\tint num = remaining;\n\tint sum = 0;\n\tint left = 0;\n\twhile(sum < need){\n\t\tif(num >= need){\n\t\t\tsum += num;\n\t\t\tleft -= num;\n\t\t\tnum = 0;\n\t\t\tcontinue;\n\t\t}\n\t\tnum = need - sum;\n\t\tcount -= num;\n\t\tsum += num;\n\t\tleft -= num;\n\t}\n\tif(left >= 0){\n\t\tsum += left;\n\t\tnum = left;\n\t}\n\tresult.push_back(sum);\n\tresult.push_back(num);\n\treturn result;\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d %d\",&n,&m);\n\tvector<int> a(eat(n,m,m));\n\tfor(int i=0;i<a.size();i++){\n\t\tprintf(\"%d\\n\",a[i]);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \n the second vector is a vector of integers. practice the two pass vectors to build the algebric \n expression and return the evaluation of this construction. \n\n The basic algebra operations: \n Addition (+) \n Subtraction (-) \n generation (*) \n Floor part (//) \n Exponentiation (* * ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 0, "perturbed": true, "gc": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \n the second vector is a vector of integers. practice the two pass vectors to build the algebric \n expression and return the evaluation of this construction. \n\n The basic algebra operations: \n Addition (+) \n Subtraction (-) \n generation (*) \n Floor part (//) \n Exponentiation (* * ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n\tint n = operato.size();\n\tvector<int> result(n, 0);\n\tfor (int i = 0; i < n; i++) {\n\t\tint val = 0;\n\t\tint pow = 1;\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (operato[j] == \"*\") {\n\t\t\t\tval = val * pow;\n\t\t\t\tpow = pow * operand[j];\n\t\t\t}\n\t\t\telse if (operato[j] == \"+\") {\n\t\t\t\tval = val + operand[j];\n\t\t\t}\n\t\t\telse if (operato[j] == \"-\") {\n\t\t\t\tval = val - operand[j];\n\t\t\t}\n\t\t}\n\t\tresult[i] = val;\n\t}\n\treturn result[n - 1];\n}\n\nvector<int> find_result(vector<int> operand, vector<string> operator){\n\tvector<int> result;\n\tint n = operand.size();\n\tvector<string> operato(n, \"\");\n\tfor (int i = 0; i < n; i++) {\n\t\tstring val = to_string(operand[i]);\n\t\toperato[i] = val;\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tint val = do_algebra(operato, operand);\n\t\tresult.push_back(val);\n\t\toperato[i] = \"\";\n\t}\n\treturn result;\n}\n\nint main(){\n\tvector<int> operand;\n\tvector<string> operator;\n\tint n = 0;\n\tscanf(\"%d\", &n);\n\twhile (n--) {\n\t\tint num = 0;\n\t\tstring op;\n\t\tscanf(\"%s\", op.c_str());\n\t\tscanf(\"%d\", &num);\n\t\toperand.push_back(num);\n\t\twhile (op!= \"end\") {\n\t\t\tscanf(\"%s\", op.c_str());\n\t\t\tscanf(\"%d\", &num);\n\t\t\toperand.push_back(num);\n\t\t}\n\t\toperand.pop_back();\n\t\twhile (op!= \"end\") {\n\t\t\tscanf(\"%s\", op.c_str());\n\t\t\tscanf(\"%d\", &num);\n\t\t\toperand.push_back(num);\n\t\t}\n\t\toperand.pop_back();\n\t\toperator.push_back(op);\n\t}\n\tvector<int> result = find_result(operand, operator);\n\tfor (int i = 0; i < result.size(); i++) {\n\t\tcout << result[i] << endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, overrule its shell from low to upper or vise versa, \n otherwise preserve it as it is. \n If the drawstring contains no letters, reverse the string. \n The routine should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nif s[i] is a letter, overrule its shell from low to upper or vise versa, \n otherwise preserve it as it is. \n If the drawstring contains no letters, reverse the string. \n The routine should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n\tint len = s.length();\n\tint flag = 0;\n\tint i = 0;\n\tint j = 0;\n\tstring str;\n\twhile(i < len){\n\t\tif(s[i] == 'a'){\n\t\t\tflag = 1;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[i] == 'A'){\n\t\t\tflag = 0;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(flag == 1){\n\t\t\tif(s[i] >= 'a' && s[i] <= 'z'){\n\t\t\t\tstr = str + s[i];\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(s[i] >= 'A' && s[i] <= 'Z'){\n\t\t\t\t\tstr = str + s[i];\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstr = str + s[i];\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag == 0){\n\t\t\tif(s[i] >= 'A' && s[i] <= 'z'){\n\t\t\t\tstr = str + s[i];\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(s[i] >= 'a' && s[i] <= 'Z'){\n\t\t\t\t\tstr = str + s[i];\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstr = str + s[i];\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\nint main(){\n\tstring s;\n\tgetline(cin, s);\n\tcout<<solve(s);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\", return its md5 hash equivalent drawstring. \n If 'text\" is an empty bowed stringed instrument, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string 'text\", return its md5 hash equivalent drawstring. \n If 'text\" is an empty bowed stringed instrument, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    MD5((const unsigned char *)text.c_str(),strlen(text.c_str()),(unsigned char *)text.c_str());\n    return text;\n}\n<|endoftext|>"}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive integers a and b, return the even finger between a\nand b, in ascend order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 0, "perturbed": true, "gc": "/*\nGiven two positive integers a and b, return the even finger between a\nand b, in ascend order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> res;\n    int num = a;\n    int num_next = 2*a;\n    while(num < b){\n        if(num % 2 == 0){\n            res.push_back(num);\n            num_next = 2*num;\n        }\n        num = num_next;\n        num_next = 2*num_next;\n    }\n    return res;\n}\nint main(){\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    vector<int> res = generate_integers(a,b);\n    printf(\"%d\",res.back());\n    for(int i = res.size() - 2; i >= 0; i--){\n        printf(\" %d\",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
