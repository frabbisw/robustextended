{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vector of numbers,  areany two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 0, "perturbed": true, "gc": "/*\nCheck if in given vector of numbers,  areany two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i, j, k;\n    for(i=0; i<numbers.size()-1; i++){\n        for(j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i]-numbers[j])<threshold)\n                return true;\n        }\n    }\n    return false;\n}\nint main(){\n    int i, j;\n    vector<float> numbers;\n    for(i=0; i<10; i++){\n        numbers.push_back(i*1.0);\n    }\n    cout<<\"Checking elements \"<<numbers[0]<<\" \"<<numbers[1]<<\" \"<<numbers[2]<<\"... \"<<numbers[9]<<\"... \"<<numbers[8]<<\"... \"<<numbers[7]<<endl;\n    cout<<\"The elements are \"<<numbers[0]<<\" \"<<numbers[1]<<\" \"<<numbers[2]<<\"... \"<<numbers[9]<<\"... \"<<numbers[8]<<\"... \"<<numbers[7]<<endl;\n    cout<<\"Has the elements \"<<numbers[0]<<\" \"<<numbers[1]<<\" \"<<numbers[2]<<\"... \"<<numbers[9]<<\"... \"<<numbers[8]<<\"... \"<<numbers[7]<<\"?\"<<endl;\n    cout<<has_close_elements(numbers, 0.1)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/1", "prompt": "/*\nInput to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\nseparate tho se gr oup int o  separa te string s and return the vector of t hos e.\nSeparate gr oups are bala nced (each open brace is p roperly closed) and not nested  within eac h other \nIgnore a nyspaces in the input strin g.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\nseparate tho se gr oup int o  separa te string s and return the vector of t hos e.\nSeparate gr oups are bala nced (each open brace is p roperly closed) and not nested  within eac h other \nIgnore a nyspaces in the input strin g.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n\tint counter=0,i=0,j=0,flag=0;\n\tvector<string> sub_strings;\n\tchar c=paren_string[i];\n\twhile(c!='\\0'){\n\t\tif(c=='('){\n\t\t\tcounter++;\n\t\t\ti++;\n\t\t\tc=paren_string[i];\n\t\t}\n\t\telse if(c==')'){\n\t\t\tcounter--;\n\t\t\tif(counter==0){\n\t\t\t\tstring sub_string=paren_string.substr(j,i-j);\n\t\t\t\tsub_strings.push_back(sub_string);\n\t\t\t\tj=i+1;\n\t\t\t\tc=paren_string[j];\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\tstring sub_string=paren_string.substr(j,paren_string.size()-j);\n\tsub_strings.push_back(sub_string);\n\treturn sub_strings;\n}\nint main(){\n\tstring paren_string;\n\tcin>>paren_string;\n\tvector<string> sub_strings=separate_paren_groups(paren_string);\n\tfor(int i=0;i<sub_strings.size();i++){\n\t\tcout<<sub_strings[i]<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/2", "prompt": "/*\nGiven a positive floating point numb er, i t can be decomposed into\nand integer part (largest integer smaller thangiven  number )  and de cimals\n(l eftover part always smallertha n 1).\n\nReturnthe decimal p art of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive floating point numb er, i t can be decomposed into\nand integer part (largest integer smaller thangiven  number )  and de cimals\n(l eftover part always smallertha n 1).\n\nReturnthe decimal p art of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n\tfloat temp = (float)floor(number);\n\tfloat dec = number - temp;\n\tif(dec>0.00001){\n\t\treturn temp + 0.5;\n\t}\n\telse{\n\t\treturn temp;\n\t}\n}\nint main(){\n\tfloat n,d;\n\tprintf(\"Enter a number\");\n\tscanf(\"%f\",&n);\n\td = truncate_number(n);\n\tprintf(\"decimal part is %f\\n\",d);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vector of deposit and  with drawal operations on a bank account that starts with\nzero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal ls below zero,  and\nat thatpoint function should retu rntrue. Otherwise it s h ould r eturn false .\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 0, "perturbed": true, "gc": "/*\nYou\"re given a vector of deposit and  with drawal operations on a bank account that starts with\nzero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal ls below zero,  and\nat thatpoint function should retu rntrue. Otherwise it s h ould r eturn false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n\tif(operations.size() == 0){\n\t\treturn false;\n\t}\n\tint val = 0;\n\tfor(int i = 0; i < operations.size(); i++){\n\t\tval += operations[i];\n\t}\n\tif(val < 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main(){\n\tint n, m, sum = 0;\n\tscanf(\"%d\", &n);\n\tvector<int> operations(n);\n\tfor(int i = 0; i < n; i++){\n\t\tscanf(\"%d\", &operations[i]);\n\t\tsum += operations[i];\n\t}\n\tif(below_zero(operations)){\n\t\tprintf(\"true\\n\");\n\t}\n\telse{\n\t\tprintf(\"false\\n\");\n\t}\n}\n<|endoftext|>"}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vector of input numbers,  calc ulate Mean Absolute Deviation\naround the mean of this dataset.\nMean Abso luteDeviati o n is th e average  absolute difference between  ea ch\nelement and  a centerpoin t (mean in this case):\nMAD  =average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of input numbers,  calc ulate Mean Absolute Deviation\naround the mean of this dataset.\nMean Abso luteDeviati o n is th e average  absolute difference between  ea ch\nelement and  a centerpoin t (mean in this case):\nMAD  =average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum=0,average=0,x_mean=0,mad=0;\n    int i;\n    for(i=0;i<numbers.size();i++){\n        sum=sum+numbers[i];\n    }\n    average=sum/numbers.size();\n    for(i=0;i<numbers.size();i++){\n        x_mean=x_mean+numbers[i];\n    }\n    x_mean=x_mean/numbers.size();\n    for(i=0;i<numbers.size();i++){\n        mad=abs(numbers[i]-average);\n        mad=mad;\n    }\n    return mad;\n}\n<|endoftext|>"}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"delimeter\" betweenevery  two consecutive elements of inputvector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/*\nInsert a number \"delimeter\" betweenevery  two consecutive elements of inputvector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out;\n    int size = numbers.size();\n    int i = 0;\n    int j = 0;\n    while(i < size-1 && j < size-1){\n        if(numbers[i]!= delimeter){\n            out.push_back(numbers[i]);\n            i++;\n        }\n        out.push_back(delimeter);\n        j++;\n        while(i < size-1 && j < size-1 && numbers[j] == delimeter){\n            j++;\n        }\n        i++;\n    }\n    while(i < size-1){\n        out.push_back(numbers[i]);\n        i++;\n    }\n    return out;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    vector<int> out = intersperse(numbers, 4);\n    for(int i = 0; i < out.size(); i++){\n        cout<<out[i]<<\" \";\n    }\n    cout<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/6", "prompt": "/*\nInput to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\nFor ea ch of  the gr o up, out put the d eepest level of nesting of p are ntheses.\nE.g.(()()) has ma ximum two levels of nestin g while ((())) has thre e .\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\nFor ea ch of  the gr o up, out put the d eepest level of nesting of p are ntheses.\nE.g.(()()) has ma ximum two levels of nestin g while ((())) has thre e.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n\tvector<int> levels;\n\tlevels.clear();\n\tint level = 0;\n\tfor(int i = 0; i < paren_string.size(); i++){\n\t\tif(paren_string[i] == '('){\n\t\t\tlevel++;\n\t\t}\n\t\tif(paren_string[i] == ')'){\n\t\t\tif(level == 0){\n\t\t\t\tlevels.push_back(0);\n\t\t\t\tlevel--;\n\t\t\t}else{\n\t\t\t\tlevel--;\n\t\t\t}\n\t\t}\n\t}\n\treturn levels;\n}\nint main(){\n\tstring paren_string = \"((())) ((())())\";\n\tvector<int> levels = parse_nested_parens(paren_string);\n\tprintf(\"%d\\n\", levels.size());\n\tfor(int i = 0; i < levels.size(); i++){\n\t\tprintf(\"%d \", levels[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vector of strings on ly fo r ones thatcontain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 0, "perturbed": true, "gc": "/*\nFilter an input vector of strings on ly fo r ones thatcontain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for(vector<string>::iterator it = strings.begin(); it!=strings.end(); it++){\n        if(it->find(substring)!= string::npos){\n            result.push_back(*it);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n    vector<string> result = filter_by_substring(strings, \"a\");\n    for(vector<string>::iterator it = result.begin(); it!=result.end(); it++){\n        printf(\"%s\\n\", (*it).c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, retu rn avector consisting of a sum and a product of all the integers in a vector .\nEmp ty sums hould b e equal t o 0 and empty product should  be  equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of integers, retu rn avector consisting of a sum and a product of all the integers in a vector.\nEmp ty sums hould b e equal t o 0 and empty product should  be  equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum=0;\n    int product=1;\n    vector<int> ans;\n    for(auto n : numbers){\n        sum+=n;\n        product*=n;\n    }\n    ans.push_back(sum);\n    ans.push_back(product);\n    return ans;\n}\n\nint main(){\n    vector<int> v{1, 2, 3, 4};\n    vector<int> ans = sum_product(v);\n    printf(\"%d, %d\", ans[0], ans[1]);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, gen erate  a vector of rolling maximum element found until given moment\nin the seq uence .\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 0, "perturbed": true, "gc": "/*\nFrom a given vector of integers, gen erate  a vector of rolling maximum element found until given moment\nin the seq uence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    int size = numbers.size();\n    vector<int> result;\n    int max_index = size-1;\n    int max = numbers[0];\n    int index = 0;\n    while(index<size){\n        if(numbers[index] > max){\n            max = numbers[index];\n            max_index = index;\n        }\n        index++;\n    }\n    for(int i=0;i<=max_index;i++){\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 2, 3, 4, 2};\n    vector<int> result = rolling_max(numbers);\n    for(int i=0;i<result.size();i++){\n        printf(\"%d\\t\",result[i]);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that be ginswith a supplied string. \n    Algorithm idea is simple: -Find the longes t pos tfix of supplie d stringthat is a palindrome. \n    -  Ap pend to the en d of the stri ng reverse of a string pre fix that comes before t h e pali ndromic suf fix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that be ginswith a supplied string. \n    Algorithm idea is simple: -Find the longes t pos tfix of supplie d stringthat is a palindrome. \n    -  Ap pend to the en d of the stri ng reverse of a string pre fix that comes before t h e pali ndromic suf fix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string s=str;\n    int n=s.length();\n    int t=0,s_n=0,s_t=0,s_n_r=0;\n    int min=n,t_min=n;\n    for(int i=0;i<n;i++){\n        while(s[t_min]!=s[i]){\n            s_t=t_min;\n            s_n=n;\n            s_n_r=i;\n            t_min--;\n        }\n        t_min++;\n        t=t_min;\n        if(t_min==n){\n            break;\n        }\n        s_t=t_min-1;\n        s_n=n-1;\n        s_n_r=i;\n        if(is_palindrome(s.substr(t,s_n))){\n            if(min>t_min){\n                min=t_min;\n                t=t_min;\n                s_n=s_n_r;\n                s_t=s_t;\n            }\n        }\n    }\n    return s.substr(0,t+1);\n}\nint main(){\n    string str;\n    cin>>str;\n    cout<<str<<\" : \"<<make_palindrome(str)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/11", "prompt": "/*\nInput are two strings a and b consis tingonly of 1s and 0s.\nPerform binary XOR on these inputs and return resultalsoas a st r ing.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 0, "perturbed": true, "gc": "/*\nInput are two strings a and b consis tingonly of 1s and 0s.\nPerform binary XOR on these inputs and return resultalsoas a st r ing.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    int length=a.size();\n    int i,j;\n    string c;\n    for(i=0;i<length;i++){\n        c.push_back(a[i]^b[i]);\n    }\n    return c;\n}\n\n/*\nInput are two strings a and b consis tingonly of 1s and 0s.\nPerform binary XOR on these inputs and return resultalsoas a st r ing.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\nint main(){\n    string a,b;\n    while(cin>>a>>b){\n        cout<<string_xor(a,b)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the  long est one. Return the first one in case of multiple\nstrings of the same le ngth.  Return None in  case the  input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/*\nOut of vector of strings, return the  long est one. Return the first one in case of multiple\nstrings of the same le ngth.  Return None in  case the  input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n\tif(strings.empty())\n\t\treturn \"\";\n\tstring ans = strings[0];\n\tfor(int i = 1; i < strings.size(); i++){\n\t\tif(strings[i].size() > ans.size()){\n\t\t\tans = strings[i];\n\t\t}\n\t}\n\treturn ans;\n}\n\nint main(){\n\tvector<string> strs = {\n\t\t\"abc\",\n\t\t\"bca\",\n\t\t\"acb\",\n\t};\n\tcout << \"Longest string: \" << longest(strs) << endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest common divisor oftwo i ntegers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 0, "perturbed": true, "gc": "/*\nReturn a greatest common divisor oftwo i ntegers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    int gcd = 1;\n    while(b!= 0){\n        a = a % b;\n        gcd = b;\n        b = a;\n    }\n    return gcd;\n}\nint main(){\n    int a, b;\n    while(1){\n        scanf(\"%d %d\", &a, &b);\n        if(a == 0 && b == 0)\n            break;\n        else{\n            printf(\"%d\\n\", greatest_common_divisor(a, b));\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of all prefixes from s horte st to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 0, "perturbed": true, "gc": "/*\nReturn vector of all prefixes from s horte st to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n\tvector<string> prefixes;\n\tfor(int i=0;i<str.length();i++){\n\t\tfor(int j=0;j<str.length();j++){\n\t\t\tif(j>i){\n\t\t\t\tstring prefix=str.substr(i,j-i);\n\t\t\t\tprefixes.push_back(prefix);\n\t\t\t}\n\t\t}\n\t}\n\treturn prefixes;\n}\n\nint main(){\n\tstring str=\"abc\";\n\tvector<string> prefixes=all_prefixes(str);\n\tfor(string prefix:prefixes){\n\t\tprintf(\"%s\\n\",prefix.c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string containing space-del imite d numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 0, "perturbed": true, "gc": "/*\nReturn a string containing space-del imite d numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n\tstring a = \"0\";\n\twhile(n > 0){\n\t\ta = a + \" \" + to_string(n);\n\t\tn--;\n\t}\n\treturn a;\n}\n\nint main(){\n\tint n;\n\tcout<<\"Enter a number:\"<<endl;\n\tcin>>n;\n\tcout<<string_sequence(n);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, find out how many di stinc t characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string, find out how many di stinc t characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n\tint len=str.size();\n\tint cnt[256];\n\tfor(int i=0;i<256;i++){\n\t\tcnt[i]=0;\n\t}\n\tfor(int i=0;i<len;i++){\n\t\tcnt[toupper(str[i])]++;\n\t}\n\tint res=0;\n\tfor(int i=0;i<256;i++){\n\t\tres+=cnt[i];\n\t}\n\treturn res;\n}\nint main(){\n\tint t;\n\tcin>>t;\n\twhile(t--){\n\t\tstring str;\n\t\tcin>>str;\n\t\tcout<<count_distinct_characters(str)<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/17", "prompt": "/*\nInput to this function is a string r epres enting musical notes in a special ASCII format.\nYour task is to parse th is st ring an d  return  vector o f integerscorresponding tohow  many beats do es each\nnot l ast.\n\nHere is a legend:\n\"o \" - whole note, lasts f o ur bea ts\n\"o|\" - h alf not e, laststwo beats\n\".|\" - quaternote , lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string r epres enting musical notes in a special ASCII format.\nYour task is to parse th is st ring an d  return  vector o f integerscorresponding tohow  many beats do es each\nnot l ast.\n\nHere is a legend:\n\"o \" - whole note, lasts f o ur bea ts\n\"o|\" - h alf not e, laststwo beats\n\".|\" - quaternote, lasts one beat\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> beat_duration;\n    int counter = 0;\n    int last_note = 0;\n    int current_note = 0;\n    for(int i = 0; i < music_string.size(); i++){\n        if(music_string[i] == 'o'){\n            counter = 1;\n            last_note = current_note;\n            current_note = 0;\n        }\n        if(music_string[i] == '|'){\n            if(counter > 0){\n                beat_duration.push_back(current_note);\n                current_note = 0;\n                counter = 0;\n            }\n            counter = 1;\n            last_note = current_note;\n            current_note = 0;\n        }\n        if(music_string[i] == '.'){\n            if(counter > 0){\n                beat_duration.push_back(current_note);\n                current_note = 0;\n                counter = 0;\n            }\n            counter = 1;\n            last_note = current_note;\n            current_note = 1;\n        }\n        current_note = current_note + 1;\n    }\n    if(counter > 0){\n        beat_duration.push_back(current_note);\n    }\n    return beat_duration;\n}\n<|endoftext|>"}
{"task_id": "CPP/18", "prompt": "/*\nFind how many times a given substrin g can  be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 0, "perturbed": true, "gc": "/*\nFind how many times a given substrin g can  be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count = 0;\n    for(int i = 0; i<str.size(); i++){\n        int j = 0;\n        while(j<substring.size() && str[i+j]==substring[j]){\n            j++;\n        }\n        if(j==substring.size())\n            count++;\n    }\n    return count;\n}\n\nint main(){\n    string str,substr;\n    cin>>str>>substr;\n    int ans = how_many_times(str,substr);\n    cout<<ans;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space-delimited string of  numb erals from \"zero\" to \"nine\".\nValidchoices are \"zero\", \"one\", 'two\", 'th ree\",  \"four\" ,  \"five\" , 'six\",'seven\", \"eight\" and \"nine\". \nRe turn the strin g with number s sorted from smallest tolargest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 0, "perturbed": true, "gc": "/*\nInput is a space-delimited string of  numb erals from \"zero\" to \"nine\".\nValidchoices are \"zero\", \"one\", 'two\", 'th ree\",  \"four\",  \"five\",'six\",'seven\", \"eight\" and \"nine\". \nRe turn the strin g with number s sorted from smallest tolargest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    int l=numbers.length();\n    map<char,int> m;\n    for(int i=0;i<l;i++){\n        char c=numbers[i];\n        if(m.count(c)==0){\n            m[c]=1;\n        }\n        else{\n            m[c]++;\n        }\n    }\n    string s=\"\";\n    for(map<char,int>::iterator it=m.begin();it!=m.end();it++){\n        s+=it->first;\n        s+=it->second;\n    }\n    return s;\n}\nint main(){\n    string a;\n    cin>>a;\n    cout<<sort_numbers(a);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vector of numbers (o f len gth at least two) select and return two that are the closest to each\noth er an d retur n  them i n order ( smaller number, larger numbe r). \n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 0, "perturbed": true, "gc": "/*\nFrom a supplied vector of numbers (o f len gth at least two) select and return two that are the closest to each\noth er an d retur n  them i n order ( smaller number, larger numbe r). \n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> closest_numbers(2);\n    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0.0;\n    float count = 0.0;\n    float diff;\n    for(int i = 1; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    for(int i = 0; i < numbers.size(); i++){\n        count += 1.0;\n        diff = numbers[i] - min;\n        if(diff < 0.0){\n            min = numbers[i];\n        }\n        else if(diff > 0.0){\n            max = numbers[i];\n        }\n    }\n    closest_numbers[0] = min;\n    closest_numbers[1] = max;\n    return closest_numbers;\n}\n<|endoftext|>"}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least  twoelements), apply a linear transform to that vector,\nsuchthat the smalle st nu mber wi l l becom e 0 and t he largestwill become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 0, "perturbed": true, "gc": "/*\nGiven vector of numbers (of at least  twoelements), apply a linear transform to that vector,\nsuchthat the smalle st nu mber wi l l becom e 0 and t he largestwill become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float sum = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float factor = 1 / sum;\n    vector<float> scaled_numbers(numbers);\n    for(int i = 0; i < numbers.size(); i++){\n        scaled_numbers[i] *= factor;\n    }\n    return scaled_numbers;\n}\n<|endoftext|>"}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python va luesonly for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 0, "perturbed": true, "gc": "/*\nFilter given vector of any python va luesonly for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> v;\n    list_any::iterator it = values.begin();\n    while(it!=values.end()){\n        boost::any value = *it;\n        if(boost::any_cast<int>(value))\n            v.push_back(boost::any_cast<int>(value));\n        it++;\n    }\n    return v;\n}\n\nvector<int> filter_integers(std::map<std::string, boost::any> values){\n    vector<int> v;\n    std::map<std::string, boost::any>::iterator it = values.begin();\n    while(it!=values.end()){\n        boost::any value = *it;\n        if(boost::any_cast<int>(value))\n            v.push_back(boost::any_cast<int>(value));\n        it++;\n    }\n    return v;\n}\n\nvoid filter_integers(std::vector<int> v){\n    vector<int> v2;\n    for(std::vector<int>::iterator it=v.begin();it!=v.end();it++){\n        if(boost::any_cast<int>(*it))\n            v2.push_back(*it);\n    }\n    v=v2;\n}\n\nint main(){\n    list_any values;\n    list_any::iterator it = values.begin();\n    it = values.insert(it,1);\n    it = values.insert(it,2);\n    it = values.insert(it,3);\n    it = values.insert(it,4);\n    it = values.insert(it,5);\n    values.insert(it,6);\n    values.insert(it,7);\n    it = values.insert(it,8);\n    it = values.insert(it,9);\n    it = values.insert(it,10);\n    it = values.insert(it,11);\n    it = values.insert(it,12);\n    it = values.insert(it,13);\n    it = values.insert(it,14);\n    it = values.insert(it,15);\n    values.insert(it,16);\n    values.insert(it,17);\n    values.insert(it,18);\n    values.insert(it,19);\n    values.insert(it,20);\n    values.insert(it,21);\n    values.insert(it,22);\n    values.insert(it,23);\n    values.insert(it,24);\n    values.insert(it,25);\n    values.insert(it,26);\n    values.insert(it,27);\n    values.insert(it,28);\n    values.insert(it,29);\n    values.insert(it,30);\n    values.insert(it,31);\n    values.insert(it,32);\n    values.insert(it,33);\n    values.insert(it,34);\n    values.insert(it,35);\n    values.insert(it,36);\n    values.insert(it,37);\n    values.insert(it,38);\n    values.insert(it,39);\n    values.insert(it,40);\n    values.insert(it,41);\n    values.insert(it,42);\n    values.insert(it,43);\n    values.insert(it,44);\n    values.insert(it,45);\n    values.insert(it,46);\n    values.insert(it,47);\n    values.insert(it,48);\n    values.insert(it,49);\n    values.insert(it,50);\n    values.insert(it,51);\n    values.insert(it,52);\n    values.insert(it,53);\n    values.insert(it,54);\n    values.insert(it,55);\n    values.insert(it,56);\n    values.insert(it,57);\n    values.insert(it,58);\n    values.insert(it,59);\n    values.insert(it,60);\n    values.insert(it,61);\n    values.insert(it,62);\n    values.insert(it,63);\n    values.insert(it,64);\n    values.insert(it,65);\n    values.insert(it,66);\n    values.insert(it,67);\n    values.insert(it,68);\n    values.insert(it,69);\n    values.insert(it,70);\n    values.insert(it,71);\n    values.insert(it,72);\n    values.insert(it,73);\n    values.insert(it,74);\n    values.insert(it,75);\n    values.insert(it,76);\n    values.insert(it,77);\n    values.insert(it,78);\n    values.insert(it,79);\n    values.insert(it,80);\n    values.insert(it,81);\n    values.insert(it,82);\n    values.insert(it,83);\n    values.insert(it,84);\n    values.insert(it,85);\n    values.insert(it,86);\n    values.insert(it,87);\n    values.insert(it,88);\n    values.insert(it,89);\n    values.insert(it,90);\n    values.insert(it,91);\n    values.insert(it,92);\n    values.insert(it,93);\n    values.insert(it,94);\n    values.insert(it,95);\n    values.insert(it,96);\n    values.insert(it,97);\n    values.insert(it,98);\n    values.insert(it,99);\n    values.insert(it,100);\n    values.insert(it,101);\n    values.insert(it,102);\n    values.insert(it,103);\n    values.insert(it,104);\n    values"}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n\treturn str.size();\n}\nint main(){\n\tstring str = \"abc\";\n\tprintf(\"%d\\n\",strlen(str));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find the large st nu mber that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 0, "perturbed": true, "gc": "/*\nFor a given number n, find the large st nu mber that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int i = 1;\n    while(n % i!= 0){\n        i++;\n    }\n    return i;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    int i = largest_divisor(n);\n    printf(\"%d\",i);\n}\n<|endoftext|>"}
{"task_id": "CPP/25", "prompt": "/*\nReturn vector of prime factors of gi ven i nteger in the order from smallest to largest.\nEach of the factors should  be v ectored numberof timescorresponding to how many ti mes  it appeares i n factorizati on.\nInput number should be  equal to the product o f  all f actors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/*\nReturn vector of prime factors of gi ven i nteger in the order from smallest to largest.\nEach of the factors should  be v ectored numberof timescorresponding to how many ti mes  it appeares i n factorizati on.\nInput number should be  equal to the product o f  all f actors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i = 2; n>1; i++){\n        while(n%i==0){\n            factors.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>1)\n        factors.push_back(n);\n    return factors;\n}\nint main(){\n    int n,k;\n    scanf(\"%d %d\",&n,&k);\n    vector<int> factors=factorize(n);\n    vector<int>::iterator i;\n    for(i = factors.begin(); i<factors.end()-1; i++){\n        for(int j = 0; j < *i; j++){\n            printf(\"%d \",*i);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"%d\",factors.back());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove al l ele ments that occur more than once.\nKeep order of elements left the same as  in t he inpu t .\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 0, "perturbed": true, "gc": "/*\nFrom a vector of integers, remove al l ele ments that occur more than once.\nKeep order of elements left the same as  in t he inpu t.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n\tvector<int> result;\n\tfor(int i=0;i<numbers.size();i++){\n\t\tint tmp = 1;\n\t\tfor(int j=i+1;j<numbers.size();j++){\n\t\t\tif(numbers[i]==numbers[j]){\n\t\t\t\ttmp++;\n\t\t\t}\n\t\t\tif(tmp==2){\n\t\t\t\tresult.push_back(numbers[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> numbers;\n\tnumbers.push_back(1);\n\tnumbers.push_back(2);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(4);\n\tvector<int> result = remove_duplicates(numbers);\n\tfor(int i=0;i<result.size();i++){\n\t\tcout<<result[i]<<\" \";\n\t}\n\tcout<<endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/27", "prompt": "/*\nFor a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 0, "perturbed": true, "gc": "/*\nFor a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a' && str[i]<='z'){\n            str[i]=str[i]^32;\n        }\n        else if(str[i]>='A' && str[i]<='Z'){\n            str[i]=str[i]^64;\n        }\n    }\n    return str;\n}\nint main(){\n    string str;\n    while(cin>>str){\n        cout<<filp_case(str)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a  sing le string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/*\nConcatenate vector of strings into a  sing le string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n\tstring result;\n\tfor(int i=0; i<strings.size(); i++){\n\t\tresult+=strings[i];\n\t}\n\treturn result;\n}\nint main(){\n\tvector<string> strings={ \"a\", \"b\", \"c\" };\n\tprintf(\"%s\\n\",concatenate(strings));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vector of strings on ly fo r ones thatstart with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 0, "perturbed": true, "gc": "/*\nFilter an input vector of strings on ly fo r ones thatstart with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\tvector<string> result;\n\tfor(int i = 0; i < strings.size(); i++){\n\t\tif(strings[i].find(prefix)!= 0)\n\t\t\tresult.push_back(strings[i]);\n\t}\n\treturn result;\n}\n\n/*\nFilter an input vector of strings on ly fo r ones that contain a given string.\n>>> filter_by_string({}, \"a\")\n{}\n>>> filter_by_string({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"vector\")\n{\"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_string(vector<string> strings, string string_to_search){\n\tvector<string> result;\n\tfor(int i = 0; i < strings.size(); i++){\n\t\tif(strings[i].find(string_to_search)!= string::npos)\n\t\t\tresult.push_back(strings[i]);\n\t}\n\treturn result;\n}\n\nint main(){\n\tvector<string> v = {\"abc\", \"bcd\", \"cde\", \"vector\"};\n\tvector<string> result = filter_by_prefix(v, \"a\");\n\tfor(int i = 0; i < result.size(); i++)\n\t\tprintf(\"%s\\n\", result[i].c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positive numbers in thevecto r.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 0, "perturbed": true, "gc": "/*\nReturn only positive numbers in thevecto r.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> r;\n    for(vector<float>::iterator it=l.begin();it<l.end();it++)\n        if(abs(*it)>0)r.push_back(*it);\n    return r;\n}\nint main(){\n    vector<float> l={-1, 2, -4, 5, 6};\n    vector<float> r=get_positive(l);\n    for(vector<float>::iterator it=r.begin();it<r.end();it++){\n        printf(\"%f \",*it);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given number is pri me, a nd false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 0, "perturbed": true, "gc": "/*\nReturn true if a given number is pri me, a nd false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n\tif(n==1)\n\t\treturn false;\n\tfor(int i=2;i*i<=n;i++){\n\t\tif(n%i==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tlong long n;\n\twhile(scanf(\"%lld\",&n)!=EOF){\n\t\tif(is_prime(n))\n\t\t\tprintf(\"%lld is a prime number\\n\",n);\n\t\telse\n\t\t\tprintf(\"%lld is not a prime number\\n\",n);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficien ts xs  at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n     * /\n    d o uble su m=0;\n   int i;\n   for (i=0;i<xs.siz e() ;i++)\n    {\n       sum+=xs [i]*pow(x,i);\n   }\n    re turn sum;\n}\ndouble fin d _zero( vector<doub le> xs) {\n    /*   xsare coefficientsofa  polynomial. find_zerofind x such that poly(x) =0. find_zer or eturns only only zero point,  even if therea re many. \n  Moreover, find_zero only takes lis t xs having even numberofcoeffic ie nts and la rg est non zero coefficient asit guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficien ts xs  at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n     * /\n    d o uble su m=0;\n   int i;\n   for (i=0;i<xs.siz e() ;i++)\n    {\n       sum+=xs [i]*pow(x,i);\n   }\n    re turn sum;\n}\ndouble fin d _zero( vector<doub le> xs) {\n    /*   xsare coefficientsofa  polynomial. find_zerofind x such that poly(x) =0. find_zer or eturns only only zero point,  even if therea re many. \n  Moreover, find_zero only takes lis t xs having even numberofcoeffic ie nts and la rg est non zero coefficient asit guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    int i;\n    double x, p;\n    x = 1;\n    p = poly(xs,x);\n    x = 0;\n    while(p!= 0)\n    {\n        x = x + 1;\n        p = poly(xs,x);\n    }\n    return x;\n}\n*/\n\n#define LIMIT_X 10\n\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficien ts xs  at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n     * /\n    d o uble su m=0;\n   int i;\n   for (i=0;i<xs.siz e() ;i++)\n    {\n       sum+=xs [i]*pow(x,i);\n   }\n    re turn sum;\n}\ndouble fin d _zero( vector<doub le> xs) {\n    /*   xsare coefficientsofa  polynomial. find_zerofind x such that poly(x) =0. find_zer or eturns only only zero point,  even if therea re many.\n    Moreover, find_zero only takes lis t xs having even numberofcoeffic ie nts and la rg est non zero coefficient asit guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    int i;\n    double x, p;\n    x = 1;\n    p = poly(xs,x);\n    x = 0;\n    while(p!= 0)\n    {\n        x = x + 1;\n        p = poly(xs,x);\n    }\n    return x;\n}\nint main(){\n    /*\n    vector<double> xs;\n    xs.push_back(1);\n    xs.push_back(2);\n    xs.push_back(3);\n    xs.push_back(4);\n    xs.push_back(5);\n    xs.push_back(6);\n    xs.push_back(7);\n    xs.push_back(8);\n    xs.push_back(9);\n    xs.push_back(10);\n    double x = 0;\n    cout << round(find_zero(xs), 2) << endl;\n    */\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l and r eturn s a vector l' such that\nl' is identical to l in the indicies that are no t div isibleb y three , while i ts values at the indicies th atare divisibleby three areequal\nto the values of the  corresponding indicies of l,but sorted. \n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes a vector l and r eturn s a vector l' such that\nl' is identical to l in the indicies that are no t div isibleb y three, while i ts values at the indicies th atare divisibleby three areequal\nto the values of the  corresponding indicies of l,but sorted. \n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> r;\n    vector<int> t;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < l.size()){\n        if(l[i]%3 == 0){\n            t.push_back(l[i]);\n        }\n        else{\n            k = l[i];\n            j = i+1;\n            while(j < l.size() && k%3!= 0){\n                if(l[j]%3!= 0){\n                    t.push_back(l[j]);\n                    k = l[j];\n                    j++;\n                }\n                else{\n                    t.push_back(k);\n                    k = l[j];\n                    j++;\n                }\n            }\n            t.push_back(k);\n        }\n        i++;\n    }\n    r = t;\n    return r;\n}\n\nint main(){\n    vector<int> l;\n    vector<int> r;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < 5){\n        l.push_back(i);\n        i++;\n    }\n    r = sort_third(l);\n    for(i = 0; i < r.size(); i++){\n        printf(\"%d\\n\", r[i]);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements in a v ector \n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*\nReturn sorted unique elements in a v ector \n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> res;\n    sort(l.begin(), l.end());\n    for(int i = 0; i < l.size(); i++){\n        if(i == 0 || l[i]!= l[i-1]){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\n\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> l(n);\n        for(int i = 0; i < n; i++){\n            scanf(\"%d\", &l[i]);\n        }\n        vector<int> res = unique(l);\n        for(int i = 0; i < res.size(); i++){\n            printf(\"%d \", res[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximum element in the vector .\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 0, "perturbed": true, "gc": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float m = l[0];\n    int i = 0;\n    while(i < l.size()-1){\n        if(l[i]>m)\n            m = l[i];\n        i++;\n    }\n    return m;\n}\nint main(){\n    vector<float> l = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    printf(\"max element in %d is %f\\n\", l.size(), max_element(l));\n}\n<|endoftext|>"}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number of times the digit  7 ap pears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 0, "perturbed": true, "gc": "/*\nReturn the number of times the digit  7 ap pears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count=0;\n    for(int i=1;i<=n;i++){\n        if(i%3==0&&i%5==0)\n            count++;\n    }\n    return count;\n}\n<|endoftext|>"}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l and r eturn s a vector l' such that\nl' is identical to l in the odd indicies, whileits v alues a t  the ev en indici es are equal\nto the values o f t he even indici es of l, butsorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes a vector l and r eturn s a vector l' such that\nl' is identical to l in the odd indicies, whileits v alues a t  the ev en indici es are equal\nto the values o f t he even indici es of l, butsorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tvector<float>s(l.size());\n\tfor(int i = 0;i<l.size();i++){\n\t\tif(i%2 == 0){\n\t\t\ts[i] = l[i];\n\t\t}else{\n\t\t\ts[i] = l[i];\n\t\t}\n\t}\n\treturn s;\n}\nint main(){\n\tvector<float> l = {1, 2, 3};\n\tvector<float> s = sort_even(l);\n\tfor(int i = 0;i<s.size();i++){\n\t\tprintf(\"%f \",s[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with e ncode _cyclic function. Returns decoded string. \n    */\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with e ncode _cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    int num=(l+2)/3;\n    string output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        output=output+s.substr(i*3,3);\n    }\n    return output;\n}\n\nint main(){\n    int t;\n    string input;\n    cin>>t;\n    for (int i=0;i<t;i++){\n        cin>>input;\n        cout<<decode_cyclic(encode_cyclic(input))<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-th number that i s a F ibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 0, "perturbed": true, "gc": "/*\nprime_fib returns n-th number that i s a F ibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int x = 1, y = 2, i;\n    for(i = 3; i<n; i++){\n        if(x+y==i){\n            if(isprime(x) && isprime(y)){\n                return i;\n            }\n        }\n        if(x==i){\n            x = y;\n        }\n        if(y==i){\n            y = x;\n        }\n    }\n    return 0;\n}\nbool isprime(int n){\n    if(n<2){\n        return false;\n    }\n    int i;\n    for(i=2;i<=n/2;i++){\n        if(n%i==0){\n            return false;\n        }\n    }\n    return true;\n}\n<|endoftext|>"}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero takes a vector o f int egers as aninput.\nit returns trueif there are three distinct elementsin th e vecto r  that\ns um to zer o, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\ntriples_sum_to_zero takes a vector o f int egers as aninput.\nit returns trueif there are three distinct elementsin th e vecto r  that\ns um to zer o, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    if(l.size()<3){\n        return false;\n    }\n    vector<int> l1(l);\n    sort(l1.begin(), l1.end());\n    int x=0;\n    for(int i=0; i<l1.size()-2; i++){\n        if(l1[i]!=l1[i+1]){\n            x+=l1[i]-l1[i+1];\n        }\n    }\n    return x==0;\n}\n\nint main(){\n    int x;\n    while(cin>>x){\n        vector<int> l;\n        while(x){\n            l.push_back(x%10);\n            x/=10;\n        }\n        if(triples_sum_to_zero(l)){\n            cout<<\"true\"<<endl;\n        }else{\n            cout<<\"false\"<<endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfectly st raigh t infinitely long line.\nn cars aredriving left to right;  simultaneousl y, adiffere n t set o f n carsare driving right to left.  Th e two sets ofcars start ou t being very far from\neach  other.  All cars movei n thesame speed.   Two c ars are s aid tocollide\nwhen a car th at's moving left to rig ht hits a car that's moving  right to l ef t .\nHowever, the cars are infi nitely sturdy an d strong; a s a  result, they continue moving\nint heir trajectory as if th eydidnot  c ollide.\n\nT hi s function outputs the numbe rof such collisions.\n*/\n#include<stdio.h >\nu sing namespace s td;\nint car _race_collision(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 0, "perturbed": true, "gc": "/*\nImagine a road that's a perfectly st raigh t infinitely long line.\nn cars aredriving left to right;  simultaneousl y, adiffere n t set o f n carsare driving right to left.  Th e two sets ofcars start ou t being very far from\neach  other.  All cars movei n thesame speed.   Two c ars are s aid tocollide\nwhen a car th at's moving left to rig ht hits a car that's moving  right to l ef t.\nHowever, the cars are infi nitely sturdy an d strong; a s a  result, they continue moving\nint heir trajectory as if th eydidnot  c ollide.\n\nT hi s function outputs the numbe rof such collisions.\n*/\n#include<stdio.h >\nu sing namespace s td;\nint car _race_collision(int n){\n    int i;\n    td.cars=0;\n    for(i=1;i<=n;i++){\n        td.car(i).pos();\n    }\n    td.cars=0;\n    for(i=n;i>0;i--){\n        td.car(i).pos();\n    }\n    return td.cars;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",car(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with elements incremen ted b y 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 0, "perturbed": true, "gc": "/*\nReturn vector with elements incremen ted b y 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n\tvector<int> v(l);\n\tfor(int i=0;i<l.size();i++)\n\t\tv[i]++;\n\treturn v;\n}\n\nint main(){\n\tvector<int> v = {1, 2, 3};\n\tfor(int i=0;i<v.size();i++)\n\t\tv[i]++;\n\tvector<int> v1 = incr_list(v);\n\tfor(int i=0;i<v1.size();i++)\n\t\tprintf(\"%d \", v1[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes a vector ofinteg ers as an input.\nit returns true if there are two distinct elements in t he ve ctor th a t\nsum t o zero, a nd false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\npairs_sum_to_zero takes a vector ofinteg ers as an input.\nit returns true if there are two distinct elements in t he ve ctor th a t\nsum t o zero, a nd false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n\tbool f=true;\n\tfor(int i=0;i<l.size()-1;i++){\n\t\tfor(int j=i+1;j<l.size();j++){\n\t\t\tif(l[i]+l[j]==0)f=false;\n\t\t}\n\t}\n\treturn f;\n}\n\nint main(){\n\tvector<int> l;\n\tint n;\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tl.push_back(n);\n\t}\n\tbool f=pairs_sum_to_zero(l);\n\tprintf(\"%d\\n\",f);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input numbe r x t o base.\nreturn string representation after the conversion.\nbase numbersare l ess tha n  10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 0, "perturbed": true, "gc": "/*\nChange numerical base of input numbe r x t o base.\nreturn string representation after the conversion.\nbase numbersare l ess tha n  10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string res=\"\";\n    if(x==0){\n        return \"0\";\n    }\n    while(x!=0){\n        int temp=x%base;\n        x=x/base;\n        res=char(temp+'0')+res;\n    }\n    return res;\n}\nint main(){\n    int x,base;\n    string res;\n    while(scanf(\"%d %d\",&x,&base)!=EOF){\n        res=change_base(x,base);\n        printf(\"%s\\n\",res.c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high retu rn ar ea for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGiven length of a side and high retu rn ar ea for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return sqrt(pow(a,2)*(1-pow(h,2)));\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        float a,h;\n        scanf(\"%f %f\",&a,&h);\n        printf(\"%.2f\\n\",triangle_area(a,h));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequen ce si milar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0 \nfib4 (1) ->0 \nfib4(2 ) -> 2\nfi b4(3) -> 0fib4(n) -> fib4(n -1)  + fib4(n-2) +  fib4(n-3) +fib4(n-4).\nPleasewrite afunction toefficiently comput e the n-thelement  of the f ib4 number sequence.  Donot  use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*\nThe Fib4 number sequence is a sequen ce si milar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0 \nfib4 (1) ->0 \nfib4(2 ) -> 2\nfi b4(3) -> 0fib4(n) -> fib4(n -1)  + fib4(n-2) +  fib4(n-3) +fib4(n-4).\nPleasewrite afunction toefficiently comput e the n-thelement  of the f ib4 number sequence.  Donot  use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return 0;\n    if(n == 2)\n        return 2;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint main(){\n    int n;\n    printf(\"Enter the number of elements of fib4 sequence\");\n    scanf(\"%d\", &n);\n    printf(\"The n-th element of fib4 is %d\", fib4(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vec tor l .\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*\nReturn median of elements in the vec tor l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    float m1,m2,m3,m4,m5,m6,m7;\n    float *v = &l[0];\n    int i=0;\n    if(l.size()==1){\n        return l[0];\n    }\n    m1=v[0];\n    m2=v[1];\n    m3=v[2];\n    m4=v[3];\n    m5=v[4];\n    m6=v[5];\n    m7=v[6];\n    if(l.size()%2==0){\n        float s=(m1+m2+m3+m4+m5+m6)/6;\n        return s;\n    }\n    else{\n        float s=(m1+m2+m3+m4+m5)/5;\n        return s;\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter the size of vec\\n\");\n    scanf(\"%d\",&n);\n    vector<float> l(n);\n    for(int i=0;i<n;i++){\n        printf(\"Enter %d value: \",i+1);\n        scanf(\"%f\",&l[i]);\n    }\n    printf(\"Median of %d elements in vec is %f\\n\",n,median(l));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given string is a palindro me\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nChecks if given string is a palindro me\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n\tint len = text.size();\n\tfor(int i=0; i<len/2; i++){\n\t\tif(text[i]!= text[len-i-1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring text;\n\tcout<<\"Enter a string: \";\n\tgetline(cin, text);\n\tif(is_palindrome(text)){\n\t\tcout<<\"String is a palindrome.\";\n\t}\n\telse{\n\t\tcout<<\"String is not a palindrome.\";\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of num erics ).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*\nReturn 2^n modulo p (be aware of num erics ).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n\tint a=0;\n\twhile(n>=p){\n\t\ta=a+n%p;\n\t\tn=n/p;\n\t}\n\treturn a;\n}\n\nint main(){\n\tint t,n,p,ans;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tscanf(\"%d %d\",&n,&p);\n\t\tans=modp(n,p);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}<|endoftext|>"}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting e verycharacter by 5 in the alphabet.\n   string out;\n    int i;\n    for (i=0; i<s.l ength() ; i++)\n   {\n       int w=((int)s[i]+5-(int)' a') %26+(int)'a';  \n        ou t=out+(char)w;\n   }\n    r eturn out;\n}\nstring dec o de_shi ft(string s ){\n   // takesasinput string encodedwith  encode_shiftfunction.  Returns decoded string.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting e verycharacter by 5 in the alphabet.\n   string out;\n    int i;\n    for (i=0; i<s.l ength() ; i++)\n   {\n       int w=((int)s[i]+5-(int)' a') %26+(int)'a';  \n        ou t=out+(char)w;\n   }\n    r eturn out;\n}\nstring dec o de_shi ft(string s ){\n   // takesasinput string encodedwith  encode_shiftfunction.  Returns decoded string.\n    string out;\n    int i;\n    for (i=0; i<s.l ength() ; i++)\n   {\n       int w=((int)s[i]-5+(int)' a') %26+(int)'a';  \n        ou t=out+(char)w;\n   }\n    r eturn out;\n}\nint main(){\n    string inp, out;\n    while (cin >> inp)\n   {\n       out=encode_shift(inp);\n       cout << out << endl;\n   }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that tak es st ring and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 0, "perturbed": true, "gc": "/*\nremove_vowels is a function that tak es st ring and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n\tstring vowels=\"aeiouAEIOU\";\n\tstring vowels_temp=\"\";\n\tfor(int i=0;i<text.length();i++){\n\t\tif(vowels.find(text[i])==string::npos)\n\t\t\tvowels_temp+=text[i];\n\t}\n\treturn vowels_temp;\n}\n\n/*\nreverse_text is a function that takes string and returns string reversed.\n>>> reverse_text(\"\")\n\"\"\n>>> reverse_text(\"abcdef\")\n\"fedcba\"\n>>> reverse_text(\"aaBAA\")\n\"AABAA\"\n>>> reverse_text(\"zbcd\")\n\"dzbc\"\n*/\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring reverse_text(string text){\n\tstring temp=\"\";\n\tfor(int i=text.length()-1;i>=0;i--){\n\t\ttemp+=text[i];\n\t}\n\treturn temp;\n}\n\n/*\nreplace_word is a function that takes a string and a dictionary and returns a new string with all the words replaced with the dictionary\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6'})\n\"1b2c3d4e5f6\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7'})\n\"1b2c3d4e5f6g7\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8'})\n\"1b2c3d4e5f6g7h8\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8','i':'9'})\n\"1b2c3d4e5f6g7h8i9\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8','i':'9','j':'10'})\n\"1b2c3d4e5f6g7h8i9j10\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8','i':'9','j':'10','k':'11'})\n\"1b2c3d4e5f6g7h8i9j10k11\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8','i':'9','j':'10','k':'11','l':'12'})\n\"1b2c3d4e5f6g7h8i9j10k11l12\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8','i':'9','j':'10','k':'11','l':'12','m':'13'})\n\"1b2c3d4e5f6g7h8i9j10k11l12m13\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8','i':'9','j':'10','k':'11','l':'12','m':'13','n':'14'})\n\"1b2c3d4e5f6g7h8i9j10k11l12m13n14\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8','i':'9','j':'10','k':'11','l':'12','m':'13','n':'14','o':'15'})\n\"1b2c3d4e5f6g7h8i9j10k11l12m13n14o15\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8','i':'9','j':'10','k':'11','l':'12','m':'13','n':'14','o':'15','p':'16'})\n\"1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16\"\n>>> replace_word(\"abcdef\",{'a':'1','b':'2','c':'3','d':'4','e':'5','f':'6','g':'7','h':'8','i':'9','j':'10','k':'11','l':'12','m':'13','n':'14','o':'15','p':'16','q':'17'})\n\"1b2c3d4e"}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all numbers in the ve ctorl are belowthreshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 0, "perturbed": true, "gc": "/*\nReturn true if all numbers in the ve ctorl are belowthreshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n\tfor(int i=0; i<l.size(); i++){\n\t\tif(l[i]>t){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int>l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(10);\n\tcout<<below_threshold(l,5)<<endl;\n\tcout<<below_threshold(l,100)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n\treturn x+y;\n}\nint main(){\n\tint x,y;\n\tprintf(\"%d\\n\",add(10,15));\n\tprintf(\"%d\\n\",add(20,30));\n\tprintf(\"%d\\n\",add(5,7));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same cha racte rs.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 0, "perturbed": true, "gc": "/*\nCheck if two words have the same cha racte rs.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    int i,len0=s0.size(),len1=s1.size();\n    if(len0!=len1)\n        return false;\n    for(i=0;i<len0;i++)\n        if(s0[i]!=s1[i])\n            return false;\n    return true;\n}\n\n//比较两个字符串，判断两个字符串是否相同\nbool same(string s0,string s1){\n    return same_chars(s0,s1);\n}\n\nint main(){\n    int T;\n    string s0,s1;\n    while(cin>>T){\n        while(T--){\n            cin>>s0>>s1;\n            cout<<(same(s0,s1)?\"YES\":\"NO\")<<endl;\n        }\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n\tif(n == 1)\n\t\treturn 1;\n\tif(n == 2)\n\t\treturn 2;\n\treturn fib(n-1) + fib(n-2);\n}\n\nint main(){\n\tint n;\n\tprintf(\"Fibonacci number of %d:\\n\", n);\n\tprintf(\"%d\\n\", fib(n));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of '<' and '>'. \nretu rn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of '<' and '>'. \nretu rn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint count=0;\n\tfor(int i=0;i<brackets.length()-1;i++){\n\t\tif(brackets[i]=='<'){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count!=brackets.length()-1)\n\t\treturn false;\n\tfor(int i=0;i<brackets.length()-1;i++){\n\t\tif(brackets[i]=='<' && brackets[i+1]=='>'){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tstring brackets;\n\twhile(getline(cin,brackets)){\n\t\tif(correct_bracketing(brackets))\n\t\t\tprintf(\"true\\n\");\n\t\telse\n\t\t\tprintf(\"false\\n\");\n\t}\n}<|endoftext|>"}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements are m onoto nically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*\nReturn true is vector elements are m onoto nically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n\tint i, j, k, N=l.size();\n\tif(l[0]>=l[1])\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main(){\n\tint t, N;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tscanf(\"%d\", &N);\n\t\tvector<float> l;\n\t\tfor(int i=0; i<N; i++){\n\t\t\tfloat x;\n\t\t\tscanf(\"%f\", &x);\n\t\t\tl.push_back(x);\n\t\t}\n\t\tif(monotonic(l)==true)\n\t\t\tprintf(\"True\\n\");\n\t\telse\n\t\t\tprintf(\"False\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted unique common elements  fortwo vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*\nReturn sorted unique common elements  fortwo vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> common;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    int i=0,j=0;\n    while(i<l1.size() && j<l2.size()){\n        if(l1[i]==l2[j]){\n            common.push_back(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i]<l2[j])\n            i++;\n        else\n            j++;\n    }\n    return common;\n}\n\nint main(){\n    vector<int> l1={1,4,3,34,653,2,5},l2={5,7,1,5,9,653,121};\n    vector<int> common=common(l1,l2);\n    for(auto i:common)\n        cout<<i<<\" \";\n    cout<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest prime factor of n . Ass ume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 0, "perturbed": true, "gc": "/*\nReturn the largest prime factor of n. Ass ume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int sqrt = (int)sqrt(n);\n    for(int i = 2; i <= sqrt; i++){\n        if(n%i == 0) return i;\n    }\n    return n;\n}\n\n/*\nGiven an integer n, return the number of prime factors of n.\n>>> count_prime_factors(2)\n2\n>>> count_prime_factors(4)\n2\n>>> count_prime_factors(6)\n3\n>>> count_prime_factors(10)\n2\n>>> count_prime_factors(12)\n2\n>>> count_prime_factors(15)\n3\n>>> count_prime_factors(18)\n2\n>>> count_prime_factors(20)\n2\n>>> count_prime_factors(30)\n3\n>>> count_prime_factors(36)\n2\n>>> count_prime_factors(45)\n3\n>>> count_prime_factors(54)\n2\n>>> count_prime_factors(60)\n3\n>>> count_prime_factors(64)\n2\n>>> count_prime_factors(100)\n2\n>>> count_prime_factors(120)\n2\n>>> count_prime_factors(180)\n3\n>>> count_prime_factors(240)\n2\n>>> count_prime_factors(300)\n3\n>>> count_prime_factors(900)\n4\n>>> count_prime_factors(1000)\n2\n>>> count_prime_factors(2000)\n2\n>>> count_prime_factors(3000)\n3\n>>> count_prime_factors(4000)\n2\n>>> count_prime_factors(5000)\n2\n>>> count_prime_factors(6000)\n3\n>>> count_prime_factors(8000)\n2\n>>> count_prime_factors(9000)\n3\n>>> count_prime_factors(10000)\n2\n>>> count_prime_factors(12000)\n2\n>>> count_prime_factors(15000)\n3\n>>> count_prime_factors(18000)\n2\n>>> count_prime_factors(20000)\n2\n>>> count_prime_factors(25000)\n3\n>>> count_prime_factors(30000)\n2\n>>> count_prime_factors(45000)\n3\n>>> count_prime_factors(50000)\n2\n>>> count_prime_factors(60000)\n3\n>>> count_prime_factors(70000)\n2\n>>> count_prime_factors(80000)\n2\n>>> count_prime_factors(90000)\n3\n>>> count_prime_factors(100000)\n2\n>>> count_prime_factors(110000)\n2\n>>> count_prime_factors(120000)\n2\n>>> count_prime_factors(130000)\n3\n>>> count_prime_factors(150000)\n2\n>>> count_prime_factors(200000)\n2\n>>> count_prime_factors(300000)\n3\n>>> count_prime_factors(400000)\n2\n>>> count_prime_factors(500000)\n2\n>>> count_prime_factors(600000)\n3\n>>> count_prime_factors(700000)\n2\n>>> count_prime_factors(800000)\n2\n>>> count_prime_factors(900000)\n3\n>>> count_prime_factors(1000000)\n2\n>>> count_prime_factors(1200000)\n2\n>>> count_prime_factors(1500000)\n3\n>>> count_prime_factors(2000000)\n2\n>>> count_prime_factors(3000000)\n3\n>>> count_prime_factors(4000000)\n2\n>>> count_prime_factors(5000000)\n2\n>>> count_prime_factors(6000000)\n3\n>>> count_prime_factors(7000000)\n2\n>>> count_prime_factors(8000000)\n2\n>>> count_prime_factors(9000000)\n3\n>>> count_prime_factors(10000000)\n2\n>>> count_prime_factors(12000000)\n2\n>>> count_prime_factors(15000000)\n3\n>>> count_prime_factors(20000000)\n2\n>>> count_prime_factors(25000000)\n3\n>>> count_prime_factors(30000000)\n3\n>>> count_prime_factors(40000000)\n2\n>>> count_prime_factors(50000000)\n2\n>>> count_prime_factors(60000000)\n3\n>>> count_prime_factors(70000000)\n2\n>>> count_prime_factors(80000000)\n2\n>>> count_prime_factors(90000000)\n3\n>>> count_prime_factors(100000000)\n2\n>>> count_prime_factors(1200000000)\n2\n>>> count_prime_factors(1500000000)\n3\n>>> count_prime_factors(200000000)\n2\n>>> count_prime_factors(2500000000)\n3\n>>> count_prime_factors(30000000000)\n3\n>>> count_prime_factors(40000000000)\n2\n>>> count_prime_factors(50000000000)\n2\n>>> count_prime_factors(60000000000)\n3\n>>> count_prime_factors(70000000000)\n2\n>>> count_prime_factors(80000000000)\n2\n>>> count_prime_factors(90000000000)\n3\n>>> count_prime_factors(1000000000000)\n2\n>>> count_prime_factors(1200000000000)\n2\n>>> count_prime_factors(1500000000000)\n3\n>>> count_prime_factors(20000000000)\n2\n>>> count_prime_factors(2500000000000)\n3\n>>> count_prime_factors(30000000000000)\n3\n>>> count_prime_factors(40000000000000)\n2\n>>> count_prime_factors(50000000000000)\n2\n>>> count_prime_factors(60000000000000)\n3\n>>> count_prime_factors(70000000000000)\n2\n>>> count_prime_factors(80000000000000)\n2\n"}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function that sums num bersfrom 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 0, "perturbed": true, "gc": "/*\nsum_to_n is a function that sums num bersfrom 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    while (n > 0){\n        sum += n;\n        n = n - 1;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    printf(\"Enter the number: \");\n    scanf(\"%d\", &n);\n    printf(\"The sum of %d is: %d\\n\", n, sum_to_n(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of '(' and ')'. \nretu rn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of '(' and ')'. \nretu rn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    bool ret=true;\n    for(int i=0;i<brackets.size()-1;i++){\n        if(brackets[i]=='(' && brackets[i+1]==')'){\n            i++;\n            continue;\n        }\n        else{\n            ret=false;\n            break;\n        }\n    }\n    return ret;\n}\nint main(){\n    string brackets=\"(())((()))\";\n    bool ans=correct_bracketing(brackets);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/62", "prompt": "/*\nxs represent coefficients of a polyn omial .\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this poly nomia l in th e  same f orm.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/*\nxs represent coefficients of a polyn omial.\nxs{0} + xs{1} * x + xs{2} * x^2 +....\n Return derivative of this poly nomia l in th e  same f orm.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> ans(xs.size()+1);\n    for(int i=0;i<xs.size();i++){\n        ans[i+1]=xs[i]*(i+1);\n    }\n    return ans;\n}\nint main(){\n    vector<float> xs;\n    while(scanf(\"%f\",&xs[0])==1){\n        xs.push_back(xs[0]);\n    }\n    vector<float> ans=derivative(xs);\n    for(int i=0;i<ans.size();i++){\n        printf(\"%f \",ans[i]);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequ encesimilar to the Fibbonacci sequnecethat's defined as follows:\nfibfib(0)== 0fibfib( 1 ) == 0fibfib(2)  == 1\nfibfib(n) == fibfib(n- 1)+ fibfib(n-2)+ fibfib(n-3) .\nPlease write a functiontoefficiently computet he n-t h element o f the f ibfib num ber sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*\nThe FibFib number sequence is a sequ encesimilar to the Fibbonacci sequnecethat's defined as follows:\nfibfib(0)== 0fibfib( 1 ) == 0fibfib(2)  == 1\nfibfib(n) == fibfib(n- 1)+ fibfib(n-2)+ fibfib(n-3).\nPlease write a functiontoefficiently computet he n-t h element o f the f ibfib num ber sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n\tint f1=0,f2=1,sum;\n\tif(n==0){\n\t\treturn f1;\n\t}\n\telse if(n==1){\n\t\treturn f2;\n\t}\n\telse{\n\t\twhile(n>1){\n\t\t\tsum=f2+f1;\n\t\t\tf1=f2;\n\t\t\tf2=sum;\n\t\t\tn--;\n\t\t}\n\t\treturn f2;\n\t}\n}\nint main(){\n\tint n;\n\tprintf(\"Enter the number: \");\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\",fibfib(n));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowels_count whichtakes  a string representing a word as input and returns the number of vowelsin th e strin g . Vowel s in this  case are 'a', 'e', 'i', 'o' , ' u'. \nHere, 'y'  is also a vo wel, but only when it is a t the end of the givenw ord.\nE xample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function vowels_count whichtakes  a string representing a word as input and returns the number of vowelsin th e strin g. Vowel s in this  case are 'a', 'e', 'i', 'o','u'. \nHere, 'y'  is also a vo wel, but only when it is a t the end of the givenw ord.\nE xample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    int t;\n    cin>>t;\n    while(t--){\n        string s;\n        cin>>s;\n        cout<<vowels_count(s)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the digits of the int egerx, shift the digits right by shiftand return the resultas a string.\nIf  shif t > num b er of d igits, re turn digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 0, "perturbed": true, "gc": "/*\nCircular shift the digits of the int egerx, shift the digits right by shiftand return the resultas a string.\nIf  shif t > num b er of d igits, re turn digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string s;\n    s.clear();\n    while(x > 0){\n        s.insert(0,x%10);\n        x = x/10;\n    }\n    for(int i=0;i<shift;i++){\n        s.insert(0,s[0]);\n    }\n    return s;\n}\nint main(){\n    int n;\n    while(scanf(\"%d\",&n)!=EOF){\n        if(n==0)break;\n        string s = circular_shift(n,n);\n        printf(\"%s\\n\",s.c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/66", "prompt": "/*\nTask\nWrite a function that takes a s tring  as input and returns the sum of the upper characters only's\nASCII codes .\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*\nTask\nWrite a function that takes a s tring  as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(int i = 0; i<s.length(); i++){\n        sum += s[i] - 'A';\n    }\n    return sum;\n}\nint main(){\n    string s;\n    while(cin>>s){\n        int sum = digitSum(s);\n        cout<<sum<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will be given a st ringthat represents a number of applesand oranges \nthat aredistributed ina bas ket off ruit th is basket  contains apples, oranges,and  mango fruits.  Given the st ring that represents the t otal numberof \nthe ora n ges an d apples an d an in teger tha t represent the total number  of the fruits \nin thebasket return the number of  the mangofr u its in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 0, "perturbed": true, "gc": "/*\nIn this task, you will be given a st ringthat represents a number of applesand oranges \nthat aredistributed ina bas ket off ruit th is basket  contains apples, oranges,and  mango fruits.  Given the st ring that represents the t otal numberof \nthe ora n ges an d apples an d an in teger tha t represent the total number  of the fruits \nin thebasket return the number of  the mangofr u its in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    int num=0;\n    for(int i=0;i<s.size();i++){\n        if(s[i]=='a'){\n            num++;\n        }else{\n            num++;\n        }\n    }\n    return n-num;\n}\nint main(){\n    int n;\n    string s;\n    while(cin>>s&&s.size()){\n        cin>>n;\n        cout<<fruit_distribution(s,n)<<endl;\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector representing a branch  of a  tree that has non-negative integer nodes\nyour task is to pluck one of t he no des and returnit.\nThe p lucked node should be the no dewith the small est even valu e.\nIf multiple nodes withthe same smallest evenv alue a re found re turn th e node th athassmallest index.\nTheplucked node should bereturned in a vector, { sma lest_value,  i t s index },\nIf there are no e venvalues or th e given vec tor  is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector representing a branch  of a  tree that has non-negative integer nodes\nyour task is to pluck one of t he no des and returnit.\nThe p lucked node should be the no dewith the small est even valu e.\nIf multiple nodes withthe same smallest evenv alue a re found re turn th e node th athassmallest index.\nTheplucked node should bereturned in a vector, { sma lest_value,  i t s index },\nIf there are no e venvalues or th e given vec tor  is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> res;\n    if(arr.empty()){\n        return res;\n    }\n    sort(arr.begin(), arr.end());\n    int index = arr.size()-1;\n    for(int i = 0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0){\n            res.push_back(arr[i]);\n            break;\n        }\n        index--;\n    }\n    return res;\n}\n\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> arr(n);\n        for(int i = 0; i<n; i++){\n            scanf(\"%d\", &arr[i]);\n        }\n        vector<int> res = pluck(arr);\n        if(res.empty()){\n            printf(\"{}\\n\");\n        }else{\n            printf(\"{%d, %d}\\n\", res[0], res[1]);\n        }\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non-empty vector ofposit ive integers. Return the greatest integer that is greater than \nzero, an d has  a freq u ency gr eater tha n or equalto the value of t heinteger itself . \nThe freque ncy of an integeris the n umber of times it appea r s in t he vector.If no s uch a val ueexist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a non-empty vector ofposit ive integers. Return the greatest integer that is greater than \nzero, an d has  a freq u ency gr eater tha n or equalto the value of t heinteger itself. \nThe freque ncy of an integeris the n umber of times it appea r s in t he vector.If no s uch a val ueexist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int index=0, flag=0;\n    int target=lst[index];\n    while(lst[index]>0){\n        if(lst[index]==target){\n            return target;\n        }\n        index++;\n    }\n    return -1;\n}\n\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n;\n        scanf(\"%d\",&n);\n        vector<int> lst(n);\n        for(int i=0;i<n;i++){\n            scanf(\"%d\",&lst[i]);\n        }\n        int res=search(lst);\n        if(res==-1){\n            printf(\"NO\\n\");\n        }else{\n            printf(\"%d\\n\",res);\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vec tor i n strange order.\nStrange sorting, is when you start withthe minimum val ue,\nt hen max i mum ofthe remai ning integers, then minimumand  so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 0, "perturbed": true, "gc": "/*\nGiven vector of integers, return vec tor i n strange order.\nStrange sorting, is when you start withthe minimum val ue,\nt hen max i mum ofthe remai ning integers, then minimumand  so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n\tvector<int> res;\n\tif(lst.size()<2){\n\t\treturn lst;\n\t}\n\tres.push_back(lst[0]);\n\tint min_index = 0;\n\tfor(int i=1;i<lst.size();i++){\n\t\tif(lst[i]<lst[min_index]){\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\tres.push_back(lst[min_index]);\n\tfor(int i=min_index+1;i<lst.size();i++){\n\t\tif(lst[i]>lst[min_index]){\n\t\t\tres.push_back(lst[i]);\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> lst;\n\tfor(int i=0;i<n;i++){\n\t\tint tmp;\n\t\tscanf(\"%d\",&tmp);\n\t\tlst.push_back(tmp);\n\t}\n\tvector<int> res = strange_sort_list(lst);\n\tfor(int i=0;i<res.size();i++){\n\t\tprintf(\"%d \",res[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides  of a  triangle. Return the area of\nthe triangle rounded to 2 decimal points i f the  threes ides fo rm a vali d triangle. \nOtherwise retur n - 1\nThree sidesmake a validtriangle when thesum of a nytwo sides is greater \nthanthe third s ide.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides  of a  triangle. Return the area of\nthe triangle rounded to 2 decimal points i f the  threes ides fo rm a vali d triangle. \nOtherwise retur n - 1\nThree sidesmake a validtriangle when thesum of a nytwo sides is greater \nthanthe third s ide.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s, area;\n\ts = (a+b+c)/2;\n\tarea = sqrt(s*(s-a)*(s-b)*(s-c));\n\treturn area;\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Enter the values of a,b,c:\");\n\tscanf(\"%f%f%f\",&a,&b,&c);\n\tprintf(\"The area of triangle is %.2f\",triangle_area(a,b,c));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that returns true i f the  object q will fly, and false otherwise.\nThe object q will fly if it's b alanc ed (iti s a pal indromicvector) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that returns true i f the  object q will fly, and false otherwise.\nThe object q will fly if it's b alanc ed (iti s a pal indromicvector) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    int max_weight=0;\n    for(int i=0;i<q.size();i++){\n        max_weight+=q[i];\n    }\n    for(int i=0;i<q.size();i++){\n        if(q[i]>w){\n            max_weight-=q[i];\n        }\n    }\n    if(max_weight<=w&&is_palindrome(q)){\n        return true;\n    }\n    return false;\n}\nbool is_palindrome(vector<int> q){\n    int len=q.size();\n    int l=0,r=len-1;\n    while(l<r){\n        if(q[l]!=q[r]){\n            return false;\n        }\n        l++;\n        r--;\n    }\n    return true;\n}\nint main(){\n    int t,w;\n    vector<int> q;\n    scanf(\"%d\",&t);\n    while(t--){\n        scanf(\"%d\",&w);\n        for(int i=0;i<w;i++){\n            int v;\n            scanf(\"%d\",&v);\n            q.push_back(v);\n        }\n        if(will_it_fly(q,w)){\n            printf(\"Yes\\n\");\n        }\n        else{\n            printf(\"No\\n\");\n        }\n        q.clear();\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, find  theminimum number of elements that\nneed to be changed to make the vector pa lindr omic. A palindr omic vect or is a vector that\nis readthe  same backward s and forward s. In one change,you canchange one element to a n y othe r element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector arr of integers, find  theminimum number of elements that\nneed to be changed to make the vector pa lindr omic. A palindr omic vect or is a vector that\nis readthe  same backward s and forward s. In one change,you canchange one element to a n y othe r element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int min_len = arr.size();\n    int ans = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] < arr[i + 1])\n            min_len--;\n        else{\n            ans++;\n        }\n    }\n    return ans < min_len? ans : 0;\n}\nint main(){\n    vector<int> arr;\n    arr.push_back(1);\n    arr.push_back(2);\n    arr.push_back(3);\n    arr.push_back(5);\n    arr.push_back(4);\n    arr.push_back(7);\n    arr.push_back(9);\n    arr.push_back(6);\n    printf(\"%d\\n\", smallest_change(arr));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/74", "prompt": "/*\nWrite a function that accepts two ve ctors  of stringsand returns the vectorthat has \ntotal number of chars in th e all  string s  of the  vector l ess than the other vector.\nifthe two vector s have the sa me number of chars, return  the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts two ve ctors  of stringsand returns the vectorthat has \ntotal number of chars in th e all  string s  of the  vector l ess than the other vector.\nifthe two vector s have the sa me number of chars, return  the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int len=0;\n    for(int i=0;i<lst1.size();i++){\n        len+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++){\n        len+=lst2[i].size();\n    }\n    vector<string> ret;\n    if(len==lst1.size()){\n        ret=lst1;\n    }else if(len==lst2.size()){\n        ret=lst2;\n    }else{\n        ret.clear();\n    }\n    return ret;\n}\nint main(){\n    vector<string> lst1,lst2;\n    string str1,str2;\n    while(cin>>str1){\n        lst1.push_back(str1);\n    }\n    while(cin>>str2){\n        lst2.push_back(str2);\n    }\n    cout<<total_match(lst1,lst2)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returns true i f the  given number is the multiplication of 3 prime numbers\nand false otherwi se.\nK nowingt hat (a)  is lessthen 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that returns true i f the  given number is the multiplication of 3 prime numbers\nand false otherwi se.\nK nowingt hat (a)  is lessthen 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n\tint i,j,k,l,n;\n\tl=2;\n\twhile(l<=a/2){\n\t\tk=3;\n\t\twhile(k*k<=a){\n\t\t\tif(a%k==0){\n\t\t\t\tl=a/k;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tk+=2;\n\t\t}\n\t\tif(l==a/k){\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(l>a/2)\n\t\treturn false;\n\telse{\n\t\tn=a/l;\n\t\tfor(i=3;i<=n;i++){\n\t\t\tif(n%i==0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\nint main(){\n\tint n;\n\tprintf(\"Enter number: \");\n\tscanf(\"%d\",&n);\n\tif(is_multiply_prime(n))\n\t\tprintf(\"%d is a multiply prime number\",n);\n\telse\n\t\tprintf(\"%d is not a multiply prime number\",n);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function tha t ret urns true if a number x is a simple\npower of n and falsein other cases. \nx is  a simp l e power  of n ifn**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 0, "perturbed": true, "gc": "/*\nYour task is to write a function tha t ret urns true if a number x is a simple\npower of n and falsein other cases. \nx is  a simp l e power  of n ifn**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    int x1=x;\n    int n1=n;\n    while(x1>0){\n        if(x1%n1!=0)\n            return false;\n        x1/=n1;\n        n1=n1/2;\n    }\n    return true;\n}\n\nint main(){\n    int x;\n    while(scanf(\"%d\",&x)==1){\n        if(is_simple_power(x,2))\n            printf(\"simple power\\n\");\n        else\n            printf(\"not simple power\\n\");\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/77", "prompt": "/*\nWrite a function that takes an integ er aand returnstrue \nif this ingeger is a cube of some integer number.\nNote : you  may as s ume the  input is  always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes an integ er aand returnstrue \nif this ingeger is a cube of some integer number.\nNote : you  may as s ume the  input is  always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n    return (a == pow(a,1/3));\n}\nint main()\n{\n    int a;\n    while(scanf(\"%d\",&a)!=EOF){\n        if(iscuber(a))\n            printf(\"%d is a cube of some integer\\n\",a);\n        else\n            printf(\"%d is not a cube of some integer\\n\",a);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a func tionthat receives \na hexadecimal number as a string and counts the number of  hexa decimal \ndigits  that are  primes (prime number, or apri me, is a natur al number \ngr eater than 1 thatis not a  product oftwo smaller natura l numbers). \nHexade cimal dig its are 0, 1, 2, 3, 4, 5, 6,  7, 8, 9, A, B, C, D, E , F.\nPrime numbers are 2, 3 , 5, 7,11,  1 3 , 17,...\nSo you have to dete rmine a numbero f the follo win g digits: 2, 3, 5, 7, \nB (=decimal  11), D(=decimal 13).\nN ote : you m ay  assume th einput is always correct or e mp ty string, \nand symbols A,B,C,D,E,F are  al ways uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 0, "perturbed": true, "gc": "/*\nYou have been tasked to write a func tionthat receives \na hexadecimal number as a string and counts the number of  hexa decimal \ndigits  that are  primes (prime number, or apri me, is a natur al number \ngr eater than 1 thatis not a  product oftwo smaller natura l numbers). \nHexade cimal dig its are 0, 1, 2, 3, 4, 5, 6,  7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7,11,  1 3, 17,...\nSo you have to dete rmine a numbero f the follo win g digits: 2, 3, 5, 7, \nB (=decimal  11), D(=decimal 13).\nN ote : you m ay  assume th einput is always correct or e mp ty string, \nand symbols A,B,C,D,E,F are  al ways uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n\tint key = 0;\n\tfor(int i = 0; i < num.size(); i++){\n\t\tkey = key + (num[i] - '0') * (int)pow(10, (num.size() - i - 1));\n\t}\n\treturn key;\n}\nint main(){\n\tstring num;\n\twhile(cin >> num){\n\t\tint num_key = hex_key(num);\n\t\tint num_primes = 0;\n\t\tfor(int i = 2; i <= num_key; i++){\n\t\t\tif(num_key % i == 0){\n\t\t\t\tnum_primes++;\n\t\t\t}\n\t\t}\n\t\tcout << num_primes << endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decima l for m and your task is to convert it to\nbinary format. The function should r eturn  a stri n g, with  each cha racter representing a binary \nnu mber. Each cha racter in the  string will be '0' or '1' .\nThere will be an ext r a coup le of chara cters \" db\" at th e beginning and at the endo f the string.The extra  characters are there to he lp withthe  f o rmat.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a number in decima l for m and your task is to convert it to\nbinary format. The function should r eturn  a stri n g, with  each cha racter representing a binary \nnu mber. Each cha racter in the  string will be '0' or '1'.\nThere will be an ext r a coup le of chara cters \" db\" at th e beginning and at the endo f the string.The extra  characters are there to he lp withthe  f o rmat.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n\tint m=decimal;\n\tint i=0,s=0;\n\tchar temp[32];\n\twhile(m>0){\n\t\ttemp[i++]=(char)(m%2+'0');\n\t\tm=m/2;\n\t}\n\ttemp[i++]='b';\n\ttemp[i++]='0';\n\ttemp[i++]='d';\n\ttemp[i++]='b';\n\treturn string(temp,i-1);\n}\n\nint main(){\n\tint decimal,binary;\n\tstring str;\n\tprintf(\"Enter the number to be converted to binary format\\n\");\n\tscanf(\"%d\",&decimal);\n\tstr=decimal_to_binary(decimal);\n\tprintf(\"The binary format is :%s\",str.c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour taskis to  check if the string is happy or not.\nA string is happy if its length is  at l east 3a nd ever y 3 conse cutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nYour taskis to  check if the string is happy or not.\nA string is happy if its length is  at l east 3a nd ever y 3 conse cutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3) return false;\n    int count[26] = {0};\n    int i;\n    for(i=0;i<s.length()-1;i++){\n        if(s[i] == s[i+1]) count[s[i]]++;\n        else count[s[i]] = 0;\n    }\n    if(count[s[i]] == 0) return false;\n    else return true;\n}\nint main(){\n    string s;\n    while(getline(cin,s)){\n        printf(\"%s is %s\\n\",s.c_str(),is_happy(s)? \"happy\" : \"unhappy\");\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last week of the semesterand t he teacher has to give the grades\nto students. The teacher has been maki ng he r own a l gorithm  for grad ing.\nThe only problem is, sh e h as lost the co de she used f or grading.\nShe has givenyou a vector of GPAs fo r  somestudents an d you h ave to wr ite \nafunction that canout put a vector of lettergrades using the followingtable:\n    GPA       |    Letter grad e\n        4.0             A+\n        > 3.7               A  \n       > 3.3            A-\n      > 3 .0                 B+\n        >  2 .7              B \n        > 2.3              B-\n       > 2.0               C+\n        > 1.7           C\n      > 1.3                C-\n     > 1.0               D+  \n        > 0.7             D \n     > 0.0               D-\n         0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 0, "perturbed": true, "gc": "/*\nIt is the last week of the semesterand t he teacher has to give the grades\nto students. The teacher has been maki ng he r own a l gorithm  for grad ing.\nThe only problem is, sh e h as lost the co de she used f or grading.\nShe has givenyou a vector of GPAs fo r  somestudents an d you h ave to wr ite \nafunction that canout put a vector of lettergrades using the followingtable:\n    GPA       |    Letter grad e\n        4.0             A+\n        > 3.7               A  \n       > 3.3            A-\n      > 3.0                 B+\n        >  2.7              B \n        > 2.3              B-\n       > 2.0               C+\n        > 1.7           C\n      > 1.3                C-\n     > 1.0               D+  \n        > 0.7             D \n     > 0.0               D-\n         0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> grade_equation;\n    int max = grades.size()-1;\n    for(int i=0; i<max; i++)\n    {\n        float grade = grades[i];\n        if(grade>=3.7)\n        {\n            grade_equation.push_back(\"A+\");\n        }\n        if(grade>=3.3)\n        {\n            grade_equation.push_back(\"A\");\n        }\n        else if(grade>=3.0)\n        {\n            grade_equation.push_back(\"A-\");\n        }\n        if(grade>=2.7)\n        {\n            grade_equation.push_back(\"B+\");\n        }\n        else if(grade>=2.3)\n        {\n            grade_equation.push_back(\"B\");\n        }\n        else if(grade>=2.0)\n        {\n            grade_equation.push_back(\"C-\");\n        }\n        else if(grade>=1.7)\n        {\n            grade_equation.push_back(\"C\");\n        }\n        else if(grade>=1.3)\n        {\n            grade_equation.push_back(\"C+\");\n        }\n        else if(grade>=1.0)\n        {\n            grade_equation.push_back(\"D-\");\n        }\n        else if(grade>=0.7)\n        {\n            grade_equation.push_back(\"D\");\n        }\n        else if(grade>=0.0)\n        {\n            grade_equation.push_back(\"D+\");\n        }\n        else\n        {\n            grade_equation.push_back(\"E\");\n        }\n    }\n    grade_equation.push_back(\"E\");\n    return grade_equation;\n}\nint main()\n{\n    vector<float> grades = {4.0, 3, 1.7, 2, 3.5};\n    vector<string> grades_equation = numerical_letter_grade(grades);\n    for(int i=0; i<grades_equation.size(); i++)\n    {\n        printf(\"%s\\n\", grades_equation[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes a string  andreturns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a string  andreturns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n\tif(str.length() < 2) return false;\n\tbool prime = true;\n\tfor(int i = 2; i < str.length(); i++){\n\t\tint j = i;\n\t\tfor(; j < str.length(); j++){\n\t\t\tif(str[j] == str[i-1]){\n\t\t\t\tprime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(prime == true) break;\n\t}\n\treturn prime;\n}\nint main(){\n\tstring str;\n\twhile(cin >> str){\n\t\tif(prime_length(str)) printf(\"%s is prime.\\n\", str.c_str());\n\t\telse printf(\"%s is not prime.\\n\", str.c_str());\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/83", "prompt": "/*\nGiven a positive integer n, return t he co unt of the numbers of n-digit\npositive integers that start or end with 1 .\n*/#includ e <stdio. h>\nusingnamespace std;\nint starts_on e_e nds(int n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return t he co unt of the numbers of n-digit\npositive integers that start or end with 1.\n*/#includ e <stdio. h>\nusingnamespace std;\nint starts_on e_e nds(int n){\n\tint i,t;\n\tif(n<=0)return 0;\n\telse{\n\t\tt=0;\n\t\tfor(i=1;i<=n/10;i++)t+=starts_on(n/10*10+i);\n\t\treturn t+starts_on(n%10);\n\t}\n}\n\nint main(){\n\tint n;\n\tcin>>n;\n\tcout<<nds(n);\n}\n<|endoftext|>"}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive integer N, return t he to tal sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer N, return t he to tal sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string num = \"\";\n    while(N > 0){\n        num = num + (char)(N%2+'0');\n        N = N/2;\n    }\n    return num;\n}\nint main(){\n    int T, N;\n    cin>>T;\n    while(T--){\n        cin>>N;\n        cout<<solve(N)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non-empty vector of integers  lst.  add the even elements that are atodd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non-empty vector of integers  lst.  add the even elements that are atodd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i+=2){\n        sum += lst[i];\n    }\n    return sum;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> lst;\n    for(int i = 0; i < n; i++){\n        int temp;\n        scanf(\"%d\", &temp);\n        lst.push_back(temp);\n    }\n    printf(\"%d\", add(lst));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes a string  andreturns an ordered version of it.\nOrdered version of string, is a string  wher e all w o rds (se parated b y space)\nare replaced by a n ewword where all  the characte rs arranged in\nascending o rder based on ascii val u e.\nNot e: You shou ld keep  the orde r of words and blank spacesin the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a string  andreturns an ordered version of it.\nOrdered version of string, is a string  wher e all w o rds (se parated b y space)\nare replaced by a n ewword where all  the characte rs arranged in\nascending o rder based on ascii val u e.\nNot e: You shou ld keep  the orde r of words and blank spacesin the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n\tstring temp = \"\";\n\tint i=0;\n\tint j=s.length()-1;\n\twhile(i<j){\n\t\twhile(i<j &&!isalpha(s[i])){\n\t\t\ti++;\n\t\t}\n\t\twhile(i<j &&!isalpha(s[j])){\n\t\t\tj--;\n\t\t}\n\t\tif(i<j){\n\t\t\ttemp += s[i];\n\t\t\ttemp += s[j];\n\t\t\ttemp += \" \";\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\treturn temp;\n}\nint main(){\n\tstring s = \"Hi\";\n\tstring temp = anti_shuffle(s);\n\tcout << \"String after anti_shuffle\" << s << endl;\n\tcout << \"String after anti_shuffle\" << temp << endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimensional data,as anested vectors,\nwhich is similar to matrix, however, unlike matrices,\nea ch ro w may c o ntain a  differen t number of columns.\nGiven l st,  and integer x , find intege rs x in the vector,\nand re turn vectorof vectors, {{x1,y1}, {x2, y 2} ...}  such tha t\neachvector is a coordinat e - {row, columns}, sta rting with 0.\nSort coordina tes initial ly by rows in ascending order.Also, sort coord inates of t herow by columns in descending order .\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a 2 dimensional data,as anested vectors,\nwhich is similar to matrix, however, unlike matrices,\nea ch ro w may c o ntain a  differen t number of columns.\nGiven l st,  and integer x, find intege rs x in the vector,\nand re turn vectorof vectors, {{x1,y1}, {x2, y 2}...}  such tha t\neachvector is a coordinat e - {row, columns}, sta rting with 0.\nSort coordina tes initial ly by rows in ascending order.Also, sort coord inates of t herow by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> rst;\n    if(lst.size() == 0){\n        return rst;\n    }\n    int n = lst.size();\n    int m = lst[0].size();\n    vector<int> row;\n    for(int i = 0; i < n; i++){\n        row.clear();\n        for(int j = 0; j < m; j++){\n            row.push_back(lst[i][j]);\n        }\n        row.push_back(x);\n        rst.push_back(row);\n    }\n    return rst;\n}\nint main(){\n    vector<vector<int>> v = {{1,2,3,4,5,6},{1,2,3,4,1,6},{1,2,3,4,5,1}};\n    vector<vector<int>> r = get_row(v, 3);\n    for(int i = 0; i < r.size(); i++){\n        for(int j = 0; j < r[i].size(); j++){\n            printf(\"%d \", r[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non-negative integ ers,return a copy of the given vector after sorting,\nyou will sort the given  vect or in a s cending  order if  the sum( first index value,  la st index value ) is odd,\norsort it in descending orde r if the sum( first ind e x valu e, last ind ex valu e) is eve n.\nNote:\n* don't changethe  given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of non-negative integ ers,return a copy of the given vector after sorting,\nyou will sort the given  vect or in a s cending  order if  the sum( first index value,  la st index value ) is odd,\norsort it in descending orde r if the sum( first ind e x valu e, last ind ex valu e) is eve n.\nNote:\n* don't changethe  given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n\tint i,j;\n\tvector<int>array_temp(array);\n\tfor(i=0;i<array_temp.size()-1;i++){\n\t\tfor(j=i+1;j<array_temp.size();j++){\n\t\t\tif(array_temp[i]+array_temp[j]==0){\n\t\t\t\tswap(array_temp[i],array_temp[j]);\n\t\t\t}\n\t\t\telse if(array_temp[i]+array_temp[j]%2==1){\n\t\t\t\tswap(array_temp[i],array_temp[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn array_temp;\n}\n\nint main(){\n\tvector<int> a{1,2,3,0,4,5,6,7,8,9};\n\tvector<int> a1=sort_array(a);\n\tfor(int i=0;i<a1.size();i++){\n\t\tprintf(\"%d \",a1[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takes  a st ring as an argument and\nreturns a string encrypted with the alphabet bei ng ro tated.The alp habet sho uld be rotated in a manner s uch  that the lett ers \nshift do wn by two multiplied to tw o places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function encrypt that takes  a st ring as an argument and\nreturns a string encrypted with the alphabet bei ng ro tated.The alp habet sho uld be rotated in a manner s uch  that the lett ers \nshift do wn by two multiplied to tw o places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n  string ret=\"\";\n  for(int i=0;i<s.length();i++){\n    int a=s[i];\n    if(a<97)a+=26;\n    if(a>122)a-=26;\n    ret+=a;\n  }\n  return ret;\n}\n\nint main(){\n  string a=\"hello\";\n  cout<<encrypt(a);\n  return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers.Write  a functionnext_smallest() that returns the 2nd smallest element of the  vect or.\nRet u rn None  if there  is no such element.\n\nnext_s mal lest({1, 2, 3,  4, 5}) == 2next_smallest({5,1, 4, 3,  2}) == 2\nnext_smallest ( {}) ==  None\nnext_ smalles t({1, 1})  == None\n*/\n#include<stdio.h >\n#include<vector>\n#inc lude<algorithm>\nusing names pace std;\ni nt next_smallest(vector<int> ls t){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers.Write  a functionnext_smallest() that returns the 2nd smallest element of the  vect or.\nRet u rn None  if there  is no such element.\n\nnext_s mal lest({1, 2, 3,  4, 5}) == 2next_smallest({5,1, 4, 3,  2}) == 2\nnext_smallest ( {}) ==  None\nnext_ smalles t({1, 1})  == None\n*/\n#include<stdio.h >\n#include<vector>\n#inc lude<algorithm>\nusing names pace std;\ni nt next_smallest(vector<int> ls t){\n\tif (ls.empty()) return None;\n\tint x=ls[0];\n\tfor (i i =0; i<ls.size(); i++){\n\t\tif (ls[i]<x)\n\t\t\tx=ls[i];\n\t}\n\treturn x;\n}\nint main()\n{\n\tint x;\n\tvector<int> ls;\n\twhile (scanf(\"%d\", &x)!= EOF)\n\tls.push_back(x);\n\tcout<<next_smallest(ls)<<endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a string of words, a nd yo ur task is to count the number\nof boredoms. A boredom isa sentence that  star ts with the wor d \"I\".\nSe ntences are delimited by '.' , ' ?' or '!'.\n\nFo r example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 0, "perturbed": true, "gc": "/*\nYou'll be given a string of words, a nd yo ur task is to count the number\nof boredoms. A boredom isa sentence that  star ts with the wor d \"I\".\nSe ntences are delimited by '.', '?' or '!'.\n\nFo r example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count=0;\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='I')\n            count++;\n    }\n    return count;\n}\n\nint main(){\n    string S;\n    while(getline(cin,S)){\n        cout<<is_bored(S)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takes 3 numbe rs.\nR eturns trueif one of the numbers is equal to the sum ofthe other two,and a ll numb e rs areintegers. \nReturns false in any othercas es.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes 3 numbe rs.\nR eturns trueif one of the numbers is equal to the sum ofthe other two,and a ll numb e rs areintegers. \nReturns false in any othercas es.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n\tif(a==(a+b) && a==(a+c) && a==(b+c)){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Enter any three numbe rs:\\n\");\n\tprintf(\"1) \");\n\tscanf(\"%f\",&a);\n\tprintf(\"2) \");\n\tscanf(\"%f\",&b);\n\tprintf(\"3) \");\n\tscanf(\"%f\",&c);\n\tif(any_int(a,b,c)){\n\t\tprintf(\"%f is an integer.\",a);\n\t}\n\telse{\n\t\tprintf(\"%f is not an integer.\",a);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/93", "prompt": "/*\nWrite a function that takes a messag e, an d encodes in such a \nway that it swaps case of all letters, replaces all  vowe ls in t he mess age withthe letterthat appears 2 pl ace s ahead of tha t \nvowel in t he english alphabet. \nAssu meonly letters. \n\nExam p les:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a messag e, an d encodes in such a \nway that it swaps case of all letters, replaces all  vowe ls in t he mess age withthe letterthat appears 2 pl ace s ahead of tha t \nvowel in t he english alphabet. \nAssu meonly letters. \n\nExam p les:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string encoded = \"\";\n    for(int i = 0; i < message.size(); i++){\n        if(message[i] >= 'A' && message[i] <= 'Z'){\n            encoded += message[i] + ((message[i] - 'A')+2);\n        }\n        else if(message[i] >= 'a' && message[i] <= 'z'){\n            encoded += message[i] + ((message[i] - 'a')+2);\n        }\n        else{\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main(){\n    string message = \"This is a message\";\n    cout<<encode(message)<<endl;\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers.You n eed to findthe largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers.You n eed to findthe largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int i,j,max;\n    for(i=0;i<lst.size();i++){\n        for(j=lst.at(i);j>=10;j=j/10){\n            max=max(max,j);\n        }\n    }\n    return max;\n}\nint main(){\n    vector<int> lst;\n    int n;\n    while(scanf(\"%d\",&n)!=EOF){\n        lst.push_back(n);\n    }\n    int ans=skjkasdkd(lst);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true if all keys  arestrings in lower \ncase or all keysare strings in upper case, else retur n fal se.\nThe functio n shouldreturn false is the given ma p i s empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 0, "perturbed": true, "gc": "/*\nGiven a map, return true if all keys  arestrings in lower \ncase or all keysare strings in upper case, else retur n fal se.\nThe functio n shouldreturn false is the given ma p i s empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n\tstring key;\n\tstring value;\n\tfor(auto &e:dict){\n\t\tkey=e.first;\n\t\tvalue=e.second;\n\t\tif(key.size()!=value.size()){\n\t\t\treturn false;\n\t\t}\n\t\tfor(int i=0;i<key.size();i++){\n\t\t\tif(key[i]>='A'&&key[i]<='Z'){\n\t\t\t\tkey[i]=key[i]+32;\n\t\t\t}\n\t\t\tif(value[i]>='A'&&value[i]<='Z'){\n\t\t\t\tvalue[i]=value[i]+32;\n\t\t\t}\n\t\t}\n\t\tif(key!=value){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint T;\n\tcin>>T;\n\tfor(int i=0;i<T;i++){\n\t\tint n;\n\t\tcin>>n;\n\t\tmap<string,string> dict;\n\t\tfor(int j=0;j<n;j++){\n\t\t\tstring key;\n\t\t\tstring value;\n\t\t\tcin>>key>>value;\n\t\t\tdict[key]=value;\n\t\t}\n\t\tbool result=check_dict_case(dict);\n\t\tif(result)\n\t\t\tcout<<\"true\"<<endl;\n\t\telse\n\t\t\tcout<<\"false\"<<endl;\n\t}\n}<|endoftext|>"}
{"task_id": "CPP/96", "prompt": "/*\nImplement a function that takes an n on-ne gative integer and returns a vector of the first n\nintegers that are pri me nu mbers a n d lessthan n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 0, "perturbed": true, "gc": "/*\nImplement a function that takes an n on-ne gative integer and returns a vector of the first n\nintegers that are pri me nu mbers a n d lessthan n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n\tvector<int> r;\n\tfor(int i = 2; i <= n; i++){\n\t\tr.push_back(i);\n\t}\n\treturn r;\n}\n\nvoid print_vector(vector<int> v){\n\tfor(int i = 0; i < v.size(); i++){\n\t\tprintf(\"%d \", v[i]);\n\t}\n\tprintf(\"\\n\");\n}\n\nint main(){\n\tprint_vector(count_up_to(5));\n\tprint_vector(count_up_to(11));\n\tprint_vector(count_up_to(0));\n\tprint_vector(count_up_to(20));\n\tprint_vector(count_up_to(1));\n\tprint_vector(count_up_to(18));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that takes two  inte gers and returns \nthe product of their unit digits.\nAssume the input isalway s valid . \nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*\nComplete the function that takes two  inte gers and returns \nthe product of their unit digits.\nAssume the input isalway s valid. \nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int c=0;\n    int d=0;\n    while(a>0){\n        c=a%10;\n        a=a/10;\n        d=b%10;\n        b=b/10;\n        c=c*d;\n    }\n    return c;\n}\nint main(){\n    int a,b;\n    printf(\"Enter two integers: \");\n    scanf(\"%d%d\",&a,&b);\n    printf(\"Product of %d and %d is %d\",a,b,multiply(a,b));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, count the number o f upp ercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string s, count the number o f upp ercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n\tint count = 0;\n\tfor(int i = 0; i<s.length();i++){\n\t\tif(isupper(s[i])){\n\t\t\tif(i%2 ==0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring s = \"aBCdEf\";\n\tint count = count_upper(s);\n\tprintf(\"%d\\n\",count);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/99", "prompt": "/*\nCreate a function that takes a value  (str ing) representing a number\nand returns the closest integer to it. If the  numb er is e q uidista nt\nfrom t wo integers, round it away f rom  zero.\n\nExampl es\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes a value  (str ing) representing a number\nand returns the closest integer to it. If the  numb er is e q uidista nt\nfrom t wo integers, round it away f rom  zero.\n\nExampl es\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n\tint base=pow(10,floor(log10(abs(atof(value.c_str())))));\n\tint n=atof(value.c_str());\n\tint nearest_integer = n/base;\n\tif(n%base==0)\n\t\treturn nearest_integer*base;\n\tif(n%base>0)\n\t\treturn nearest_integer*base+1;\n\telse\n\t\treturn nearest_integer*base-1;\n}\n\nint main(){\n\tstring value;\n\twhile(getline(cin,value))\n\t\tprintf(\"%d\\n\",closest_integer(value));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive integer n, you have  to m ake a pile of n levels of stones.\nThe first level has n stones.\nThe numb er of  stones in thenext leve l is:\n    - the next odd num ber  if n is odd.    - the nex t even number if n is even .\nReturn the number ofs tonesin each lev el in a  vector,where element at index\nirep resents the number of s tones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, you have  to m ake a pile of n levels of stones.\nThe first level has n stones.\nThe numb er of  stones in thenext leve l is:\n    - the next odd num ber  if n is odd.    - the nex t even number if n is even.\nReturn the number ofs tonesin each lev el in a  vector,where element at index\nirep resents the number of s tones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> pile;\n    int i=1;\n    while(i<=n){\n        int odd_num=n%2?(n-1)/2+1:n/2;\n        if(i<odd_num){\n            pile.push_back(i);\n            i+=2;\n        }\n        else{\n            pile.push_back(odd_num);\n            i+=1;\n        }\n    }\n    return pile;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> pile=make_a_pile(n);\n    for(int i=0;i<pile.size();i++){\n        printf(\"%d \",pile[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given a string of wordssepar ated by commas or spaces. Your task is\nto split the string into words an d ret urn a v e ctor of  the word s.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a string of wordssepar ated by commas or spaces. Your task is\nto split the string into words an d ret urn a v e ctor of  the word s.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n\tvector<string> strs;\n\tfor(int i=0;i<s.size();i++){\n\t\tstring word;\n\t\tint j=i;\n\t\twhile(j<s.size() && s[j]!=',' && s[j]!=' '){\n\t\t\tword+=s[j];\n\t\t\tj++;\n\t\t}\n\t\tstrs.push_back(word);\n\t\ti=j;\n\t}\n\treturn strs;\n}\nint main(){\n\tstring s;\n\tcin>>s;\n\tvector<string> v=words_string(s);\n\tfor(int i=0;i<v.size();i++){\n\t\tcout<<v[i]<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/102", "prompt": "/*\nThis function takes two positive num bersx and y andreturns the\nbiggest even integer number thatis in the range  [x,y] incl u sive. I f \nthere' s no such number, then the f unc tion should re turn -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes two positive num bersx and y andreturns the\nbiggest even integer number thatis in the range  [x,y] incl u sive. I f \nthere' s no such number, then the f unc tion should re turn -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n\tint ans=0;\n\tfor(int i=x;i<=y;i++){\n\t\tif((i%2)==0){\n\t\t\tans=i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tint a,b;\n\tprintf(\"Enter the first number: \");\n\tscanf(\"%d\",&a);\n\tprintf(\"Enter the second number: \");\n\tscanf(\"%d\",&b);\n\tint ans=choose_num(a,b);\n\tif(ans==-1)\n\t\tprintf(\"There is no number that is in the range [%d,%d] inclusive.\\n\",a,b);\n\telse\n\t\tprintf(\"The number is: %d\\n\",ans);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integersn and  m, and your task is to compute the\naverage of the integers from n throu gh m(includ i ng n an d m). \nRo und the answer to the neares t i nteger(smaller  one) and con vert that to binary.\nIf nisgreater than m, retu r n \"-1\" .\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two positive integersn and  m, and your task is to compute the\naverage of the integers from n throu gh m(includ i ng n an d m). \nRo und the answer to the neares t i nteger(smaller  one) and con vert that to binary.\nIf nisgreater than m, retu r n \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    if(n>m)\n        return \"n-1\";\n    int i;\n    int j=1,k=2,sum=0;\n    string str;\n    for(i=0;i<=m;i++){\n        sum+=i;\n        if(sum>=n){\n            str+=strconv(j);\n            sum-=j;\n            j=k;\n            k++;\n        }\n    }\n    str+=strconv(j);\n    return str;\n}\nint main(){\n    int n,m;\n    while(cin>>n>>m){\n        string str=rounded_avg(n,m);\n        cout<<str<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vector of positive integersx. re turn a sorted vector of all \nelements that hasn't any even digit.\n\nNote:  Retu rned ve c tor sho uld be so rted in increasing order.\n\nF orexample:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of positive integersx. re turn a sorted vector of all \nelements that hasn't any even digit.\n\nNote:  Retu rned ve c tor sho uld be so rted in increasing order.\n\nF orexample:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    vector<int>::iterator it;\n    sort(x.begin(),x.end());\n    for(it=x.begin();it<x.end();it++){\n        int x_n=*it;\n        if(x_n<10){\n            continue;\n        }\n        if(x_n%2==0){\n            continue;\n        }\n        result.push_back(*it);\n    }\n    return result;\n}\nint main(){\n    int x;\n    scanf(\"%d\",&x);\n    vector<int> v;\n    for(int i=0;i<x;i++){\n        int y;\n        scanf(\"%d\",&y);\n        v.push_back(y);\n    }\n    vector<int> v2=unique_digits(v);\n    for(int i=0;i<v2.size();i++){\n        printf(\"%d \",v2[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the  inte gers that are between 1 and 9 inclusive,\nreverse the resulting vector, a nd th en repl a ce each  digit by  its corresponding name from \n\"O ne\", \"Two\", \"T hree\", \"Four\" , \"Five\", \"Six\", \"Seven\",\"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of integers, sort the  inte gers that are between 1 and 9 inclusive,\nreverse the resulting vector, a nd th en repl a ce each  digit by  its corresponding name from \n\"O ne\", \"Two\", \"T hree\", \"Four\", \"Five\", \"Six\", \"Seven\",\"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n\tvector<string> ret;\n\tmap<int, int> map;\n\tfor(int i = 0; i < arr.size(); i++){\n\t\tmap[arr[i]]++;\n\t}\n\tfor(int i = 1; i <= 9; i++){\n\t\tif(map.count(i) == 0)\n\t\t\tret.push_back(\"O ne\");\n\t\telse\n\t\t\tret.push_back(to_string(i));\n\t}\n\treturn ret;\n}\nvector<int> reverse(vector<int> arr){\n\tvector<int> ret;\n\tfor(int i = arr.size() - 1; i >= 0; i--){\n\t\tret.push_back(arr[i]);\n\t}\n\treturn ret;\n}\nvoid print(vector<int> arr){\n\tfor(int i = 0; i < arr.size(); i++){\n\t\tcout<<arr[i]<<\" \";\n\t}\n\tcout<<endl;\n}\nint main(){\n\tint N;\n\tcin>>N;\n\tvector<int> arr;\n\tfor(int i = 0; i < N; i++){\n\t\tint num;\n\t\tcin>>num;\n\t\tarr.push_back(num);\n\t}\n\tcout<<by_length(arr)<<endl;\n\tcout<<reverse(arr)<<endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takesn asa parameter,\nand returns a vector of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\northe  sum of number s from 1 to i  otherwise.\ni starts from1.the factorial of i i s  the m ultiplicati on of t he number s from1 to i (1 * 2 * ...*  i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/*\nImplement the function f that takesn asa parameter,\nand returns a vector of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\northe  sum of number s from 1 to i  otherwise.\ni starts from1.the factorial of i i s  the m ultiplicati on of t he number s from1 to i (1 * 2 *...*  i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n\tvector<int> v;\n\tfor(int i=1;i<=n;i++){\n\t\tv.push_back(i);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(i%2==0){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tv[j]*=i;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tv[j]+=i;\n\t\t\t}\n\t\t}\n\t}\n\treturn v;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter the size of the array : \");\n\tscanf(\"%d\",&n);\n\tvector<int> v=f(n);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d\\n\",v[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive integer n, return a  vect or that hasthe number of even andodd\ninteger palindromes that fall wit hin t he rang e (1, n),  inclusiv e.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return a  vect or that hasthe number of even andodd\ninteger palindromes that fall wit hin t he rang e (1, n),  inclusiv e.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> ret;\n    int len = n;\n    int i = 1;\n    while(len!= 0){\n        if(len % 2 == 0){\n            ret.push_back(i);\n        }else{\n            ret.push_back(i * i);\n        }\n        len /= 2;\n        i++;\n    }\n    return ret;\n}\n\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> v = even_odd_palindrome(n);\n        for(auto i:v){\n            printf(\"%d \", i);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_nums which ta kes a  vector of integers and returns\nthe number of elements which has a sum o f dig its > 0 . \nIf a n umber isnegative, then its first sig ned  digit will be  negative:\ne. g. -123 has signed digits-1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function count_nums which ta kes a  vector of integers and returns\nthe number of elements which has a sum o f dig its > 0. \nIf a n umber isnegative, then its first sig ned  digit will be  negative:\ne. g. -123 has signed digits-1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n\tint sum = 0;\n\tfor(auto i : n){\n\t\tif(i > 0)\n\t\t\tsum += i;\n\t}\n\treturn sum;\n}\n\nint main(){\n\tvector<int> n;\n\tn.push_back(1);\n\tn.push_back(1);\n\tn.push_back(2);\n\tprintf(\"%d\\n\", count_nums(n));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vector \"arr\" of N integers  arr[ 1], arr[2],..., arr[N].The\nnumbers in the vector will be randomly order ed. Y our tas k  is todetermine  if\nit is possible to get avec tor sorted innon-decreasin g order by performing \nthe  following operation on the gi ven vector: \n    Yo u are all owed to perform right shiftoperation anynumber of  times.\n\nOne right shift op erationmea ns shifting all elements of the  vector by onep osition inthe  right direction. The last element  of thevector will be m ove d toth estarting p os ition in the vector i.e. 0th  i ndex. \n\nIf it is possible to obtain the  so rted vector by p erforming t he above operation\nthen return true else  re turn fa l se.\nIf the given vector is emp tythen return true.\n\nNote:  T he given vectori s guaranteedto ha ve unique eleme nts.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 0, "perturbed": true, "gc": "/*\nWe have a vector \"arr\" of N integers  arr[ 1], arr[2],..., arr[N].The\nnumbers in the vector will be randomly order ed. Y our tas k  is todetermine  if\nit is possible to get avec tor sorted innon-decreasin g order by performing \nthe  following operation on the gi ven vector: \n    Yo u are all owed to perform right shiftoperation anynumber of  times.\n\nOne right shift op erationmea ns shifting all elements of the  vector by onep osition inthe  right direction. The last element  of thevector will be m ove d toth estarting p os ition in the vector i.e. 0th  i ndex. \n\nIf it is possible to obtain the  so rted vector by p erforming t he above operation\nthen return true else  re turn fa l se.\nIf the given vector is emp tythen return true.\n\nNote:  T he given vectori s guaranteedto ha ve unique eleme nts.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    int i;\n    bool flag = true;\n    if(arr.size() == 1){\n        return true;\n    }\n    for(i = 0; i < arr.size()-1; i++){\n        if(arr[i] > arr[i+1]){\n            if(flag){\n                flag = false;\n            }\n            else{\n                return false;\n            }\n            int j = i+1;\n            int temp = arr[j];\n            while(j < arr.size()-1 && arr[j+1] <= temp){\n                j++;\n            }\n            for(;j < arr.size(); j++){\n                arr[j] = arr[j+1];\n            }\n            arr[j] = temp;\n        }\n    }\n    return flag;\n}\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> v(n);\n        for(int i = 0; i < n; i++){\n            scanf(\"%d\", &v[i]);\n        }\n        int flag = move_one_ball(v);\n        if(flag)\n            printf(\"YES\\n\");\n        else\n            printf(\"NO\\n\");\n    }\n}\n<|endoftext|>"}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem, you will implementa fun ction that takes two vectors of numbers,\nand determines whether it is po ssibl e to pe r form an  exchange  of elements\nbetween them to  ma ke lst1 a vect or of only ev en numbers.\nThereis no li mit on the number of ex c hanged  elements b etweenlst1 andlst2.\nIf it is possibletoe xchange elements betwee n the lst1 and lst2 to make \nall theel em e nts of lst1 to be even, retu rn \"YES\".Otherw ise, return  \"N O\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*\nIn this problem, you will implementa fun ction that takes two vectors of numbers,\nand determines whether it is po ssibl e to pe r form an  exchange  of elements\nbetween them to  ma ke lst1 a vect or of only ev en numbers.\nThereis no li mit on the number of ex c hanged  elements b etweenlst1 andlst2.\nIf it is possibletoe xchange elements betwee n the lst1 and lst2 to make \nall theel em e nts of lst1 to be even, retu rn \"YES\".Otherw ise, return  \"N O\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n\tint i=0,j=0;\n\tif(lst1.size()!=lst2.size()){\n\t\treturn \"NO\";\n\t}\n\tfor(i=0;i<lst1.size();i++){\n\t\tif(lst1[i]>lst2[i]){\n\t\t\tswap(lst1[i],lst2[i]);\n\t\t}\n\t}\n\tfor(i=0;i<lst1.size();i++){\n\t\tif(lst1[i]%2==1){\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\nint main(){\n\tvector<int> lst1,lst2;\n\tint a,b,c,i;\n\twhile(1){\n\t\tlst1.clear();\n\t\tlst2.clear();\n\t\tcin>>a>>b;\n\t\tif(a==0&&b==0){\n\t\t\tbreak;\n\t\t}\n\t\tfor(i=0;i<a;i++){\n\t\t\tcin>>c;\n\t\t\tlst1.push_back(c);\n\t\t}\n\t\tfor(i=0;i<b;i++){\n\t\t\tcin>>c;\n\t\t\tlst2.push_back(c);\n\t\t}\n\t\tcout<<exchange(lst1,lst2)<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string representing a spacesepar ated lowercase letters, return a map\nof the letter with the most repetit ion a nd cont a ining t he corres ponding count.\nIf several le tte rs have the sa me occurrence , return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string representing a spacesepar ated lowercase letters, return a map\nof the letter with the most repetit ion a nd cont a ining t he corres ponding count.\nIf several le tte rs have the sa me occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> res;\n    for(int i=0;i<test.size();i++){\n        if(res.find(test[i])==res.end()){\n            res[test[i]]=1;\n        }\n        else{\n            res[test[i]]++;\n        }\n    }\n    return res;\n}\n\nint main(){\n    string s;\n    cin>>s;\n    map<char,int> hist=histogram(s);\n    for(map<char,int>::iterator it=hist.begin();it!=hist.end();it++){\n        cout<<it->first<<\" \"<<it->second<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/112", "prompt": "/*\nTask\nWe are given two strings s andc, yo u have to deleted all the characters in s that are equalto any characte r inc\nthenc heck if  the resu lt string is palindrome.\nA s tri ng is called p alindrome ifit reads the samebackward  as forward.\nYou should return  a vector c ontaini ng the re sult string and \"True\"/\"Fals e\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 0, "perturbed": true, "gc": "/*\nTask\nWe are given two strings s andc, yo u have to deleted all the characters in s that are equalto any characte r inc\nthenc heck if  the resu lt string is palindrome.\nA s tri ng is called p alindrome ifit reads the samebackward  as forward.\nYou should return  a vector c ontaini ng the re sult string and \"True\"/\"Fals e\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n\tvector<string>v;\n\tint i=0;\n\tint j=0;\n\tint len = s.length();\n\tint len2 = c.length();\n\twhile(i<len){\n\t\tif(s[i]==c[j]){\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tif(j==len2){\n\t\t\t\tv.push_back(s.substr(0,i));\n\t\t\t\ti=0;\n\t\t\t\tj=0;\n\t\t\t}\n\t\t}else{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn v;\n}\nint main(){\n\tstring s,c;\n\tcin>>s>>c;\n\tvector<string>v = reverse_delete(s,c);\n\tfor(int i=0;i<v.size();i++){\n\t\tcout<<v[i]<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of strings, where eac h str ing consists of only digits, return a vector.\nEach element i of the outp ut sh ould be 'the nu mber of o dd elements in the\nstring iofthe input.\" wh ere all the i 's should be replaced by t henumber\nof odd digits in the  i'th strin g of th e input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of strings, where eac h str ing consists of only digits, return a vector.\nEach element i of the outp ut sh ould be 'the nu mber of o dd elements in the\nstring iofthe input.\" wh ere all the i's should be replaced by t henumber\nof odd digits in the  i'th strin g of th e input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> ret;\n    map<char,int> cnt;\n    for(string s:lst){\n        for(char c:s){\n            cnt[c]++;\n        }\n    }\n    for(string s:lst){\n        stringstream ss;\n        for(char c:s){\n            if(cnt[c]%2 == 0)\n                ss<<c;\n        }\n        ret.push_back(ss.str());\n    }\n    return ret;\n}\nint main(){\n    vector<string> lst = {{\"3\"},{\"11111111\"}};\n    for(string s:odd_count(lst)){\n        cout<<s<<endl;\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of integers nums, fin d the  minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of integers nums, fin d the  minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n\tlong long minSum = nums[0], sum = nums[0];\n\tfor(int i = 1; i < nums.size(); i++){\n\t\tsum += nums[i];\n\t\tif(sum < minSum){\n\t\t\tminSum = sum;\n\t\t}\n\t}\n\treturn minSum;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\t\tvector<long long> nums(n);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tscanf(\"%lld\", &nums[i]);\n\t\t}\n\t\tprintf(\"%lld\\n\", minSubArraySum(nums));\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid ofwells . Each row represents a single well,\nand each 1 in a rowrepresents a si ngleunit of water.Each well  has a corresponding buckettha t can be usedto extract wa ter from it, \nandall buck ets have the same capac i ty.\nYo ur task isto usethe bucke tsto empty the wells.\nOutpu t the number of times y ou need to lower the bucket s.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a rectangular grid ofwells. Each row represents a single well,\nand each 1 in a rowrepresents a si ngleunit of water.Each well  has a corresponding buckettha t can be usedto extract wa ter from it, \nandall buck ets have the same capac i ty.\nYo ur task isto usethe bucke tsto empty the wells.\nOutpu t the number of times y ou need to lower the bucket s.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int n = grid.size();\n    if(n == 0)\n        return 0;\n    int ans = 0;\n    for(int i = 0;i < n;i++)\n    {\n        int m = grid[i].size();\n        int c = 0;\n        for(int j = 0;j < m;j++)\n        {\n            c = c + grid[i][j];\n            if(c > capacity)\n                break;\n        }\n        if(c == capacity)\n            ans++;\n        if(c > capacity)\n            break;\n    }\n    return ans;\n}\nint main()\n{\n    int t;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        int n;\n        scanf(\"%d\",&n);\n        vector<vector<int>> grid(n,vector<int>(n,0));\n        int capacity;\n        scanf(\"%d\",&capacity);\n        for(int i = 0;i < n;i++)\n        {\n            for(int j = 0;j < n;j++)\n            {\n                scanf(\"%d\",&grid[i][j]);\n            }\n        }\n        int ans = max_fill(grid,capacity);\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vec tor o f non-negative integers according to\nnumber of ones in their binary repr esent ation i n  ascend ing order .\nFor similar number of ones , s ort based on d ecimal value. \n\nIt must be implemented l ike this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nIn this Kata, you have to sort a vec tor o f non-negative integers according to\nnumber of ones in their binary repr esent ation i n  ascend ing order.\nFor similar number of ones, s ort based on d ecimal value. \n\nIt must be implemented l ike this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n\tvector<int> ret;\n\tint count = 0;\n\tfor(int i=0;i<arr.size();i++){\n\t\tif(arr[i] > 0){\n\t\t\tret.push_back(arr[i]);\n\t\t\tcount++;\n\t\t}\n\t}\n\tsort(ret.begin(),ret.end(),greater<int>());\n\treturn ret;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\",&n);\n\t\tvector<int> vec(n);\n\t\tfor(int i=0;i<n;i++){\n\t\t\tscanf(\"%d\",&vec[i]);\n\t\t}\n\t\tvector<int> ret = sort_array(vec);\n\t\tfor(int i=0;i<ret.size();i++){\n\t\t\tprintf(\"%d \",ret[i]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/117", "prompt": "/*\nGiven a string s and a natural numbe r n,you have been tasked to implement a function that returns a vector of a ll wo rds fro m  string  s that c ontain exactly \nn consonants , i n order thesewords appearin the string s.\nIf the st ring s is empty then th e  funct ion shouldreturnan emptyvector.\nNote: you may assume  the input string conta ins only letters and spaces .\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string s and a natural numbe r n,you have been tasked to implement a function that returns a vector of a ll wo rds fro m  string  s that c ontain exactly \nn consonants, i n order thesewords appearin the string s.\nIf the st ring s is empty then th e  funct ion shouldreturnan emptyvector.\nNote: you may assume  the input string conta ins only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> word_vector;\n    for(int i=0;i<s.length();i++){\n        int count=0;\n        for(int j=0;j<n;j++){\n            if(s[i]==' ')\n                break;\n            else{\n                count++;\n            }\n        }\n        if(count==n)\n            word_vector.push_back(s.substr(i,n));\n    }\n    return word_vector;\n}\n\nint main(){\n    string s=\"Mary had a little lamb\";\n    int n=4;\n    vector<string> word_vector=select_words(s,n);\n    for(int i=0;i<word_vector.size();i++)\n        cout<<word_vector[i]<<endl;\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your task is t o fin d the closest vowel that stands between \ntwo consonants from the right s ide o f the w o rd (cas e sensiti ve).\n\nVowels in the beginnin g a nd ending does n't count. Re turn empty stringif you d idn't\nfind any vowel me t  the a bove condit ion. \nYou may a ssume that the given stringcontains English letter  only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a word. Your task is t o fin d the closest vowel that stands between \ntwo consonants from the right s ide o f the w o rd (cas e sensiti ve).\n\nVowels in the beginnin g a nd ending doesn't count. Re turn empty stringif you d idn't\nfind any vowel me t  the a bove condit ion. \nYou may a ssume that the given stringcontains English letter  only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n\tstring vowels = \"AEIOU\";\n\tint len = word.size();\n\tfor(int i = 0; i < len; i++){\n\t\tstring str = word.substr(i,1);\n\t\tif(vowels.find(str)!= string::npos){\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn \"\";\n}\n\nint main(){\n\tstring s;\n\twhile(getline(cin,s)){\n\t\tstring v = get_closest_vowel(s);\n\t\tif(v == \"\")\n\t\t\tcout << \"No vowel\";\n\t\telse\n\t\t\tcout << v;\n\t\tcout << endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector of two string s, bo th strings consist of open\nparentheses '(' or close parentheses ')' only .\nYou r job i s  to che ck if itis possible to concatenate t hetwo strings in \nsome order,that the resulting stringwill be good.\nA stringS  is co nsidered to  be goo d if andonly if all parenthesesinS \nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of two string s, bo th strings consist of open\nparentheses '(' or close parentheses ')' only.\nYou r job i s  to che ck if itis possible to concatenate t hetwo strings in \nsome order,that the resulting stringwill be good.\nA stringS  is co nsidered to  be goo d if andonly if all parenthesesinS \nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n\tint i=0,j=0;\n\twhile(i<lst.size() && j<lst.size()){\n\t\tif(lst[i]==\"(\" && lst[j]==\")\"){\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(lst[i]==\")\" && lst[j]==\"(\"){\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tcontinue;\n\t\t}\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\nint main(){\n\tint n;\n\tstring a,b;\n\tvector<string> lst;\n\tcin>>n;\n\twhile(n--){\n\t\tcin>>a>>b;\n\t\tlst.push_back(a);\n\t\tlst.push_back(b);\n\t}\n\tstring res = match_parens(lst);\n\tif(res==\"Yes\")\n\t\tcout<<\"Yes\"<<endl;\n\telse\n\t\tcout<<\"No\"<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers and a  posi tive integer k, return a sorted vector \nof length k withthe maximum k n umber s in ar r .\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector arr of integers and a  posi tive integer k, return a sorted vector \nof length k withthe maximum k n umber s in ar r.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    vector<int> result;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<k;i++){\n        result.push_back(arr[i]);\n    }\n    return result;\n}\nint main(){\n    int n;\n    while(scanf(\"%d\",&n)==1){\n        vector<int> arr(n);\n        for(int i=0;i<n;i++){\n            scanf(\"%d\",&arr[i]);\n        }\n        int k;\n        scanf(\"%d\",&k);\n        vector<int> result = maximum(arr,k);\n        for(int i=0;i<k;i++){\n            printf(\"%d \",result[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non-empty vector of integers , ret urn the sumof all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non-empty vector of integers, ret urn the sumof all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n\tint i,res=0;\n\tfor(i=0;i<lst.size();i++){\n\t\tif(i%2==0){\n\t\t\tres+=lst[i];\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> lst(n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&lst[i]);\n\t}\n\tprintf(\"%d\\n\",solutions(lst));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non-empty vector of integers  arrand an integer k, return\nthe sum of the elements with atmost two digits  from  the fi r st k el ements of  arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non-empty vector of integers  arrand an integer k, return\nthe sum of the elements with atmost two digits  from  the fi r st k el ements of  arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for(int i=0;i<k;i++){\n        sum+=arr[i];\n    }\n    return sum;\n}\nint main(){\n    int n;\n    vector<int> arr;\n    int k;\n    int sum;\n    int flag=0;\n    while(scanf(\"%d\",&n)==1){\n        flag=1;\n        for(int i=0;i<n;i++){\n            scanf(\"%d\",&arr[i]);\n        }\n        scanf(\"%d\",&k);\n        sum=add_elements(arr,k);\n        if(sum<10){\n            printf(\"%d\\n\",sum);\n        }else{\n            printf(\"%d\\n\",10);\n        }\n    }\n    if(flag==1){\n        return 0;\n    }else{\n        return -1;\n    }\n}\n<|endoftext|>"}
{"task_id": "CPP/123", "prompt": "/*\nGiven a positive integer n, return a  sort ed vector that has the odd numbersin collatz sequence.\nThe Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\nas  follows: sta rt with any positive integ ern. Then each term is obtain ed from the  \nprevi ous termasfollows: if the previousterm is even,the nextterm is one half of \nthe pr evious term .I f the previous term is odd,thenext term is  3 times th e p revious\nterm plus 1. The conjectur e is that no matter what  va lueofn,  the seque nc e will always reach 1.\n\nNote :   1. Collatz(1) is {1}.\n    2. retur ned  vector sorted i n increasin g order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return a  sort ed vector that has the odd numbersin collatz sequence.\nThe Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\nas  follows: sta rt with any positive integ ern. Then each term is obtain ed from the  \nprevi ous termasfollows: if the previousterm is even,the nextterm is one half of \nthe pr evious term.I f the previous term is odd,thenext term is  3 times th e p revious\nterm plus 1. The conjectur e is that no matter what  va lueofn,  the seque nc e will always reach 1.\n\nNote :   1. Collatz(1) is {1}.\n    2. retur ned  vector sorted i n increasin g order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n\tvector<int> v;\n\tv.push_back(1);\n\tv.push_back(n);\n\tint i=2;\n\twhile(i<n){\n\t\tint j = i;\n\t\twhile(j%2 == 0){\n\t\t\tj = j/2;\n\t\t}\n\t\ti = j+1;\n\t\tv.push_back(i);\n\t}\n\treturn v;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> v = get_odd_collatz(n);\n\tsort(v.rbegin(), v.rend());\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d \", v[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which v alida tes a givendate string and\nreturns true if the date is valid otherwisefalse .\nThe d a te is v alid if a ll of the following rules ar e s atisfied:\n1. T he date strin g is not empty.\n2. The num ber of daysis not less than 1  or higherthan 31  days for  months 1,3,5,7,8,10,12.And  the number of days isnot less than 1 or higher t han 30 days  f o r months 4,6,9,11. And, thenumber ofdaysi s not lesstha n 1 or higher than 29 for the mont h 2.\n3.The months shoul d n ot be l es s than 1 o rhigher than 12.\n4. The datesh ould be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 0, "perturbed": true, "gc": "/*\nYou have to write a function which v alida tes a givendate string and\nreturns true if the date is valid otherwisefalse.\nThe d a te is v alid if a ll of the following rules ar e s atisfied:\n1. T he date strin g is not empty.\n2. The num ber of daysis not less than 1  or higherthan 31  days for  months 1,3,5,7,8,10,12.And  the number of days isnot less than 1 or higher t han 30 days  f o r months 4,6,9,11. And, thenumber ofdaysi s not lesstha n 1 or higher than 29 for the mont h 2.\n3.The months shoul d n ot be l es s than 1 o rhigher than 12.\n4. The datesh ould be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n\tif(date.empty())\n\t\treturn false;\n\tif(date.size()>0&&date.size()<6)\n\t\treturn false;\n\tint mm=atoi(date.substr(0,2).c_str());\n\tint dd=atoi(date.substr(3,2).c_str());\n\tint yy=atoi(date.substr(6,4).c_str());\n\tif(mm<1||mm>12||dd<1||dd>31||yy<2000||yy>2040)\n\t\treturn false;\n\tif(mm==2&&(dd<1||dd>29)&&yy>=2000&&yy<=2040){\n\t\treturn false;\n\t}\n\tif(mm==4||mm==6||mm==9||mm==11){\n\t\tif(dd<1||dd>30||yy>=2000&&yy<=2040)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tstring date;\n\tcin>>date;\n\tcout<<valid_date(date)<<endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of words, return a ve ctorof words split on whitespace, if no whitespaces exists in the text you\ns hould  splito n comma s ',' ifno commas exists you shouldret urn a vector w ith one eleme nt, the number oflower-ca seletters with odd ord e r in t he\nalphabet , ord(\" a\") = 0,ord(\"b\") = 1, ... ord(\"z\")=  25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string of words, return a ve ctorof words split on whitespace, if no whitespaces exists in the text you\ns hould  splito n comma s ',' ifno commas exists you shouldret urn a vector w ith one eleme nt, the number oflower-ca seletters with odd ord e r in t he\nalphabet, ord(\" a\") = 0,ord(\"b\") = 1,... ord(\"z\")=  25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n\tvector<string> res;\n\tchar last_char = '\\0';\n\tstring word = \"\";\n\tfor(int i = 0; i< txt.length(); i++){\n\t\tif(isalpha(last_char) && isupper(txt[i])){\n\t\t\tres.push_back(word);\n\t\t\tword = \"\";\n\t\t}\n\t\telse if(txt[i] =='' || txt[i] == '\\n' || txt[i] == '\\t' || txt[i] == ','){\n\t\t\tres.push_back(word);\n\t\t\tword = \"\";\n\t\t}\n\t\telse{\n\t\t\tword += txt[i];\n\t\t}\n\t\tlast_char = txt[i];\n\t}\n\treturn res;\n}\n\nint main(){\n\tstring txt = \"Hello world!\";\n\tvector<string> res = split_words(txt);\n\tfor(int i = 0; i< res.size(); i++){\n\t\tcout<<res[i]<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of numbers, return wh ether  or not they are sorted\nin ascending order. If vector has more than 1 du plica te of t h e samenumber, r eturn false. Assume no negat ive  numbers and o nly integers. \n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of numbers, return wh ether  or not they are sorted\nin ascending order. If vector has more than 1 du plica te of t h e samenumber, r eturn false. Assume no negat ive  numbers and o nly integers. \n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n\tif(lst.size() < 2)\n\t\treturn true;\n\tint prev = lst[0];\n\tfor(int i=1; i<lst.size(); i++){\n\t\tif(lst[i]<prev)\n\t\t\treturn false;\n\t\tprev = lst[i];\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tlst.push_back(6);\n\tlst.push_back(7);\n\tlst.push_back(8);\n\tlst.push_back(9);\n\tlst.push_back(10);\n\tlst.push_back(11);\n\tlst.push_back(12);\n\tlst.push_back(13);\n\tlst.push_back(14);\n\tlst.push_back(15);\n\tlst.push_back(16);\n\tlst.push_back(17);\n\tlst.push_back(18);\n\tlst.push_back(19);\n\tlst.push_back(20);\n\tlst.push_back(21);\n\tlst.push_back(22);\n\tlst.push_back(23);\n\tlst.push_back(24);\n\tlst.push_back(25);\n\tlst.push_back(26);\n\tlst.push_back(27);\n\tlst.push_back(28);\n\tlst.push_back(29);\n\tlst.push_back(30);\n\tlst.push_back(31);\n\tlst.push_back(32);\n\tlst.push_back(33);\n\tlst.push_back(34);\n\tlst.push_back(35);\n\tlst.push_back(36);\n\tlst.push_back(37);\n\tlst.push_back(38);\n\tlst.push_back(39);\n\tlst.push_back(40);\n\tlst.push_back(41);\n\tlst.push_back(42);\n\tlst.push_back(43);\n\tlst.push_back(44);\n\tlst.push_back(45);\n\tlst.push_back(46);\n\tlst.push_back(47);\n\tlst.push_back(48);\n\tlst.push_back(49);\n\tlst.push_back(50);\n\tlst.push_back(51);\n\tlst.push_back(52);\n\tlst.push_back(53);\n\tlst.push_back(54);\n\tlst.push_back(55);\n\tlst.push_back(56);\n\tlst.push_back(57);\n\tlst.push_back(58);\n\tlst.push_back(59);\n\tlst.push_back(60);\n\tlst.push_back(61);\n\tlst.push_back(62);\n\tlst.push_back(63);\n\tlst.push_back(64);\n\tlst.push_back(65);\n\tlst.push_back(66);\n\tlst.push_back(67);\n\tlst.push_back(68);\n\tlst.push_back(69);\n\tlst.push_back(70);\n\tlst.push_back(71);\n\tlst.push_back(72);\n\tlst.push_back(73);\n\tlst.push_back(74);\n\tlst.push_back(75);\n\tlst.push_back(76);\n\tlst.push_back(77);\n\tlst.push_back(78);\n\tlst.push_back(79);\n\tlst.push_back(80);\n\tlst.push_back(81);\n\tlst.push_back(82);\n\tlst.push_back(83);\n\tlst.push_back(84);\n\tlst.push_back(85);\n\tlst.push_back(86);\n\tlst.push_back(87);\n\tlst.push_back(88);\n\tlst.push_back(89);\n\tlst.push_back(90);\n\tlst.push_back(91);\n\tlst.push_back(92);\n\tlst.push_back(93);\n\tlst.push_back(94);\n\tlst.push_back(95);\n\tlst.push_back(96);\n\tlst.push_back(97);\n\tlst.push_back(98);\n\tlst.push_back(99);\n\tlst.push_back(100);\n\tlst.push_back(101);\n\tlst.push_back(102);\n\tlst.push_back(103);\n\tlst.push_back(104);\n\tlst.push_back(105);\n\tlst.push_back(106);\n"}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two intervals,\nwhere e ach i nterval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two intervals,\nwhere e ach i nterval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int i=0,j=0;\n    while(i<interval1.size() && j<interval2.size()){\n        if(interval1[i]<interval2[j])\n            i++;\n        else if(interval1[i]>interval2[j])\n            j++;\n        else\n            return \"YES\";\n    }\n    return \"NO\";\n}\nint main(){\n    vector<int> interval1,interval2;\n    interval1.push_back(1);\n    interval1.push_back(2);\n    interval2.push_back(2);\n    interval2.push_back(3);\n    if(intersection(interval1,interval2)==\"YES\")\n        cout<<\"Yes\"<<endl;\n    else\n        cout<<\"No\"<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of intege rs an d you need to return\nsum of magnitudes of integers multiplied by product  of a ll sign s \nof eac h numberin the vector, represented b y 1 , -1 or 0.\nNot e: return -32 768 for empty arr.\n\nExampl e:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector arr of intege rs an d you need to return\nsum of magnitudes of integers multiplied by product  of a ll sign s \nof eac h numberin the vector, represented b y 1, -1 or 0.\nNot e: return -32 768 for empty arr.\n\nExampl e:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n\tif(arr.size() == 0)\n\t\treturn -32768;\n\tint result = 0;\n\tfor(int i=0;i<arr.size();i++){\n\t\tif(arr[i] > 0){\n\t\t\tresult += arr[i] * 1;\n\t\t}\n\t\tif(arr[i] < 0){\n\t\t\tresult += arr[i] * -1;\n\t\t}\n\t\tif(arr[i] == 0){\n\t\t\tresult += arr[i] * 0;\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d %d\",&n,&m);\n\tvector<int> arr;\n\tfor(int i=0;i<m;i++){\n\t\tint num;\n\t\tscanf(\"%d\",&num);\n\t\tarr.push_back(num);\n\t}\n\tprintf(\"%d\\n\",prod_signs(arr));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \neach cell of the grid contains a value . Eve ry inte g er in t he range{1, N * N}inclusive appears  ex actly once onthe cells ofthe grid.\n\nYou have to fin d the minimum path of l e ngth k  in the gri d. Youcan start \nfrom any cell, and in eachstep you can move to an y of the neighbor cells,\nin  other word s, you can go to cells which sh arean edge with  you curren t\nc ell.\nPlease note that a path of le ngth k means visiting ex act ly kce ll s (not\nnec es sarily distinct).\nYou CANNOT  g ooff the grid.\nA path A (of length k)isconsidered lessthan a path  B (of length k) if\nafter making the ord ere dvecto r s of the values on the cells t hat A and B go\nthrough (let 's  call them lst_A and lst_B), l st_Ais lexicographi cally less\nthan lst_B, in other words, there exist  an integer index i (1 < = i <= k)\nsucht hat lst_A[i] <  l s t_B[i] and for any j ( 1 <=  j < i) we  havelst_A[j] =  l st_B[j].\nIt is guarante ed  that the answer is uniq ue.\nReturn  a n ordered vector of the values on the cells tha t the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\nGiven a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \neach cell of the grid contains a value. Eve ry inte g er in t he range{1, N * N}inclusive appears  ex actly once onthe cells ofthe grid.\n\nYou have to fin d the minimum path of l e ngth k  in the gri d. Youcan start \nfrom any cell, and in eachstep you can move to an y of the neighbor cells,\nin  other word s, you can go to cells which sh arean edge with  you curren t\nc ell.\nPlease note that a path of le ngth k means visiting ex act ly kce ll s (not\nnec es sarily distinct).\nYou CANNOT  g ooff the grid.\nA path A (of length k)isconsidered lessthan a path  B (of length k) if\nafter making the ord ere dvecto r s of the values on the cells t hat A and B go\nthrough (let's  call them lst_A and lst_B), l st_Ais lexicographi cally less\nthan lst_B, in other words, there exist  an integer index i (1 < = i <= k)\nsucht hat lst_A[i] <  l s t_B[i] and for any j ( 1 <=  j < i) we  havelst_A[j] =  l st_B[j].\nIt is guarante ed  that the answer is uniq ue.\nReturn  a n ordered vector of the values on the cells tha t the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    vector<int> path;\n    int n = grid.size();\n    if(n==0 || k==0) return path;\n    vector<int> dp(n, 0);\n    vector<int> dp_prev(n, 0);\n    dp[0] = 1;\n    for(int i=0; i<k; i++){\n        for(int j=0; j<n; j++){\n            for(int c=0; c<n; c++){\n                if(dp[j] + grid[j][c] <= dp[c]){\n                    dp[c] = dp[j] + grid[j][c];\n                }\n            }\n        }\n        for(int j=0; j<n; j++){\n            if(j!=0 && dp[j] < dp[j-1]){\n                dp[j-1] = dp[j];\n            }\n        }\n        dp_prev = dp;\n        dp = dp_prev;\n    }\n    for(int i=0; i<k; i++){\n        path.push_back(dp[i]);\n    }\n    return path;\n}\n\nint main(){\n    vector<vector<int>> grid = { {1,2,3}, {4,5,6}, {7,8,9} };\n    vector<int> path = minPath(grid, 3);\n    for(int i=0; i<path.size(); i++){\n        printf(\"%d \", path[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacci sequence, i t was  studied deeply by mathematicians in \nthe last couple centuries. However , wha t peopl e  don'tknow is T ribonacci sequence.\nTribonac cisequence is de fined by therecurrence:\ntri(1) = 3\ntri (n) = 1 + n/ 2, if n i s  even. \ntri(n) = tri(n -  1) + tri (n- 2) + tri(n + 1), ifni s odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*\nEveryone knows Fibonacci sequence, i t was  studied deeply by mathematicians in \nthe last couple centuries. However, wha t peopl e  don'tknow is T ribonacci sequence.\nTribonac cisequence is de fined by therecurrence:\ntri(1) = 3\ntri (n) = 1 + n/ 2, if n i s  even. \ntri(n) = tri(n -  1) + tri (n- 2) + tri(n + 1), ifni s odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n\tvector<int> res;\n\tres.clear();\n\tif(n==0)\n\t\treturn res;\n\tres.push_back(1);\n\tif(n==1)\n\t\treturn res;\n\tres.push_back(1);\n\tif(n==2)\n\t\treturn res;\n\tint t1 = 1;\n\tint t2 = 1;\n\tint t3 = 1;\n\tint temp = 2;\n\tfor(int i=3;i<=n;i++){\n\t\tres.push_back(t1+t2);\n\t\tt1 = t2;\n\t\tt2 = t3;\n\t\tt3 = t1+t2;\n\t\ttemp++;\n\t}\n\treturn res;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> res = tri(n);\n\tfor(int i=0;i<res.size();i++)\n\t\tprintf(\"%d \",res[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive integer n, return t he pr oduct of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return t he pr oduct of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    if(n < 0)\n        return 0;\n    string s = to_string(n);\n    int len = s.size();\n    int count = 0;\n    for(int i=0;i<len;i++){\n        if(s[i] - '0' > 0){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n;\n        scanf(\"%d\",&n);\n        int count = digits(n);\n        if(count % 2 == 1)\n            printf(\"%d\\n\",n);\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function that takes a strin g asinput whichcontains only square brackets.\nThe function should return tr ue if  and on l y if th ere is avalid subsequence of bracket s\nw here at leastone bracket i n the subsequenceis neste d.\nis_nested(\"[[]]\") ➞ true\ni s_nested(\"[ ]]]]]]] [[[[[]\")➞ false\nis_nested(\"[][]\") ➞false\nis_nested(\"[]\") ➞  false\nis_nested(\"[[][]]\")➞ true\nis_n es t ed(\"[[]][[\") ➞ true\n*/\n#incl ude<stdio.h>\n#in clude<strin g>using namespace std;\nbool is_neste d(string str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes a strin g asinput whichcontains only square brackets.\nThe function should return tr ue if  and on l y if th ere is avalid subsequence of bracket s\nw here at leastone bracket i n the subsequenceis neste d.\nis_nested(\"[[]]\") ➞ true\ni s_nested(\"[ ]]]]]]] [[[[[]\")➞ false\nis_nested(\"[][]\") ➞false\nis_nested(\"[]\") ➞  false\nis_nested(\"[[][]]\")➞ true\nis_n es t ed(\"[[]][[\") ➞ true\n*/\n#incl ude<stdio.h>\n#in clude<strin g>using namespace std;\nbool is_neste d(string str){\n\tint size = str.size();\n\tfor(int i=0; i<size; i++){\n\t\tif(str[i] == '[' && str[i+1] == '['){\n\t\t\tint j=i+2;\n\t\t\twhile(str[j]!='[' && j<size){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j<size){\n\t\t\t\tif(str[j] == '[' && str[j+1] == '['){\n\t\t\t\t\tj++;\n\t\t\t\t}else{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nvoid print(bool b){\n\tif(b){\n\t\tprintf(\"true\");\n\t}else{\n\t\tprintf(\"false\");\n\t}\n}\n\nint main(){\n\tstring str1 = \"[[]]\";\n\tstring str2 = \"][]\";\n\tstring str3 = \"][\";\n\tstring str4 = \"][]\";\n\tstring str5 = \"[][]\";\n\tstring str6 = \"[]\";\n\tstring str7 = \"]]\";\n\tprint(is_neste(str1));\n\tprint(is_neste(str2));\n\tprint(is_neste(str3));\n\tprint(is_neste(str4));\n\tprint(is_neste(str5));\n\tprint(is_neste(str6));\n\tprint(is_neste(str7));\n\t\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vector of numbers.\nY ou ne ed to return the sum of squared numbers in the given vector,\nround eacheleme nt in t h e vecto r to theupper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of numbers.\nY ou ne ed to return the sum of squared numbers in the given vector,\nround eacheleme nt in t h e vecto r to theupper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n\tint i;\n\tint sum = 0;\n\tfor(i = 0; i < lst.size(); i++){\n\t\tsum = sum + (int)lst[i]*lst[i];\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<float> v;\n\tint i;\n\tfloat n;\n\tfloat sum;\n\tsum = 0;\n\twhile(scanf(\"%f\",&n)!=EOF){\n\t\tv.push_back(n);\n\t}\n\tsum = sum_squares(v);\n\tprintf(\"%d\",sum);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function that returns trueif th e last character\nof a given stringis an alphabetical character and is n ot\napart of a word,  and fals e otherwise.\nNote: \"word\" is  agroup of chara cters separat ed by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that returns trueif th e last character\nof a given stringis an alphabetical character and is n ot\napart of a word,  and fals e otherwise.\nNote: \"word\" is  agroup of chara cters separat ed by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.length() == 0)\n        return false;\n    else{\n        int i = txt.length() - 1;\n        if(txt[i] >= 'a' && txt[i] <= 'z')\n            return true;\n        else\n            return false;\n    }\n}\nint main(){\n    string txt;\n    cin>>txt;\n    if(check_if_last_char_is_a_letter(txt))\n        cout<<\"true\"<<endl;\n    else\n        cout<<\"false\"<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function which returns thelarge st index ofan element which\nis not greater than or equal to the element  imme diately precedi ng it. If \nno such element exists then  re turn -1. The g iven vector w ill not contain\nduplicatevalues.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function which returns thelarge st index ofan element which\nis not greater than or equal to the element  imme diately precedi ng it. If \nno such element exists then  re turn -1. The g iven vector w ill not contain\nduplicatevalues.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int low = 0;\n    int high = arr.size()-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(arr[mid] >= arr[high])\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}\nint main(){\n    vector<int> arr;\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++)\n        scanf(\"%d\",&arr[i]);\n    int index = can_arrange(arr);\n    if(index == -1)\n        printf(\"Can't arrange the elements.\");\n    else\n        printf(\"The large index of the element which is not greater than or equal to the element is %d\",index);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/136", "prompt": "/*\nCreate a function that returns a vec tor ( a, b), where \"a\" is\nthe largest ofnegative integers, and \"b\" is the sma llest \nof pos i tive in tegers in  a vector.If there is no ne gat ive or positiv e integers, r eturn them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that returns a vec tor ( a, b), where \"a\" is\nthe largest ofnegative integers, and \"b\" is the sma llest \nof pos i tive in tegers in  a vector.If there is no ne gat ive or positiv e integers, r eturn them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> res;\n    int n = lst.size();\n    res.resize(n);\n    for(int i=0;i<n;i++){\n        int m = 0;\n        int j = 0;\n        while(lst[i] >= 0){\n            m += lst[i];\n            j++;\n            lst[i]--;\n        }\n        if(j == 0){\n            res[i] = 0;\n        }else{\n            res[i] = m;\n        }\n    }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> lst(n);\n    for(int i=0;i<n;i++){\n        int v;\n        scanf(\"%d\", &v);\n        lst[i] = v;\n    }\n    vector<int> res = largest_smallest_integers(lst);\n    for(int i=0;i<n;i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function that takes integer s, fl oats, or strings representing\nrealnumbers, and returns the larger varia ble i n its g i ven var iable typ e.\nReturn \"None\" if the valu esare equal.\nNot e: If a realnumber is represented as a  string, the floating p o int mi ght be . or  ,\n\ncom pare_one( 1,2.5) ➞ 2.5\ncompare_one(1,  \"2,3\") ➞ \"2,3\"\ncompare _one(\"5,1\", \"6\") ➞ \"6\"\ncomp are_one(\"1\" ,1 ) ➞ \"None\"\n*/\n#include<stdio .h>#include<str ing>\n#inclu de< algorithm>\n#include<boost/any.hpp> \nusing namespace std;\nbo ost ::any c om pare_one(b oo st::any a,boost::any b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes integer s, fl oats, or strings representing\nrealnumbers, and returns the larger varia ble i n its g i ven var iable typ e.\nReturn \"None\" if the valu esare equal.\nNot e: If a realnumber is represented as a  string, the floating p o int mi ght be. or ,\n\ncom pare_one( 1,2.5) ➞ 2.5\ncompare_one(1,  \"2,3\") ➞ \"2,3\"\ncompare _one(\"5,1\", \"6\") ➞ \"6\"\ncomp are_one(\"1\",1 ) ➞ \"None\"\n*/\n#include<stdio.h>#include<str ing>\n#inclu de< algorithm>\n#include<boost/any.hpp> \nusing namespace std;\nbo ost ::any c om pare_one(b oo st::any a,boost::any b){\n\tc aa=st::any ::typeof(a)>0;\n\tc bb=st::any ::typeof(b)>0;\n\tif(a==b)\n\t\treturn \"None\";\n\tif(aa==bb)\n\t\treturn \"None\";\n\tif(aa==int(a) && bb==int(b))\n\t\treturn a+b;\n\tif(aa==float(a) && bb==float(b))\n\t\treturn a+b;\n\tif(aa==double(a) && bb==double(b))\n\t\treturn a+b;\n\tif(aa==long(a) && bb==long(b))\n\t\treturn a+b;\n\treturn \"None\";\n}\nost ::any c om pare_two(boost::any a,b oo st::any b){\n\tc aa=st::any ::typeof(a)>0;\n\tc bb=st::any ::typeof(b)>0;\n\tif(aa==bb)\n\t\treturn a+b;\n\tif(aa==int(a) && bb==int(b))\n\t\treturn a+b;\n\tif(aa==float(a) && bb==float(b))\n\t\treturn a+b;\n\tif(aa==double(a) && bb==double(b))\n\t\treturn a+b;\n\tif(aa==long(a) && bb==long(b))\n\t\treturn a+b;\n\treturn \"None\";\n}\n\nint main()\n{\n\tc c1=1;\n\tc c2=2;\n\tc c3=3;\n\tc c4=4;\n\tc c5=5;\n\tc c6=6;\n\tc c7=7;\n\tc c8=8;\n\tc c9=9;\n\tc c10=10;\n\tc c11=11;\n\tc c12=12;\n\tc c13=13;\n\tc c14=14;\n\tc c15=15;\n\tc c16=16;\n\tc c17=17;\n\tc c18=18;\n\tc c19=19;\n\tc c20=20;\n\tc c21=21;\n\tc c22=22;\n\tc c23=23;\n\tc c24=24;\n\tc c25=25;\n\tc c26=26;\n\tc c27=27;\n\tc c28=28;\n\tc c29=29;\n\tc c30=30;\n\tc c31=31;\n\tc c32=32;\n\tc c33=33;\n\tc c34=34;\n\tc c35=35;\n\tc c36=36;\n\tc c37=37;\n\tc c38=38;\n\tc c39=39;\n\tc c40=40;\n\tc c41=41;\n\tc c42=42;\n\tc c43=43;\n\tc c44=44;\n\tc c45=45;\n\tc c46=46;\n\tc c47=47;\n\tc c48=48;\n\tc c49=49;\n\tc c50=50;\n\tc c51=51;\n\tc c52=52;\n\tc c53=53;\n\tc c54=54;\n\tc c55=55;\n\tc c56=56;\n\tc c57=57;\n\tc c58=58;\n\tc c59=59;\n\tc c60=60;\n\tc c61=61;\n\tc c62=62;\n\tc c63=63;\n\tc c64=64;\n\tc c65=65;\n\tc c66=66;\n\tc c67=67;\n\tc c68=68;\n\tc c69=69;\n\tc c70=70;\n\tc c71=71;\n\tc c72=72;\n\tc c73=73;\n\tc c74=74;\n\tc c75=75;\n\tc c76=76;\n\tc c77=77;\n\tc c78=78;\n\tc c79=79;\n\tc c80=80;\n\tc c81=81;\n\tc c82=82;\n\tc c83=83;\n\tc c84=84;\n\tc c85=85;\n\tc c86=86;\n\tc c87=87;\n\tc c88=88;\n\tc c89=89;\n\tc c90=90;\n\tc c91=91;\n\tc c92=92;\n\tc c93=93;\n\tc c94=94;\n\tc c95=95;\n\tc c96=96;\n\tc c97=97;\n\tc c98=98;\n\tc c99=99;\n\tc c100=100;\n\tc c101=101;\n\tc c102=102;\n\tc c103=103;\n\tc c104=104;\n\tc c105=105;\n\tc c106=106;\n\tc c107=107;\n\tc c108=108;\n\tc c109=109;\n\tc c110=110;\n\tc c111=111;\n\tc c112=112;\n\tc c113=113;\n\tc c114=114;\n\tc c115=115;\n\tc c116=116;\n\tc c117=117;\n\tc c118=118;\n\tc"}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whether the given number ncan b e written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 0, "perturbed": true, "gc": "/*\nEvaluate whether the given number ncan b e written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n\tif(n%2==0){\n\t\treturn n/2==(int)sqrt(n);\n\t}\n\treturn false;\n}\nint main(){\n\tint t,n;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tscanf(\"%d\",&n);\n\t\tif(is_equal_to_sum_even(n))\n\t\t\tprintf(\"true\\n\");\n\t\telse\n\t\t\tprintf(\"false\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined a s:\nbr azilian_factorial(n) = n! * (n-1)!* (n-2)! * ... * 1!\nwhere n > 0\n\nForexamp le:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 0, "perturbed": true, "gc": "/*\nThe Brazilian factorial is defined a s:\nbr azilian_factorial(n) = n! * (n-1)!* (n-2)! *... * 1!\nwhere n > 0\n\nForexamp le:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    if (n<=0) return 1;\n    return special_factorial(n-1)*n;\n}\n\nint main(){\n    int n;\n    printf(\"\\nEnter n = \");\n    scanf(\"%d\", &n);\n    printf(\"The special factorial of %d is %lld\", n, special_factorial(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/140", "prompt": "/*\nGiven a string text, replace all spa ces i n it with underscores, \nand if a string has more than 2 consecutive spac es, then re p lace al l consecu tive spaces with - \n\nfix_spa ces (\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string text, replace all spa ces i n it with underscores, \nand if a string has more than 2 consecutive spac es, then re p lace al l consecu tive spaces with - \n\nfix_spa ces (\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n\tint pos = 0;\n\tfor (int i = 0; i < text.length(); i++){\n\t\tif (text[i] ==''){\n\t\t\tif (text[i + 1] ==''){\n\t\t\t\ttext[pos] = '-';\n\t\t\t\ttext[pos + 1] ='';\n\t\t\t\tpos += 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttext[pos] ='';\n\t\t\t\tpos++;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\ttext[pos] = text[i];\n\t\t\tpos++;\n\t\t}\n\t}\n\treturn text;\n}\n\nint main(){\n\tstring text;\n\tcin >> text;\n\tcout << fix_spaces(text);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function which takes a stri ng re presenting a file's name, and returns\n\"Yes\" if the the file's name is va lid,and ret u rns \"No \" otherwi se.\nA file's name is conside red  to be valid i f and only if  all the following conditi ons \nare met:\n- There s h ould n ot be morethan th ree digit s ('0'-'9') in the file's na me.\n- The file's name c ontains exactly one dot \".\" \n- The subs tr i ng before the dot should not  beempty, andi t starts wi tha letter from \nthe latin alphapet('a'-'z' and 'A'-'Z').\n-  Th e subst ri ngafter t he  dot should be one of these:  { 'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function which takes a stri ng re presenting a file's name, and returns\n\"Yes\" if the the file's name is va lid,and ret u rns \"No \" otherwi se.\nA file's name is conside red  to be valid i f and only if  all the following conditi ons \nare met:\n- There s h ould n ot be morethan th ree digit s ('0'-'9') in the file's na me.\n- The file's name c ontains exactly one dot \".\" \n- The subs tr i ng before the dot should not  beempty, andi t starts wi tha letter from \nthe latin alphapet('a'-'z' and 'A'-'Z').\n-  Th e subst ri ngafter t he  dot should be one of these:  { 'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n\tstring valid_file_name = \"\";\n\tbool flag = true;\n\tchar * str = (char *)file_name.c_str();\n\tfor(int i = 0; str[i]!= '\\0'; i++) {\n\t\tif((str[i] >= '0' && str[i] <= '9') || (str[i] >= 'a' && str[i] <= 'z' ) || (str[i] >= 'A' && str[i] <= 'Z' ) || str[i] == '.') {\n\t\t\tvalid_file_name += str[i];\n\t\t}\n\t\telse {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(flag) {\n\t\tif(file_name.length() == valid_file_name.length()) {\n\t\t\treturn \"Yes\";\n\t\t}\n\t\telse {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\telse {\n\t\treturn \"No\";\n\t}\n}\nint main() {\n\tstring file_name = \"\";\n\tcout<<\"Enter a file name: \";\n\tcin>>file_name;\n\tcout<<file_name_check(file_name);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThis function will take a vector o f int egers. For all entries in the vector, the function shallsquare the inte ger e ntry if its ind ex is a multiple of 3 and will cubethe  integer entry  if its index  is a multiple of4 and no t a multiple of 3. Thef unctio n will not\nchange  the entr ies inthe vector whoseinde xes are not amultipleof 3 or 4. The function sha ll thenret ur n  the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\n\"\nThis function will take a vector o f int egers. For all entries in the vector, the function shallsquare the inte ger e ntry if its ind ex is a multiple of 3 and will cubethe  integer entry  if its index  is a multiple of4 and no t a multiple of 3. Thef unctio n will not\nchange  the entr ies inthe vector whoseinde xes are not amultipleof 3 or 4. The function sha ll thenret ur n  the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] % 3 == 0){\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t\tif(lst[i] % 4 == 0){\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i = 0; i < n; i++){\n\t\tint a;\n\t\tscanf(\"%d\",&a);\n\t\tlst.push_back(a);\n\t}\n\tint sum = sum_squares(lst);\n\tprintf(\"%d\",sum);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representinga sen tence,\nthe sentence contains some words separated by a space,\nand you ha ve to  return a strin g that co ntains thewords from the or igi nal sentence,whose lengths  are prime numbers,\nthe or der of the words in the new st ring should  be the  same asthe original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string representinga sen tence,\nthe sentence contains some words separated by a space,\nand you ha ve to  return a strin g that co ntains thewords from the or igi nal sentence,whose lengths  are prime numbers,\nthe or der of the words in the new st ring should  be the  same asthe original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n\tint len=sentence.length();\n\tint n=len;\n\tfor(int i=0;i<len;i++){\n\t\tif(sentence[i]==' '){\n\t\t\tn=n*2;\n\t\t\tif(n%len==0){\n\t\t\t\tint k=n/len;\n\t\t\t\tif(k%2==0){\n\t\t\t\t\treturn sentence.substr(i+1,k-1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sentence;\n}\nint main(){\n\tstring sentence;\n\twhile(cin>>sentence){\n\t\tcout<<words_in_sentence(sentence)<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function  that  will simplify the expression\nx * n. The function returns true if x * nevalu ates to a whole  number a nd false\notherwise. Both x a ndn, are stringrepresentatio n of a fraction, and havethe following format,\n< n umerat or>/<denomi nator>where bot h numerator and denominatorare positive whole numb ers.\n\nYou can assume that x , and nare  v a lid fractions, and do not ha ve zero as denom inator.\n\nsi mpl ify(\"1/5\", \"5/1\") = true\nsimplify( \"1/6\", \"2/1\") = false\nsi mpl ify(\"7/ 10 \",\"10/2\")  =  false\n*/\n#include<stdio.h>#i nclude<string>\nusing namespace std;\nboo l s implify(string x ,string n){ \n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*\nYour task is to implement a function  that  will simplify the expression\nx * n. The function returns true if x * nevalu ates to a whole  number a nd false\notherwise. Both x a ndn, are stringrepresentatio n of a fraction, and havethe following format,\n< n umerat or>/<denomi nator>where bot h numerator and denominatorare positive whole numb ers.\n\nYou can assume that x, and nare  v a lid fractions, and do not ha ve zero as denom inator.\n\nsi mpl ify(\"1/5\", \"5/1\") = true\nsimplify( \"1/6\", \"2/1\") = false\nsi mpl ify(\"7/ 10 \",\"10/2\")  =  false\n*/\n#include<stdio.h>#i nclude<string>\nusing namespace std;\nboo l s implify(string x,string n){ \n\tlong int xa,xa1,xa2,xa3,xa4,xa5,xa6,xa7,xa8,xa9,xa10,xa11,xa12,xa13,xa14,xa15,xa16,xa17,xa18,xa19,xa20,xa21,xa22,xa23,xa24,xa25,xa26,xa27,xa28,xa29,xa30,xa31,xa32,xa33,xa34,xa35,xa36,xa37,xa38,xa39,xa40,xa41,xa42,xa43,xa44,xa45,xa46,xa47,xa48,xa49,xa50,xa51,xa52,xa53,xa54,xa55,xa56,xa57,xa58,xa59,xa60,xa61,xa62,xa63,xa64,xa65,xa66,xa67,xa68,xa69,xa70,xa71,xa72,xa73,xa74,xa75,xa76,xa77,xa78,xa79,xa80,xa81,xa82,xa83,xa84,xa85,xa86,xa87,xa88,xa89,xa90,xa91,xa92,xa93,xa94,xa95,xa96,xa97,xa98,xa99,xa100,xa101,xa102,xa103,xa104,xa105,xa106,xa107,xa108,xa109,xa110,xa111,xa112,xa113,xa114,xa115,xa116,xa117,xa118,xa119,xa120,xa121,xa122,xa123,xa124,xa125,xa126,xa127,xa128,xa129,xa130,xa131,xa132,xa133,xa134,xa135,xa136,xa137,xa138,xa139,xa140,xa141,xa142,xa143,xa144,xa145,xa146,xa147,xa148,xa149,xa150,xa151,xa152,xa153,xa154,xa155,xa156,xa157,xa158,xa159,xa160,xa161,xa162,xa163,xa164,xa165,xa166,xa167,xa168,xa169,xa170,xa171,xa172,xa173,xa174,xa175,xa176,xa177,xa178,xa179,xa180,xa181,xa182,xa183,xa184,xa185,xa186,xa187,xa188,xa189,xa190,xa191,xa192,xa193,xa194,xa195,xa196,xa197,xa198,xa199,xa200,xa201,xa202,xa203,xa204,xa205,xa206,xa207,xa208,xa209,xa210,xa211,xa212,xa213,xa214,xa215,xa216,xa217,xa218,xa219,xa220,xa221,xa222,xa223,xa224,xa225,xa226,xa227,xa228,xa229,xa230,xa231,xa232,xa233,xa234,xa235,xa236,xa237,xa238,xa239,xa240,xa241,xa242,xa243,xa244,xa245,xa246,xa247,xa248,xa249,xa250,xa251,xa252,xa253,xa254,xa255,xa256,xa257,xa258,xa259,xa260,xa261,xa262,xa263,xa264,xa265,xa266,xa267,xa268,xa269,xa270,xa271,xa272,xa273,xa274,xa275,xa276,xa277,xa278,xa279,xa280,xa281,xa282,xa283,xa284,xa285,xa286,xa287,xa288,xa289,xa290,xa291,xa292,xa293,xa294,xa295,xa296,xa297,xa298,xa299,xa300,xa301,xa302,xa303,xa304,xa305,xa306,xa307,xa308,xa309,xa310,xa311,xa312,xa313,xa314,xa315,xa316,xa317,xa318,xa319,xa320,xa321,xa322,xa323,xa324,xa325,xa326,xa327,xa328,xa329,xa330,xa331,xa332,xa333,xa334,xa335,xa336,xa337,xa338,xa339,xa340,xa341,xa342,xa343,xa344,xa345,xa346,xa347,xa348,xa349,xa350,xa351,xa352,xa353,xa354,xa355,xa356,xa357,xa358,xa359,xa360,xa361,xa362,xa363,xa364,xa365,xa366,xa367,xa368,xa369,xa370,xa371,xa372,xa373,xa374,xa375,xa376,xa377,xa378,xa379,xa380,xa381,xa382,xa383,xa384,xa385,xa386,xa387,xa388,xa389,xa390,xa391,xa392,xa393,xa394,xa395,xa396,xa397,xa398,xa399,xa400,xa401,xa402,xa403,xa404,xa405,xa406,xa407,xa408,xa409,xa410,xa411,xa412,xa413,xa414,xa415,xa416,xa417,xa418,xa419,xa420,xa421,xa422,xa423,xa424,xa425,xa426,xa427,xa428,xa429,xa430,xa431,xa432,xa433,xa434,xa435,xa436,xa"}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function which sorts the giv en ve ctor of integers\nin ascending order according to the sumof their digits .\nNot e: if t h ere are  severalitems withsimilar sum of th eir  digits,\norder  them based o n their index in originalvector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function which sorts the giv en ve ctor of integers\nin ascending order according to the sumof their digits.\nNot e: if t h ere are  severalitems withsimilar sum of th eir  digits,\norder  them based o n their index in originalvector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sorted;\n    vector<int> result;\n    for(int i=0;i<nums.size();i++){\n        if(i==0){\n            result.push_back(nums[i]);\n        }else{\n            int sum=0;\n            for(int j=0;j<nums[i];j++){\n                sum+=nums[i-j];\n            }\n            if(sum<result.back()){\n                result.push_back(nums[i]);\n            }\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> nums;\n    nums.push_back(1);\n    nums.push_back(2);\n    nums.push_back(2);\n    nums.push_back(3);\n    nums.push_back(4);\n    nums.push_back(4);\n    nums.push_back(4);\n    nums.push_back(4);\n    nums.push_back(5);\n    nums.push_back(6);\n    nums.push_back(7);\n    nums.push_back(9);\n    nums.push_back(9);\n    nums.push_back(9);\n    nums.push_back(9);\n    nums.push_back(9);\n    nums.push_back(10);\n    nums.push_back(11);\n    nums.push_back(12);\n    nums.push_back(13);\n    nums.push_back(14);\n    nums.push_back(15);\n    nums.push_back(16);\n    nums.push_back(17);\n    nums.push_back(18);\n    nums.push_back(19);\n    nums.push_back(20);\n    nums.push_back(21);\n    nums.push_back(22);\n    nums.push_back(23);\n    nums.push_back(24);\n    nums.push_back(25);\n    nums.push_back(26);\n    nums.push_back(27);\n    nums.push_back(28);\n    nums.push_back(29);\n    nums.push_back(30);\n    nums.push_back(31);\n    nums.push_back(32);\n    nums.push_back(33);\n    nums.push_back(34);\n    nums.push_back(35);\n    nums.push_back(36);\n    nums.push_back(37);\n    nums.push_back(38);\n    nums.push_back(39);\n    nums.push_back(40);\n    nums.push_back(41);\n    nums.push_back(42);\n    nums.push_back(43);\n    nums.push_back(44);\n    nums.push_back(45);\n    nums.push_back(46);\n    nums.push_back(47);\n    nums.push_back(48);\n    nums.push_back(49);\n    nums.push_back(50);\n    nums.push_back(51);\n    nums.push_back(52);\n    nums.push_back(53);\n    nums.push_back(54);\n    nums.push_back(55);\n    nums.push_back(56);\n    nums.push_back(57);\n    nums.push_back(58);\n    nums.push_back(59);\n    nums.push_back(60);\n    nums.push_back(61);\n    nums.push_back(62);\n    nums.push_back(63);\n    nums.push_back(64);\n    nums.push_back(65);\n    nums.push_back(66);\n    nums.push_back(67);\n    nums.push_back(68);\n    nums.push_back(69);\n    nums.push_back(70);\n    nums.push_back(71);\n    nums.push_back(72);\n    nums.push_back(73);\n    nums.push_back(74);\n    nums.push_back(75);\n    nums.push_back(76);\n    nums.push_back(77);\n    nums.push_back(78);\n    nums.push_back(79);\n    nums.push_back(80);\n    nums.push_back(81);\n    nums.push_back(82);\n    nums.push_back(83);\n    nums.push_back(84);\n    nums.push_back(85);\n    nums.push_back(86);\n    nums.push_back(87);\n    nums.push_back(88);\n    nums.push_back(89);\n    nums.push_back(90);\n    nums.push_back(91);\n    nums.push_back(92);\n    nums.push_back(93);\n    nums.push_back(94);\n    nums.push_back(95);\n    nums.push_back(96);\n    nums.push_back(97);\n    nums.push_back(98);\n    nums.push_back(99);\n    nums.push_back(100);\n    nums.push_back(101);\n    nums.push_back(102);\n    nums.push_back(103);"}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes a vector  of n umbers as input and returns \nthe number of elements in the vector that a re gr eater t h an 10 a nd both first and last digits of a n umb er are odd (1,  3, 5, 7, 9). \nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a vector  of n umbers as input and returns \nthe number of elements in the vector that a re gr eater t h an 10 a nd both first and last digits of a n umb er are odd (1,  3, 5, 7, 9). \nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n\tint i = 0;\n\tint flag = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tif((nums[i] % 10 == 1) && (nums[i] % 2 == 1)){\n\t\t\tflag++;\n\t\t}\n\t}\n\treturn flag;\n}\nint main(){\n\tint n, m;\n\tvector<int> nums;\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < n; i++){\n\t\tscanf(\"%d\", &m);\n\t\tnums.push_back(m);\n\t}\n\tint flag = specialFilter(nums);\n\tprintf(\"%d\\n\", flag);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/147", "prompt": "/*\nYou are given a positive integer n.You h ave to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n ), th e value of a{i}  = i * i- i + 1.\n   Return the numb erof triples (a{ i}, a{j}, a{k }) of a where i <j < k, and a[i] + a[j] + a[k]i s a mu ltiple of 3 .\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a positive integer n.You h ave to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n ), th e value of a{i}  = i * i- i + 1.\n   Return the numb erof triples (a{ i}, a{j}, a{k }) of a where i <j < k, and a[i] + a[j] + a[k]i s a mu ltiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a(n,0);\n    int i = 1, j = 1, k = 1;\n    while(i <= n - 1){\n        a[k] = i*i- i + 1;\n        while(j <= n - 1){\n            if(a[i] + a[j] + a[k] > 0){\n                printf(\"(%d,%d,%d)\\n\", a[i], a[j], a[k]);\n            }\n            j++;\n        }\n        j = 1;\n        k++;\n        i++;\n    }\n    return 0;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    get_matrix_triples(n);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar  syst em: the closerst to the Sun \nis Mercury, the next one isVenus, then Ear th, M ars, Ju p iter, S aturn, \nU ranus, Neptune.\nWrite a func tio n that takes t wo planet nam es as strings planet1 andplanet2. \nThe functions houldreturn a ve ctor co ntainingall planets whose orbitsare  \nlocated between the o rbit of planet1 and the orb it of plane t2 ,  sorted by \nthe proximity to  the sun.\nThef unction sho uld  return an empty vector if planet1  or planet2\nare not corr ect  planet  n ames. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/*\nThere are eight planets in our solar  syst em: the closerst to the Sun \nis Mercury, the next one isVenus, then Ear th, M ars, Ju p iter, S aturn, \nU ranus, Neptune.\nWrite a func tio n that takes t wo planet nam es as strings planet1 andplanet2. \nThe functions houldreturn a ve ctor co ntainingall planets whose orbitsare  \nlocated between the o rbit of planet1 and the orb it of plane t2,  sorted by \nthe proximity to  the sun.\nThef unction sho uld  return an empty vector if planet1  or planet2\nare not corr ect  planet  n ames. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n\tvector<string> ret;\n\tif(planet1.compare(\"Jupiter\")==0 && planet2.compare(\"Earth\")==0)\n\t\tret.push_back(\"Saturn\");\n\telse if(planet1.compare(\"Mercury\")==0 && planet2.compare(\"Earth\")==0)\n\t\tret.push_back(\"Venus\");\n\telse if(planet1.compare(\"Mercury\")==0 && planet2.compare(\"Jupiter\")==0)\n\t\tret.push_back(\"Earth\");\n\telse if(planet1.compare(\"Jupiter\")==0 && planet2.compare(\"Mercury\")==0)\n\t\tret.push_back(\"Mars\");\n\telse if(planet1.compare(\"Jupiter\")==0 && planet2.compare(\"Saturn\")==0)\n\t\tret.push_back(\"Uranus\");\n\telse if(planet1.compare(\"Saturn\")==0 && planet2.compare(\"Jupiter\")==0)\n\t\tret.push_back(\"Neptune\");\n\telse if(planet1.compare(\"Uranus\")==0 && planet2.compare(\"Mercury\")==0)\n\t\tret.push_back(\"Earth\");\n\telse if(planet1.compare(\"Uranus\")==0 && planet2.compare(\"Jupiter\")==0)\n\t\tret.push_back(\"Mars\");\n\telse if(planet1.compare(\"Uranus\")==0 && planet2.compare(\"Saturn\")==0)\n\t\tret.push_back(\"Neptune\");\n\telse if(planet1.compare(\"Neptune\")==0 && planet2.compare(\"Mercury\")==0)\n\t\tret.push_back(\"Earth\");\n\telse if(planet1.compare(\"Neptune\")==0 && planet2.compare(\"Jupiter\")==0)\n\t\tret.push_back(\"Mars\");\n\telse if(planet1.compare(\"Neptune\")==0 && planet2.compare(\"Saturn\")==0)\n\t\tret.push_back(\"Earth\");\n\telse if(planet1.compare(\"Saturn\")==0 && planet2.compare(\"Neptune\")==0)\n\t\tret.push_back(\"Uranus\");\n\telse if(planet1.compare(\"Mercury\")==0 && planet2.compare(\"Neptune\")==0)\n\t\tret.push_back(\"Jupiter\");\n\telse if(planet1.compare(\"Mercury\")==0 && planet2.compare(\"Saturn\")==0)\n\t\tret.push_back(\"Earth\");\n\telse if(planet1.compare(\"Mercury\")==0 && planet2.compare(\"Jupiter\")==0)\n\t\tret.push_back(\"Mars\");\n\telse if(planet1.compare(\"Jupiter\")==0 && planet2.compare(\"Saturn\")==0)\n\t\tret.push_back(\"Uranus\");\n\telse if(planet1.compare(\"Saturn\")==0 && planet2.compare(\"Jupiter\")==0)\n\t\tret.push_back(\"Neptune\");\n\treturn ret;\n}\nint main(){\n\tvector<string> ret=bf(\"Jupiter\", \"Earth\");\n\tfor(int i=0;i<ret.size();i++)\n\t\tprintf(\"%s\\n\", ret[i].c_str());\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that accepts a vect or of  strings asa parameter,\ndeletes the strings that have odd lengths fromit,\na nd retu r ns theresultedvector with a sorted order,The  vector is alw ays a vectorof strings and never a vec tor of numbers,\nand itm ay con tain duplic ates.\nT he orderofthevector should beasce nding by length of each  word, and you\nshould retur n the vecto rs orted by that rule.\nIf two w ords havethe sa me length,sor t the vector alphabetically.\nThef unctionshould return avec torofst rings in s or ted order.\nYou may assume th at all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts a vect or of  strings asa parameter,\ndeletes the strings that have odd lengths fromit,\na nd retu r ns theresultedvector with a sorted order,The  vector is alw ays a vectorof strings and never a vec tor of numbers,\nand itm ay con tain duplic ates.\nT he orderofthevector should beasce nding by length of each  word, and you\nshould retur n the vecto rs orted by that rule.\nIf two w ords havethe sa me length,sor t the vector alphabetically.\nThef unctionshould return avec torofst rings in s or ted order.\nYou may assume th at all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out;\n    int n=lst.size();\n    string str;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(str.length()<lst[i].length()+lst[j].length()){\n                str.append(lst[j]);\n                out.push_back(str);\n                str.clear();\n            }\n        }\n        str.append(lst[i]);\n        out.push_back(str);\n        str.clear();\n    }\n    return out;\n}\n\nint main(){\n    vector<string> lst={\"aa\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\"};\n    vector<string> sorted_list=sorted_list_sum(lst);\n    for(int i=0;i<sorted_list.size();i++){\n        cout<<sorted_list[i]<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/150", "prompt": "/*\nA simple program which should return  thevalue of x if n is \na prime numberand should return thevalue of y othe rwise .\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 0, "perturbed": true, "gc": "/*\nA simple program which should return  thevalue of x if n is \na prime numberand should return thevalue of y othe rwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if(n%2==0){\n        return x;\n    }else{\n        return y;\n    }\n}\n\nint main(){\n    int n;\n    int x,y;\n    printf(\"enter the number to find the  x or y value:\");\n    scanf(\"%d\",&n);\n    printf(\"enter x or y value:\");\n    scanf(\"%d\",&x);\n    printf(\"x_or_y(%d,%d,%d) = %d\",n,x,y,x_or_y(n,x,y));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of numbers, return th e sum  of squaresof the numbers\nin the vector that are odd. Ignore numbers th at ar e negat i ve or n ot intege rs.\n\ndouble_the_difference({ 1,3, 2, 0}) == 1  + 9 + 0 + 0= 10\ndouble_the_difference ({-1, -2, 0}) == 0\ndoub l e_the_ difference( {9, -2} ) == 81\nd ouble_the_difference({0}) ==  0  \n\nIf the input vect or is empty, return 0.\n*/\n# include<std io . h>\n#include<math.h>\n#include <vector>\nusingn amespace st d;long long double_the_difference(ve ctor<float> lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of numbers, return th e sum  of squaresof the numbers\nin the vector that are odd. Ignore numbers th at ar e negat i ve or n ot intege rs.\n\ndouble_the_difference({ 1,3, 2, 0}) == 1  + 9 + 0 + 0= 10\ndouble_the_difference ({-1, -2, 0}) == 0\ndoub l e_the_ difference( {9, -2} ) == 81\nd ouble_the_difference({0}) ==  0  \n\nIf the input vect or is empty, return 0.\n*/\n# include<std io. h>\n#include<math.h>\n#include <vector>\nusingn amespace st d;long long double_the_difference(ve ctor<float> lst){\n\tif (lst.size() <= 0)\n\t\treturn 0;\n\tdouble a = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]!= 0) {\n\t\t\ta = a + pow(lst[i], 2);\n\t\t}\n\t}\n\treturn a;\n}\nusing namespace std;\nint main() {\n\tint t;\n\tcin >> t;\n\twhile (t-- > 0) {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<int> vec(n);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcin >> vec[i];\n\t\t}\n\t\tcout << double_the_difference(vec) << endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling  when  the resultof some long-awaited\nevent is finally known.The feelings an d tho ughts y o u haveat that m oment are\ndefinitely worth n oti ng down and co mparing.\nYour  task is to determine if a  person correctly guess e d theresults ofa numbe r of matc hes.\nYou are given two vecto rs of scores and guesse s of equal length, where ea ch indexsh ow s  a match. \nReturn a vector o f the same lengt h denotinghow  far off each guess was. If theyh ave guessed correctly,\nt hevalue i s0,and ifno t, the value is the absolute  d ifference between the guess and the sco re. \n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*\nI think we all remember that feeling  when  the resultof some long-awaited\nevent is finally known.The feelings an d tho ughts y o u haveat that m oment are\ndefinitely worth n oti ng down and co mparing.\nYour  task is to determine if a  person correctly guess e d theresults ofa numbe r of matc hes.\nYou are given two vecto rs of scores and guesse s of equal length, where ea ch indexsh ow s  a match. \nReturn a vector o f the same lengt h denotinghow  far off each guess was. If theyh ave guessed correctly,\nt hevalue i s0,and ifno t, the value is the absolute  d ifference between the guess and the sco re. \n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n\tvector<int> ans(guess.size(),0);\n\tfor(int i=0;i<guess.size();i++){\n\t\tans[i]=abs(guess[i]-game[i]);\n\t}\n\treturn ans;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> game(n);\n\tvector<int> guess(n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&game[i]);\n\t}\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&guess[i]);\n\t}\n\tvector<int> ans=compare(game,guess);\n\tfor(int i=0;i<n;i++){\n\t\tprintf(\"%d \",ans[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given the name of a clas s (astring) anda vector of extensions.\nThe extensions are to be used to loa d add itional classes  to the c lass. The\nstrength of the ex ten sion is as fol lows: Let CAP  be the number ofthe uppe rcase\nletters in the ex t ension 's name, an d let S M be thenumberof lowercase letters\nin the extension's nam e, the strength is given by  the fracti on CAP - SM. \nYou should find t he strongest ext ension andret urn a string in this \nformat: Clas sName.StrongestExtension Nam e.\nIf t he reare two  o r more extensions with the s am estrength, you should\nchoose the one t hat  comes first inthe vector. \nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given the name of a clas s (astring) anda vector of extensions.\nThe extensions are to be used to loa d add itional classes  to the c lass. The\nstrength of the ex ten sion is as fol lows: Let CAP  be the number ofthe uppe rcase\nletters in the ex t ension's name, an d let S M be thenumberof lowercase letters\nin the extension's nam e, the strength is given by  the fracti on CAP - SM. \nYou should find t he strongest ext ension andret urn a string in this \nformat: Clas sName.StrongestExtension Nam e.\nIf t he reare two  o r more extensions with the s am estrength, you should\nchoose the one t hat  comes first inthe vector. \nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\tint cap = 0, strength = 0;\n\tfor(int i = 0; i< class_name.length(); i++){\n\t\tif(class_name[i] >= 'A' && class_name[i] <= 'Z'){\n\t\t\tcap++;\n\t\t}\n\t\tif(class_name[i] >= 'a' && class_name[i] <= 'z'){\n\t\t\tcap++;\n\t\t}\n\t}\n\tfor(int i = 0; i<extensions.size(); i++){\n\t\tint c = 0;\n\t\tfor(int j = 0; j<extensions[i].length(); j++){\n\t\t\tif(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n\t\t\t\tc++;\n\t\t\t}\n\t\t\tif(extensions[i][j] >= 'a' && extensions[i][j] <= 'z'){\n\t\t\t\tc++;\n\t\t\t}\n\t\t}\n\t\tif(c > strength){\n\t\t\tstrength = c;\n\t\t}\n\t}\n\tstring s = class_name + \".\" + extensions[0];\n\tfor(int i = 1; i<extensions.size(); i++){\n\t\tif(strength - extensions[i].length() > strength){\n\t\t\ts = s + \".\" + extensions[i];\n\t\t}\n\t}\n\treturn s;\n}\nint main(){\n\tstring class_name;\n\tvector<string> extensions;\n\tcin >> class_name >> extensions;\n\tcout << Strongest_Extension(class_name, extensions);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need to r eturn  true if the second word or any ofits rotations is a substring in the f irstword\ncy c pattern _check(\"a bcd\",\"abd\") => false\ncycpatt ern _check(\"hello\" ,\"ell\") => tr ue\ncycpattern_check(\"whass up\",\"psus\")=> false\ncy c patter n_check(\"ab ab\",\"ba a\") => tr uecycpattern_check(\"efef\",\" eeff\") => false\ncycpatt ern_check(\"himenss\",'simen\" ) => true\n*/ #include<stdio.h>\n#include<s tring>\nusing nam espace std; \nbo ol cycpattern_check(string a,strin g b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 0, "perturbed": true, "gc": "/*\nYou are given 2 words. You need to r eturn  true if the second word or any ofits rotations is a substring in the f irstword\ncy c pattern _check(\"a bcd\",\"abd\") => false\ncycpatt ern _check(\"hello\",\"ell\") => tr ue\ncycpattern_check(\"whass up\",\"psus\")=> false\ncy c patter n_check(\"ab ab\",\"ba a\") => tr uecycpattern_check(\"efef\",\" eeff\") => false\ncycpatt ern_check(\"himenss\",'simen\" ) => true\n*/ #include<stdio.h>\n#include<s tring>\nusing nam espace std; \nbo ol cycpattern_check(string a,strin g b){\n    for(int i=0;i<a.length();i++){\n        for(int j=0;j<b.length();j++){\n            if(a[i]==b[j])return 1;\n        }\n    }\n    return 0;\n}\nint main(){\n    int t;\n    string a,b;\n    cin>>t;\n    while(t--){\n        cin>>a>>b;\n        if(cycpattern_check(a,b)){\n            printf(\"true\");\n        }else{\n            printf(\"false\");\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. return a vector th at ha s the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGiven an integer. return a vector th at ha s the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n\tvector<int> v;\n\tint n = num;\n\tint i = 0;\n\twhile(n){\n\t\tif(n%2){\n\t\t\tv[i]++;\n\t\t}\n\t\telse{\n\t\t\tv[i]++;\n\t\t}\n\t\tn = n/2;\n\t\ti++;\n\t}\n\treturn v;\n}\n\nint main(){\n\tint num;\n\twhile(scanf(\"%d\", &num)==1){\n\t\tvector<int> v = even_odd_count(num);\n\t\tfor(int i = 0;i<v.size();i++){\n\t\t\tprintf(\"%d \", v[i]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive integer, obtain its  roma n numeral equivalent as a string,\nand return it in lowercase.\nRestrictio ns: 1  <= num <= 1000 \n\nExample s:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer, obtain its  roma n numeral equivalent as a string,\nand return it in lowercase.\nRestrictio ns: 1  <= num <= 1000 \n\nExample s:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n    if (number < 1 || number > 1000)\n        return \"Invalid number\";\n    vector<string> romans = { \"\", \"\", \"m\", \"d\", \"c\", \"l\", \"x\", \"v\", \"i\", \"x\", \"b\" };\n    vector<int> remainders = {1, 1, 2, 2, 2, 2, 2, 4, 4, 4, 8 };\n    int roman_numeral = 0;\n    int index = 0;\n    while (number >= remainders[index]){\n        roman_numeral += remainders[index];\n        number -= remainders[index];\n        index++;\n    }\n    return romans[roman_numeral] + int_to_mini_romank(number);\n}\nint main(){\n    int number = 0;\n    cin >> number;\n    string roman_numeral = int_to_mini_romank(number);\n    cout << roman_numeral << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths of the three sides  of a  triangle. Return true if the three\nsides form a right-angled triangle,false  otherw i se.\nA r ight-angl ed triangle is a triangle in  wh ich one angleis right angl e or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 0, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides  of a  triangle. Return true if the three\nsides form a right-angled triangle,false  otherw i se.\nA r ight-angl ed triangle is a triangle in  wh ich one angleis right angl e or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    if(a==b&&b==c)\n        return true;\n    float k=a*a+b*b-c*c;\n    if(k<0)\n        return false;\n    float x=sqrt(k);\n    float k1=a*a+c*c-x*x;\n    float k2=b*b+c*c-x*x;\n    float k3=a*b+b*c-x*x;\n    if(k1<0&&k2<0&&k3<0)\n        return true;\n    return false;\n}\nint main(){\n    float a,b,c;\n    while(scanf(\"%f%f%f\",&a,&b,&c)!=EOF){\n        printf(\"right angle triangle:%s\\n\",right_angle_triangle(a,b,c)? \"true\" : \"false\");\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts a vect or of  strings.\nThe vector contains different words. Return the word with maxi mum n umber\no f  unique  characte rs. If multiple strings have  ma ximum number o f unique\nchar acters, return the one whi chcomes first in lexic o graphi cal order.\nfind_m ax({\"name \",\"of\", 'string\"}) == 'stri ng\"\nfind_max({\"name\", \" enam\", \"game\"}) == \"enam\"\nf ind_max({\"a aa a aaa\", \"bb\" ,\"cc\"}) == \"aaaaa aa\"*/\n#include< stdio.h>\n#i ncl ude<vector>\n#include<string>\n#incl ude<algorithm>\nusingnam esp acestd ;string fin d_ max(vector<string> words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts a vect or of  strings.\nThe vector contains different words. Return the word with maxi mum n umber\no f  unique  characte rs. If multiple strings have  ma ximum number o f unique\nchar acters, return the one whi chcomes first in lexic o graphi cal order.\nfind_m ax({\"name \",\"of\",'string\"}) =='stri ng\"\nfind_max({\"name\", \" enam\", \"game\"}) == \"enam\"\nf ind_max({\"a aa a aaa\", \"bb\",\"cc\"}) == \"aaaaa aa\"*/\n#include< stdio.h>\n#i ncl ude<vector>\n#include<string>\n#incl ude<algorithm>\nusingnam esp acestd ;string fin d_ max(vector<string> words){\n\tint i = 0;\n\tint j = 1;\n\tint k = 2;\n\tint m = 0;\n\tfor(int i = 0; i < words.size(); i++){\n\t\tif(words[i].size() < words[j].size()){\n\t\t\tj = i;\n\t\t}\n\t\tif(words[i].size() == words[k].size()){\n\t\t\tif(strcmp(words[i].c_str(), words[k].c_str()) == 0){\n\t\t\t\tk = i;\n\t\t\t}\n\t\t}\n\t\tif(words[i].size() > words[j].size()){\n\t\t\tj = i;\n\t\t}\n\t}\n\treturn words[j];\n}\nint main()\n{\n\tvector<string> v;\n\tv.push_back(\"name \");\n\tv.push_back(\"of\");\n\tv.push_back(\"string\");\n\tv.push_back(\"game\");\n\tv.push_back(\"name\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"bb\");\n\tv.push_back(\"cc\");\n\tv.push_back(\"a aa a aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aa\");\n\tv.push_back(\"aaa\");\n\tv.push"}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\nbut now you need to eat more carr ots t o compl e te theday's mea ls.\nyou should return a vect orof { total num ber of eatencarrots after your meals,                           the numbe r of ca rrots lef t after your meals }\nifther e are not enough remain ing carrots, you will eat a ll remainin gc arrots, but will still be hu ngry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\nYou\"re a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\nbut now you need to eat more carr ots t o compl e te theday's mea ls.\nyou should return a vect orof { total num ber of eatencarrots after your meals,                           the numbe r of ca rrots lef t after your meals }\nifther e are not enough remain ing carrots, you will eat a ll remainin gc arrots, but will still be hu ngry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n\tvector<int> ret;\n\tint num=0;\n\twhile(num<need){\n\t\tret.push_back(number);\n\t\tnumber=number-1;\n\t\tnum++;\n\t}\n\twhile(num>=remaining){\n\t\tret.push_back(remaining);\n\t\tnum=num-remaining;\n\t}\n\treturn ret;\n}\nint main(){\n\tint number,need,remaining;\n\twhile(scanf(\"%d %d %d\",&number,&need,&remaining)!=EOF){\n\t\tvector<int> ret=eat(number,need,remaining);\n\t\tfor(int i=0;i<ret.size();i++)\n\t\t\tprintf(\"%d \",ret[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors operator, and oper and.The first vector has basic algebraoperations, and \nthe second vector is  a ve ctor of integer s. Use th e two given vectors to build  th e algebric \nex pression andreturn the evaluation of t his expression.\n\nThe ba s ic alg ebra operat ions:\nA ddition (  +) \nSubtraction ( - )Mul tiplication (* ) \nFloo r division ( // ) \nExponent iation (**  )  \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 0, "perturbed": true, "gc": "/*\nGiven two vectors operator, and oper and.The first vector has basic algebraoperations, and \nthe second vector is  a ve ctor of integer s. Use th e two given vectors to build  th e algebric \nex pression andreturn the evaluation of t his expression.\n\nThe ba s ic alg ebra operat ions:\nA ddition (  +) \nSubtraction ( - )Mul tiplication (* ) \nFloo r division ( // ) \nExponent iation (**  )  \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> result;\n    int result_length = operato.size();\n    vector<int>::iterator result_iter;\n    int op_length = operand.size();\n    int j = 0;\n    int i = 0;\n    while(j < result_length){\n        if(operato[j] == \"*\"){\n            result.push_back(operand[i] * operand[i + 1]);\n            i += 2;\n        }\n        else if(operato[j] == \"+\"){\n            result.push_back(operand[i] + operand[i + 1]);\n            i += 2;\n        }\n        else if(operato[j] == \"-\"){\n            result.push_back(operand[i] - operand[i + 1]);\n            i += 2;\n        }\n        else if(operato[j] == \"/\"){\n            if(operand[i] == 0){\n                return 0;\n            }\n            else{\n                result.push_back(operand[i] / operand[i + 1]);\n                i += 2;\n            }\n        }\n        else if(operato[j] == \"**\"){\n            result.push_back(pow(operand[i], operand[i + 1]));\n            i += 2;\n        }\n        else if(operato[j] == \"-\" && i == 0){\n            return -1;\n        }\n        else{\n            result.push_back(operand[i]);\n            i++;\n        }\n        j++;\n    }\n    return result[0];\n}\n\nint main(){\n    vector<string> oper;\n    vector<int> operand;\n    vector<int> result;\n    vector<int>::iterator result_iter;\n    int op_length = 0;\n    int result_length = 0;\n    cin>>operato;\n    cin>>operand;\n    op_length = operato.size();\n    result_length = operand.size();\n    int i = 0;\n    int j = 0;\n    while(i < op_length){\n        if(operato[i] == \"+\"){\n            result.push_back(operand[j]);\n            j++;\n        }\n        else if(operato[i] == \"*\"){\n            result.push_back(operand[j] * operand[j + 1]);\n            j += 2;\n        }\n        else if(operato[i] == \"-\"){\n            result.push_back(operand[j] - operand[j + 1]);\n            j += 2;\n        }\n        else if(operato[i] == \"/\"){\n            if(operand[j] == 0){\n                return 0;\n            }\n            else{\n                result.push_back(operand[j] / operand[j + 1]);\n                j += 2;\n            }\n        }\n        else if(operato[i] == \"**\"){\n            result.push_back(pow(operand[j], operand[j + 1]));\n            j += 2;\n        }\n        else if(operato[i] == \"-\"){\n            result.push_back(-1);\n            j++;\n        }\n        else{\n            result.push_back(operand[j]);\n            j++;\n        }\n        i++;\n    }\n    if(result[0] == -1){\n        return -1;\n    }\n    else{\n        cout<<result[0];\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is  a le tter, reverse its case from lower to upper or vise versa, \notherwise kee p itas it i s .\nIf th e stringcontains no letters, reverse  th e string.\nThefunction shou ld return the resulted str ing.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nif s[i] is  a le tter, reverse its case from lower to upper or vise versa, \notherwise kee p itas it i s.\nIf th e stringcontains no letters, reverse  th e string.\nThefunction shou ld return the resulted str ing.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n\tstring str=s;\n\tfor(int i=0;i<str.length();i++){\n\t\tif(str[i]>='a'&&str[i]<='z'||str[i]>='A'&&str[i]<='Z'){\n\t\t\tif(str[i]>='a'&&str[i]<='z'){\n\t\t\t\tstr[i]=str[i]-'a'+'A';\n\t\t\t}else{\n\t\t\t\tstr[i]='A'+str[i]-'a';\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\nint main(){\n\tstring s=\"\";\n\tcin>>s;\n\tcout<<solve(s);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\", return its md 5 has h equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string 'text\", return its md 5 has h equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n\tMD5((unsigned char *)text.c_str(), strlen(text.c_str()), (unsigned char *)text.c_str());\n\treturn text;\n}\n\nint main(){\n\tstring text = \"Hello world\";\n\tprintf(\"%s\\n\", text.c_str());\n\tprintf(\"%s\\n\", string_to_md5(text).c_str());\n}\n<|endoftext|>"}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive integers a and b,  retu rn the evendigits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 0, "perturbed": true, "gc": "/*\nGiven two positive integers a and b,  retu rn the evendigits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> r;\n    while(a<b){\n        r.push_back(a);\n        a = a*10+9;\n    }\n    return r;\n}\nint main(){\n    int a,b;\n    while(scanf(\"%d%d\",&a,&b)!=EOF){\n        vector<int> v;\n        while(a<b){\n            v.push_back(a);\n            a = a*10+9;\n        }\n        vector<int>::iterator it;\n        for(it=v.begin();it!=v.end();++it)\n            printf(\"%d \",*it);\n        printf(\"\\n\");\n    }\n}\n<|endoftext|>"}
