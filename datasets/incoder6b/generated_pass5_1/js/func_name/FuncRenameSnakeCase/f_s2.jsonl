{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return Math.floor(Math.random() * arr.length);\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from given array\n * @param {Array} arr\n * @returns {*}\n */\nconst get_random_element_index = arr => {\n  return arr[Math.floor(Math.random() * arr.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_paren_count = 0;\n  let open_paren_group = null;\n  let closed_paren_group = null;\n  let paren_group = null;\n  let paren_string_index = 0;\n  let paren_string = paren_string.replace(/\\s/g, '');\n  while (paren_string_index < paren_string.length) {\n    paren_group = paren_string[paren_string_index];\n    if (paren_group === '(') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === ')') {\n      closed_paren_count++;\n      closed_paren_group += paren_group;\n    } else if (paren_group === '(') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === ')') {\n      closed_paren_count++;\n      closed_paren_group += paren_group;\n    } else if (paren_group ==='') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\t') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\n') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\r') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\f') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\v') {\n      open_brace_count++;\n      open_paren_count++;\n    } else if (paren_group === '\\b') {\n      open_bra", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let stones = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      stones.push(2 * i);\n    } else {\n      stones.push(2 * i + 1);\n    }\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(/,|\\s/)\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse = (s) => {\n  return s.split(/,|\\s/).reverse()\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word in the array.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_uppercase = (s) => {\n  return s.split(/,|\\s/).map(word => word.toUpperCase())\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word in the array and capitalize each word in the string.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_uppercase_and_reverse = (s) => {\n  return s.split(/,|\\s/).map(word => word.toUpperCase()).reverse()\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word in the array and capitalize each word in the string.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_uppercase_and_reverse_and_capitalize = (s) => {\n  return s.split(/,|\\s/).map(word => word.toUpperCase()).reverse().map(word => word.toUpperCase())\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word in the array and capitalize each word in the string.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_uppercase_and_reverse_and_capitalize_and_capitalize = (s) => {\n  return s.split(/,|\\s/).map(word => word.toUpperCase()).reverse().map(word => word.toUpperCase()).map(word => word.toUpperCase())\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word in the array and capitalize each word in the string.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_uppercase_and_reverse_and_capitalize_and_capitalize_and_capitalize = (s) => {\n  return s.split(/,|\\s/).map(word => word.toUpperCase()).reverse().map(word => word.toUpperCase()).map(word => word.toUpperCase()).map(word => word.toUpperCase())\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word in the array and capitalize each word in the string.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_uppercase_and_reverse_and_capitalize_and_capitalize_and_capitalize_and_capitalize = (s) => {\n  return s.split(/,|\\s/).map(word => word.toUpperCase()).reverse().map(word => word.toUpperCase()).map(word => word.toUpperCase()).map(word => word.toUpperCase()).map(word => word.toUpperCase())\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word in the array and capitalize each word in the string.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_uppercase_and_reverse_and_capitalize_and_capitalize_and_capitalize_and_capitalize = (s) => {\n  return s.split(/,|\\s/).map(word => word.toUpperCase()).reverse().map(word => word.toUpperCase()).map(word => word.toUpperCase()).map(word => word.toUpperCase()).map(word => word.toUpperCase()).map(word => word.toUpperCase())\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word in the array and capitalize each word in the string.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_uppercase_and_reverse_and_capitalize_and_capitalize_and_capitalize_and_capitalize_and_capitalize = (s) => {\n  return s.split(/,|\\s/).map(word => word.toUpperCase()).reverse().map(word => word.toUpperCase()).map(word => word.toUpperCase()).map(word => word.toUpperCase()).map(word => word.toUpperCase()).map(word => word.toUpperCase()).map(word => word.toUpperCase())\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let mid = (x + y) / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 11\n  choose_num(13, 12) = -1\n  */\nconst choose_num_odd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let mid = (x + y) / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num_odd(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let mid = (x + y) / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num_range(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_odd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let mid = (x + y) / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num_range_odd(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let mid = (x + y) / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num_range_even(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let mid = (x + y) / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num_range_even(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let mid = (x + y) / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num_range_even(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let mid = (x + y) / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num_range_even(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let mid = (x + y) / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num_range_even(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  let mid = (x + y) / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num_range_even(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits2 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits3 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits4 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits5 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits6 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits7 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits8 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits9 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits10 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits11 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits12 = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_2 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_3 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_4 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_5 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_6 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_7 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_8 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_9 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_10 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_11 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_12 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_13 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_14 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_15 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit]\n    return name || digit\n  })\n  return result\n}\n\nconst by_length_16 = arr => {\n  if (!arr.length) return []\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = reversed.map((digit, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 3, 9, 27, 81]\n  */\nconst g = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 3, 9, 27, 81]\n  */\nconst h = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 3, 9, 27, 81]\n  */\nconst j = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 3, 9, 27, 81]\n  */\nconst k = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 3, 9, 27, 81]\n  */\nconst m = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 3, 9, 27, 81]\n  */\nconst o = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 3, 9, 27, 81]\n  */\nconst p = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i);\n    } else {\n      factorials.push(factorials[i - 1] * i);\n    }\n  }\n  return factorials;\n};\n\n/* Implement the function q that takes ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(i)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(i)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(i)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(i)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(i)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenP", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "<|endoftext|>/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_digits that takes an array of integers and returns\n  the number of digits in each number.\n  >>> count_digits([]) == 0\n  >>> count_digits([-1, 11, -11]) == [0, 2, 2]\n  >>> count_digits([1, 1, 2]) == [3, 2, 1]\n  */\nconst count_digits = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    count += arr[i].toString().length;\n  }\n  return count;\n};\n\n/*\n  Write a function count_digits_including_negative that takes an array of\n  integers and returns the number of digits in each number including the\n  negative sign.\n  >>> count_digits_including_negative([]) == 0\n  >>> count_digits_including_negative([-1, 11, -11]) == [0, 2, 2]\n  >>> count_digits_including_negative([1, 1, 2]) == [3, 2, 1]\n  */\nconst count_digits_including_negative = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    count += Math.abs(arr[i]).toString().length;\n  }\n  return count;\n};\n\n/*\n  Write a function count_digits_excluding_negative that takes an array of\n  integers and returns the number of digits in each number excluding the\n  negative sign.\n  >>> count_digits_excluding_negative([]) == 0\n  >>> count_digits_excluding_negative([-1, 11, -11]) == [0, 2, 2]\n  >>> count_digits_excluding_negative([1, 1, 2]) == [3, 2, 1]\n  */\nconst count_digits_excluding_negative = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    count += arr[i].toString().length - 1;\n  }\n  return count;\n};\n\n/*\n  Write a function count_digits_including_negative_excluding_zero that\n  takes an array of integers and returns the number of digits in each number\n  including the negative sign and excluding the zero digit.\n  >>> count_digits_including_negative_excluding_zero([]) == 0\n  >>> count_digits_including_negative_excluding_zero([-1, 11, -11]) == [0, 2, 2]\n  >>> count_digits_including_negative_excluding_zero([1, 1, 2]) == [3, 2, 1]\n  */\nconst count_digits_including_negative_excluding_zero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    count += Math.abs(arr[i]).toString().length - 1;\n  }\n  return count;\n};\n\n/*\n  Write a function count_digits_excluding_negative_excluding_zero that\n  takes an array of integers and returns the number of digits in each number\n  excluding the negative sign and excluding the zero digit.\n  >>> count_digits_excluding_negative_excluding_zero([]) == 0\n  >>> count_digits_excluding_negative_excluding_zero([-1, 11, -11]) == [0, 2, 2]\n  >>> count_digits_excluding_negative_excluding_zero([1, 1, 2]) == [3, 2, 1]\n  */\nconst count_digits_excluding_negative_excluding_zero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    count += arr[i].toString().length - 1;\n  }\n  return count;\n};\n\n/*\n  Write a function count_digits_including_negative_excluding_zero_excluding_negative that\n  takes an array of integers and returns the number of digits in each number\n  including the negative sign and excluding the zero digit.\n  >>> count_digits_including_negative_excluding_zero_excluding_negative([]) == 0\n  >>> count_digits_including_negative_excluding_zero_excluding_negative([-1, 11, -11]) == [0, 2, 2]\n  >>> count_digits_including_negative_excluding_zero_excluding_negative([1, 1, 2]) == [3, 2, 1]\n  */\nconst count_digits_including_negative_excluding_zero_excluding_negative = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    count += Math.abs(arr[i]).toString().length - 1;\n  }\n  return count;\n};\n\n/*\n  Write a function count_digits_excluding_negative_excluding_zero_excluding_negative that\n  takes an array of integers and returns the number of digits in each number\n  excluding the negative sign and excluding the zero digit.\n  >>> count_digits_excluding_negative_excluding_zero_excluding_negative([]) == 0\n  >>> count_digits_excluding_negative_excluding_zero_excluding_negative([-1, 11, -11]) == [0, 2, 2]\n  >>> count_digits_excluding_negative_excluding_zero_excluding_negative([1, 1, 2]) == [3, 2, 1]\n  */\nconst count_digits_excluding_negative_excluding_zero_excluding_negative = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    count += arr[i].toString().length - 1;\n  }\n  return count;\n};\n\n/*\n  Write a function count_digits_including_negative_excluding_zero_excluding_negative_excluding_zero that\n  takes an array of integers and returns the number of digits in each number\n  including the negative sign and excluding the zero digit.\n  >>> count_digits_including_negative_excluding_zero_excluding_negative_excluding_zero([]) == 0\n  >>> count_digits_including_negative_excluding_zero_excluding_negative_excluding_zero([-1, 11, -11]) == [0, 2, 2]\n  >>> count_digits_including_negative_excluding_zero_excluding_negative_excluding_zero([1, 1, 2]) == [3, 2, 1]\n  */\nconst count_digits_including_negative_excluding_zero_excluding_negative_excluding_zero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    count += Math.abs(arr[i]).toString().length - 1;\n  }\n  return count;\n};\n\n/*\n  Write a function count_digits_excluding_negative_excluding_zero_excluding_negative_excluding_zero that\n  takes an array of integers and returns the number of digits in each number\n  excluding the negative sign and excluding the zero digit.\n  >>> count_digits_excluding_negative_excluding_zero_excluding_negative_excluding_zero([]) == 0\n  >>> count_digits_excluding_negative_excluding_zero_excluding_negative_excluding_zero([-1, 11, -11]) == [0, 2, 2]\n  >>> count_digits_excluding_negative_excluding_zero_excluding_negative_excluding_zero([1, 1, 2]) == [3, 2, 1]\n  */\nconst count_digits_excluding_negative_excluding_zero_excluding_negative_excluding_zero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    count += arr[i].toString().length - 1;\n  }\n  return count;\n};\n\n/*\n  Write a function count_digits_including_negative_excluding_zero_excluding_negative_excluding_zero_excluding_negative that\n  takes an array of integers and returns the number of digits in each number\n  including the negative sign and excluding the zero digit.\n  >>> count_digits_including_negative_excluding_zero_excluding_negative_excluding_zero_excluding_negative([]) == 0\n  >>> count_digits_including_negative_excluding_zero_excluding_negative_excluding_zero_excluding_negative([-1, 11, -11]) == [0, 2, 2]\n  >>> count_digits_including_negative_excluding_zero_excluding_negative_excluding_zero_excluding_negative([1, 1, 2]) == [3, 2, 1]\n  */\nconst count_digits_including_negative_excluding_zero_excluding_negative_excluding_zero_excluding_negative = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Given an array arr of N integers, arr[1], arr[2],..., arr[N]. Your task is to \n  determine if there is a subset of arr such that all the elements except the \n  first element are in non-decreasing order.\n\n  One possible subset is {arr[1], arr[2],..., arr[N-1]}. \n  \n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  is_non_decreasing([3, 4, 5, 1, 2])==>true\n  Explanation: By performing the following operation on arr:\n  arr[1]<arr[2]<arr[3]<arr[4]<arr[5]<arr[6]<arr[7]<arr[8]<arr[9]<arr[10]<arr[11]<arr[12]<arr[13]<arr[14]<arr[15]<arr[16]<arr[17]<arr[18]<arr[19]<arr[20]<arr[21]<arr[22]<arr[23]<arr[24]<arr[25]<arr[26]<arr[27]<arr[28]<arr[29]<arr[30]<arr[31]<arr[32]<arr[33]<arr[34]<arr[35]<arr[36]<arr[37]<arr[38]<arr[39]<arr[40]<arr[41]<arr[42]<arr[43]<arr[44]<arr[45]<arr[46]<arr[47]<arr[48]<arr[49]<arr[50]<arr[51]<arr[52]<arr[53]<arr[54]<arr[55]<arr[56]<arr[57]<arr[58]<arr[59]<arr[60]<arr[61]<arr[62]<arr[63]<arr[64]<arr[65]<arr[66]<arr[67]<arr[68]<arr[69]<arr[70]<arr[71]<arr[72]<arr[73]<arr[74]<arr[75]<arr[76]<arr[77]<arr[78]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]<arr[79]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const xor = (a_int ^ b_int).toString(2);\n  return xor.length % 2? '0' + xor : xor;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const and = (a_int & b_int).toString(2);\n  return and.length % 2? '0' + and : and;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const or = (a_int | b_int).toString(2);\n  return or.length % 2? '0' + or : or;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010', '110')\n  '110'\n  */\nconst string_not = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const not = ~(a_int | b_int);\n  return not.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const and = (a_int & b_int).toString(2);\n  return and.length % 2? '0' + and : and;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const or = (a_int | b_int).toString(2);\n  return or.length % 2? '0' + or : or;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010', '110')\n  '110'\n  */\nconst string_not = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const not = ~(a_int | b_int);\n  return not.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const and = (a_int & b_int).toString(2);\n  return and.length % 2? '0' + and : and;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const or = (a_int | b_int).toString(2);\n  return or.length % 2? '0' + or : or;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010', '110')\n  '110'\n  */\nconst string_not = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const not = ~(a_int | b_int);\n  return not.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const and = (a_int & b_int).toString(2);\n  return and.length % 2? '0' + and : and;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const or = (a_int | b_int).toString(2);\n  return or.length % 2? '0' + or : or;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010', '110')\n  '110'\n  */\nconst string_not = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const not = ~(a_int | b_int);\n  return not.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const and = (a_int & b_int).toString(2);\n  return and.length % 2? '0' + and : and;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const or = (a_int | b_int).toString(2);\n  return or.length % 2? '0' + or : or;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010', '110')\n  '110'\n  */\nconst string_not = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const not = ~(a_int | b_int);\n  return not.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < even.length; i++) {\n    for (let j = 0; j < odd.length; j++) {\n      if (even[i] === odd[j]) {\n        even.splice(i, 1);\n        odd.splice(j, 1);\n      }\n    }\n  }\n  return even.length === lst1.length? \"YES\" : \"NO\";\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOdd = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < even.length; i++) {\n    for (let j = 0; j < odd.length; j++) {\n      if (even[i] === odd[j]) {\n        even.splice(i, 1);\n        odd.splice(j, 1);\n      }\n    }\n  }\n  return even.length === lst1.length? \"YES\" : \"NO\";\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeEven = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < even.length; i++) {\n    for (let j = 0; j < odd.length; j++) {\n      if (even[i] === odd[j]) {\n        even.splice(i, 1);\n        odd.splice(j, 1);\n      }\n    }\n  }\n  return even.length === lst1.length? \"YES\" : \"NO\";\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOddEven = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < even.length; i++) {\n    for (let j = 0; j < odd.length; j++) {\n      if (even[i] === odd[j]) {\n        even.splice(i, 1);\n        odd.splice(j, 1);\n      }\n    }\n  }\n  return even.length === lst1.length? \"YES\" : \"NO\";\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeEvenOdd = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < even.length; i++) {\n    for (let j = 0; j < odd.length; j++) {\n      if (even[i] === odd[j]) {\n        even.splice(i, 1);\n        odd.splice(j, 1);\n      }\n    }\n  }\n  return even.length === lst1.length? \"YES\" : \"NO\";\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOddOdd = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < even.length; i++) {\n    for (let j = 0; j < odd.length; j++) {\n      if (even[i] === odd[j]) {\n        even.splice(i, 1);\n        odd.splice(j, 1);\n      }\n    }\n  }\n  return even.length === lst1.length? \"YES\" : \"NO\";\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const counts = {};\n  const letters = test.split(' ');\n  letters.forEach((letter) => {\n    counts[letter] = (counts[letter] || 0) + 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const counts = {};\n  const letters = test.split(' ');\n  letters.forEach((letter) => {\n    counts[letter] = (counts[letter] || 0) + 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const counts = {};\n  const letters = test.split(' ');\n  letters.forEach((letter) => {\n    counts[letter] = (counts[letter] || 0) + 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const counts = {};\n  const letters = test.split(' ');\n  letters.forEach((letter) => {\n    counts[letter] = (counts[letter] || 0) + 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const counts = {};\n  const letters = test.split(' ');\n  letters.forEach((letter) => {\n    counts[letter] = (counts[letter] || 0) + 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const counts = {};\n  const letters = test.split(' ');\n  letters.forEach((letter) => {\n    counts[letter] = (counts[letter] || 0) + 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const counts = {};\n  const letters = test.split(' ');\n  letters.forEach((letter) => {\n    counts[letter] = (counts[letter] || 0) + 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const counts = {};\n  const letters = test.split(' ');\n  letters.forEach((letter) => {\n    counts[letter] = (counts[letter] || 0) + 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const counts = {};\n  const letters = test.split(' ');\n  letters.forEach((letter) => {\n    counts[letter] = (counts[letter] || 0) + 1;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const counts = {};\n  const letters = test.split(' ');\n  letters.forEach((letter) => {\n    counts[letter] = (counts[letter] || 0) + 1;\n  });\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deleting k characters.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"aaaaaaaaaa\", k = 2, the result should be \"aaaaaa\".\n  For s = \"abcabcbb\", k = 1  the result should be \"bb\".\n  For s = \"abcabcbb\", k = 0, the result should be \"\".\n*/\nconst delete_k = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i < k) {\n      result += s[i];\n    } else if (i === k) {\n      result += s.substr(0, i);\n    }\n  }\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deleting k characters.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"aaaaaaaaaa\", k = 2, the result should be \"aaaaaa\".\n  For s = \"abcabcbb\", k = 1  the result should be \"bb\".\n  For s = \"abcabcbb\", k = 0, the result should be \"\".\n*/\nconst delete_k_2 = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i < k) {\n      result += s[i];\n    } else if (i === k) {\n      result += s.substr(0, i);\n    }\n  }\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deleting k characters.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"aaaaaaaaaa\", k = 2, the result should be \"aaaaaa\".\n  For s = \"abcabcbb\", k = 1  the result should be \"bb\".\n  For s = \"abcabcbb\", k = 0, the result should be \"\".\n*/\nconst delete_k_3 = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i < k) {\n      result += s[i];\n    } else if (i === k) {\n      result += s.substr(0, i);\n    }\n  }\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deleting k characters.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"aaaaaaaaaa\", k = 2, the result should be \"aaaaaa\".\n  For s = \"abcabcbb\", k = 1  the result should be \"bb\".\n  For s = \"abcabcbb\", k = 0, the result should be \"\".\n*/\nconst delete_k_4 = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i < k) {\n      result += s[i];\n    } else if (i === k) {\n      result += s.substr(0, i);\n    }\n  }\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deleting k characters.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"aaaaaaaaaa\", k = 2, the result should be \"aaaaaa\".\n  For s = \"abcabcbb\", k = 1  the result should be \"bb\".\n  For s = \"abcabcbb\", k = 0, the result should be \"\".\n*/\nconst delete_k_5 = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i < k) {\n      result += s[i];\n    } else if (i === k) {\n      result += s.substr(0, i);\n    }\n  }\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deleting k characters.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"aaaaaaaaaa\", k = 2, the result should be \"aaaaaa\".\n  For s = \"abcabcbb\", k = 1  the result should be \"bb\".\n  For s = \"abcabcbb\", k = 0, the result should be \"\".\n*/\nconst delete_k_6 = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i < k) {\n      result += s[i];\n    } else if (i === k) {\n      result += s.substr(0, i);\n    }\n  }\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deleting k characters.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"aaaaaaaaaa\", k = 2, the result should be \"aaaaaa\".\n  For s = \"abcabcbb\", k = 1  the result should be \"bb\".\n  For s = \"abcabcbb\", k = 0, the result should be \"\".\n*/\nconst delete_k_7 = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i < k) {\n      result += s[i];\n    } else if (i === k) {\n      result += s.substr(0, i);\n    }\n  }\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deleting k characters.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"aaaaaaaaaa\", k = 2, the result should be \"aaaaaa\".\n  For s = \"abcabcbb\", k = 1  the result should be \"bb\".\n  For s = \"abcabcbb\", k = 0, the result should be \"\".\n*/\nconst delete_k_8 = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i < k) {\n      result += s[i];\n    } else if (i === k) {\n      result += s.substr(0, i);\n    }\n  }\n  return result;\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deleting k characters.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"aaaaaaaaaa\", k = 2, the result should be \"aaaaaa\".\n  For s = \"abcabcbb\", k = 1  the result should be \"bb\".\n  For s = \"abcabcbb\", k = 0, the result should be \"\".\n*/\nconst delete_k_9 = (s, k) => {\n  let result = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (i < k) {\n      result += s[i];\n    } else if (i === k) {\n      result += s.substr(0, i);\n    }\n  }\n  return result;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let odd_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    odd_count += lst[i].match(/\\d/g).length;\n  }\n  return odd_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_count = (lst) => {\n  let even_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    even_count += lst[i].match(/\\d/g).length;\n  }\n  return even_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of digits in the i'th string of the input.\n\n  >>> digit_count(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digit_count(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digit_count = (lst) => {\n  let digit_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digit_count += lst[i].match(/\\d/g).length;\n  }\n  return digit_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the string\n  i of the input. Where all the i's should be replaced by the number of digits\n  in the i'th string of the input.\n\n  >>> digit_count_with_spaces(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digit_count_with_spaces(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digit_count_with_spaces = (lst) => {\n  let digit_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digit_count += lst[i].match(/\\d/g).length;\n  }\n  return digit_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the string\n  i of the input. Where all the i's should be replaced by the number of digits\n  in the i'th string of the input.\n\n  >>> digit_count_with_spaces(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digit_count_with_spaces(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digit_count_with_spaces = (lst) => {\n  let digit_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digit_count += lst[i].match(/\\d/g).length;\n  }\n  return digit_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the string\n  i of the input. Where all the i's should be replaced by the number of digits\n  in the i'th string of the input.\n\n  >>> digit_count_with_spaces(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digit_count_with_spaces(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digit_count_with_spaces = (lst) => {\n  let digit_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digit_count += lst[i].match(/\\d/g).length;\n  }\n  return digit_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the string\n  i of the input. Where all the i's should be replaced by the number of digits\n  in the i'th string of the input.\n\n  >>> digit_count_with_spaces(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digit_count_with_spaces(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digit_count_with_spaces = (lst) => {\n  let digit_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digit_count += lst[i].match(/\\d/g).length;\n  }\n  return digit_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the string\n  i of the input. Where all the i's should be replaced by the number of digits\n  in the i'th string of the input.\n\n  >>> digit_count_with_spaces(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digit_count_with_spaces(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digit_count_with_spaces = (lst) => {\n  let digit_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digit_count += lst[i].match(/\\d/g).length;\n  }\n  return digit_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the string\n  i of the input. Where all the i's should be replaced by the number of digits\n  in the i'th string of the input.\n\n  >>> digit_count_with_spaces(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digit_count_with_spaces(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digit_count_with_spaces = (lst) => {\n  let digit_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digit_count += lst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 6\n  max_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_sub_array_sum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  positive_sum([2, 3, 4, -1, -2, -3]) == 5\n  positive_sum([-1, -2, -3]) == 3\n  */\nconst positive_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] >= 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  negative_sum([2, 3, 4, -1, -2, -3]) == -3\n  negative_sum([-1, -2, -3]) == 3\n  */\nconst negative_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] < 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  positive_sum([2, 3, 4, -1, -2, -3]) == 5\n  positive_sum([-1, -2, -3]) == 3\n  */\nconst positive_sub_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] >= 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  negative_sum([2, 3, 4, -1, -2, -3]) == -3\n  negative_sum([-1, -2, -3]) == 3\n  */\nconst negative_sub_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] < 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  positive_sum([2, 3, 4, -1, -2, -3]) == 5\n  positive_sum([-1, -2, -3]) == 3\n  */\nconst positive_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] >= 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  negative_sum([2, 3, 4, -1, -2, -3]) == -3\n  negative_sum([-1, -2, -3]) == 3\n  */\nconst negative_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] < 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  positive_sum([2, 3, 4, -1, -2, -3]) == 5\n  positive_sum([-1, -2, -3]) == 3\n  */\nconst positive_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] >= 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  negative_sum([2, 3, 4, -1, -2, -3]) == -3\n  negative_sum([-1, -2, -3]) == 3\n  */\nconst negative_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] < 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  positive_sum([2, 3, 4, -1, -2, -3]) == 5\n  positive_sum([-1, -2, -3]) == 3\n  */\nconst positive_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] >= 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  negative_sum([2, 3, 4, -1, -2, -3]) == -3\n  negative_sum([-1, -2, -3]) == 3\n  */\nconst negative_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] < 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  positive_sum([2, 3, 4, -1, -2, -3]) == 5\n  positive_sum([-1, -2, -3]) == 3\n  */\nconst positive_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] >= 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  negative_sum([2, 3, 4, -1, -2, -3]) == -3\n  negative_sum([-1, -2, -3]) == 3\n  */\nconst negative_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] < 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  positive_sum([2, 3, 4, -1, -2, -3]) == 5\n  positive_sum([-1, -2, -3]) == 3\n  */\nconst positive_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] >= 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive and negative numbers in\n  the array.\n  Example\n  negative_sum([2, 3, 4, -1, -2, -3]) == -3\n  negative_sum([-1, -2, -3]) == 3\n  */\nconst negative_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (nums[i] < 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  let result = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        let bucket = grid[i][j];\n        let count = 0;\n        while (bucket > 0) {\n          bucket = bucket - 1;\n          count++;\n        }\n        if (count > capacity) {\n          result = result + 1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nexport { max_fill };\n\n/*\n  You are given an N by M matrix of 0s and 1s. \n  Each 0 represents an open cell and each 1 represents a closed cell. \n  You are given a target cell and a source cell. \n  You want to move from the source cell to the target cell. \n  If the move would go outside the grid, then you can move anywhere inside the grid. \n  You want to find the minimum number of moves required to reach the target cell. \n  You can move only horizontally or vertically. \n  You can move diagonally only in one direction. \n  You can move to any cell with any number of moves. \n  Return the minimum number of moves required to reach the target cell. \n  You can only move either vertically or horizontally. \n  You can move diagonally only in one direction. \n  You can move to any cell with any number of moves. \n  \n  Example 1:\n      Input: \n          grid = [[0,0,1,0],[1,0,1,0],[1,1,1,1],[0,1,0,1]]\n          source = 0\n          target = 1\n      Output: 2\n  \n  Example 2:\n      Input: \n          grid = [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,0,1]]\n          source = 0\n          target = 1\n      Output: 3\n  \n  Example 3:\n      Input: \n          grid = [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,0,1]]\n          source = 0\n          target = 2\n      Output: 4\n  \n  Example 4:\n      Input: \n          grid = [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,0,1]]\n          source = 0\n          target = 3\n      Output: 4\n  \n  Example 5:\n      Input: \n          grid = [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,0,1]]\n          source = 1\n          target = 2\n      Output: 3\n  \n  Example 6:\n      Input: \n          grid = [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,0,1]]\n          source = 1\n          target = 3\n      Output: 4\n  \n  Example 7:\n      Input: \n          grid = [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,0,1]]\n          source = 1\n          target = 0\n      Output: 4\n  \n  Example 8:\n      Input: \n          grid = [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,0,1]]\n          source = 2\n          target = 3\n      Output: 4\n  \n  Example 9:\n      Input: \n          grid = [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,0,1]]\n          source = 2\n          target = 0\n      Output: 4\n  \n  Example 10:\n      Input: \n          grid = [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,0,1]]\n          source = 3\n          target = 2\n      Output: 4\n  \n  Constraints:\n      1 <= grid.length <= 10\n      1 <= grid[0].length <= 10\n      0 <= grid[i][j] <= 1\n      0 <= source <= grid.length\n      0 <= target <= grid.length\n      0 <= source <= target\n      \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const len = arr.length;\n  const ones = new Array(len).fill(0);\n  const zeros = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i] === 1? i : len + i] = 1;\n  }\n  return [...ones,...zeros].sort((a, b) => a - b);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse = (arr) => {\n  const len = arr.length;\n  const ones = new Array(len).fill(0);\n  const zeros = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i] === 1? i : len + i] = 1;\n  }\n  return [...zeros,...ones].sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_ones = (arr) => {\n  const len = arr.length;\n  const ones = new Array(len).fill(0);\n  const zeros = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i] === 1? i : len + i] = 1;\n  }\n  return [...zeros,...ones].sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_ones([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_ones([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse_ones([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_ones_reverse = (arr) => {\n  const len = arr.length;\n  const ones = new Array(len).fill(0);\n  const zeros = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i] === 1? i : len + i] = 1;\n  }\n  return [...ones,...zeros].sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_ones_reverse([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_ones_reverse([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse_ones_reverse([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_ones_reverse_ones = (arr) => {\n  const len = arr.length;\n  const ones = new Array(len).fill(0);\n  const zeros = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i] === 1? i : len + i] = 1;\n  }\n  return [...ones,...zeros].sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_ones_reverse_ones([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_ones_reverse_ones([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse_ones_reverse_ones([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_ones_reverse_ones_reverse = (arr) => {\n  const len = arr.length;\n  const ones = new Array(len).fill(0);\n  const zeros = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i] === 1? i : len + i] = 1;\n  }\n  return [...ones,...zeros].sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_ones_reverse_ones_reverse([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_ones_reverse_ones_reverse([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse_ones_reverse_ones_reverse([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_ones_reverse_ones_reverse_ones = (arr) => {\n  const len = arr.length;\n  const ones = new Array(len).fill(0);\n  const zeros = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i] === 1? i : len + i] = 1;\n  }\n  return [...ones,...zeros].sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_ones_reverse_ones_reverse_ones([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_ones_reverse_ones_reverse_ones([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse_ones_reverse_ones_reverse_ones([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_ones_reverse_ones_reverse_ones_reverse = (arr) => {\n  const len = arr.length;\n  const ones = new Array(len).fill(0);\n  const zeros = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i] === 1? i : len + i] = 1;\n  }\n  return [...ones,...zeros].sort((a, b) => b - a);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_ones_reverse_ones_reverse_ones_reverse([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      arr.push(s);\n    } else {\n      if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n        arr.push(s);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      arr.push(s);\n    } else {\n      if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n        arr.push(s);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      arr.push(s);\n    } else {\n      if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n        arr.push(s);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      arr.push(s);\n    } else {\n      if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n        arr.push(s);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      arr.push(s);\n    } else {\n      if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n        arr.push(s);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {\n      arr.push(s);\n    } else {\n      if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n        arr.push(s);\n      }\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char ==='') {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountLeft = word.length - 1;\n  let vowelsCountRight = word.length - 1;\n  let vowelsCountLeftVowel = -1;\n  let vowelsCountRightVowel = -1;\n  let vowelsCountLeftConsonant = -1;\n  let vowelsCountRightConsonant = -1;\n  let vowelsCountLeftConsonantVowel = -1;\n  let vowelsCountRightConsonantVowel = -1;\n  let vowelsCountLeftConsonantConsonant = -1;\n  let vowelsCountRightConsonantConsonant = -1;\n  let vowelsCountLeftVowelConsonant = -1;\n  let vowelsCountRightVowelConsonant = -1;\n  let vowelsCountLeftConsonantVowelConsonant = -1;\n  let vowelsCountRightConsonantVowelConsonant = -1;\n  let vowelsCountLeftConsonantConsonantVowel = -1;\n  let vowelsCountRightConsonantConsonantVowel = -1;\n  let vowelsCountLeftVowelVowel = -1;\n  let vowelsCountRightVowelVowel = -1;\n  let vowelsCountLeftConsonantVowelVowel = -1;\n  let vowelsCountRightConsonantVowelVowel = -1;\n  let vowelsCountLeftConsonantConsonantVowelVowel = -1;\n  let vowelsCountRightConsonantConsonantVowelVowel = -1;\n  let vowelsCountLeftVowelVowelVowel = -1;\n  let vowelsCountRightVowelVowelVowel = -1;\n  let vowelsCountLeftConsonantVowelVowelVowel = -1;\n  let vowelsCountRightConsonantVowelVowelVowel = -1;\n  let vowelsCountLeftConsonantConsonantVowelVowelVowel = -1;\n  let vowelsCountRightConsonantConsonantVowelVowelVowel = -1;\n  let vowelsCountLeftVowelVowelVowelVowel = -1;\n  let vowelsCountRightVowelVowelVowelVowel = -1;\n  let vowelsCountLeftConsonantVowelVowelVowelVowel = -1;\n  let vowelsCountRightConsonantVowelVowelVowelVowel = -1;\n  let vowelsCountLeftConsonantConsonantVowelVowelVowelVowel = -1;\n  let vowelsCountRightConsonantConsonantVowelVowelVowelVowel = -1;\n  let vowelsCountLeftVowelVowelVowelVowelVowel = -1;\n  let vowelsCountRightVowelVowelVowelVowelVowel = -1;\n  let vowelsCountLeftConsonantVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountRightConsonantVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountLeftConsonantConsonantVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountRightConsonantConsonantVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountLeftVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountRightVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountLeftConsonantVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountRightConsonantVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountLeftConsonantConsonantVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountRightConsonantConsonantVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountLeftVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountRightVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountLeftConsonantVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountRightConsonantVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountLeftConsonantConsonantVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowelsCountRightConsonantConsonantVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = -1;\n  let vowel", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== lst[i]) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const longestString = strings[0]\n  const longestStringLength = longestString.length\n\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    const currentStringLength = currentString.length\n\n    if (currentStringLength > longestStringLength) {\n      longestString = currentString\n      longestStringLength = currentStringLength\n    }\n  }\n\n  return longestString\n}\n\n/**\n * Return the shortest string in an array of strings.\n * Return null in case the input list is empty.\n * >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const shortestString = strings[0]\n  const shortestStringLength = shortestString.length\n\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    const currentStringLength = currentString.length\n\n    if (currentStringLength < shortestStringLength) {\n      shortestString = currentString\n      shortestStringLength = currentStringLength\n    }\n  }\n\n  return shortestString\n}\n\n/**\n * Return the longest common substring between two strings.\n * Return null in case the input list is empty.\n * >>> longestCommonSubstring('', 'abc')\n  'abc'\n  >>> longestCommonSubstring('abc', 'ab')\n  'ab'\n  >>> longestCommonSubstring('abc', 'abbc')\n  'ab'\n  >>> longestCommonSubstring('abc', 'abbbbc')\n  'ab'\n  >>> longestCommonSubstring('abc', 'abbbbcdef')\n  'ab'\n  >>> longestCommonSubstring('abc', 'abbbbcdefghij')\n  'ab'\n  >>> longestCommonSubstring('abc', 'abbbbcdefghijklmnopqrstuvwxyz')\n  'ab'\n  >>> longestCommonSubstring('abc', 'abbbbcdefghijklmnopqrstuvwxyz')\n  'ab'\n  */\nconst longestCommonSubstring = (string1, string2) => {\n  if (string1 === string2) {\n    return string1\n  }\n\n  const substring1 = string1.substr(0, longestCommonSubstringIndex(string1, string2))\n  const substring2 = string2.substr(0, longestCommonSubstringIndex(string2, string1))\n\n  return substring1 + substring2\n}\n\n/**\n * Return the index of the longest common substring between two strings.\n * Return -1 in case the input list is empty.\n * >>> longestCommonSubstringIndex('', 'abc')\n  0\n  >>> longestCommonSubstringIndex('abc', 'ab')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbc')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbc')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdef')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdefghij')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdefghijklmnopqrstuvwxyz')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdefghijklmnopqrstuvwxyz')\n  0\n  */\nconst longestCommonSubstringIndex = (string1, string2) => {\n  if (string1 === string2) {\n    return 0\n  }\n\n  const substring1 = string1.substr(0, longestCommonSubstringIndexIndex(string1, string2))\n  const substring2 = string2.substr(0, longestCommonSubstringIndexIndex(string2, string1))\n\n  return substring1.length + substring2.length\n}\n\n/**\n * Return the index of the longest common substring between two strings.\n * Return -1 in case the input list is empty.\n * >>> longestCommonSubstringIndexIndex('', 'abc')\n  0\n  >>> longestCommonSubstringIndexIndex('abc', 'ab')\n  0\n  >>> longestCommonSubstringIndexIndex('abc', 'abbc')\n  0\n  >>> longestCommonSubstringIndexIndex('abc', 'abbbbc')\n  0\n  >>> longestCommonSubstringIndexIndex('abc', 'abbbbcdef')\n  0\n  >>> longestCommonSubstringIndexIndex('abc', 'abbbbcdefghij')\n  0\n  >>> longestCommonSubstringIndexIndex('abc', 'abbbbcdefghijklmnopqrstuvwxyz')\n  0\n  >>> longestCommonSubstringIndexIndex('abc', 'abbbbcdefghijklmnopqrstuvwxyz')\n  0\n  */\nconst longestCommonSubstringIndexIndex = (string1, string2) => {\n  let substring1Index = 0\n  let substring2Index = 0\n\n  while (substring1Index < string1.length && substring2Index < string2.length) {\n    if (string1[substring1Index] === string2[substring2Index]) {\n      substring1Index++\n      substring2Index++\n    } else {\n      if (substring1Index === string1.length) {\n        return substring2Index\n      }\n\n      if (substring2Index === string2.length) {\n        return substring1Index\n      }\n\n      substring1Index++\n      substring2Index++\n    }\n  }\n\n  return substring1Index\n}\n\n/**\n * Return the longest common substring between two strings.\n * Return null in case the input list is empty.\n * >>> longestCommonSubstringIndex('', 'abc')\n  0\n  >>> longestCommonSubstringIndex('abc', 'ab')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbc')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbc')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdef')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdefghij')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdefghijklmnopqrstuvwxyz')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdefghijklmnopqrstuvwxyz')\n  0\n  */\nconst longestCommonSubstringIndex = (string1, string2) => {\n  if (string1 === string2) {\n    return 0\n  }\n\n  const substring1 = string1.substr(0, longestCommonSubstringIndexIndex(string1, string2))\n  const substring2 = string2.substr(0, longestCommonSubstringIndexIndex(string2, string1))\n\n  return substring1.length + substring2.length\n}\n\n/**\n * Return the longest common substring between two strings.\n * Return null in case the input list is empty.\n * >>> longestCommonSubstringIndex('', 'abc')\n  0\n  >>> longestCommonSubstringIndex('abc', 'ab')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbc')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbc')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdef')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdefghij')\n  0\n  >>> longestCommonSubstringIndex('abc', 'abbbbcdefghijklmnopqrstuvwxyz')\n  0\n  >>> longestCommonSubstring", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\nexport { maximum, maximumSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === min) {\n      result.push(min);\n    }\n  }\n  return result;\n};\n\nexport { minimum, minimumSorted };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 3, 3, 4]\n      Output: [1, 3, 4]\n\n  Note:\n      1. You may assume the array is sorted in ascending order\n      2. The result returned by the function should be in the same order as the input array\n*/\nconst removeDuplicates = (arr) => {\n  const result = [];\n  let lastVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]!== lastVal) {\n      result.push(lastVal);\n      lastVal = arr[i];\n    }\n  }\n  result.push(lastVal);\n  return result;\n};\n\nexport { removeDuplicates, removeDuplicatesSorted };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 3, 3, 4]\n      Output: [1, 3, 4]\n\n  Note:\n      1. You may assume the array is sorted in ascending order\n      2. The result returned by the function should be in the same order as the input array\n*/\nconst removeDuplicatesSorted = (arr) => {\n  const result = [];\n  let lastVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === lastVal) {\n      result.push(lastVal);\n      lastVal = arr[i];\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicatesSorted };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 3, 3, 4]\n      Output: [1, 3, 4]\n\n  Note:\n      1. You may assume the array is sorted in ascending order\n      2. The result returned by the function should be in the same order as the input array\n*/\nconst removeDuplicatesSorted2 = (arr) => {\n  const result = [];\n  let lastVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === lastVal) {\n      result.push(lastVal);\n      lastVal = arr[i];\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicatesSorted2 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 3, 3, 4]\n      Output: [1, 3, 4]\n\n  Note:\n      1. You may assume the array is sorted in ascending order\n      2. The result returned by the function should be in the same order as the input array\n*/\nconst removeDuplicatesSorted3 = (arr) => {\n  const result = [];\n  let lastVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === lastVal) {\n      result.push(lastVal);\n      lastVal = arr[i];\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicatesSorted3 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 3, 3, 4]\n      Output: [1, 3, 4]\n\n  Note:\n      1. You may assume the array is sorted in ascending order\n      2. The result returned by the function should be in the same order as the input array\n*/\nconst removeDuplicatesSorted4 = (arr) => {\n  const result = [];\n  let lastVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === lastVal) {\n      result.push(lastVal);\n      lastVal = arr[i];\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicatesSorted4 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 3, 3, 4]\n      Output: [1, 3, 4]\n\n  Note:\n      1. You may assume the array is sorted in ascending order\n      2. The result returned by the function should be in the same order as the input array\n*/\nconst removeDuplicatesSorted5 = (arr) => {\n  const result = [];\n  let lastVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === lastVal) {\n      result.push(lastVal);\n      lastVal = arr[i];\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicatesSorted5 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 3, 3, 4]\n      Output: [1, 3, 4]\n\n  Note:\n      1. You may assume the array is sorted in ascending order\n      2. The result returned by the function should be in the same order as the input array\n*/\nconst removeDuplicatesSorted6 = (arr) => {\n  const result = [];\n  let lastVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === lastVal) {\n      result.push(lastVal);\n      lastVal = arr[i];\n    } else {\n      result.push(arr[i]);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      evenSum += num;\n    }\n  });\n  return evenSum;\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string representation of its index.\n\n  Examples\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'b0', 'c1', 'd1']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'b0', 'b1', 'c1', 'c2', 'd3']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'b0', 'b1', 'b2', 'c1', 'c2', 'c3', 'd3', 'd4']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'a3', 'b0', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9']\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  arr.forEach((str, index) => {\n    newArr.push(`${str}${index}`);\n  });\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string representation of its index.\n\n  Examples\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'b0', 'c1', 'd1']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'b0', 'b1', 'c1', 'c2', 'd3']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'b0', 'b1', 'b2', 'c1', 'c2', 'c3', 'd3', 'd4']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'a3', 'b0', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9']\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  arr.forEach((str, index) => {\n    newArr.push(`${str}${index}`);\n  });\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string representation of its index.\n\n  Examples\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'b0', 'c1', 'd1']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'b0', 'b1', 'c1', 'c2', 'd3']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'b0', 'b1', 'b2', 'c1', 'c2', 'c3', 'd3', 'd4']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'a3', 'b0', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9']\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  arr.forEach((str, index) => {\n    newArr.push(`${str}${index}`);\n  });\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string representation of its index.\n\n  Examples\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'b0', 'c1', 'd1']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'b0', 'b1', 'c1', 'c2', 'd3']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'b0', 'b1', 'b2', 'c1', 'c2', 'c3', 'd3', 'd4']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'a3', 'b0', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9']\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  arr.forEach((str, index) => {\n    newArr.push(`${str}${index}`);\n  });\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string representation of its index.\n\n  Examples\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'b0', 'c1', 'd1']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'b0', 'b1', 'c1', 'c2', 'd3']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'b0', 'b1', 'b2', 'c1', 'c2', 'c3', 'd3', 'd4']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'a3', 'b0', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9']\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  arr.forEach((str, index) => {\n    newArr.push(`${str}${index}`);\n  });\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string representation of its index.\n\n  Examples\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'b0', 'c1', 'd1']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'b0', 'b1', 'c1', 'c2', 'd3']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'b0', 'b1', 'b2', 'c1', 'c2', 'c3', 'd3', 'd4']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'a3', 'b0', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9']\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  arr.forEach((str, index) => {\n    newArr.push(`${str}${index}`);\n  });\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string representation of its index.\n\n  Examples\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'b0', 'c1', 'd1']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'b0', 'b1', 'c1', 'c2', 'd3']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'b0', 'b1', 'b2', 'c1', 'c2', 'c3', 'd3', 'd4']\n  solution(['a', 'b', 'c', 'd']) ==> ['a0', 'a1', 'a2', 'a3', 'b0', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9']\n  */\nconst solution = (arr) => {\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_list = []\n  let collatz_list = []\n  let prev_term = 1\n  let next_term = 1\n  while(n > 1) {\n    if (n % 2 === 0) {\n      odd_list.push(prev_term)\n      prev_term = next_term\n      next_term = prev_term * 2 + 1\n    } else {\n      odd_list.push(next_term)\n      prev_term = next_term\n      next_term = prev_term * 3 + 1\n    }\n    n--\n  }\n  odd_list.push(next_term)\n  odd_list.sort((a, b) => a - b)\n  return odd_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_odd_list = []\n  let collatz_list = []\n  let prev_term = 1\n  let next_term = 1\n  while(n > 1) {\n    if (n % 2 === 0) {\n      even_odd_list.push(prev_term)\n      prev_term = next_term\n      next_term = prev_term * 2 + 1\n    } else {\n      even_odd_list.push(next_term)\n      prev_term = next_term\n      next_term = prev_term * 3 + 1\n    }\n    n--\n  }\n  even_odd_list.push(next_term)\n  even_odd_list.sort((a, b) => a - b)\n  return even_odd_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz_des = (n) => {\n  let even_odd_list = []\n  let collatz_list = []\n  let prev_term = 1\n  let next_term = 1\n  while(n > 1) {\n    if (n % 2 === 0) {\n      even_odd_list.push(prev_term)\n      prev_term = next_term\n      next_term = prev_term * 2 + 1\n    } else {\n      even_odd_list.push(next_term)\n      prev_term = next_term\n      next_term = prev_term * 3 + 1\n    }\n    n--\n  }\n  even_odd_list.push(next_term)\n  even_odd_list.sort((a, b) => b - a)\n  return even_odd_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz_des(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz_des = (n) => {\n  let odd_list = []\n  let collatz_list = []\n  let prev_term = 1\n  let next_term = 1\n  while(n > 1) {\n    if (n % 2 === 0) {\n      odd_list.push(prev_term)\n      prev_term = next_term\n      next_term = prev_term * 2 + 1\n    } else {\n      odd_list.push(next_term)\n      prev_term = next_term\n      next_term = prev_term * 3 + 1\n    }\n    n--\n  }\n  odd_list.push(next_term)\n  odd_list.sort((a, b) => b - a)\n  return odd_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz_des(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz_des = (n) => {\n  let even_odd_list = []\n  let collatz_list = []\n  let prev_term = 1\n  let next_term = 1\n  while(n > 1) {\n    if (n % 2 === 0) {\n      even_odd_list.push(prev_term)\n      prev_term = next_term\n      next_term = prev_term * 2 + 1\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  let dateArray = date.split('-');\n  let dateArrayLength = dateArray.length;\n  let valid = false;\n  if (dateArrayLength === 3) {\n    let monthArray = dateArray[0].split('');\n    let dayArray = dateArray[1].split('');\n    let yearArray = dateArray[2].split('');\n    let monthArrayLength = monthArray.length;\n    let dayArrayLength = dayArray.length;\n    let yearArrayLength = yearArray.length;\n    if (monthArrayLength === 1 && dayArrayLength === 1 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 2 && dayArrayLength === 1 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 1 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 2 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 3 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 4 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 5 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 6 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 7 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 8 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 9 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 10 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 11 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 3 && dayArrayLength === 12 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 1 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 2 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 3 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 4 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 5 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 6 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 7 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 8 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 9 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 10 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 11 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 4 && dayArrayLength === 12 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }\n    }\n    if (monthArrayLength === 5 && dayArrayLength === 1 && yearArrayLength === 2) {\n      if (monthArray[0] === '0' && dayArray[0] === '0' && yearArray[0] === '0') {\n        valid = true;\n      }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.trim().length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_2 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.trim().length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_3 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.trim().length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_4 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.trim().length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_5 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.trim().length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_6 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.trim().length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_7 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.trim().length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_8 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.trim().length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_9 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.trim().length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_10 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.trim().length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return false;\n    }\n    map.set(key, true);\n  }\n  return true;\n};\n\n// Given a list of numbers, return whether or not they are sorted\n// in descending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) ➞ false\n// is_sorted([1, 2, 3, 4, 5]) ➞ true\n// is_sorted([1, 3, 2, 4, 5]) ➞ false\n// is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n// is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\nconst is_sorted_desc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return false;\n    }\n    map.set(key, false);\n  }\n  return true;\n};\n\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) ➞ true\n// is_sorted([1, 2, 3, 4, 5]) ➞ true\n// is_sorted([1, 3, 2, 4, 5]) ➞ false\n// is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n// is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\nconst is_sorted_asc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return false;\n    }\n    map.set(key, true);\n  }\n  return true;\n};\n\n// Given a list of numbers, return whether or not they are sorted\n// in descending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) ➞ false\n// is_sorted([1, 2, 3, 4, 5]) ➞ false\n// is_sorted([1, 3, 2, 4, 5]) ➞ true\n// is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n// is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n// is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\nconst is_sorted_desc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return false;\n    }\n    map.set(key, false);\n  }\n  return true;\n};\n\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) ➞ true\n// is_sorted([1, 2, 3, 4, 5]) ➞ true\n// is_sorted([1, 3, 2, 4, 5]) ➞ false\n// is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n// is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\nconst is_sorted_asc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return false;\n    }\n    map.set(key, true);\n  }\n  return true;\n};\n\n// Given a list of numbers, return whether or not they are sorted\n// in descending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) ➞ false\n// is_sorted([1, 2, 3, 4, 5]) ➞ false\n// is_sorted([1, 3, 2, 4, 5]) ➞ true\n// is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n// is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n// is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\nconst is_sorted_desc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return false;\n    }\n    map.set(key, false);\n  }\n  return true;\n};\n\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) ➞ true\n// is_sorted([1, 2, 3, 4, 5]) ➞ true\n// is_sorted([1, 3, 2, 4, 5]) ➞ false\n// is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n// is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\nconst is_sorted_asc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return false;\n    }\n    map.set(key, true);\n  }\n  return true;\n};\n\n// Given a list of numbers, return whether or not they are sorted\n// in descending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) ➞ false\n// is_sorted([1, 2, 3, 4, 5]) ➞ false\n// is_sorted([1, 3, 2, 4, 5]) ➞ true\n// is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n// is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n// is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\nconst is_sorted_desc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  if (start > end) return \"NO\"\n  if (start === end) return \"YES\"\n  if (start < end) {\n    const [start3, end3] = interval1\n    const [start4, end4] = interval2\n    const start5 = Math.min(start3, start4)\n    const end5 = Math.max(end3, end4)\n    if (start5 > end5) return \"NO\"\n    if (start5 === end5) return \"YES\"\n    if (start5 < end5) {\n      const [start6, end6] = interval1\n      const [start7, end7] = interval2\n      const start8 = Math.min(start6, start7)\n      const end8 = Math.max(end6, end7)\n      if (start8 > end8) return \"NO\"\n      if (start8 === end8) return \"YES\"\n      if (start8 < end8) {\n        const [start9, end9] = interval1\n        const [start10, end10] = interval2\n        const start11 = Math.min(start9, start10)\n        const end11 = Math.max(end9, end10)\n        if (start11 > end11) return \"NO\"\n        if (start11 === end11) return \"YES\"\n        if (start11 < end11) {\n          const [start12, end12] = interval1\n          const [start13, end13] = interval2\n          const start14 = Math.min(start12, start13)\n          const end14 = Math.max(end12, end13)\n          if (start14 > end14) return \"NO\"\n          if (start14 === end14) return \"YES\"\n          if (start14 < end14) {\n            const [start15, end15] = interval1\n            const [start16, end16] = interval2\n            const start17 = Math.min(start15, start16)\n            const end17 = Math.max(end15, end16)\n            if (start17 > end17) return \"NO\"\n            if (start17 === end17) return \"YES\"\n            if (start17 < end17) {\n              const [start18, end18] = interval1\n              const [start19, end19] = interval2\n              const start20 = Math.min(start18, start19)\n              const end20 = Math.max(end18, end19)\n              if (start20 > end20) return \"NO\"\n              if (start20 === end20) return \"YES\"\n              if (start20 < end20) {\n                const [start21, end21] = interval1\n                const [start22, end22] = interval2\n                const start23 = Math.min(start21, start22)\n                const end23 = Math.max(end21, end22)\n                if (start23 > end23) return \"NO\"\n                if (start23 === end23) return \"YES\"\n                if (start23 < end23) {\n                  const [start24, end24] = interval1\n                  const [start25, end25] = interval2\n                  const start26 = Math.min(start24, start25)\n                  const end26 = Math.max(end24, end25)\n                  if (start26 > end26) return \"NO\"\n                  if (start26 === end26) return \"YES\"\n                  if (start26 < end26) {\n                    const [start27, end27] = interval1\n                    const [start28, end28] = interval2\n                    const start29 = Math.min(start27, end28)\n                    const end29 = Math.max(end27, end28)\n                    if (start29 > end29) return \"NO\"\n                    if (start29 === end29) return \"YES\"\n                    if (start29 < end29) {\n                      const [start30, end30] = interval1\n                      const [start31, end31] = interval2\n                      const start32 = Math.min(start30, start31)\n                      const end32 = Math.max(end30, end31)\n                      if (start32 > end32) return \"NO\"\n                      if (start32 === end32) return \"YES\"\n                      if (start32 < end32) {\n                        const [start33, end33] = interval1\n                        const [start34, end34] = interval2\n                        const start35 = Math.min(start33, end34)\n                        const end35 = Math.max(end33, end34)\n                        if (start35 > end35) return \"NO\"\n                        if (start35 === end35) return \"YES\"\n                        if (start35 < end35) {\n                          const [start36, end36] = interval1\n                          const [start37, end37] = interval2\n                          const start38 = Math.min(start36, end37)\n                          const end38 = Math.max(end36, end37)\n                          if (start38 > end38) return \"NO\"\n                          if (start38 === end38) return \"YES\"\n                          if (start38 < end38) {\n                            const [start39, end39] = interval1\n                            const [start40, end40] = interval2\n                            const start41 = Math.min(start39, end40)\n                            const end41 = Math.max(end39, end40)\n                            if (start41 > end41) return \"NO\"\n                            if (start41 === end41) return \"YES\"\n                            if (start41 < end41) {\n                              const [start42, end42] = interval1\n                              const [start43, end43] = interval2\n                              const start44 = Math.min(start42, start43)\n                              const end44 = Math.max(end42, end43)\n                              if (start44 > end44) return \"NO\"\n                              if (start44 === end44) return \"YES\"\n                              if (start44 < end44) {\n                                const [start45, end45] = interval1\n                                const [start46, end46] = interval2\n                                const start47 = Math.min(start45, start46)\n                                const end47 = Math.max(end45, end46)\n                                if (start47 > end47) return \"NO\"\n                                if (start47 === end47) return \"YES\"\n                                if (start47 < end47) {\n                                  const [start48, end48] = interval1\n                                  const [start49, end49] = interval2\n                                  const start50 = Math.min(start48, end49)\n                                  const end50 = Math.max(end48, end49)\n                                  if (start50 > end50) return \"NO\"\n                                  if (start50 === end50) return \"YES\"\n                                  if (start50 < end50) {\n                                    const [start51, end51] = interval1\n                                    const [start52, end52] = interval2\n                                    const start53 = Math.min(start51, start52)\n                                    const end53 = Math.max(end51, end52)\n                                    if (start53 > end53) return \"NO\"\n                                    if (start53 ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let sign = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * sign\n    sign *= (arr[i] < 0)? 1 : -1\n  }\n\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(k + 1);\n  const lst_B = new Array(k + 1);\n  const lst_C = new Array(k + 1);\n\n  for (let i = 0; i < k + 1; i++) {\n    lst_A[i] = i;\n    lst_B[i] = i;\n    lst_C[i] = i;\n  }\n\n  for (let i = 1; i < N * N; i++) {\n    const x = Math.floor(i / N);\n    const y = i - (x * N);\n    const val = grid[y][x];\n\n    if (val === grid[y - 1][x] || val === grid[y + 1][x] || val === grid[y][x - 1] || val === grid[y][x + 1]) {\n      lst_A[val] = i;\n      lst_B[val] = i;\n      lst_C[val] = i;\n    }\n  }\n\n  const ans = [];\n\n  for (let i = 1; i <= k; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      ans.push(lst_A[i]);\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_C[i];\n      lst_C[i] = ans[ans.length - 1];\n    }\n  }\n\n  return ans;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path2 = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(k + 1);\n  const lst_B = new Array(k + 1);\n  const lst_C = new Array(k + 1);\n\n  for (let i = 0; i < k + 1; i++) {\n    lst_A[i] = i;\n    lst_B[i] = i;\n    lst_C[i] = i;\n  }\n\n  for (let i = 1; i < N * N; i++) {\n    const x = Math.floor(i / N);\n    const y = i - (x * N);\n    const val = grid[y][x];\n\n    if (val === grid[y - 1][x] || val === grid[y + 1][x] || val === grid[y][x - 1] || val === grid[y][x + 1]) {\n      lst_A[val] = i;\n      lst_B[val] = i;\n      lst_C[val] = i;\n    }\n  }\n\n  const ans = [];\n\n  for (let i = 1; i <= k; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      ans.push(lst_A[i]);\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_C[i];\n      lst_C[i] = ans[ans.length - 1];\n    }\n  }\n\n  return ans;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path3 = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(k + 1);\n  const lst_B = new Array(k + 1);\n  const lst_C = new Array(k + 1);\n\n  for (let i = 0; i < k + 1; i++) {\n    lst_A[i] = i;\n    lst_B[i] = i;\n    lst_C[i] = i;\n  }\n\n  for (let i = 1; i < N * N; i++) {\n    const x = Math.floor(i / N", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (b === 0) return a;\n  return greatest_common_divisor(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(25, 15)\n  15\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let first = 1;\n  let second = 2;\n  let third = 3;\n  if (n % 2 === 0) {\n    arr.push(first);\n    arr.push(second);\n    arr.push(third);\n  } else {\n    arr.push(first);\n    arr.push(third);\n    arr.push(second);\n  }\n  for (let i = 4; i <= n; i++) {\n    first = second + third;\n    second = third;\n    third = first;\n    arr.push(first);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is even.\n  spiral(n) = spiral(n - 2) + spiral(n - 1), if n is odd.\n  For example:\n  spiral(3) = 3\n  spiral(4) = spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2)\n         = spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + spiral(3) + spiral(2) + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of all its digits.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 8\n  */\nconst evenDigitSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst oddDigitSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 2.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 10\n  */\nconst evenDigitProduct = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst oddDigitProduct = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedDigitProduct = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i--) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedDigitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedEvenDigitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedOddDigitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedEvenDigitProduct = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedOddDigitProduct = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 1) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedReversedDigitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedReversedEvenDigitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedReversedOddDigitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedReversedEvenDigitProduct = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n  Return 0 if all digits are 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst reversedReversedOddDigitProduct = (n) => {\n  let product = 1;\n  for (let i = n; i ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const opening_brackets = ['[', '{', '('];\n  const closing_brackets = [']', '}', ']'];\n  const opening_set = new Set(opening_brackets);\n  const closing_set = new Set(closing_brackets);\n  const opening_set_size = opening_set.size;\n  const closing_set_size = closing_set.size;\n  const opening_set_is_empty = opening_set_size === 0;\n  const closing_set_is_empty = closing_set_size === 0;\n  const opening_set_is_nested = opening_set_is_empty || opening_set.has(string[0]);\n  const closing_set_is_nested = closing_set_is_empty || closing_set.has(string[string.length - 1]);\n  return opening_set_is_nested && closing_set_is_nested;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const opening_brackets = ['[', '{', '('];\n  const closing_brackets = [']', '}', ']'];\n  const opening_set = new Set(opening_brackets);\n  const closing_set = new Set(closing_brackets);\n  const opening_set_size = opening_set.size;\n  const closing_set_size = closing_set.size;\n  const opening_set_is_empty = opening_set_size === 0;\n  const closing_set_is_empty = closing_set_size === 0;\n  const opening_set_is_nested = opening_set_is_empty || opening_set.has(string[0]);\n  const closing_set_is_nested = closing_set_is_empty || closing_set.has(string[string.length - 1]);\n  return opening_set_is_nested && closing_set_is_nested;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const opening_brackets = ['[', '{', '('];\n  const closing_brackets = [']', '}', ']'];\n  const opening_set = new Set(opening_brackets);\n  const closing_set = new Set(closing_brackets);\n  const opening_set_size = opening_set.size;\n  const closing_set_size = closing_set.size;\n  const opening_set_is_empty = opening_set_size === 0;\n  const closing_set_is_empty = closing_set_size === 0;\n  const opening_set_is_nested = opening_set_is_empty || opening_set.has(string[0]);\n  const closing_set_is_nested = closing_set_is_empty || closing_set.has(string[string.length - 1]);\n  return opening_set_is_nested && closing_set_is_nested;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const opening_brackets = ['[', '{', '('];\n  const closing_brackets = [']', '}', ']'];\n  const opening_set = new Set(opening_brackets);\n  const closing_set = new Set(closing_brackets);\n  const opening_set_size = opening_set.size;\n  const closing_set_size = closing_set.size;\n  const opening_set_is_empty = opening_set_size === 0;\n  const closing_set_is_empty = closing_set_size === 0;\n  const opening_set_is_nested = opening_set_is_empty || opening_set.has(string[0]);\n  const closing_set_is_nested = closing_set_is_empty || closing_set.has(string[string.length - 1]);\n  return opening_set_is_nested && closing_set_is_nested;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const opening_brackets = ['[', '{', '('];\n  const closing_brackets = [']', '}', ']'];\n  const opening_set = new Set(opening_brackets);\n  const closing_set = new Set(closing_brackets);\n  const opening_set_size = opening_set.size;\n  const closing_set_size = closing_set.size;\n  const opening_set_is_empty = opening_set_size === 0;\n  const closing_set_is_empty = closing_set_size === 0;\n  const opening_set_is_nested = opening_set_is_empty || opening_set.has(string[0]);\n  const closing_set_is_nested = closing_set_is_empty || closing_set.has(string[string.length - 1]);\n  return opening_set_is_nested && closing_set_is_nested;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 21\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sum_numbers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_2 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_3 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_4 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_5 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_6 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_7 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_8 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_9 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 8.4\n  For lst = [-2.4,1,1]", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_letter = last_char.match(/[a-z]/i);\n  return!last_char_is_a_letter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_number = last_char.match(/[0-9]/i);\n  return!last_char_is_a_number;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a special character, and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_special_char(\"apple pie\") ➞ false\n  check_if_last_char_is_a_special_char(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_special_char(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_special_char(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_special_char = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_special_char = last_char.match(/[!,@,#,$,%,^,&,*,?,_,~,(,),{,},[,]]/i);\n  return!last_char_is_a_special_char;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space, and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_space = last_char.match(/\\s/i);\n  return!last_char_is_a_space;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_symbol(\"apple pie\") ➞ false\n  check_if_last_char_is_a_symbol(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_symbol(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_symbol(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_symbol = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_symbol = last_char.match(/[!,@,#,$,%,^,&,*,?,_,~,(,),{,},[,]]/i);\n  return!last_char_is_a_symbol;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word, and is not a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_word(\"apple pie\") ➞ true\n  check_if_last_char_is_a_word(\"apple pi e\") ➞ false\n  check_if_last_char_is_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_word = last_char.match(/[a-z]/i) || last_char.match(/[A-Z]/i) || last_char.match(/[0-9]/i) || last_char.match(/[!,@,#,$,%,^,&,*,?,_,~,(,),{,},[,]]/i);\n  return!last_char_is_a_word;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word = (txt) => {\n  const words = txt.split(\" \");\n  const last_char = words[words.length - 1];\n  const last_char_is_a_word = last_char.match(/[a-z]/i) || last_char.match(/[A-Z]/i) || last_char.match(/[0-9]/i) || last_char.match(/[!,@,#,$,%,^,&,*,?,_,~,(,),{,},[,]]/i);\n  return!last_char_is_a_word;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a special character, and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word(\"\") ➞ false\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 0\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are unique. Otherwise, return false. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = true\n  can_arrange([1,2,3]) = false\n  */\nconst can_arrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are distinct. Otherwise, return false. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = false\n  can_arrange([1,2,3]) = true\n  */\nconst can_arrange = (arr) => {\n  let distinct = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      distinct = false;\n      break;\n    }\n  }\n  return distinct;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are in ascending order. Otherwise, return false. The given array will\n  not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = true\n  can_arrange([1,2,3]) = false\n  */\nconst can_arrange = (arr) => {\n  let ascending = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      ascending = false;\n      break;\n    }\n  }\n  return ascending;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are in descending order. Otherwise, return false. The given array will\n  not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = false\n  can_arrange([1,2,3]) = true\n  */\nconst can_arrange = (arr) => {\n  let descending = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      descending = false;\n      break;\n    }\n  }\n  return descending;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are in ascending or descending order. Otherwise, return false. The\n  given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = true\n  can_arrange([1,2,3]) = false\n  */\nconst can_arrange = (arr) => {\n  let ascending = true;\n  let descending = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      ascending = false;\n    }\n    if (arr[i] > arr[i + 1]) {\n      descending = false;\n    }\n  }\n  return ascending || descending;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are in ascending or descending order. Otherwise, return false. The\n  given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = false\n  can_arrange([1,2,3]) = true\n  */\nconst can_arrange = (arr) => {\n  let ascending = true;\n  let descending = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      ascending = false;\n    }\n    if (arr[i] > arr[i + 1]) {\n      descending = false;\n    }\n  }\n  return ascending && descending;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are in ascending order. Otherwise, return false. The given array will\n  not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = false\n  can_arrange([1,2,3]) = true\n  */\nconst can_arrange = (arr) => {\n  let ascending = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      ascending = false;\n    }\n  }\n  return ascending;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are in descending order. Otherwise, return false. The given array will\n  not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = false\n  can_arrange([1,2,3]) = true\n  */\nconst can_arrange = (arr) => {\n  let descending = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      descending = false;\n    }\n  }\n  return descending;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are in ascending or descending order. Otherwise, return false. The\n  given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = false\n  can_arrange([1,2,3]) = true\n  */\nconst can_arrange = (arr) => {\n  let ascending = true;\n  let descending = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      ascending = false;\n    }\n    if (arr[i] > arr[i + 1]) {\n      descending = false;\n    }\n  }\n  return ascending || descending;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are in ascending order. Otherwise, return false. The given array will\n  not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = false\n  can_arrange([1,2,3]) = true\n  */\nconst can_arrange = (arr) => {\n  let ascending = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      ascending = false;\n    }\n  }\n  return ascending;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are in descending order. Otherwise, return false. The given array will\n  not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = false\n  can_arrange([1,2,3]) = true\n  */\nconst can_arrange = (arr) => {\n  let descending = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      descending = false;\n    }\n  }\n  return descending;\n};\n\n/*Create a function which returns true if all elements in the given array\n  are in ascending or descending order. Otherwise, return false. The\n  given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = false\n  can_arrange([1,2,3]) = true\n  */\nconst can_arrange = (arr) => {\n  let ascending = true;\n  let descending = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      ascending = false;\n    }\n    if (arr[i] > arr[i + 1]) {\n      descending = false;\n    }\n  }\n  return ascending && descending;\n};\n\n/*Create a function which returns true if all elements in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \"+\" || b === \"+\") return null\n  if (a === \"0\" || b === \"0\") return null\n  if (a === \"1\" && b === \"1\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \",\") return null\n  if (a === \",\" && b === \".\") return null\n  if (a === \"-\" && b === \"+\") return null\n  if (a === \"+\" && b === \"-\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"1\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \".\" && b === \".\") return null\n  if (a === \",\" && b === \",\") return null\n  if (a === \"-\" && b === \"-\") return null\n  if (a === \"+\" && b === \"+\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0\") return null\n  if (a === \"1\" && b === \"0\") return null\n  if (a === \"0\" && b === \"1\") return null\n  if (a === \"0\" && b === \"0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_even_neg(4) == false\n  is_equal_to_sum_even_neg(6) == false\n  is_equal_to_sum_even_neg(8) == true\n  */\nconst is_equal_to_sum_even_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_odd_neg(4) == false\n  is_equal_to_sum_odd_neg(6) == false\n  is_equal_to_sum_odd_neg(8) == true\n  */\nconst is_equal_to_sum_odd_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  is_equal_to_sum_int(4) == false\n  is_equal_to_sum_int(6) == false\n  is_equal_to_sum_int(8) == true\n  */\nconst is_equal_to_sum_int = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative integers\n  Example\n  is_equal_to_sum_int(4) == false\n  is_equal_to_sum_int(6) == false\n  is_equal_to_sum_int(8) == true\n  */\nconst is_equal_to_sum_int_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive real numbers\n  Example\n  is_equal_to_sum_real(4) == false\n  is_equal_to_sum_real(6) == false\n  is_equal_to_sum_real(8) == true\n  */\nconst is_equal_to_sum_real = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative real numbers\n  Example\n  is_equal_to_sum_real(4) == false\n  is_equal_to_sum_real(6) == false\n  is_equal_to_sum_real(8) == true\n  */\nconst is_equal_to_sum_real_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive complex numbers\n  Example\n  is_equal_to_sum_complex(4) == false\n  is_equal_to_sum_complex(6) == false\n  is_equal_to_sum_complex(8) == true\n  */\nconst is_equal_to_sum_complex = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative complex numbers\n  Example\n  is_equal_to_sum_complex(4) == false\n  is_equal_to_sum_complex(6) == false\n  is_equal_to_sum_complex(8) == true\n  */\nconst is_equal_to_sum_complex_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive real numbers or integers\n  Example\n  is_equal_to_sum_real_int_or_float(4) == false\n  is_equal_to_sum_real_int_or_float(6) == false\n  is_equal_to_sum_real_int_or_float(8) == true\n  */\nconst is_equal_to_sum_real_int_or_float = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative real numbers or integers\n  Example\n  is_equal_to_sum_real_int_or_float(4) == false\n  is_equal_to_sum_real_int_or_float(6) == false\n  is_equal_to_sum_real_int_or_float(8) == true\n  */\nconst is_equal_to_sum_real_int_or_float_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive complex numbers or integers\n  Example\n  is_equal_to_sum_complex_int_or_float(4) == false\n  is_equal_to_sum_complex_int_or_float(6) == false\n  is_equal_to_sum_complex_int_or_float(8) == true\n  */\nconst is_equal_to_sum_complex_int_or_float = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative complex numbers or integers\n  Example\n  is_equal_to_sum_complex_int_or_float(4) == false\n  is_equal_to_sum_complex_int_or_float(6) == false\n  is_equal_to_sum_complex_int_or_float(8) == true\n  */\nconst is_equal_to_sum_complex_int_or_float_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive real numbers or integers\n  Example\n  is_equal_to_sum_real_int_or_float(4) == false\n  is_equal_to_sum_real_int_or_float(6) == false\n  is_equal_to_sum_real_int_or_float(8) == true\n  */\nconst is_equal_to_sum_real_int_or_float_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n};\n\n/*\n  A function that will receive an integer as input and will return the sum\n  of all the numbers from 1 to that integer.\n*/\nconst sum_of_numbers = (num) => {\n  let sum = 0;\n  for (let i = 1; i <= num; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that will receive an integer as input and will return the average\n  of all the numbers from 1 to that integer.\n*/\nconst average_of_numbers = (num) => {\n  let sum = 0;\n  for (let i = 1; i <= num; i++) {\n    sum += i;\n  }\n  return sum / num;\n};\n\n/*\n  A function that will receive an integer as input and will return the largest\n  number from 1 to that integer.\n*/\nconst max_of_numbers = (num) => {\n  let max = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i > max) {\n      max = i;\n    }\n  }\n  return max;\n};\n\n/*\n  A function that will receive an integer as input and will return the smallest\n  number from 1 to that integer.\n*/\nconst min_of_numbers = (num) => {\n  let min = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i < min) {\n      min = i;\n    }\n  }\n  return min;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer.\n*/\nconst count_of_numbers = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    count += 1;\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 3.\n*/\nconst count_of_divisible_by_three = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 3 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 5.\n*/\nconst count_of_divisible_by_five = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 5 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 7.\n*/\nconst count_of_divisible_by_seven = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 7 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 11.\n*/\nconst count_of_divisible_by_eleven = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 11 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 15.\n*/\nconst count_of_divisible_by_fifteen = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 15 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 17.\n*/\nconst count_of_divisible_by_seventeen = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 17 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 21.\n*/\nconst count_of_divisible_by_twenty_one = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 21 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 23.\n*/\nconst count_of_divisible_by_twenty_three = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 23 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 27.\n*/\nconst count_of_divisible_by_twenty_seven = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 27 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 31.\n*/\nconst count_of_divisible_by_twenty_nine = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 31 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 35.\n*/\nconst count_of_divisible_by_thirty_five = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 35 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 41.\n*/\nconst count_of_divisible_by_thirty_nine = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 41 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 45.\n*/\nconst count_of_divisible_by_fourty_five = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 45 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 51.\n*/\nconst count_of_divisible_by_fourty_nine = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 51 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 55.\n*/\nconst count_of_divisible_by_fifty_five = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 55 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  A function that will receive an integer as input and will return the number\n  of numbers from 1 to that integer that are divisible by 60.\n*/\nconst count_of_divisible_by_sixty_five = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (i % 60 === 0) {\n      count += 1;\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(string.substring(0, i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = [];\n  let i = string.length - 1;\n  while (i >= 0) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      suffixes.push(string.substring(i + 1));\n      i -= 1;\n    } else {\n      i -= 1;\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(string.substring(i));\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/ /g, \"_\").replace(/  +/g, \"_\").replace(/  +/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive underscores\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example__1\") == \"Example\"\n  remove_consecutive(\"Example__1__1\") == \"Example\"\n  */\nconst remove_consecutive = (text) => {\n  return text.replace(/_+/g, \"_\");\n}\n\n/*\n  Given a string text, remove all consecutive dashes\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example--1\") == \"Example\"\n  remove_consecutive(\"Example---1\") == \"Example\"\n  */\nconst remove_consecutive_dashes = (text) => {\n  return text.replace(/-+/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive spaces\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example  1\") == \"Example\"\n  remove_consecutive(\"Example   1\") == \"Example\"\n  */\nconst remove_consecutive_spaces = (text) => {\n  return text.replace(/  +/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive underscores\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example__1\") == \"Example\"\n  remove_consecutive(\"Example__1__1\") == \"Example\"\n  */\nconst remove_consecutive_underscores = (text) => {\n  return text.replace(/_+/g, \"_\");\n}\n\n/*\n  Given a string text, remove all consecutive dashes\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example--1\") == \"Example\"\n  remove_consecutive(\"Example---1\") == \"Example\"\n  */\nconst remove_consecutive_dashes_spaces = (text) => {\n  return text.replace(/-+/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive spaces\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example  1\") == \"Example\"\n  remove_consecutive(\"Example   1\") == \"Example\"\n  */\nconst remove_consecutive_spaces_underscores = (text) => {\n  return text.replace(/  +/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive underscores\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example__1\") == \"Example\"\n  remove_consecutive(\"Example__1__1\") == \"Example\"\n  */\nconst remove_consecutive_underscores_dashes = (text) => {\n  return text.replace(/_+/g, \"_\");\n}\n\n/*\n  Given a string text, remove all consecutive dashes\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example--1\") == \"Example\"\n  remove_consecutive(\"Example---1\") == \"Example\"\n  */\nconst remove_consecutive_dashes_spaces_underscores = (text) => {\n  return text.replace(/-+/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive spaces\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example  1\") == \"Example\"\n  remove_consecutive(\"Example   1\") == \"Example\"\n  */\nconst remove_consecutive_spaces_dashes_underscores = (text) => {\n  return text.replace(/  +/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive underscores\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example__1\") == \"Example\"\n  remove_consecutive(\"Example__1__1\") == \"Example\"\n  */\nconst remove_consecutive_underscores_spaces_dashes = (text) => {\n  return text.replace(/_+/g, \"_\");\n}\n\n/*\n  Given a string text, remove all consecutive dashes\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example--1\") == \"Example\"\n  remove_consecutive(\"Example---1\") == \"Example\"\n  */\nconst remove_consecutive_dashes_spaces_underscores_dashes = (text) => {\n  return text.replace(/-+/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive spaces\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example  1\") == \"Example\"\n  remove_consecutive(\"Example   1\") == \"Example\"\n  */\nconst remove_consecutive_spaces_underscores_dashes_underscores = (text) => {\n  return text.replace(/  +/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive underscores\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example__1\") == \"Example\"\n  remove_consecutive(\"Example__1__1\") == \"Example\"\n  */\nconst remove_consecutive_underscores_spaces_dashes_underscores_dashes = (text) => {\n  return text.replace(/_+/g, \"_\");\n}\n\n/*\n  Given a string text, remove all consecutive dashes\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example--1\") == \"Example\"\n  remove_consecutive(\"Example---1\") == \"Example\"\n  */\nconst remove_consecutive_dashes_spaces_underscores_dashes_underscores_spaces = (text) => {\n  return text.replace(/-+/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive spaces\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example  1\") == \"Example\"\n  remove_consecutive(\"Example   1\") == \"Example\"\n  */\nconst remove_consecutive_spaces_underscores_dashes_underscores_spaces_underscores = (text) => {\n  return text.replace(/  +/g, \"-\");\n}\n\n/*\n  Given a string text, remove all consecutive underscores\n  \n  remove_consecutive(\"Example\") == \"Example\"\n  remove_consecutive(\"Example_1\") == \"Example\"\n  remove_consecutive(\"Example__1\") == \"Example\"\n  remove_consecutive(\"Example__1__1\") == \"Example\"\n  */\nconst remove_consecutive_underscores_spaces_dashes_underscores_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let first_letter = file_name.charAt(0);\n  let last_letter = file_name.charAt(file_name.length - 1);\n  let dot_index = file_name.indexOf(\".\");\n  let dot_length = dot_index - first_letter;\n  let dot_name = file_name.substring(dot_index + 1, dot_length);\n  let dot_name_length = dot_name.length;\n  let dot_name_check = dot_name.match(/\\.(txt|exe|dll)$/);\n  \n  if (dot_name_check === null) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].length!== 1) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].toUpperCase()!== first_letter) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].toLowerCase()!== first_letter) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[1].toLowerCase()!== \"txt\" && dot_name_check[1].toLowerCase()!== \"exe\" && dot_name_check[1].toLowerCase()!== \"dll\") {\n    return \"No\";\n  }\n  \n  if (dot_name_length < 3 || dot_name_length > 4) {\n    return \"No\";\n  }\n  \n  return \"Yes\";\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_2 = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let first_letter = file_name.charAt(0);\n  let last_letter = file_name.charAt(file_name.length - 1);\n  let dot_index = file_name.indexOf(\".\");\n  let dot_length = dot_index - first_letter;\n  let dot_name = file_name.substring(dot_index + 1, dot_length);\n  let dot_name_length = dot_name.length;\n  let dot_name_check = dot_name.match(/\\.(txt|exe|dll)$/);\n  \n  if (dot_name_check === null) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].length!== 1) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].toUpperCase()!== first_letter) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].toLowerCase()!== first_letter) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[1].toLowerCase()!== \"txt\" && dot_name_check[1].toLowerCase()!== \"exe\" && dot_name_check[1].toLowerCase()!== \"dll\") {\n    return \"No\";\n  }\n  \n  if (dot_name_length < 3 || dot_name_length > 4) {\n    return \"No\";\n  }\n  \n  return \"Yes\";\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_3 = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let first_letter = file_name.charAt(0);\n  let last_letter = file_name.charAt(file_name.length - 1);\n  let dot_index = file_name.indexOf(\".\");\n  let dot_length = dot_index - first_letter;\n  let dot_name = file_name.substring(dot_index + 1, dot_length);\n  let dot_name_length = dot_name.length;\n  let dot_name_check = dot_name.match(/\\.(txt|exe|dll)$/);\n  \n  if (dot_name_check === null) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].length!== 1) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].toUpperCase()!== first_letter) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].toLowerCase()!== first_letter) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[1].toLowerCase()!== \"txt\" && dot_name_check[1].toLowerCase()!== \"exe\" && dot_name_check[1].toLowerCase()!== \"dll\") {\n    return \"No\";\n  }\n  \n  if (dot_name_length < 3 || dot_name_length > 4) {\n    return \"No\";\n  }\n  \n  return \"Yes\";\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_4 = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let first_letter = file_name.charAt(0);\n  let last_letter = file_name.charAt(file_name.length - 1);\n  let dot_index = file_name.indexOf(\".\");\n  let dot_length = dot_index - first_letter;\n  let dot_name = file_name.substring(dot_index + 1, dot_length);\n  let dot_name_length = dot_name.length;\n  let dot_name_check = dot_name.match(/\\.(txt|exe|dll)$/);\n  \n  if (dot_name_check === null) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].length!== 1) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].toUpperCase()!== first_letter) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[0].toLowerCase()!== first_letter) {\n    return \"No\";\n  }\n  \n  if (dot_name_check[1].toLowerCase()!== \"txt\" && dot_name_check[1].toLowerCase()!== \"exe\" && dot_name_check[1].toLowerCase()!== \"dll\") {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function will not change the entries in the list whose \n  integer values are close to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry. The function shall then return the index of the entry whose \n  integer value is closest to the square root of the integer entry", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const prime = prime_number(arr[i].length);\n    if (primes.includes(prime)) {\n      return arr[i];\n    }\n    primes.push(prime);\n  }\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const prime = prime_number(arr[i].length);\n    if (primes.includes(prime)) {\n      return arr[i];\n    }\n    primes.push(prime);\n  }\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const prime = prime_number(arr[i].length);\n    if (primes.includes(prime)) {\n      return arr[i];\n    }\n    primes.push(prime);\n  }\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const prime = prime_number(arr[i].length);\n    if (primes.includes(prime)) {\n      return arr[i];\n    }\n    primes.push(prime);\n  }\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const prime = prime_number(arr[i].length);\n    if (primes.includes(prime)) {\n      return arr[i];\n    }\n    primes.push(prime);\n  }\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const prime = prime_number(arr[i].length);\n    if (primes.includes(prime)) {\n      return arr[i];\n    }\n    primes.push(prime);\n  }\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const prime = prime_number(arr[i].length);\n    if (primes.includes(prime)) {\n      return arr[i];\n    }\n    primes.push(prime);\n  }\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const prime = prime_number(arr[i].length);\n    if (primes.includes(prime)) {\n      return arr[i];\n    }\n    primes.push(prime);\n  }\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n\nThe function above is very simple, yet it solves your problem. As you can see, there are many ways to solve this problem. One of the ways is to convert the strings into numbers and then do the multiplication. Another way is to convert the strings into arrays and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and then do the multiplication. Another way is to convert the strings into objects and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  let maxSum = nums[0];\n  let minSum = nums[0];\n  for (let i = 1; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum > maxSum) {\n      maxSum = curSum;\n    } else if (curSum < minSum) {\n      minSum = curSum;\n    }\n  }\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum === maxSum) {\n      result.push(nums[i]);\n    } else if (curSum === minSum) {\n      result.push(nums[i - 1]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  let maxSum = nums[0];\n  let minSum = nums[0];\n  for (let i = 1; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum > maxSum) {\n      maxSum = curSum;\n    } else if (curSum < minSum) {\n      minSum = curSum;\n    }\n  }\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum === maxSum) {\n      result.push(nums[i]);\n    } else if (curSum === minSum) {\n      result.push(nums[i - 1]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse_2 = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  let maxSum = nums[0];\n  let minSum = nums[0];\n  for (let i = 1; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum > maxSum) {\n      maxSum = curSum;\n    } else if (curSum < minSum) {\n      minSum = curSum;\n    }\n  }\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum === maxSum) {\n      result.push(nums[i]);\n    } else if (curSum === minSum) {\n      result.push(nums[i - 1]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse_2([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse_2([]) == []\n  */\nconst order_by_points_reverse_3 = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  let maxSum = nums[0];\n  let minSum = nums[0];\n  for (let i = 1; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum > maxSum) {\n      maxSum = curSum;\n    } else if (curSum < minSum) {\n      minSum = curSum;\n    }\n  }\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum === maxSum) {\n      result.push(nums[i]);\n    } else if (curSum === minSum) {\n      result.push(nums[i - 1]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse_3([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse_3([]) == []\n  */\nconst order_by_points_reverse_4 = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  let maxSum = nums[0];\n  let minSum = nums[0];\n  for (let i = 1; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum > maxSum) {\n      maxSum = curSum;\n    } else if (curSum < minSum) {\n      minSum = curSum;\n    }\n  }\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum === maxSum) {\n      result.push(nums[i]);\n    } else if (curSum === minSum) {\n      result.push(nums[i - 1]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse_4([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse_4([]) == []\n  */\nconst order_by_points_reverse_5 = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  let maxSum = nums[0];\n  let minSum = nums[0];\n  for (let i = 1; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum > maxSum) {\n      maxSum = curSum;\n    } else if (curSum < minSum) {\n      minSum = curSum;\n    }\n  }\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const curSum = nums[i] + nums[i - 1];\n    if (curSum === maxSum) {\n      result.push(nums[i]);\n    } else if (curSum === minSum) {\n      result.push(nums[i - 1]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse_5([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse_5([]) == []\n  */\nconst order_by_points_reverse_6 = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  let maxSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10, 12).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 0 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array.\n  For example:\n  special_sum([15, -73, 14, -15]) => -55\n  special_sum([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst special_sum = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    sum += num;\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array.\n  For example:\n  special_product([15, -73, 14, -15]) => -55\n  special_product([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst special_product = (nums) => {\n  let product = 1;\n  nums.forEach((num) => {\n    product *= num;\n  });\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  special_max([15, -73, 14, -15]) => -15\n  special_max([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst special_max = (nums) => {\n  let max = 0;\n  nums.forEach((num) => {\n    if (num > max) {\n      max = num;\n    }\n  });\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  special_min([15, -73, 14, -15]) => -15\n  special_min([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst special_min = (nums) => {\n  let min = 0;\n  nums.forEach((num) => {\n    if (num < min) {\n      min = num;\n    }\n  });\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the squares of the elements in the array.\n  For example:\n  special_sum([15, -73, 14, -15]) => -55\n  special_sum([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst special_sum = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the squares of the elements in the array.\n  For example:\n  special_product([15, -73, 14, -15]) => -55\n  special_product([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst special_product = (nums) => {\n  let product = 1;\n  nums.forEach((num) => {\n    product *= num * num;\n  });\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  special_max([15, -73, 14, -15]) => -15\n  special_max([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst special_max = (nums) => {\n  let max = 0;\n  nums.forEach((num) => {\n    if (num > max) {\n      max = num;\n    }\n  });\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  special_min([15, -73, 14, -15]) => -15\n  special_min([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst special_min = (nums) => {\n  let min = 0;\n  nums.forEach((num) => {\n    if (num < min) {\n      min = num;\n    }\n  });\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the squares of the elements in the array.\n  For example:\n  special_sum([15, -73, 14, -15]) => -55\n  special_sum([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst special_sum = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the squares of the elements in the array.\n  For example:\n  special_product([15, -73, 14, -15]) => -55\n  special_product([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst special_product = (nums) => {\n  let product = 1;\n  nums.forEach((num) => {\n    product *= num * num;\n  });\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  special_max([15, -73, 14, -15]) => -15\n  special_max([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst special_max = (nums) => {\n  let max = 0;\n  nums.forEach((num) => {\n    if (num > max) {\n      max = num;\n    }\n  });\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  special_min([15, -73, 14, -15]) => -15\n  special_min([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst special_min = (nums) => {\n  let min = 0;\n  nums.forEach((num) => {\n    if (num < min) {\n      min = num;\n    }\n  });\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the squares of the elements in the array.\n  For example:\n  special_sum([15, -73, 14, -15]) => -55\n  special_sum([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst special_sum = (nums) => {\n  let sum = 0;\n  nums.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the squares of the elements in the array.\n  For example:\n  special_product([15, -73, 14, -15]) => -55\n  special_product([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst special_product = (nums) => {\n  let product = 1;\n  nums.forEach((num) => {\n    product *= num * num;\n  });\n  return product;\n};\n\n/*Write a function that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i; j <= n; j++) {\n            for (let k = j; k <= n; k++) {\n                if (i + j + k === 3 * i) {\n                    a[i] = a[i] + (i * i - i + 1);\n                    a[j] = a[j] + (j * j - j + 1);\n                    a[k] = a[k] + (k * k - k + 1);\n                }\n            }\n        }\n    }\n    return a.reduce((a, b) => a + b, 0);\n};\n\nconsole.log(get_max_triples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nThanks for your answer. Could you please explain how this works? I understand that we are checking if a[i] + (i * i - i + 1) is a multiple of 3, but I don't understand how this works.\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nThanks for your explanation. Could you please explain how this works? I understand that we are checking if a[i] + (i * i - i + 1) is a multiple of 3, but I don't understand how this works.\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nThanks for your explanation. Could you please explain how this works? I understand that we are checking if a[i] + (i * i - i + 1) is a multiple of 3, but I don't understand how this works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction countTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if ((i + j + k) === 3 * i) {\n          a[i] = a[i] + (i * i - i + 1);\n          a[j] = a[j] + (j * j - j + 1);\n          a[k] = a[k] + (k * k - k + 1);\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => a + b, 0);\n}\n\nconsole.log(countTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a |>\n<code>\nfunction countTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if ((i + j + k) === 3 * i) {\n          a[i] = a[i] + (i * i - i + 1);\n          a[j] = a[j] + (j * j - j + 1);\n          a[k] = a[k] + (k * k - k + 1);\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => a + b, 0);\n}\n\nconsole.log(countTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if ((i + j + k) === 3 * i) {\n          a[i] = a[i] + (i * i - i + 1);\n          a[j] = a[j] + (j * j - j + 1);\n          a[k] = a[k] + (k * k - k + 1);\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => a + b, 0);\n}\n\nconsole.log(countTriples(5));</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if ((i + j + k) === 3 * i) {\n          a[i] = a[i] + (i * i - i + 1);\n          a[j] = a[j] + (j * j - j + 1);\n          a[k] = a[k] + (k * k - k + 1);\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => a + b, 0);\n}\n\nconsole.log(countTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction countTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if ((i + j + k) === 3 * i) {\n          a[i] = a[i] + (i * i - i + 1);\n          a[j] = a[j] + (j * j - j + 1);\n          a[k] = a[k] + (k * k - k + 1);\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => a + b, 0);\n}\n\nconsole.log(countTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction countTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if ((i + j + k) === 3 * i) {\n          a[i] = a[i] + (i * i - i + 1);\n          a[j] = a[j] + (j * j - j + 1);\n          a[k] = a[k] + (k * k - k + 1);\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => a + b, 0);\n}\n\nconsole.log(countTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if ((i + j + k) === 3 * i) {\n          a[i] = a[i] + (i * i - i + 1);\n          a[j] = a[j] + (j * j - j + 1);\n          a[k] = a[k] + (k * k - k + 1);\n        }\n      }\n    }\n  }\n  return a.reduce((a, b) => a + b, 0);\n}\n\nconsole.log(countTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if ((i + j + k) === 3 * i) {\n          a[i] = a[i] + (i * i - i + 1);\n          a[j] = a[j] + (j * j - j + 1);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbitsOfPlanet1 = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbitsOfPlanet2 = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbitsOfPlanet1And2 = orbitsOfPlanet1.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3 = orbitsOfPlanet1And2.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4 = orbitsOfPlanet1And2And3.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5 = orbitsOfPlanet1And2And3And4.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6 = orbitsOfPlanet1And2And3And4And5.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7 = orbitsOfPlanet1And2And3And4And5And6.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8 = orbitsOfPlanet1And2And3And4And5And6And7.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9 = orbitsOfPlanet1And2And3And4And5And6And7And8.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9And10 = orbitsOfPlanet1And2And3And4And5And6And7And8And9.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11 = orbitsOfPlanet1And2And3And4And5And6And7And8And9And10.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12 = orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13 = orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13And14 = orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13And14And15 = orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13And14.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13And14And15And16 = orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13And14And15.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13And14And15And16And17 = orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13And14And15And16.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13And14And15And16And17And18 = orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13And14And15And16And17.filter(\n    orbit => orbitsOfPlanet2.includes(orbit)\n  );\n  const orbitsOfPlanet1And2And3And4And5And6And7And8And9And10And11And12And13And14And15And16And", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_diff = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_quotient = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_remainder = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_quotient_remainder = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_quotient_remainder_sum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have even lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the average of the numbers in the list. Ignore numbers\n  that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let average = 0;\n  for (let i = 0; i < lst.length; i++) {\n    average += lst[i];\n  }\n  average /= lst.length;\n  let new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < average) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the average of the numbers in the list. Ignore numbers\n  that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let average = 0;\n  for (let i = 0; i < lst.length; i++) {\n    average += lst[i];\n  }\n  average /= lst.length;\n  let new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < average) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the average of the numbers in the list. Ignore numbers\n  that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let average = 0;\n  for (let i = 0; i < lst.length; i++) {\n    average += lst[i];\n  }\n  average /= lst.length;\n  let new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < average) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the average of the numbers in the list. Ignore numbers\n  that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let average = 0;\n  for (let i = 0; i < lst.length; i++) {\n    average += lst[i];\n  }\n  average /= lst.length;\n  let new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < average) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the average of the numbers in the list. Ignore numbers\n  that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let average = 0;\n  for (let i = 0; i < lst.length; i++) {\n    average += lst[i];\n  }\n  average /= lst.length;\n  let new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < average) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the average of the numbers in the list. Ignore numbers\n  that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let average = 0;\n  for (let i = 0; i < lst.length; i++) {\n    average += lst[i];\n  }\n  average /= lst.length;\n  let new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < average) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the average of the numbers in the list. Ignore numbers\n  that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let average = 0;\n  for (let i = 0; i < lst.length; i++) {\n    average += lst[i];\n  }\n  average /= lst.length;\n  let new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < average) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the average of the numbers in the list. Ignore numbers\n  that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let average = 0;\n  for (let i = 0; i < lst.length; i++) {\n    average += lst[i];\n  }\n  average /= lst.length;\n  let new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < average) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/* Given a list of numbers, return a new list containing only the numbers\n  that are less than the average of the numbers in the list. Ignore numbers\n  that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  const scores = [...game,...guess];\n  const max = Math.max(...scores);\n  const min = Math.min(...scores);\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === max) {\n      result.push(i);\n    } else if (scores[i] === min) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(scores[i] - max));\n    }\n  }\n  return result;\n};\n\n// test cases\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  const scores = [...game,...guess];\n  const max = Math.max(...scores);\n  const min = Math.min(...scores);\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === max) {\n      result.push(i);\n    } else if (scores[i] === min) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(scores[i] - max));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  const scores = [...game,...guess];\n  const max = Math.max(...scores);\n  const min = Math.min(...scores);\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === max) {\n      result.push(i);\n    } else if (scores[i] === min) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(scores[i] - max));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  const scores = [...game,...guess];\n  const max = Math.max(...scores);\n  const min = Math.min(...scores);\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === max) {\n      result.push(i);\n    } else if (scores[i] === min) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(scores[i] - max));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  const scores = [...game,...guess];\n  const max = Math.max(...scores);\n  const min = Math.min(...scores);\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === max) {\n      result.push(i);\n    } else if (scores[i] === min) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(scores[i] - max));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  const scores = [...game,...guess];\n  const max = Math.max(...scores);\n  const min = Math.min(...scores);\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === max) {\n      result.push(i);\n    } else if (scores[i] === min) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(scores[i] - max));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  const scores = [...game,...guess];\n  const max = Math.max(...scores);\n  const min = Math.min(...scores);\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === max) {\n      result.push(i);\n    } else if (scores[i] === min) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(scores[i] - max));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  const scores = [...game,...guess];\n  const max = Math.max(...scores);\n  const min = Math.min(...scores);\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === max) {\n      result.push(i);\n    } else if (scores[i] === min) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(scores[i] - max));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  const scores = [...game,...guess];\n  const max = Math.max(...scores);\n  const min = Math.min(...scores);\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === max) {\n      result.push(i);\n    } else if (scores[i] === min) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(scores[i] - max));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  const scores = [...game,...guess];\n  const max = Math.max(...scores);\n  const min = Math.min(...scores);\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === max) {\n      result.push(i);\n    } else if (scores[i] === min) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(scores[i] - max));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm.length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*\n  Write a function that returns the number of times a given string appears in a\n  given list of strings. If the string appears more than once, you should return\n  the number times the string appears in the list.\n  Example:\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'a') == 2\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'b') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'c') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'd') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'e') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'f') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'g') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'h') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'i') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'j') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'k') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'l') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'],'m') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'n') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'o') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'p') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'q') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'r') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'],'s') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 't') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'u') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'v') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'w') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'x') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'y') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'z') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'A') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'B') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'C') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'D') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'E') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'F') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'G') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'H') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'I') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'J') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'K') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'L') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'M') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'N') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'O') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'P') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'Q') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'R') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'S') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'T') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'U') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'V') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'W') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'X') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'Y') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'Z') == 0\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'a') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'b') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'c') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'd') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'e') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'f') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'g') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'h') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'i') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'j') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'k') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'l') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'],'m') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'n') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'o') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'p') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'q') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'r') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'],'s') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 't') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'u') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', 'a'], 'v') == 1\n  count_string_in_list(['a', 'b', 'c', 'a', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.includes(aArr[i])) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  for(let i = 0; i < aArr.length; i++) {\n    if(bArr.include", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return { even, odd };\n};\n\n/*Given a string. return a tuple that has the number of even and odd characters respectively.\n\n   Example:\n      even_odd_count(\"hello\") ==> (1, 2)\n      even_odd_count(\"hello1\") ==> (1, 2)\n      even_odd_count(\"hello12\") ==> (1, 3)\n      even_odd_count(\"hello123\") ==> (1, 3)\n      even_odd_count(\"hello1234\") ==> (1, 4)\n      even_odd_count(\"hello12345\") ==> (1, 5)\n      even_odd_count(\"hello123456\") ==> (1, 6)\n      even_odd_count(\"hello1234567\") ==> (1, 7)\n      even_odd_count(\"hello12345678\") ==> (1, 8)\n      even_odd_count(\"hello123456789\") ==> (1, 9)\n      even_odd_count(\"hello1234567890\") ==> (1, 9)\n      even_odd_count(\"hello12345678901\") ==> (1, 10)\n      even_odd_count(\"hello123456789012\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901234\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012345\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123456\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901234567\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012345678\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123456789\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901234567890\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012345678901\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123456789012\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901234567890123\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012345678901234\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123456789012345\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901234567890123456\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012345678901234567\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123456789012345678\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901234567890123456789\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012345678901234567890\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123456789012345678901\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901234567890123456789012\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012345678901234567890123\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123456789012345678901234\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901234567890123456789012345\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012345678901234567890123456\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123456789012345678901234567\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901234567890123456789012345678\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012345678901234567890123456789\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123456789012345678901234567890\") ==> (1, 10)\n      even_odd_count(\"hello12345678901234567890123456789012345678901234567890123456789012345678901\") ==> (1, 10)\n      even_odd_count(\"hello123456789012345678901234567890123456789012345678901234567890123456789012\") ==> (1, 10)\n      even_odd_count(\"hello1234567890123456789012345678901234567890123456789012345678901234567890123\") ==> (1, 10)\n      even_odd_count(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_roman(19) == 'xix'\n  >>> int_to_decimal_roman(152) == 'clxxvi'\n  >>> int_to_decimal_roman(426) == 'cdxxvi'\n  */\nconst int_to_decimal_roman = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLXXVI'\n  >>> int_to_decimal_upper(426) == 'CDXXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'xix'\n  >>> int_to_decimal_lower(152) == 'clxxvi'\n  >>> int_to_decimal_lower(426) == 'cdxxvi'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLXXVI'\n  >>> int_to_decimal_upper(426) == 'CDXXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'xix'\n  >>> int_to_decimal_lower(152) == 'clxxvi'\n  >>> int_to_decimal_lower(426) == 'cdxxvi'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLXXVI'\n  >>> int_to_decimal_upper(426) == 'CDXXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'xix'\n  >>> int_to_decimal_lower(152) == 'clxxvi'\n  >>> int_to_decimal_lower(426) == 'cdxxvi'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLXXVI'\n  >>> int_to_decimal_upper(426) == 'CDXXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'xix'\n  >>> int_to_decimal_lower(152) == 'clxxvi'\n  >>> int_to_decimal_lower(426) == 'cdxxvi'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLXXVI'\n  >>> int_to_decimal_upper(426) == 'CDXXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'xix'\n  >>> int_to_decimal_lower(152) == 'clxxvi'\n  >>> int_to_decimal_lower(426) == 'cdxxvi'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_upper(19) == 'XIX'\n  >>> int_to_decimal_upper(152) == 'CLXXVI'\n  >>> int_to_decimal_upper(426) == 'CDXXVI'\n  */\nconst int_to_decimal_upper = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toUpperCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lower(19) == 'xix'\n  >>> int_to_decimal_lower(152) == 'clxxvi'\n  >>> int_to_decimal_lower(426) == 'cdxxvi'\n  */\nconst int_to_decimal_lower = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restri", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab!= bc!= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc!= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab!= bc!= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc!= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab!= bc!= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc!= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab!= bc!= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc!= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length >= max) {\n      max = word.length;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length == max) {\n      if (word.charCodeAt(0) > words[i].charCodeAt(0)) {\n        word = words[i];\n      }\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"name\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst find_min = (words) => {\n  let min = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length >= min) {\n      min = word.length;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length == min) {\n      if (word.charCodeAt(0) > words[i].charCodeAt(0)) {\n        word = words[i];\n      }\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return the\n  one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"name\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst find_max_2 = (words) => {\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length >= max) {\n      max = word.length;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length == max) {\n      if (word.charCodeAt(0) > words[i].charCodeAt(0)) {\n        word = words[i];\n      }\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number of\n  unique characters. If multiple strings have minimum number of unique characters,\n  return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"name\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"of\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst find_min_2 = (words) => {\n  let min = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length >= min) {\n      min = word.length;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length == min) {\n      if (word.charCodeAt(0) > words[i].charCodeAt(0)) {\n        word = words[i];\n      }\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with minimum number of\n  unique characters. If multiple strings have minimum number of unique characters,\n  return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"name\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst find_min_3 = (words) => {\n  let min = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length >= min) {\n      min = word.length;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length == min) {\n      if (word.charCodeAt(0) > words[i].charCodeAt(0)) {\n        word = words[i];\n      }\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters,\n  return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst find_max_3 = (words) => {\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length >= max) {\n      max = word.length;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length == max) {\n      if (word.charCodeAt(0) > words[i].charCodeAt(0)) {\n        word = words[i];\n      }\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters,\n  return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"name\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst find_max_4 = (words) => {\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length >= max) {\n      max = word.length;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length == max) {\n      if (word.charCodeAt(0) > words[i].charCodeAt(0)) {\n        word = words[i];\n      }\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with minimum number of\n  unique characters. If multiple strings have minimum number of unique characters,\n  return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"name\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"of\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst find_min_4 = (words) => {\n  let min = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length >= min) {\n      min = word.length;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    if (word.length == min) {\n      if (word.charCodeAt(0) > words[i].charCodeAt(0)) {\n        word = words[i];\n      }\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with minimum number of\n  unique characters. If multiple strings have minimum number of unique characters,\n  return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"name", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (carrots > 0 && needs > 0) {\n    if (carrots <= remaining) {\n      result.push(carrots);\n      carrots -= 1;\n    } else {\n      result.push(remaining);\n      remaining -= 1;\n    }\n    \n    needs = needs - 1;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (carrots > 0 && needs > 0) {\n    if (carrots <= remaining) {\n      result.push(carrots);\n      carrots -= 1;\n    } else {\n      result.push(remaining);\n      remaining -= 1;\n    }\n    \n    needs = needs - 1;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (carrots > 0 && needs > 0) {\n    if (carrots <= remaining) {\n      result.push(carrots);\n      carrots -= 1;\n    } else {\n      result.push(remaining);\n      remaining -= 1;\n    }\n    \n    needs = needs - 1;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (carrots > 0 && needs > 0) {\n    if (carrots <= remaining) {\n      result.push(carrots);\n      carrots -= 1;\n    } else {\n      result.push(remaining);\n      remaining -= 1;\n    }\n    \n    needs = needs - 1;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()!== char) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_2 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_3 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_4 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_5 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_6 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_7 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newString += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newString += s[i].toLowerCase();\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/\nconst count = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    newString += s.split(s[i]).length - 1;\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/\nconst count = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    newString += s.split(s[i]).length - 1;\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/\nconst count = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    newString += s.split(s[i]).length - 1;\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/\nconst count = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    newString += s.split(s[i]).length - 1;\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/\nconst count = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    newString += s.split(s[i]).length - 1;\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/\nconst count = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    newString += s.split(s[i]).length - 1;\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/\nconst count = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    newString += s.split(s[i]).length - 1;\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/\nconst count = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    newString += s.split(s[i]).length - 1;\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/\nconst count = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    newString += s.split(s[i]).length - 1;\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/\nconst count = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    newString += s.split(s[i]).length - 1;\n  }\n  return newString;\n};\n\n/*\n  Given a string s, return a new string where each character in s is replaced \n  by the number of occurrences of that character in s.\n  Examples\n  count(\"abcabc\") --> \"6abc9c\"\n  count(\"abcaaa\") --> \"3ab4aa\"\n  count(\"a\") --> \"1\"\n  count(\"z\") --> \"26\"\n  count(\"123\") --> \"123\"\n*/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\n  */\nconst string_to_sha1 = (text) => {\n  if (text === '') return null\n  const sha1sum = crypto.createHash('sha1')\n  sha1sum.update(text)\n  return sha1sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == '8da9f39aee5e6b4b0d3255bfef95601890afd80709'\n  */\nconst string_to_sha256 = (text) => {\n  if (text === '') return null\n  const sha256sum = crypto.createHash('sha256')\n  sha256sum.update(text)\n  return sha256sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') return null\n  const sha512sum = crypto.createHash('sha512')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its ripemd160 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_ripemd160('Hello world') == '8da9f39aee5e6b4b0d3255bfef95601890afd80709'\n  */\nconst string_to_ripemd160 = (text) => {\n  if (text === '') return null\n  const ripemd160sum = crypto.createHash('ripemd160')\n  ripemd160sum.update(text)\n  return ripemd160sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its keccak256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_keccak256('Hello world') == 'f2b9f10e3b7d577aacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaacfcf0ffaaac", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of its digits.\n\n  For example:\n  number_digits(12) => 3\n  number_digits(121) => 4\n  number_digits(101) => 2\n  number_digits(100) => 1\n  number_digits(1000) => 3\n  number_digits(10000) => 4\n  number_digits(100000) => 5\n  number_digits(1000000) => 6\n  number_digits(10000000) => 7\n  number_digits(100000000) => 8\n  number_digits(1000000000) => 9\n  number_digits(10000000000) => 10\n  number_digits(100000000000) => 11\n  number_digits(1000000000000) => 12\n  number_digits(10000000000000) => 13\n  number_digits(100000000000000) => 14\n  number_digits(1000000000000000) => 15\n  number_digits(10000000000000000) => 16\n  number_digits(100000000000000000) => 17\n  number_digits(1000000000000000000) => 18\n  number_digits(10000000000000000000) => 19\n  number_digits(100000000000000000000) => 20\n  number_digits(1000000000000000000000) => 21\n  number_digits(10000000000000000000000) => 22\n  number_digits(100000000000000000000000) => 23\n  number_digits(1000000000000000000000000) => 24\n  number_digits(10000000000000000000000000) => 25\n  number_digits(100000000000000000000000000) => 26\n  number_digits(1000000000000000000000000000) => 27\n  number_digits(10000000000000000000000000000) => 28\n  number_digits(100000000000000000000000000000) => 29\n  number_digits(1000000000000000000000000000000) => 30\n  number_digits(10000000000000000000000000000000) => 31\n  number_digits(100000000000000000000000000000000) => 32\n  number_digits(1000000000000000000000000000000000) => 33\n  number_digits(1000000000000000000000000000000000000000) => 34\n  number_digits(10000000000000000000000000000000000000000) => 35\n  number_digits(100000000000000000000000000000000000000000) => 36\n  number_digits(1000000000000000000000000000000000000000000) => 37\n  number_digits(10000000000000000000000000000000000000000000) => 38\n  number_digits(100000000000000000000000000000000000000000000) => 39\n  number_digits(1000000000000000000000000000000000000000000000) => 40\n  number_digits(10000000000000000000000000000000000000000000000) => 41\n  number_digits(100000000000000000000000000000000000000000000000) => 42\n  number_digits(1000000000000000000000000000000000000000000000000) => 43\n  number_digits(10000000000000000000000000000000000000000000000000) => 44\n  number_digits(100000000000000000000000000000000000000000000000000) => 45\n  number_digits(1000000000000000000000000000000000000000000000000000) => 46\n  number_digits(10000000000000000000000000000000000000000000000000000) => 47\n  number_digits(100000000000000000000000000000000000000000000000000000) => 48\n  number_digits(1000000000000000000000000000000000000000000000000000000) => 49\n  number_digits(10000000000000000000000000000000000000000000000000000000) => 50\n  number_digits(100000000000000000000000000000000000000000000000000000000) => 51\n  number_digits(1000000000000000000000000000000000000000000000000000000000) => 52\n  number_digits(1000000000000000000000000000000000000000000000000000000000000) => 53\n  number_digits(10000000000000000000000000000000000000000000000000000000000000) => 54\n  number_digits(100000000000000000000000000000000000000000000000000000000000000) => 55\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000) => 56\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000) => 57\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000) => 58\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000) => 59\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000) => 60\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000) => 61\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000) => 62\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000) => 63\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000) => 64\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000) => 65\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000) => 66\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000) => 67\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000) => 68\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000) => 69\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000) => 70\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000) => 71\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000) => 72\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000) => 73\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000000) => 74\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000) => 75\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000) => 76\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000000000) => 77\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000) => 78\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000) => 79\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000) => 80\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 81\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 82\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 83\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 84\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 85\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 86\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 87\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 88\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 89\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 90\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 91\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 92\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 93\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 94\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 95\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 96\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 97\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 98\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 99\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 100\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 101\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 102\n  number_digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 103\n  number_digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 104\n  number_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 105\n  number_digits(1000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      music_beats_length += 1;\n    } else {\n      if (music_note_length === 1) {\n        music_beats_length += 4;\n      } else if (music_note_length === 2) {\n        music_beats_length += 2;\n      } else if (music_note_length === 3) {\n        music_beats_length += 1;\n      }\n    }\n\n    music_beats.push(music_beats_length);\n  }\n\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_2 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      music_beats_length += 1;\n    } else {\n      if (music_note_length === 1) {\n        music_beats_length += 4;\n      } else if (music_note_length === 2) {\n        music_beats_length += 2;\n      } else if (music_note_length === 3) {\n        music_beats_length += 1;\n      }\n    }\n\n    music_beats.push(music_beats_length);\n  }\n\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_3 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      music_beats_length += 1;\n    } else {\n      if (music_note_length === 1) {\n        music_beats_length += 4;\n      } else if (music_note_length === 2) {\n        music_beats_length += 2;\n      } else if (music_note_length === 3) {\n        music_beats_length += 1;\n      }\n    }\n\n    music_beats.push(music_beats_length);\n  }\n\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_4 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      music_beats_length += 1;\n    } else {\n      if (music_note_length === 1) {\n        music_beats_length += 4;\n      } else if (music_note_length === 2) {\n        music_beats_length += 2;\n      } else if (music_note_length === 3) {\n        music_beats_length += 1;\n      }\n    }\n\n    music_beats.push(music_beats_length);\n  }\n\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_5 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let music_beats_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      music_beats_length += 1;\n    } else {\n      if (music_note_length === 1) {\n        music_beats_length += 4;\n      } else if (music_note_length === 2) {\n        music_beats_length += 2;\n      } else if (music_note_length === 3) {\n        music_beats_length += 1;\n      }\n    }\n\n    music_beats.push(music_beats_length);\n  }\n\n  return music_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const substring_count = string.split(substring).length - 1;\n  return string.split(substring).reduce((acc, curr, i) => {\n    return acc + substring_count;\n  }, 0);\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_array = numbers.split(' ');\n  const numbers_sorted = numbers_array.sort((a, b) => a - b);\n  return numbers_sorted.join(' ');\n};\n\n// Tests\n\n// Test the sort_numbers function\nconst test_sort_numbers = () => {\n  expect(sort_numbers('one two three')).toEqual('one two three');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven')).toEqual('eight seven nine');\n  expect(sort_numbers('zero one two')).toEqual('one two zero');\n  expect(sort_numbers('nine eight seven", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(decimal)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_float = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_float = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_float = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_float = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_float = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_float = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_float = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_float = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scaled_numbers = numbers.map((number) => {\n    const scaled_number = (number - min_number) / range;\n    return scaled_number;\n  });\n  return scaled_numbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_zero_padding = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scaled_numbers = numbers.map((number) => {\n    const scaled_number = (number - min_number) / range;\n    return scaled_number;\n  });\n  return scaled_numbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_zero_padding_and_zero_padding = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scaled_numbers = numbers.map((number) => {\n    const scaled_number = (number - min_number) / range;\n    return scaled_number;\n  });\n  return scaled_numbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_zero_padding_and_zero_padding_and_zero_padding = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scaled_numbers = numbers.map((number) => {\n    const scaled_number = (number - min_number) / range;\n    return scaled_number;\n  });\n  return scaled_numbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scaled_numbers = numbers.map((number) => {\n    const scaled_number = (number - min_number) / range;\n    return scaled_number;\n  });\n  return scaled_numbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scaled_numbers = numbers.map((number) => {\n    const scaled_number = (number - min_number) / range;\n    return scaled_number;\n  });\n  return scaled_numbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scaled_numbers = numbers.map((number) => {\n    const scaled_number = (number - min_number) / range;\n    return scaled_number;\n  });\n  return scaled_numbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scaled_numbers = numbers.map((number) => {\n    const scaled_number = (number - min_number) / range;\n    return scaled_number;\n  });\n  return scaled_numbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scaled_numbers = numbers.map((number) => {\n    const scaled_number = (number - min_number) / range;\n    return scaled_number;\n  });\n  return scaled_numbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(...numbers);\n  const range = max_number - min_number;\n  const scaled_numbers = numbers.map((number) => {\n    const scaled_number = (number - min_number) / range;\n    return scaled_number;\n  });\n  return scaled_numbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_with_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding_and_zero_padding = (numbers) => {\n  const min_number = Math.min(...numbers);\n  const max_number = Math.max(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filter_floats(['a', 3.14, 5])\n  [3.14]\n  >>> filter_floats([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_floats = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5])\n  ['a', 3.14]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_strings = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] ==='string') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filter_booleans(['a', 3.14, 5])\n  [false, true]\n  >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_booleans = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'boolean') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'undefined') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length += 2\n    } else {\n      length++\n    }\n  }\n  return length\n}\n\n/* Return true if given string has only letters and numbers\n  >>> isAlpha('a')\n  true\n  >>> isAlpha('123')\n  false\n  */\nconst isAlpha = (string) => {\n  const regex = /^[a-zA-Z0-9]+$/\n  return regex.test(string)\n}\n\n/* Return true if given string has only letters and numbers\n  >>> isNumeric('a')\n  false\n  >>> isNumeric('123')\n  true\n  */\nconst isNumeric = (string) => {\n  const regex = /^[0-9]+$/\n  return regex.test(string)\n}\n\n/* Return true if given string has only letters and numbers\n  >>> isAlphaNumeric('a')\n  true\n  >>> isAlphaNumeric('123')\n  true\n  */\nconst isAlphaNumeric = (string) => {\n  const regex = /^[a-zA-Z0-9]+$/\n  return regex.test(string)\n}\n\n/* Return true if given string has only letters and numbers\n  >>> isEmail('removed@example.com')\n  true\n  >>> isEmail('removed@example.com')\n  false\n  */\nconst isEmail = (string) => {\n  const regex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  return regex.test(string)\n}\n\n/* Return true if given string has only letters and numbers\n  >>> isURL('https://google.com')\n  true\n  >>> isURL('https://google.com')\n  false\n  */\nconst isURL = (string) => {\n  const regex = /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n  return regex.test(string)\n}\n\n/* Return true if given string has only letters and numbers\n  >>> isIP('127.0.0.1')\n  true\n  >>> isIP('127.0.0.1')\n  false\n  */\nconst isIP = (string) => {\n  const regex = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}$/\n  return regex.test(string)\n}\n\n/* Return true if given string has only letters and numbers\n  >>> isIPv4('127.0.0.1')\n  true\n  >>> isIPv4('127.0.0.1')\n  false\n  */\nconst isIPv4 = (string) => {\n  const regex = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}$/\n  return regex.test(string)\n}\n\n/* Return true if given string has only letters and numbers\n  >>> isIPv6('::1')\n  true\n  >>> isIPv6('::1')\n  false\n  */\nconst isIPv6 = (string) => {\n  const regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){4}|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){0,2}:{0,1}25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,2}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){4}|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){0,2}:{0,1}25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,3}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){4}|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){0,2}:{0,1}25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,4}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){4}|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){0,2}:{0,1}25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}(\\.|$)){3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,5}((25[0-5]|(2[0-4]|", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (max_divisor < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_divisor > i) {\n        min_divisor = i;\n        min_divisor_p = i;\n      }\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (min_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to lar", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    result.push(num);\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than twice\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_twice = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than three times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remove_duplicates_less_than_three_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than five times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1]\n  */\nconst remove_duplicates_less_than_five_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than six times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_six_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than seven times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_seven_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than eight times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_eight_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than nine times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_nine_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than ten times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_ten_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than twenty times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_twenty_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than twenty four times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_twenty_four_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than twenty five times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_twenty_five_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than twenty six times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_twenty_six_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than twenty seven times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_twenty_seven_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than twenty eight times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_twenty_eight_times = (numbers) => {\n  const result = [];\n  let seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than twenty nine times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  []\n  */\nconst remove_duplicates_less_than_twenty_nine_time", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().split('').map(letter => letter.toUpperCase()).join('');\n};\n\n/* Given a string, remove spaces and punctuation from it.\n  >>> remove_spaces('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_spaces = (string) => {\n  return string.replace(/\\s+/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters from it.\n  >>> remove_non_alphanumeric('  Hello World! ')\n  'HelloWorld'\n  */\nconst remove_non_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all whitespace from string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n\n/* Remove all non-alphanumeric characters from string\n  >>> removeNonAlphanumeric('  abc  ')\n  'abc'\n  */\nconst removeNonAlphanumeric = (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  const prefix_len = prefix.length;\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  const suffix_len = suffix.length;\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_len = substring.length;\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring anywhere in the string.\n  >>> filter_by_substring_any([], 'a')\n  []\n  >>> filter_by_substring_any(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring_any = (strings, substring) => {\n  const substring_len = substring.length;\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const substring_len = substring.length;\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring anywhere in the string.\n  >>> filter_by_not_substring_any([], 'a')\n  []\n  >>> filter_by_not_substring_any(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_substring_any = (strings, substring) => {\n  const substring_len = substring.length;\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filter_by_not_prefix([], 'a')\n  []\n  >>> filter_by_not_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  const prefix_len = prefix.length;\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix anywhere in the string.\n  >>> filter_by_not_suffix([], 'a')\n  []\n  >>> filter_by_not_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  const suffix_len = suffix.length;\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring anywhere in the string.\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const substring_len = substring.length;\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix anywhere in the string.\n  >>> filter_by_not_prefix([], 'a')\n  []\n  >>> filter_by_not_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  const prefix_len = prefix.length;\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix anywhere in the string.\n  >>> filter_by_not_suffix([], 'a')\n  []\n  >>> filter_by_not_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  const suffix_len = suffix.length;\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring anywhere in the string.\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const substring_len = substring.length;\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix anywhere in the string.\n  >>> filter_by_not_prefix([], 'a')\n  []\n  >>> filter_by_not_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  const prefix_len = prefix.length;\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix anywhere in the string.\n  >>> filter_by_not_suffix([], 'a')\n  []\n  >>> filter_by_not_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_suffix = (strings, suffix) => {\n  const suffix_len = suffix.length;\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring anywhere in the string.\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const substring_len = substring.length;\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix anywhere in the string.\n  >>> filter_by_not_prefix([], 'a')\n  []\n  >>> filter_by_not_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_prefix = (strings, prefix) => {\n  const prefix_len = prefix.length;\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix anywhere in the string.\n  >>> filter_by_not_suffix([], 'a')\n  []\n  >>> filter_by_not_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'b", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Tests\nconsole.log(below_zero([1, 2, 3]));\nconsole.log(below_zero([1, 2, -4, 5]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction checkBalance(arr) {\n  let balance = 0;\n  for (let i = 0; i < arr.length; i++) {\n    balance += arr[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(checkBalancepassed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_negative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> get_divisible_by_three([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_three([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_three = (l) => {\n  return l.filter(n => n % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> get_divisible_by_five([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_five([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_five = (l) => {\n  return l.filter(n => n % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> get_divisible_by_seven([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_seven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_seven = (l) => {\n  return l.filter(n => n % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> get_divisible_by_eleven([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_eleven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_eleven = (l) => {\n  return l.filter(n => n % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> get_divisible_by_thirteen([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_thirteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_thirteen = (l) => {\n  return l.filter(n => n % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> get_divisible_by_seventeen([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_seventeen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_seventeen = (l) => {\n  return l.filter(n => n % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> get_divisible_by_nineteen([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_nineteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_nineteen = (l) => {\n  return l.filter(n => n % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> get_divisible_by_twenty([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_twenty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_twenty = (l) => {\n  return l.filter(n => n % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> get_divisible_by_fifty([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_fifty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_fifty = (l) => {\n  return l.filter(n => n % 25 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 30.\n  >>> get_divisible_by_hundred([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_hundred([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_hundred = (l) => {\n  return l.filter(n => n % 30 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 100.\n  >>> get_divisible_by_thousand([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_thousand([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_thousand = (l) => {\n  return l.filter(n => n % 100 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 1000.\n  >>> get_divisible_by_million([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_million([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_million = (l) => {\n  return l.filter(n => n % 1000 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 10000.\n  >>> get_divisible_by_billion([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_billion([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_billion = (l) => {\n  return l.filter(n => n % 10000 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 100000.\n  >>> get_divisible_by_trillion([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_trillion([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_trillion = (l) => {\n  return l.filter(n => n % 1000000 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 1000000.\n  >>> get_divisible_by_quadrillion([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_quadrillion([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst get_divisible_by_quadrillion = (l) => {\n  return l.filter(n => n % ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast2 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast3 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast4 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast5 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast6 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast7 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast8 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast9 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeroPoints = [];\n  let zeroPoint;\n  let maxNonZeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      zeroPoints.push(i);\n    }\n    if (xs[i] > maxNonZeroCoefficient) {\n      maxNonZeroCoefficient = xs[i];\n    }\n  }\n  if (maxNonZeroCoefficient === 0) {\n    return null;\n  }\n  for (let i = 0; i < zeroPoints.length; i++) {\n    const index = zeroPoints[i];\n    const xIndex = zeroPoints[i - 1];\n    const xCoefficient = xs[index];\n    const xCoefficientNext = xs[i - 1];\n    const xCoefficientPrev = xs[i - 2];\n    const xCoefficientNextPrev = xs[i - 3];\n    const xCoefficientNextNext = xs[i - 4];\n    const xCoefficientNextNextPrev = xs[i - 5];\n    const xCoefficientNextNextNext = xs[i - 6];\n    const xCoefficientNextNextNextPrev = xs[i - 7];\n    const xCoefficientNextNextNextNext = xs[i - 8];\n    const xCoefficientNextNextNextNextPrev = xs[i - 9];\n    const xCoefficientNextNextNextNextNext = xs[i - 10];\n    const xCoefficientNextNextNextNextNextPrev = xs[i - 11];\n    const xCoefficientNextNextNextNextNextNext = xs[i - 12];\n    const xCoefficientNextNextNextNextNextNextPrev = xs[i - 13];\n    const xCoefficientNextNextNextNextNextNextNext = xs[i - 14];\n    const xCoefficientNextNextNextNextNextNextNextPrev = xs[i - 15];\n    const xCoefficientNextNextNextNextNextNextNextNext = xs[i - 16];\n    const xCoefficientNextNextNextNextNextNextNextNextPrev = xs[i - 17];\n    const xCoefficientNextNextNextNextNextNextNextNextNext = xs[i - 18];\n    const xCoefficientNextNextNextNextNextNextNextNextNextPrev = xs[i - 19];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNext = xs[i - 20];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextPrev = xs[i - 21];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNext = xs[i - 22];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNextPrev = xs[i - 23];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNextNext = xs[i - 24];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNextPrev = xs[i - 25];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNextNextNextPrev = xs[i - 26];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev = xs[i - 27];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev = xs[i - 28];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev = xs[i - 29];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev = xs[i - 30];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev = xs[i - 31];\n    const xCoefficientNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_fifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_fifth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_fifth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_seventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_seventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_seventh = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_ninth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_ninth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_ninth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twentieth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twentieth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twentieth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_one([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_one([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_one = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 1) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_two([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_two([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_two = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 2) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_three([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_three([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_three = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 3) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1.concat(l2);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_four([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_four([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_four = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 4) {\n      l2.push(l[i]);\n    } else {\n      l1.push(l[i]);\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min_element = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list, excluding zero.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_excl_zero_neg = (l) => {\n  let sum = 0;\n  for (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_2(50)\n  0\n  >>> fizz_buzz_2(78)\n  2\n  >>> fizz_buzz_2(79)\n  3\n  */\nconst fizz_buzz_2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_3(50)\n  0\n  >>> fizz_buzz_3(78)\n  2\n  >>> fizz_buzz_3(79)\n  3\n  */\nconst fizz_buzz_3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_4(50)\n  0\n  >>> fizz_buzz_4(78)\n  2\n  >>> fizz_buzz_4(79)\n  3\n  */\nconst fizz_buzz_4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_5(50)\n  0\n  >>> fizz_buzz_5(78)\n  2\n  >>> fizz_buzz_5(79)\n  3\n  */\nconst fizz_buzz_5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_6(50)\n  0\n  >>> fizz_buzz_6(78)\n  2\n  >>> fizz_buzz_6(79)\n  3\n  */\nconst fizz_buzz_6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_7(50)\n  0\n  >>> fizz_buzz_7(78)\n  2\n  >>> fizz_buzz_7(79)\n  3\n  */\nconst fizz_buzz_7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_8(50)\n  0\n  >>> fizz_buzz_8(78)\n  2\n  >>> fizz_buzz_8(79)\n  3\n  */\nconst fizz_buzz_8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_9(50)\n  0\n  >>> fizz_buzz_9(78)\n  2\n  >>> fizz_buzz_9(79)\n  3\n  */\nconst fizz_buzz_9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_10(50)\n  0\n  >>> fizz_buzz_10(78)\n  2\n  >>> fizz_buzz_10(79)\n  3\n  */\nconst fizz_buzz_10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_11(50)\n  0\n  >>> fizz_buzz_11(78)\n  2\n  >>> fizz_buzz_11(79)\n  3\n  */\nconst fizz_buzz_11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_12(50)\n  0\n  >>> fizz_buzz_12(78)\n  2\n  >>> fizz_buzz_12(79)\n  3\n  */\nconst fizz_buzz_12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_13(50)\n  0\n  >>> fizz_buzz_13(78)\n  2\n  >>> fizz_buzz_13(79)\n  3\n  */\nconst fizz_buzz_13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz_14(50)\n  0\n  >>> fizz_buzz_14(78)\n  2\n  >>> fizz_buzz_14(79)\n  3\n  */\nconst fizz_buzz_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_even_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_and_even = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_even_reverse_and_even = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_and_odd = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_even_reverse_and_odd = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_and_odd_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_even_reverse_and_odd_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_and_odd_reverse_and_even = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encode_cyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encode_cyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters.\n  */\nconst encode_cyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character and one character.\n  */\nconst encode_cyclic1c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic1c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters and one character.\n  */\nconst encode_cyclic2c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic2c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters and two characters.\n  */\nconst encode_cyclic3c = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "<|endoftext|>/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 2 == 0) return prime_fib(n / 2);\n  if (n % 3 == 0) return prime_fib(n / 3) + prime_fib(n / 3);\n  if (n % 5 == 0) return prime_fib(n / 5) + prime_fib(n / 5);\n  return prime_fib(n / 5) + prime_fib(n / 5) + prime_fib(n / 5);\n};\n\n/*\n  is_prime returns true if n is a prime number\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  False\n  >>> is_prime(5)\n  False\n  >>> is_prime(6)\n  True\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  True\n  >>> is_prime(9)\n  True\n  >>> is_prime(10)\n  True\n  >>> is_prime(11)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n < 5) return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 == 0) return false;\n  return true;\n};\n\n/*\n  is_prime returns true if n is a prime number\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  False\n  >>> is_prime(5)\n  False\n  >>> is_prime(6)\n  True\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  True\n  >>> is_prime(9)\n  True\n  >>> is_prime(10)\n  True\n  >>> is_prime(11)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n < 5) return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 == 0) return false;\n  return true;\n};\n\n/*\n  is_prime returns true if n is a prime number\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  False\n  >>> is_prime(5)\n  False\n  >>> is_prime(6)\n  True\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  True\n  >>> is_prime(9)\n  True\n  >>> is_prime(10)\n  True\n  >>> is_prime(11)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n < 5) return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 == 0) return false;\n  return true;\n};\n\n/*\n  is_prime returns true if n is a prime number\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  False\n  >>> is_prime(5)\n  False\n  >>> is_prime(6)\n  True\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  True\n  >>> is_prime(9)\n  True\n  >>> is_prime(10)\n  True\n  >>> is_prime(11)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n < 5) return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 == 0) return false;\n  return true;\n};\n\n/*\n  is_prime returns true if n is a prime number\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  False\n  >>> is_prime(5)\n  False\n  >>> is_prime(6)\n  True\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  True\n  >>> is_prime(9)\n  True\n  >>> is_prime(10)\n  True\n  >>> is_prime(11)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n < 5) return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 == 0) return false;\n  return true;\n};\n\n/*\n  is_prime returns true if n is a prime number\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  False\n  >>> is_prime(5)\n  False\n  >>> is_prime(6)\n  True\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  True\n  >>> is_prime(9)\n  True\n  >>> is_prime(10)\n  True\n  >>> is_prime(11)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n < 5) return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 == 0) return false;\n  return true;\n};\n\n/*\n  is_prime returns true if n is a prime number\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  False\n  >>> is_prime(5)\n  False\n  >>> is_prime(6)\n  True\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  True\n  >>> is_prime(9)\n  True\n  >>> is_prime(10)\n  True\n  >>> is_prime(11)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n < 5) return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 == 0) return false;\n  return true;\n};\n\n/*\n  is_prime returns true if n is a prime number\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  False\n  >>> is_prime(5)\n  False\n  >>> is_prime(6)\n  True\n  >>> is_prime(7)\n  True\n  >>> is_prime(8)\n  True\n  >>> is_prime(9)\n  True\n  >>> is_prime(10)\n  True\n  >>> is_prime(11)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n < 5) return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 == 0) return false;\n  return true;\n};\n\n/*\n  is_prime returns true if n is a prime number\n  >>> is_prime(1)\n  True\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = mode(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = mode(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = mode(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Devi", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "<|endoftext|>/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation([1, 3, 5, 0])\n  false\n  >>> is_permutation([1, 3, -2, 1])\n  true\n  >>> is_permutation([1, 2, 3, 7])\n  false\n  >>> is_permutation([2, 4, -5, 3, 9, 7])\n  true\n  >>> is_permutation([1])\n  false\n  */\nconst is_permutation = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0])\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1])\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7])\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7])\n  true\n  >>> is_permutation_of_size([1])\n  false\n  */\nconst is_permutation_of_size = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0])\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1])\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7])\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7])\n  true\n  >>> is_permutation_of_size([1])\n  false\n  */\nconst is_permutation_of_size = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0])\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1])\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7])\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7])\n  true\n  >>> is_permutation_of_size([1])\n  false\n  */\nconst is_permutation_of_size = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0])\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1])\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7])\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7])\n  true\n  >>> is_permutation_of_size([1])\n  false\n  */\nconst is_permutation_of_size = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0])\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1])\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7])\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7])\n  true\n  >>> is_permutation_of_size([1])\n  false\n  */\nconst is_permutation_of_size = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0])\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1])\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7])\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7])\n  true\n  >>> is_permutation_of_size([1])\n  false\n  */\nconst is_permutation_of_size = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0])\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1])\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7])\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7])\n  true\n  >>> is_permutation_of_size([1])\n  false\n  */\nconst is_permutation_of_size = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0])\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1])\n  true\n  >>> is_permutation_of_size([1, 2, 3, 7])\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 9, 7])\n  true\n  >>> is_permutation_of_size([1])\n  false\n  */\nconst is_permutation_of_size = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation_of_size([1, 3, 5, 0])\n  false\n  >>> is_permut", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_collision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_2 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_3 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision_2(arr[i], arr[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_4 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision_3(arr[i], arr[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_5 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision_4(arr[i], arr[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_6 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision_5(arr[i], arr[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_7 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision_6(arr[i], arr[j])) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decr_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with step of 2.\n  >>> incr_list_step([1, 2, 3])\n  [2, 4, 6]\n  >>> incr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 2;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with step of 2.\n  >>> decr_list_step([1, 2, 3])\n  [3, 2, 2]\n  >>> decr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decr_list_step = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 2;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with step of 2.\n  >>> incr_list_step([1, 2, 3], 2)\n  [4, 6, 8]\n  >>> incr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + n;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with step of 2.\n  >>> decr_list_step([1, 2, 3], 2)\n  [3, 2, 1]\n  >>> decr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - n;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with step of 2.\n  >>> incr_list_step([1, 2, 3], 3)\n  [4, 6, 9]\n  >>> incr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + n;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with step of 2.\n  >>> decr_list_step([1, 2, 3], 3)\n  [3, 2, 2]\n  >>> decr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - n;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with step of 2.\n  >>> incr_list_step([1, 2, 3], 4)\n  [4, 6, 8]\n  >>> incr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + n;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with step of 2.\n  >>> decr_list_step([1, 2, 3], 4)\n  [3, 2, 1]\n  >>> decr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - n;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with step of 2.\n  >>> incr_list_step([1, 2, 3], 5)\n  [4, 6, 9]\n  >>> incr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + n;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with step of 2.\n  >>> decr_list_step([1, 2, 3], 5)\n  [3, 2, 2]\n  >>> decr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - n;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with step of 2.\n  >>> incr_list_step([1, 2, 3], 6)\n  [4, 6, 9]\n  >>> incr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + n;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with step of 2.\n  >>> decr_list_step([1, 2, 3], 6)\n  [3, 2, 1]\n  >>> decr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - n;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with step of 2.\n  >>> incr_list_step([1, 2, 3], 7)\n  [4, 6, 9]\n  >>> incr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 7)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + n;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with step of 2.\n  >>> decr_list_step([1, 2, 3], 7)\n  [3, 2, 2]\n  >>> decr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 7)\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decr_list_step = (l, n) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - n;\n  }", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "<|endoftext|>/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  is_permutation takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> is_permutation([1, 3, 5, 0])\n  false\n  >>> is_permutation([1, 3, -2, 1])\n  false\n  >>> is_permutation([1, 2, 3, 7])\n  false\n  >>> is_permutation([2, 4, -5, 3, 5, 7])\n  true\n  >>> is_permutation([1])\n  false\n  */\nconst is_permutation = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> is_permutation_of_size([1, 3, 5, 0], 3)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 7], 3)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 5, 7], 3)\n  true\n  >>> is_permutation_of_size([1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> is_permutation_of_size([1, 3, 5, 0], 3)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 7], 3)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 5, 7], 3)\n  true\n  >>> is_permutation_of_size([1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> is_permutation_of_size([1, 3, 5, 0], 3)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 7], 3)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 5, 7], 3)\n  true\n  >>> is_permutation_of_size([1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> is_permutation_of_size([1, 3, 5, 0], 3)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 7], 3)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 5, 7], 3)\n  true\n  >>> is_permutation_of_size([1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> is_permutation_of_size([1, 3, 5, 0], 3)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 7], 3)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 5, 7], 3)\n  true\n  >>> is_permutation_of_size([1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> is_permutation_of_size([1, 3, 5, 0], 3)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 7], 3)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 5, 7], 3)\n  true\n  >>> is_permutation_of_size([1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> is_permutation_of_size([1, 3, 5, 0], 3)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 7], 3)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 5, 7], 3)\n  true\n  >>> is_permutation_of_size([1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> is_permutation_of_size([1, 3, 5, 0], 3)\n  false\n  >>> is_permutation_of_size([1, 3, -2, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 7], 3)\n  false\n  >>> is_permutation_of_size([2, 4, -5, 3, 5, 7], 3)\n  true\n  >>> is_permutation_of_size([1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  let s = ''\n  while (x > 0) {\n    s = base_digits[x % base] + s\n    x = Math.floor(x / base)\n  }\n  return s\n}\n\n/*\n  >>> base_digits(8)\n  '1000'\n  >>> base_digits(10)\n  '100'\n  >>> base_digits(16)\n  '10'\n  >>> base_digits(20)\n  '11'\n  >>> base_digits(25)\n  '111'\n  >>> base_digits(30)\n  '1111'\n  >>> base_digits(35)\n  '11111'\n  >>> base_digits(40)\n  '111111'\n  >>> base_digits(45)\n  '1111111'\n  >>> base_digits(50)\n  '11111111'\n  >>> base_digits(55)\n  '111111111'\n  >>> base_digits(60)\n  '1111111111'\n  >>> base_digits(65)\n  '11111111111'\n  >>> base_digits(70)\n  '111111111111'\n  >>> base_digits(75)\n  '1111111111111'\n  >>> base_digits(80)\n  '11111111111111'\n  >>> base_digits(85)\n  '111111111111111'\n  >>> base_digits(90)\n  '1111111111111110'\n  >>> base_digits(95)\n  '11111111111111110'\n  >>> base_digits(100)\n  '111111111111111101'\n  >>> base_digits(105)\n  '1111111111111111011'\n  >>> base_digits(110)\n  '11111111111111110111'\n  >>> base_digits(115)\n  '111111111111111101111'\n  >>> base_digits(120)\n  '1111111111111111011111'\n  >>> base_digits(125)\n  '11111111111111110111111'\n  >>> base_digits(130)\n  '111111111111111101111111'\n  >>> base_digits(135)\n  '1111111111111111011111111'\n  >>> base_digits(140)\n  '11111111111111110111111111'\n  >>> base_digits(145)\n  '111111111111111101111111110'\n  >>> base_digits(150)\n  '1111111111111111011111111110'\n  >>> base_digits(155)\n  '11111111111111110111111111101'\n  >>> base_digits(160)\n  '111111111111111101111111111011'\n  >>> base_digits(165)\n  '1111111111111111011111111110111'\n  >>> base_digits(170)\n  '11111111111111110111111111101111'\n  >>> base_digits(175)\n  '111111111111111101111111111011111'\n  >>> base_digits(180)\n  '1111111111111111011111111110111111'\n  >>> base_digits(185)\n  '11111111111111110111111111101111111'\n  >>> base_digits(190)\n  '111111111111111101111111111011111111'\n  >>> base_digits(195)\n  '1111111111111111011111111110111111111'\n  >>> base_digits(200)\n  '11111111111111110111111111101111111110'\n  >>> base_digits(205)\n  '111111111111111101111111111011111111110'\n  >>> base_digits(210)\n  '1111111111111111011111111110111111111101'\n  >>> base_digits(215)\n  '11111111111111110111111111101111111111011'\n  >>> base_digits(220)\n  '111111111111111101111111111011111111110111'\n  >>> base_digits(225)\n  '1111111111111111011111111110111111111101111'\n  >>> base_digits(230)\n  '11111111111111110111111111101111111111011111'\n  >>> base_digits(235)\n  '111111111111111101111111111011111111110111111'\n  >>> base_digits(240)\n  '1111111111111111011111111110111111111101111111'\n  >>> base_digits(245)\n  '11111111111111110111111111101111111111011111111'\n  >>> base_digits(250)\n  '111111111111111101111111111011111111110111111111'\n  >>> base_digits(255)\n  '1111111111111111011111111110111111111101111111110'\n  >>> base_digits(265)\n  '11111111111111110111111111101111111111011111111110'\n  >>> base_digits(270)\n  '111111111111111101111111111011111111110111111111101'\n  >>> base_digits(275)\n  '1111111111111111011111111110111111111101111111111011'\n  >>> base_digits(280)\n  '11111111111111110111111111101111111111011111111110111'\n  >>> base_digits(285)\n  '111111111111111101111111111011111111110111111111101111'\n  >>> base_digits(290)\n  '1111111111111111011111111110111111111101111111111011111'\n  >>> base_digits(295)\n  '11111111111111110111111111101111111111011111111110111111'\n  >>> base_digits(300)\n  '111111111111111101111111111011111111110111111111101111111'\n  >>> base_digits(305)\n  '1111111111111111011111111110111111111101111111111011111111'\n  >>> base_digits(310)\n  '11111111111111110111111111101111111111011111111110111111111'\n  >>> base_digits(315)\n  '111111111111111101111111111011111111110111111111101111111110'\n  >>> base_digits(320)\n  '1111111111111111011111111110111111111101111111111011111111110'\n  >>> base_digits(325)\n  '11111111111111110111111111101111111111011111111110111111111101'\n  >>> base_digits(330)\n  '111111111111111101111111111011111111110111111111101111111111011'\n  >>> base_digits(335)\n  '1111111111111111011111111110111111111101111111111011111111110111'\n  >>> base_digits(340)\n  '11111111111111110111111111101111111111011111111110111111111101111'\n  >>> base_digits(345)\n  '111111111111111101111111111011111111110111111111101111111111011111'\n  >>> base_digits(350)\n  '1111111111111111011111111110111111111101111111111011111111110111111'\n  >>> base_digits(355)\n  '11111111111111110111111111101111111111011111111110111111111101111111'\n  >>> base_digits(360)\n  '111111111111111101111111111011111111110111111111101111111111011111111'\n  >>> base_digits(365)\n  '1111111111111111011111111110111111111101111111111011111111110111111111'\n  >>> base_digits(370)\n  '11111111111111110111111111101111111111011111111110111111111101111111110'\n  >>> base_digits(375)\n  '111111111111111", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (a, h) => {\n  return a * (Math.PI * h / 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (h, a) => {\n  return a * (Math.PI * h / 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (h, a) => {\n  return a * (Math.PI * h / 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (h, a) => {\n  return a * (Math.PI * h / 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (h, a) => {\n  return a * (Math.PI * h / 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (h, a) => {\n  return a * (Math.PI * h / 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (h, a) => {\n  return a * (Math.PI * h / 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (h, a) => {\n  return a * (Math.PI * h / 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (h, a) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Problem 7\n  ---------\n  Write a function that takes an array of integers and returns the sum of the squares of the integers in the array.\n  >>> squareSum([1,2,3])\n  6\n  >>> squareSum([1,2,4])\n  16\n  >>> squareSum([1,2,5])\n  25\n  >>> squareSum([1,2,6])\n  36\n  >>> squareSum([1,2,7])\n  49\n  >>> squareSum([1,2,8])\n  64\n  >>> squareSum([1,2,9])\n  81\n  >>> squareSum([1,2,10])\n  100\n  >>> squareSum([1,2,11])\n  125\n  >>> squareSum([1,2,12])\n  144\n  >>> squareSum([1,2,13])\n  169\n  >>> squareSum([1,2,14])\n  196\n  >>> squareSum([1,2,15])\n  225\n  >>> squareSum([1,2,16])\n  256\n  >>> squareSum([1,2,17])\n  289\n  >>> squareSum([1,2,18])\n  324\n  >>> squareSum([1,2,19])\n  361\n  >>> squareSum([1,2,20])\n  396\n  >>> squareSum([1,2,21])\n  439\n  >>> squareSum([1,2,22])\n  484\n  >>> squareSum([1,2,23])\n  527\n  >>> squareSum([1,2,24])\n  560\n  >>> squareSum([1,2,25])\n  595\n  >>> squareSum([1,2,26])\n  632\n  >>> squareSum([1,2,27])\n  669\n  >>> squareSum([1,2,28])\n  724\n  >>> squareSum([1,2,29])\n  763\n  >>> squareSum([1,2,30])\n  800\n  >>> squareSum([1,2,31])\n  855\n  >>> squareSum([1,2,32])\n  900\n  >>> squareSum([1,2,33])\n  945\n  >>> squareSum([1,2,34])\n  987\n  >>> squareSum([1,2,35])\n  1032\n  >>> squareSum([1,2,36])\n  1069\n  >>> squareSum([1,2,37])\n  1109\n  >>> squareSum([1,2,38])\n  1154\n  >>> squareSum([1,2,39])\n  1199\n  >>> squareSum([1,2,40])\n  1243\n  >>> squareSum([1,2,41])\n  1288\n  >>> squareSum([1,2,42])\n  1333\n  >>> squareSum([1,2,43])\n  1379\n  >>> squareSum([1,2,44])\n  1424\n  >>> squareSum([1,2,45])\n  1469\n  >>> squareSum([1,2,46])\n  1505\n  >>> squareSum([1,2,47])\n  1552\n  >>> squareSum([1,2,48])\n  1597\n  >>> squareSum([1,2,49])\n  1644\n  >>> squareSum([1,2,50])\n  1689\n  >>> squareSum([1,2,51])\n  1734\n  >>> squareSum([1,2,52])\n  1779\n  >>> squareSum([1,2,53])\n  1824\n  >>> squareSum([1,2,54])\n  1869\n  >>> squareSum([1,2,55])\n  1905\n  >>> squareSum([1,2,56])\n  1952\n  >>> squareSum([1,2,57])\n  1987\n  >>> squareSum([1,2,58])\n  2034\n  >>> squareSum([1,2,59])\n  2079\n  >>> squareSum([1,2,60])\n  2124\n  >>> squareSum([1,2,61])\n  2179\n  >>> squareSum([1,2,62])\n  2234\n  >>> squareSum([1,2,63])\n  2278\n  >>> squareSum([1,2,64])\n  2324\n  >>> squareSum([1,2,65])\n  2369\n  >>> squareSum([1,2,66])\n  2405\n  >>> squareSum([1,2,67])\n  2452\n  >>> squareSum([1,2,68])\n  2497\n  >>> squareSum([1,2,69])\n  2544\n  >>> squareSum([1,2,70])\n  2590\n  >>> squareSum([1,2,71])\n  2645\n  >>> squareSum([1,2,72])\n  2699\n  >>> squareSum([1,2,73])\n  2744\n  >>> squareSum([1,2,74])\n  2789\n  >>> squareSum([1,2,75])\n  2834\n  >>> squareSum([1,2,76])\n  2879\n  >>> squareSum([1,2,77])\n  2924\n  >>> squareSum([1,2,78])\n  2969\n  >>> squareSum([1,2,79])\n  3014\n  >>> squareSum([1,2,80])\n  3059\n  >>> squareSum([1,2,81])\n  3106\n  >>> squareSum([1,2,82])\n  3139\n  >>> squareSum([1,2,83])\n  3164\n  >>> squareSum([1,2,84])\n  3198\n  >>> squareSum([1,2,85])\n  3243\n  >>> squareSum([1,2,86])\n  3288\n  >>> squareSum([1,2,87])\n  3334\n  >>> squareSum([1,2,88])\n  3379\n  >>> squareSum([1,2,89])\n  3424\n  >>> squareSum([1,2,90])\n  3469\n  >>> squareSum([1,2,91])\n  3512\n  >>> squareSum([1,2,92])\n  3557\n  >>> squareSum([1,2,93])\n  3602\n  >>> squareSum([1,2,94])\n  3655\n  >>> squareSum([1,2,95])\n  3700\n  >>> squareSum([1,2,96])\n  3745\n  >>> squareSum([1,2,97])\n  3790\n  >>> squareSum([1,2,98])\n  3835\n  >>> squareSum([1,2,99])\n  3881\n  >>> squareSum([1,2,100])\n  3926\n  >>> squareSum([1,2,101])\n  3971\n  >>> squareSum([1,2,102])\n  4016\n  >>> squareSum([1,2,103])\n  4061\n  >>> squareSum([1,2,104])\n  4102\n  >>> squareSum([1,2,105])\n  4155\n  >>> squareSum([1,2,106])\n  4200\n  >>> squareSum([1,2,107])\n  4245\n  >>> squareSum([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  let reversed_text = text;\n  reversed_text = reversed_text.reverse();\n  return text === reversed_text;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> is_palindrome('aba', 2)\n  true\n  >>> is_palindrome('aaaaa', 2)\n  true\n  >>> is_palindrome('zbcd', 2)\n  false\n  */\nconst is_palindrome_with_length = (text, length) => {\n  let reversed_text = text;\n  reversed_text = reversed_text.reverse();\n  return text === reversed_text && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> is_palindrome_with_length('aba', 2)\n  true\n  >>> is_palindrome_with_length('aaaaa', 2)\n  true\n  >>> is_palindrome_with_length('zbcd', 2)\n  false\n  */\nconst is_palindrome_with_length_with_case = (text, length) => {\n  let reversed_text = text;\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.reverse();\n  return text === reversed_text && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> is_palindrome_with_length_with_case('aba', 2)\n  true\n  >>> is_palindrome_with_length_with_case('aaaaa', 2)\n  true\n  >>> is_palindrome_with_length_with_case('zbcd', 2)\n  false\n  */\nconst is_palindrome_with_length_with_case_with_case = (text, length) => {\n  let reversed_text = text;\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.reverse();\n  return text === reversed_text && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> is_palindrome_with_length_with_case_with_case('aba', 2)\n  true\n  >>> is_palindrome_with_length_with_case_with_case('aaaaa', 2)\n  true\n  >>> is_palindrome_with_length_with_case_with_case('zbcd', 2)\n  false\n  */\nconst is_palindrome_with_length_with_case_with_case_with_case = (text, length) => {\n  let reversed_text = text;\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.reverse();\n  return text === reversed_text && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> is_palindrome_with_length_with_case_with_case_with_case('aba', 2)\n  true\n  >>> is_palindrome_with_length_with_case_with_case_with_case('aaaaa', 2)\n  true\n  >>> is_palindrome_with_length_with_case_with_case_with_case('zbcd', 2)\n  false\n  */\nconst is_palindrome_with_length_with_case_with_case_with_case_with_case = (text, length) => {\n  let reversed_text = text;\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.reverse();\n  return text === reversed_text && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> is_palindrome_with_length_with_case_with_case_with_case_with_case('aba', 2)\n  true\n  >>> is_palindrome_with_length_with_case_with_case_with_case_with_case('aaaaa', 2)\n  true\n  >>> is_palindrome_with_length_with_case_with_case_with_case_with_case('zbcd', 2)\n  false\n  */\nconst is_palindrome_with_length_with_case_with_case_with_case_with_case_with_case = (text, length) => {\n  let reversed_text = text;\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_text.toUpperCase();\n  reversed_text = reversed_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p;\n  const r = n % p;\n  return r == 0? q : q + modp(q, p);\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Returns the number of elements in the input list `numbers'\n * that satisfy the predicate `pred'\n *\n * @param {Array} numbers The input list\n * @param {Function} pred A predicate function\n * @returns {Number} The number of elements in the input list `numbers'\n * that satisfy the predicate `pred'\n * @example\n * const numbers = [1, 2, 3, 4, 5]\n * const isEven = n => n % 2 === 0\n * const evenNumbers = intersperse(numbers, isEven)\n * console.log(evenNumbers) // [2, 4, 5]\n */\nconst count = (numbers, pred) => {\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (pred(numbers[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Returns the first element of the input list `numbers'\n * that satisfies the predicate `pred'\n *\n * @param {Array} numbers The input list\n * @param {Function} pred A predicate function\n * @returns {*} The first element of the input list `numbers'\n * that satisfies the predicate `pred'\n * @example\n * const numbers = [1, 2, 3, 4, 5]\n * const isEven = n => n % 2 === 0\n * const evenNumbers = intersperse(numbers, isEven)\n * console.log(evenNumbers) // [2, 4, 5]\n */\nconst first = (numbers, pred) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (pred(numbers[i])) {\n      return numbers[i];\n    }\n  }\n};\n\n/**\n * Returns the last element of the input list `numbers'\n * that satisfies the predicate `pred'\n *\n * @param {Array} numbers The input list\n * @param {Function} pred A predicate function\n * @returns {*} The last element of the input list `numbers'\n * that satisfies the predicate `pred'\n * @example\n * const numbers = [1, 2, 3, 4, 5]\n * const isEven = n => n % 2 === 0\n * const evenNumbers = intersperse(numbers, isEven)\n * console.log(evenNumbers) // [2, 4, 5]\n */\nconst last = (numbers, pred) => {\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    if (pred(numbers[i])) {\n      return numbers[i];\n    }\n  }\n};\n\n/**\n * Returns the sum of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n *\n * @param {Array} numbers The input list\n * @param {Function} pred A predicate function\n * @returns {Number} The sum of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n * @example\n * const numbers = [1, 2, 3, 4, 5]\n * const isEven = n => n % 2 === 0\n * const evenNumbers = intersperse(numbers, isEven)\n * console.log(evenNumbers) // [2, 4, 5]\n */\nconst sum = (numbers, pred) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (pred(numbers[i])) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Returns the product of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n *\n * @param {Array} numbers The input list\n * @param {Function} pred A predicate function\n * @returns {Number} The product of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n * @example\n * const numbers = [1, 2, 3, 4, 5]\n * const isEven = n => n % 2 === 0\n * const evenNumbers = intersperse(numbers, isEven)\n * console.log(evenNumbers) // [2, 4, 5]\n */\nconst product = (numbers, pred) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (pred(numbers[i])) {\n      product *= numbers[i];\n    }\n  }\n  return product;\n};\n\n/**\n * Returns the median of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n *\n * @param {Array} numbers The input list\n * @param {Function} pred A predicate function\n * @returns {Number} The median of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n * @example\n * const numbers = [1, 2, 3, 4, 5]\n * const isEven = n => n % 2 === 0\n * const evenNumbers = intersperse(numbers, isEven)\n * console.log(evenNumbers) // [2, 4, 5]\n */\nconst median = (numbers, pred) => {\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const middleIndex = numbers.length / 2;\n  const median = sortedNumbers[middleIndex];\n  return median;\n};\n\n/**\n * Returns the mean of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n *\n * @param {Array} numbers The input list\n * @param {Function} pred A predicate function\n * @returns {Number} The mean of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n * @example\n * const numbers = [1, 2, 3, 4, 5]\n * const isEven = n => n % 2 === 0\n * const evenNumbers = intersperse(numbers, isEven)\n * console.log(evenNumbers) // [2, 4, 5]\n */\nconst mean = (numbers, pred) => {\n  const sum = sum(numbers, pred);\n  const mean = sum / numbers.length;\n  return mean;\n};\n\n/**\n * Returns the mode of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n *\n * @param {Array} numbers The input list\n * @param {Function} pred A predicate function\n * @returns {*} The mode of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n * @example\n * const numbers = [1, 2, 3, 4, 5]\n * const isEven = n => n % 2 === 0\n * const evenNumbers = intersperse(numbers, isEven)\n * console.log(evenNumbers) // [2, 4, 5]\n */\nconst mode = (numbers, pred) => {\n  const counts = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (pred(number)) {\n      if (counts[number] === undefined) {\n        counts[number] = 1;\n      } else {\n        counts[number]++;\n      }\n    }\n  }\n  const modes = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (counts[number]!== undefined) {\n      modes.push(number);\n    }\n  }\n  return modes;\n};\n\n/**\n * Returns the median of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n *\n * @param {Array} numbers The input list\n * @param {Function} pred A predicate function\n * @returns {Number} The median of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n * @example\n * const numbers = [1, 2, 3, 4, 5]\n * const isEven = n => n % 2 === 0\n * const evenNumbers = intersperse(numbers, isEven)\n * console.log(evenNumbers) // [2, 4, 5]\n */\nconst median = (numbers, pred) => {\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const middleIndex = numbers.length / 2;\n  const median = sortedNumbers[middleIndex];\n  return median;\n};\n\n/**\n * Returns the mean of all elements in the input list `numbers'\n * that satisfy the predicate `pred'\n *\n * @param {Array} numbers The input list\n * @param {Function} pred A predicate function\n * @returns {Number} The mean ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encode_shift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift3 function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encode_shift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift2 function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encode_shift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift1 function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encode_shift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift0 function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 6 in the alphabet.\n  */\nconst encode_shift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift6 function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift5 function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 4 in the alphabet.\n  */\nconst encode_shift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift4 function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encode_shift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift3 function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encode_shift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift2 function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encode_shift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift1 function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encode_shift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift0 function. Returns decoded string.\n  */\nconst decodeShift0 = (s) ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "<|endoftext|>/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  remove_consonants is a function that takes string and returns string without consonants.\n  >>> remove_consonants('')\n  ''\n  >>> remove_consonants(\"abcdef\\nghijklm\")\n  'abgjlm'\n  >>> remove_consonants('abcdef')\n  'abgj'\n  >>> remove_consonants('aaaaa')\n  ''\n  >>> remove_consonants('aaBAA')\n  'BAA'\n  >>> remove_consonants('zbcd')\n  'zbc'\n  */\nconst remove_consonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyz]/g, '');\n};\n\n/*\n  remove_numbers_letters is a function that takes string and returns string without numbers and letters.\n  >>> remove_numbers_letters('')\n  ''\n  >>> remove_numbers_letters(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> remove_numbers_letters('abcdef')\n  'abcdf'\n  >>> remove_numbers_letters('aaaaa')\n  ''\n  >>> remove_numbers_letters('aaBAA')\n  'BAA'\n  >>> remove_numbers_letters('zbcd')\n  'zbc'\n  */\nconst remove_numbers_letters = (text) => {\n  return text.replace(/[0-9a-zA-Z]/g, '');\n};\n\n/*\n  remove_spaces is a function that takes string and returns string without spaces.\n  >>> remove_spaces('')\n  ''\n  >>> remove_spaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_spaces('abcdef')\n  'abcdef'\n  >>> remove_spaces('aaaaa')\n  ''\n  >>> remove_spaces('aaBAA')\n  'BAA'\n  >>> remove_spaces('zbcd')\n  'zbc'\n  */\nconst remove_spaces = (text) => {\n  return text.replace(/\\s+/g, '');\n};\n\n/*\n  remove_newlines is a function that takes string and returns string without newlines.\n  >>> remove_newlines('')\n  ''\n  >>> remove_newlines(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_newlines('abcdef')\n  'abcdef'\n  >>> remove_newlines('aaaaa')\n  ''\n  >>> remove_newlines('aaBAA')\n  'BAA'\n  >>> remove_newlines('zbcd')\n  'zbc'\n  */\nconst remove_newlines = (text) => {\n  return text.replace(/\\n/g, '');\n};\n\n/*\n  remove_spaces_newlines is a function that takes string and returns string without spaces and newlines.\n  >>> remove_spaces_newlines('')\n  ''\n  >>> remove_spaces_newlines(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_spaces_newlines('abcdef')\n  'abcdef'\n  >>> remove_spaces_newlines('aaaaa')\n  ''\n  >>> remove_spaces_newlines('aaBAA')\n  'BAA'\n  >>> remove_spaces_newlines('zbcd')\n  'zbc'\n  */\nconst remove_spaces_newlines = (text) => {\n  return text.replace(/[\\s\\n]/g, '');\n};\n\n/*\n  remove_spaces_tabs is a function that takes string and returns string without spaces and tabs.\n  >>> remove_spaces_tabs('')\n  ''\n  >>> remove_spaces_tabs(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_spaces_tabs('abcdef')\n  'abcdef'\n  >>> remove_spaces_tabs('aaaaa')\n  ''\n  >>> remove_spaces_tabs('aaBAA')\n  'BAA'\n  >>> remove_spaces_tabs('zbcd')\n  'zbc'\n  */\nconst remove_spaces_tabs = (text) => {\n  return text.replace(/[\\s\\t]/g, '');\n};\n\n/*\n  remove_spaces_tabs_newlines is a function that takes string and returns string without spaces, tabs and newlines.\n  >>> remove_spaces_tabs_newlines('')\n  ''\n  >>> remove_spaces_tabs_newlines(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_spaces_tabs_newlines('abcdef')\n  'abcdef'\n  >>> remove_spaces_tabs_newlines('aaaaa')\n  ''\n  >>> remove_spaces_tabs_newlines('aaBAA')\n  'BAA'\n  >>> remove_spaces_tabs_newlines('zbcd')\n  'zbc'\n  */\nconst remove_spaces_tabs_newlines = (text) => {\n  return text.replace(/[\\s\\t\\n]/g, '');\n};\n\n/*\n  remove_spaces_tabs_newlines_spaces is a function that takes string and returns string without spaces, tabs, newlines and spaces.\n  >>> remove_spaces_tabs_newlines_spaces('')\n  ''\n  >>> remove_spaces_tabs_newlines_spaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_spaces_tabs_newlines_spaces('abcdef')\n  'abcdef'\n  >>> remove_spaces_tabs_newlines_spaces('aaaaa')\n  ''\n  >>> remove_spaces_tabs_newlines_spaces('aaBAA')\n  'BAA'\n  >>> remove_spaces_tabs_newlines_spaces('zbcd')\n  'zbc'\n  */\nconst remove_spaces_tabs_newlines_spaces = (text) => {\n  return text.replace(/[\\s\\t\\n\\s]/g, '');\n};\n\n/*\n  remove_spaces_tabs_newlines_spaces_newlines is a function that takes string and returns string without spaces, tabs, newlines, spaces and newlines.\n  >>> remove_spaces_tabs_newlines_spaces_newlines('')\n  ''\n  >>> remove_spaces_tabs_newlines_spaces_newlines(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_spaces_tabs_newlines_spaces_newlines('abcdef')\n  'abcdef'\n  >>> remove_spaces_tabs_newlines_spaces_newlines('aaaaa')\n  ''\n  >>> remove_spaces_tabs_newlines_spaces_newlines('aaBAA')\n  'BAA'\n  >>> remove_spaces_tabs_newlines_spaces_newlines('zbcd')\n  'zbc'\n  */\nconst remove_spaces_tabs_newlines_spaces_newlines = (text) => {\n  return text.replace(/[\\s\\t\\n\\s\\n]/g, '');\n};\n\n/*\n  remove_spaces_tabs_newlines_spaces_newlines_spaces is a function that takes string and returns string without spaces, tabs, newlines, spaces and spaces and newlines.\n  >>> remove_spaces_tabs_newlines_spaces_newlines_spaces('')\n  ''\n  >>> remove_spaces_tabs_newlines_spaces_newlines_spaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_spaces_tabs_newline", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  false\n  >>> above_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst above_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst between_threshold = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_inclusive([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_inclusive([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_inclusive([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst between_threshold_inclusive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_exclusive([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_exclusive([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_exclusive([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst between_threshold_exclusive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_strict([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_strict([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_strict([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_strict_inclusive([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_strict_inclusive([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_strict_inclusive([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst between_threshold_strict_inclusive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_strict_exclusive([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_strict_exclusive([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_strict_exclusive([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst between_threshold_strict_exclusive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_strict_strict_inclusive([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_strict_strict_inclusive([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_strict_strict_inclusive([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst between_threshold_strict_strict_inclusive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_strict_strict_exclusive([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_strict_strict_exclusive([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_strict_strict_exclusive([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst between_threshold_strict_strict_exclusive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_strict_strict_strict_inclusive([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_strict_strict_strict_inclusive([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_strict_strict_strict_inclusive([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst between_threshold_strict_strict_strict_inclusive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_strict_strict_strict_exclusive([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_strict_strict_strict_exclusive([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_strict_strict_strict_exclusive([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst between_threshold_strict_strict_strict_exclusive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_strict_strict_strict_strict_inclusive([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_strict_strict_strict_strict_inclusive([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_strict_strict_strict_strict_inclusive([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst between_threshold_strict_strict_strict_strict_inclusive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_strict_strict_strict_strict_exclusive([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold_strict_strict_strict_strict_exclusive([1, 20, 4, 10], 5, 5)\n  true\n  >>> between_threshold_strict_strict_strict_strict_exclusive([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst between_threshold_strict_strict_strict_strict_exclusive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betwe", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst sign = x => {\n  return x > 0? 1 : x < 0? -1 : 0;\n};\n\n/*Get the floor of number x\n  >>> floor(3.5)\n  3\n  >>> floor(3.8)\n  4\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.5)\n  4\n  >>> ceil(3.8)\n  5\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> truncate(3.5)\n  3\n  >>> truncate(3.8)\n  3\n  */\nconst truncate = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst truncate = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst truncate = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst truncate = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst truncate = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst truncate = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst truncate = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.5)\n  3\n  >>> round(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  8\n  >>> fib(4)\n  7\n  >>> fib(3)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  let opening_brackets = brackets.split(\"\");\n  let closing_brackets = brackets.split(\"\").reverse();\n  for (let i = 0; i < opening_brackets.length; i++) {\n    if (opening_brackets[i]!== closing_brackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  Given a string, return a new string with all instances of one string replaced \n  by another string. Case insensitive.\n\n  >>> replace_string(\"hello world\", \"world\", \"earth\")\n  \"hello earth\"\n  >>> replace_string(\"hello world\", \"world\", \"Earth\")\n  \"hello Earth\"\n  >>> replace_string(\"hello world\", \"world\", \"earth\", true)\n  \"hello earth\"\n  >>> replace_string(\"hello world\", \"world\", \"Earth\", true)\n  \"hello Earth\"\n  >>> replace_string(\"hello world\", \"world\", \"earth\", false)\n  \"hello earth\"\n  >>> replace_string(\"hello world\", \"world\", \"Earth\", false)\n  \"hello Earth\"\n  */\nconst replace_string = (string, search, replace, case_insensitive) => {\n  if (case_insensitive) {\n    search = search.toLowerCase();\n    replace = replace.toLowerCase();\n  }\n  return string.replace(new RegExp(search, \"gi\"), replace);\n};\n\n/**\n  Given a string, return a new string with all instances of one string replaced \n  by another string. Case insensitive.\n\n  >>> replace_string(\"hello world\", \"world\", \"earth\", true)\n  \"hello earth\"\n  >>> replace_string(\"hello world\", \"world\", \"Earth\", true)\n  \"hello Earth\"\n  >>> replace_string(\"hello world\", \"world\", \"earth\", false)\n  \"hello earth\"\n  >>> replace_string(\"hello world\", \"world\", \"Earth\", false)\n  \"hello Earth\"\n  */\nconst replace_string_case_insensitive = (string, search, replace) => {\n  search = search.toLowerCase();\n  replace = replace.toLowerCase();\n  return string.replace(new RegExp(search, \"gi\"), replace);\n};\n\n/**\n  Given a string, return a new string with all instances of one string replaced \n  by another string. Case sensitive.\n\n  >>> replace_string_case(\"hello world\", \"world\", \"earth\")\n  \"hello earth\"\n  >>> replace_string_case(\"hello world\", \"world\", \"Earth\")\n  \"hello Earth\"\n  >>> replace_string_case(\"hello world\", \"world\", \"earth\", true)\n  \"hello earth\"\n  >>> replace_string_case(\"hello world\", \"world\", \"Earth\", true)\n  \"hello Earth\"\n  >>> replace_string_case(\"hello world\", \"world\", \"earth\", false)\n  \"hello earth\"\n  >>> replace_string_case(\"hello world\", \"world\", \"Earth\", false)\n  \"hello Earth\"\n  */\nconst replace_string_case = (string, search, replace) => {\n  search = search.toLowerCase();\n  replace = replace.toLowerCase();\n  return string.replace(new RegExp(search, \"gi\"), replace);\n};\n\n/**\n  Given a string, return a new string with all instances of one string replaced \n  by another string. Case sensitive.\n\n  >>> replace_string_case_sensitive(\"hello world\", \"world\", \"earth\")\n  \"hello earth\"\n  >>> replace_string_case_sensitive(\"hello world\", \"world\", \"Earth\")\n  \"hello Earth\"\n  >>> replace_string_case_sensitive(\"hello world\", \"world\", \"earth\", true)\n  \"hello earth\"\n  >>> replace_string_case_sensitive(\"hello world\", \"world\", \"Earth\", true)\n  \"hello Earth\"\n  >>> replace_string_case_sensitive(\"hello world\", \"world\", \"earth\", false)\n  \"hello earth\"\n  >>> replace_string_case_sensitive(\"hello world\", \"world\", \"Earth\", false)\n  \"hello Earth\"\n  */\nconst replace_string_case_sensitive = (string, search, replace) => {\n  search = search.toLowerCase();\n  replace = replace.toLowerCase();\n  return string.replace(new RegExp(search, \"gi\"), replace);\n};\n\n/**\n  Given a string, return a new string with all instances of one string replaced \n  by another string. Case insensitive.\n\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"earth\")\n  \"hello earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"Earth\")\n  \"hello Earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"earth\", true)\n  \"hello earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"Earth\", true)\n  \"hello Earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"earth\", false)\n  \"hello earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"Earth\", false)\n  \"hello Earth\"\n  */\nconst replace_string_case_insensitive = (string, search, replace) => {\n  search = search.toLowerCase();\n  replace = replace.toLowerCase();\n  return string.replace(new RegExp(search, \"gi\"), replace);\n};\n\n/**\n  Given a string, return a new string with all instances of one string replaced \n  by another string. Case insensitive.\n\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"earth\", true)\n  \"hello earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"Earth\", true)\n  \"hello Earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"earth\", false)\n  \"hello earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"Earth\", false)\n  \"hello Earth\"\n  */\nconst replace_string_case_insensitive = (string, search, replace) => {\n  search = search.toLowerCase();\n  replace = replace.toLowerCase();\n  return string.replace(new RegExp(search, \"gi\"), replace);\n};\n\n/**\n  Given a string, return a new string with all instances of one string replaced \n  by another string. Case insensitive.\n\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"earth\", true)\n  \"hello earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"Earth\", true)\n  \"hello Earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"earth\", false)\n  \"hello earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"Earth\", false)\n  \"hello Earth\"\n  */\nconst replace_string_case_insensitive = (string, search, replace) => {\n  search = search.toLowerCase();\n  replace = replace.toLowerCase();\n  return string.replace(new RegExp(search, \"gi\"), replace);\n};\n\n/**\n  Given a string, return a new string with all instances of one string replaced \n  by another string. Case insensitive.\n\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"earth\", true)\n  \"hello earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"Earth\", true)\n  \"hello Earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"earth\", false)\n  \"hello earth\"\n  >>> replace_string_case_insensitive(\"hello world\", \"world\", \"Earth\", false)\n  \"hello Earth\"\n  */\nconst replace_string_case_insensitive = (string, search, replace) => {\n  search = search.toLowerCase();\n  replace = replace.toLowerCase();\n  return string.replace(new RegExp(search, \"gi\"), replace);\n};\n\n/**\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[j] <= l[i]) {\n      i++;\n    } else if (l[j] > l[i]) {\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return k === n;\n};\n\n/*\n  >>> [1,2,3].includes(2)\n  true\n  >>> [1,2,3].includes(4)\n  false\n  >>> [1,2,3].includes(1, 2)\n  true\n  >>> [1,2,3].includes(1, 3)\n  false\n  >>> [1,2,3].includes(1, 3, 1)\n  true\n  >>> [1,2,3].includes(1, 3, 2)\n  false\n  >>> [1,2,3].includes(1, 3, 3)\n  false\n  >>> [1,2,3].includes(1, 3, 4)\n  false\n  >>> [1,2,3].includes(1, 3, 5)\n  false\n  >>> [1,2,3].includes(1, 3, 6)\n  false\n  >>> [1,2,3].includes(1, 3, 7)\n  false\n  >>> [1,2,3].includes(1, 3, 8)\n  false\n  >>> [1,2,3].includes(1, 3, 9)\n  false\n  >>> [1,2,3].includes(1, 3, 10)\n  false\n  >>> [1,2,3].includes(1, 3, 11)\n  false\n  >>> [1,2,3].includes(1, 3, 12)\n  false\n  >>> [1,2,3].includes(1, 3, 13)\n  false\n  >>> [1,2,3].includes(1, 3, 14)\n  false\n  >>> [1,2,3].includes(1, 3, 15)\n  false\n  >>> [1,2,3].includes(1, 3, 16)\n  false\n  >>> [1,2,3].includes(1, 3, 17)\n  false\n  >>> [1,2,3].includes(1, 3, 18)\n  false\n  >>> [1,2,3].includes(1, 3, 19)\n  false\n  >>> [1,2,3].includes(1, 3, 20)\n  false\n  >>> [1,2,3].includes(1, 3, 21)\n  false\n  >>> [1,2,3].includes(1, 3, 22)\n  false\n  >>> [1,2,3].includes(1, 3, 23)\n  false\n  >>> [1,2,3].includes(1, 3, 24)\n  false\n  >>> [1,2,3].includes(1, 3, 25)\n  false\n  >>> [1,2,3].includes(1, 3, 26)\n  false\n  >>> [1,2,3].includes(1, 3, 27)\n  false\n  >>> [1,2,3].includes(1, 3, 28)\n  false\n  >>> [1,2,3].includes(1, 3, 29)\n  false\n  >>> [1,2,3].includes(1, 3, 30)\n  false\n  >>> [1,2,3].includes(1, 3, 31)\n  false\n  >>> [1,2,3].includes(1, 3, 32)\n  false\n  >>> [1,2,3].includes(1, 3, 33)\n  false\n  >>> [1,2,3].includes(1, 3, 34)\n  false\n  >>> [1,2,3].includes(1, 3, 35)\n  false\n  >>> [1,2,3].includes(1, 3, 36)\n  false\n  >>> [1,2,3].includes(1, 3, 37)\n  false\n  >>> [1,2,3].includes(1, 3, 38)\n  false\n  >>> [1,2,3].includes(1, 3, 39)\n  false\n  >>> [1,2,3].includes(1, 3, 40)\n  false\n  >>> [1,2,3].includes(1, 3, 41)\n  false\n  >>> [1,2,3].includes(1, 3, 42)\n  false\n  >>> [1,2,3].includes(1, 3, 43)\n  false\n  >>> [1,2,3].includes(1, 3, 44)\n  false\n  >>> [1,2,3].includes(1, 3, 45)\n  false\n  >>> [1,2,3].includes(1, 3, 46)\n  false\n  >>> [1,2,3].includes(1, 3, 47)\n  false\n  >>> [1,2,3].includes(1, 3, 48)\n  false\n  >>> [1,2,3].includes(1, 3, 49)\n  false\n  >>> [1,2,3].includes(1, 3, 50)\n  false\n  >>> [1,2,3].includes(1, 3, 51)\n  false\n  >>> [1,2,3].includes(1, 3, 52)\n  false\n  >>> [1,2,3].includes(1, 3, 53)\n  false\n  >>> [1,2,3].includes(1, 3, 54)\n  false\n  >>> [1,2,3].includes(1, 3, 55)\n  false\n  >>> [1,2,3].includes(1, 3, 56)\n  false\n  >>> [1,2,3].includes(1, 3, 57)\n  false\n  >>> [1,2,3].includes(1, 3, 58)\n  false\n  >>> [1,2,3].includes(1, 3, 59)\n  false\n  >>> [1,2,3].includes(1, 3, 60)\n  false\n  >>> [1,2,3].includes(1, 3, 61)\n  false\n  >>> [1,2,3].includes(1, 3, 62)\n  false\n  >>> [1,2,3].includes(1, 3, 63)\n  false\n  >>> [1,2,3].includes(1, 3, 64)\n  false\n  >>> [1,2,3].includes(1, 3, 65)\n  false\n  >>> [1,2,3].includes(1, 3, 66)\n  false\n  >>> [1,2,3].includes(1, 3, 67)\n  false\n  >>> [1,2,3].includes(1, 3, 68)\n  false\n  >>> [1,2,3].includes(1, 3, 69)\n  false\n  >>> [1,2,3].includes(1, 3, 70)\n  false\n  >>> [1,2,3].includes(1, 3, 71)\n  false\n  >>> [1,2,3].includes(1, 3, 72)\n  false\n  >>> [1,2,3].includes(1, 3, 73)\n  false\n  >>> [1,2,3].includes(1, 3, 74)\n  false\n  >>> [1,2,3].includes(1, 3, 75)\n  false\n  >>> [1,2,3].includes(1, 3, 76)\n  false\n  >>> [1,2,3].includes(1, 3, 77)\n  false\n  >>> [1,2,3].includes(1, 3, 78)\n  false\n  >>> [1,2,3].includes(1, 3, 79)\n  false\n  >>> [1,2,3].includes(1, 3, 80)\n  false\n  >>> [1,2,3].includes(1, 3, 81)\n  false\n  >>> [1,2,3].includes(1, 3, 82)\n  false\n  >>> [1,2,3].includes(1, 3, 83)\n  false\n  >>> [1,2,3].includes(1, 3, 84)\n  false\n  >>> [1,2,3].includes(1, 3, 85)\n  false\n  >>> [1,2,3].includes(1, 3, 86)\n  false\n  >>> [1,2,3].includes(1, 3, 87)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n      set2.delete(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  2\n  >>> smallest_prime_factor(2048)\n  8\n  */\nconst smallest_prime_factor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors(4, 6)\n  2\n  >>> number_of_divisors(6, 6)\n  0\n  >>> number_of_divisors(6, 7)\n  1\n  >>> number_of_divisors(7, 7)\n  0\n  */\nconst number_of_divisors = (num, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (num % i === 0) {\n        count += 2;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_prime(4, 6)\n  2\n  >>> number_of_divisors_prime(6, 6)\n  0\n  >>> number_of_divisors_prime(6, 7)\n  1\n  >>> number_of_divisors_prime(7, 7)\n  0\n  */\nconst number_of_divisors_prime = (num, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (num % i === 0) {\n        count += 2;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_prime_prime(4, 6)\n  2\n  >>> number_of_divisors_prime_prime(6, 6)\n  0\n  >>> number_of_divisors_prime_prime(6, 7)\n  1\n  >>> number_of_divisors_prime_prime(7, 7)\n  0\n  */\nconst number_of_divisors_prime_prime = (num, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (num % i === 0) {\n        count += 2;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_prime_prime_prime(4, 6)\n  2\n  >>> number_of_divisors_prime_prime_prime(6, 6)\n  0\n  >>> number_of_divisors_prime_prime_prime(6, 7)\n  1\n  >>> number_of_divisors_prime_prime_prime(7, 7)\n  0\n  */\nconst number_of_divisors_prime_prime_prime = (num, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (num % i === 0) {\n        count += 2;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_prime_prime_prime_prime(4, 6)\n  2\n  >>> number_of_divisors_prime_prime_prime_prime(6, 6)\n  0\n  >>> number_of_divisors_prime_prime_prime_prime(6, 7)\n  1\n  >>> number_of_divisors_prime_prime_prime_prime(7, 7)\n  0\n  */\nconst number_of_divisors_prime_prime_prime_prime = (num, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (num % i === 0) {\n        count += 2;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_prime_prime_prime_prime_prime(4, 6)\n  2\n  >>> number_of_divisors_prime_prime_prime_prime_prime(6, 6)\n  0\n  >>> number_of_divisors_prime_prime_prime_prime_prime(6, 7)\n  1\n  >>> number_of_divisors_prime_prime_prime_prime_prime(7, 7)\n  0\n  */\nconst number_of_divisors_prime_prime_prime_prime_prime = (num, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (num % i === 0) {\n        count += 2;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime(4, 6)\n  2\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime(6, 6)\n  0\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime(6, 7)\n  1\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime(7, 7)\n  0\n  */\nconst number_of_divisors_prime_prime_prime_prime_prime_prime = (num, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (num % i === 0) {\n        count += 2;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime_prime(4, 6)\n  2\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime_prime(6, 6)\n  0\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime_prime(6, 7)\n  1\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime_prime(7, 7)\n  0\n  */\nconst number_of_divisors_prime_prime_prime_prime_prime_prime_prime = (num, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (num % i === 0) {\n        count += 2;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime_prime_prime(4, 6)\n  2\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime_prime_prime(6, 6)\n  0\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime_prime_prime(6, 7)\n  1\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime_prime_prime(7, 7)\n  0\n  */\nconst number_of_divisors_prime_prime_prime_prime_prime_prime_prime_prime = (num, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (num % i === 0) {\n        count += 2;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_prime_prime_prime_prime_prime_prime_", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const groups = paren_string.trim().replace(/\\s+/g,'').split(' ');\n  const max_level = Math.max(...groups.map(g => g.length));\n  const nested_levels = [];\n  for (let i = 0; i < max_level; i++) {\n    nested_levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        nested_levels[nested_levels.length - 1]++;\n      } else if (group[j] === ')') {\n        nested_levels[nested_levels.length - 1]--;\n      }\n    }\n  }\n  return nested_levels;\n};\n\nconst parse_nested_parens_string = (nested_parens_string) => {\n  const groups = nested_parens_string.trim().replace(/\\s+/g,'').split(' ');\n  const max_level = Math.max(...groups.map(g => g.length));\n  const nested_levels = [];\n  for (let i = 0; i < max_level; i++) {\n    nested_levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        nested_levels[nested_levels.length - 1]++;\n      } else if (group[j] === ')') {\n        nested_levels[nested_levels.length - 1]--;\n      }\n    }\n  }\n  return nested_levels;\n};\n\nconst parse_nested_parens_strings = (nested_parens_strings) => {\n  const groups = nested_parens_strings.trim().replace(/\\s+/g,'').split(' ');\n  const max_level = Math.max(...groups.map(g => g.length));\n  const nested_levels = [];\n  for (let i = 0; i < max_level; i++) {\n    nested_levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        nested_levels[nested_levels.length - 1]++;\n      } else if (group[j] === ')') {\n        nested_levels[nested_levels.length - 1]--;\n      }\n    }\n  }\n  return nested_levels;\n};\n\nconst parse_nested_parens_strings_array = (nested_parens_strings_array) => {\n  const groups = nested_parens_strings_array.trim().replace(/\\s+/g,'').split(' ');\n  const max_level = Math.max(...groups.map(g => g.length));\n  const nested_levels = [];\n  for (let i = 0; i < max_level; i++) {\n    nested_levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        nested_levels[nested_levels.length - 1]++;\n      } else if (group[j] === ')') {\n        nested_levels[nested_levels.length - 1]--;\n      }\n    }\n  }\n  return nested_levels;\n};\n\nconst parse_nested_parens_strings_arrays = (nested_parens_strings_arrays) => {\n  const groups = nested_parens_strings_arrays.trim().replace(/\\s+/g,'').split(' ');\n  const max_level = Math.max(...groups.map(g => g.length));\n  const nested_levels = [];\n  for (let i = 0; i < max_level; i++) {\n    nested_levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        nested_levels[nested_levels.length - 1]++;\n      } else if (group[j] === ')') {\n        nested_levels[nested_levels.length - 1]--;\n      }\n    }\n  }\n  return nested_levels;\n};\n\nconst parse_nested_parens_strings_arrays_arrays = (nested_parens_strings_arrays_arrays) => {\n  const groups = nested_parens_strings_arrays_arrays.trim().replace(/\\s+/g,'').split(' ');\n  const max_level = Math.max(...groups.map(g => g.length));\n  const nested_levels = [];\n  for (let i = 0; i < max_level; i++) {\n    nested_levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        nested_levels[nested_levels.length - 1]++;\n      } else if (group[j] === ')') {\n        nested_levels[nested_levels.length - 1]--;\n      }\n    }\n  }\n  return nested_levels;\n};\n\nconst parse_nested_parens_strings_arrays_arrays_arrays = (nested_parens_strings_arrays_arrays_arrays) => {\n  const groups = nested_parens_strings_arrays_arrays_arrays.trim().replace(/\\s+/g,'').split(' ');\n  const max_level = Math.max(...groups.map(g => g.length));\n  const nested_levels = [];\n  for (let i = 0; i < max_level; i++) {\n    nested_levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        nested_levels[nested_levels.length - 1]++;\n      } else if (group[j] === ')') {\n        nested_levels[nested_levels.length - 1]--;\n      }\n    }\n  }\n  return nested_levels;\n};\n\nconst parse_nested_parens_strings_arrays_arrays_arrays_arrays = (nested_parens_strings_arrays_arrays_arrays_arrays) => {\n  const groups = nested_parens_strings_arrays_arrays_arrays_arrays.trim().replace(/\\s+/g,'').split(' ');\n  const max_level = Math.max(...groups.map(g => g.length));\n  const nested_levels = [];\n  for (let i = 0; i < max_level; i++) {\n    nested_levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        nested_levels[nested_levels.length - 1]++;\n      } else if (group[j] === ')') {\n        nested_levels[nested_levels.length - 1]--;\n      }\n    }\n  }\n  return nested_levels;\n};\n\nconst parse_nested_parens_strings_arrays_arrays_arrays_arrays_arrays = (nested_parens_strings_arrays_arrays_arrays_arrays_arrays_arrays) => {\n  const groups = nested_parens_strings_arrays_arrays_arrays_arrays_arrays.trim().replace(/\\s+/g,'').split(' ');\n  const max_level = Math.max(...groups.map(g => g.length));\n  const nested_levels = [];\n  for (let i = 0; i < max_level; i++) {\n    nested_levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        nested_levels[nested_levels.length - 1]++;\n      } else if (group[j] === ')') {\n        nested_levels[nested_levels.length - 1]--;\n      }\n    }\n  }\n  return nested_levels;\n};\n\nconst parse_nested_parens_strings_arrays_arrays_arrays_arrays_arrays_arrays = (nested_parens_strings_arrays_arrays_arrays_arrays_arrays_arrays_arrays_arrays) => {\n  const groups = nested_parens_strings_arrays_arrays_arrays_arrays_arrays_arrays_arrays.trim().replace(/\\s+/g,'').split(' ');\n  const max_level = Math.max(...groups.map(g => g.length));\n  const nested_levels = [];\n  for (let i = 0; i < max_level; i++) {\n    nested_levels.push(0);\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        nested_levels[nested_levels.length - 1]++;\n      } else if (group[j] === ')') {\n        nested_levels[nested_levels.length - 1]--;\n      }\n    }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "<|endoftext|>/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive_recursive(30)\n  465\n  >>> sum_to_n_recursive_recursive(100)\n  5050\n  >>> sum_to_n_recursive_recursive(5)\n  15\n  >>> sum_to_n_recursive_recursive(10)\n  55\n  >>> sum_to_n_recursive_recursive(1)\n  1\n  */\nconst sum_to_n_recursive_recursive_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive_recursive_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive_recursive_recursive(30)\n  465\n  >>> sum_to_n_recursive_recursive_recursive(100)\n  5050\n  >>> sum_to_n_recursive_recursive_recursive(5)\n  15\n  >>> sum_to_n_recursive_recursive_recursive(10)\n  55\n  >>> sum_to_n_recursive_recursive_recursive(1)\n  1\n  */\nconst sum_to_n_recursive_recursive_recursive_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive_recursive_recursive_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive_recursive_recursive_recursive(30)\n  465\n  >>> sum_to_n_recursive_recursive_recursive_recursive(100)\n  5050\n  >>> sum_to_n_recursive_recursive_recursive_recursive(5)\n  15\n  >>> sum_to_n_recursive_recursive_recursive_recursive(10)\n  55\n  >>> sum_to_n_recursive_recursive_recursive_recursive(1)\n  1\n  */\nconst sum_to_n_recursive_recursive_recursive_recursive_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive_recursive_recursive_recursive_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive(30)\n  465\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive(100)\n  5050\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive(5)\n  15\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive(10)\n  55\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive(1)\n  1\n  */\nconst sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(30)\n  465\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(100)\n  5050\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(5)\n  15\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(10)\n  55\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(1)\n  1\n  */\nconst sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive(30)\n  465\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive(100)\n  5050\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive(5)\n  15\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(10)\n  55\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(1)\n  1\n  */\nconst sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(30)\n  465\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive(100)\n  5050\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive(5)\n  15\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(10)\n  55\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive(1)\n  1\n  */\nconst sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(30)\n  465\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(100)\n  5050\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive(5)\n  15\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive(10)\n  55\n  >>> sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive(1)\n  1\n  */\nconst sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive_recursive_re", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === \"(\") {\n      stack.push(bracket);\n    } else if (bracket === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const opening = stack.pop();\n      if (opening!== bracket) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return stack.length === 0;\n};\n\n// -----------------------------------------------------------------------------\n// parse\n// -----------------------------------------------------------------------------\n\n/**\n * Parses input into a node tree.\n *\n * nodes: an array of nodes\n * pos: current index in `nodes` being parsed\n * tok: current token\n * pos: current position in `str`\n * type: current type\n * parent: parent in recursive calls\n * parsed: cached node/token tree\n * first: flag to indicate whether we're in first parsing pass (used for resetting `pos` and `tok`)\n * last: flag to indicate whether we're in last parsing pass (used for resetting `pos` and `tok`)\n * stack: stack of unfinished \"atomic\" nodes\n */\nconst parse = (nodes, pos, tok, type, parent, parsed, first, last, stack) => {\n  const node = nodes[0];\n  if (!node) return null;\n\n  // end-case: last node was a unfinished \"atomic\" node, so pop it off the stack\n  if (last && stack.length === 1) {\n    stack.pop();\n  }\n\n  // no current node, so start a new one\n  if (!currentNode) {\n    currentNode = {\n      type: type || \"root\",\n      nodes: [],\n      parent: parent,\n      node: null,\n      props: {},\n      key: tok,\n      pos: pos\n    };\n    nodes.push(currentNode);\n  }\n\n  // this will be the parent node for the next node\n  currentNode.parent = parent;\n\n  // last property in chain\n  const last = currentNode.props[tok];\n\n  // current node becomes the new parent\n  currentNode.parent = node;\n\n  // current node becomes the last node in the list\n  if (last) {\n    last.next = node;\n    node.prev = last;\n  } else {\n    node.prev = undefined;\n  }\n\n  // push the current node onto the stack of atomic nodes\n  if (!last) {\n    stack.push(currentNode);\n  }\n\n  // each node has a type & a pos\n  currentNode.type = type;\n  currentNode.pos = pos;\n\n  // the token we're parsing\n  currentNode.tok = tok;\n\n  // properties for the new node\n  currentNode.props = node.props;\n\n  // push the new node onto the stack of nodes\n  node.nodes.push(currentNode);\n\n  // if this is the first node in our stack of nodes, start parsing an expression\n  if (parsed) {\n    parsed = false;\n    current = currentNode;\n    next();\n  }\n\n  // return what we've got\n  return currentNode;\n};\n\n// -----------------------------------------------------------------------------\n// next\n// -----------------------------------------------------------------------------\n\n/**\n * Reads the next token from the source file.\n *\n * Returns a token object.\n *\n * If we reached an EOF or found a syntax error, the next token will be `null`.\n */\nconst next = () => {\n  // get the next token\n  const tok = lex();\n\n  // uncomment this line to see all debugging info\n  // console.log(tok.type + \": \" + tok.value + \" pos: \" + tok.pos + \" line: \" + tok.line);\n\n  // skip whitespace\n  if (tok.type === lexer.TOKEN_WHITESPACE) {\n    skipWhitespace();\n    return;\n  }\n\n  // skip comments\n  if (tok.type === lexer.TOKEN_LINE_COMMENT) {\n    skipLineComment();\n    return;\n  }\n\n  // skip block comments\n  if (tok.type === lexer.TOKEN_BLOCK_COMMENT) {\n    skipBlockComment();\n    return;\n  }\n\n  // skip single line comments\n  if (tok.type === lexer.TOKEN_LINE_SINGLE_COMMENT) {\n    skipLineComment();\n    return;\n  }\n\n  // skip double line comments\n  if (tok.type === lexer.TOKEN_LINE_DOUBLE_COMMENT) {\n    skipBlockComment();\n    return;\n  }\n\n  // skip semicolons\n  if (tok.type === lexer.TOKEN_SEMICOLON) {\n    skipSemicolon();\n    return;\n  }\n\n  // skip double semicolons\n  if (tok.type === lexer.TOKEN_DOUBLE_SEMICOLON) {\n    skipSemicolon();\n    return;\n  }\n\n  // skip curly braces\n  if (tok.type === lexer.TOKEN_CURLY_BRACE) {\n    skipCurlyBrace();\n    return;\n  }\n\n  // skip double curly braces\n  if (tok.type === lexer.TOKEN_DOUBLE_CURLY_BRACE) {\n    skipCurlyBrace();\n    return;\n  }\n\n  // skip square brackets\n  if (tok.type === lexer.TOKEN_SQUARE_BRACKET) {\n    skipSquareBracket();\n    return;\n  }\n\n  // skip double square brackets\n  if (tok.type === lexer.TOKEN_DOUBLE_SQUARE_BRACKET) {\n    skipSquareBracket();\n    return;\n  }\n\n  // skip angle brackets\n  if (tok.type === lexer.TOKEN_ANGLE) {\n    skipAngleBracket();\n    return;\n  }\n\n  // skip angle brackets\n  if (tok.type === lexer.TOKEN_DOUBLE_ANGLE) {\n    skipAngleBracket();\n    return;\n  }\n\n  // skip square brackets\n  if (tok.type === lexer.TOKEN_BACKWARD_SLASH) {\n    skipBackwardSlash();\n    return;\n  }\n\n  // skip double backslashes\n  if (tok.type === lexer.TOKEN_DOUBLE_BACKSLASH) {\n    skipBackwardSlash();\n    return;\n  }\n\n  // skip backticks\n  if (tok.type === lexer.TOKEN_BACKTICK) {\n    skipBacktick();\n    return;\n  }\n\n  // skip dollar signs\n  if (tok.type === lexer.TOKEN_DOLLAR) {\n    skipDollarSign();\n    return;\n  }\n\n  // skip double dollar signs\n  if (tok.type === lexer.TOKEN_DOUBLE_DOLLAR) {\n    skipDollarSign();\n    return;\n  }\n\n  // skip parentheses\n  if (tok.type === lexer.TOKEN_PARENTHESES) {\n    skipParentheses();\n    return;\n  }\n\n  // skip double parentheses\n  if (tok.type === lexer.TOKEN_DOUBLE_PARENTHESES) {\n    skipParentheses();\n    return;\n  }\n\n  // skip square braces\n  if (tok.type === lexer.TOKEN_SQUARE_BRACKET) {\n    skipSquareBracket();\n    return;\n  }\n\n  // skip double square braces\n  if (tok.type === lexer.TOKEN_DOUBLE_SQUARE_BRACKET) {\n    skipSquareBracket();\n    return;\n  }\n\n  // skip curly braces\n  if (tok.type === lexer.TOKEN_CURLY_BRACE) {\n    skipCurlyBrace();\n    return;\n  }\n\n  // skip double curly braces\n  if (tok.type === lexer.TOKEN_DOUBLE_CURLY_BRACE) {\n    skipCurlyBrace();\n    return;\n  }\n\n  // skip square brackets\n  if (tok.type === lexer.TOKEN_SQUARE_BRACKET) {\n    skipSquareBracket();\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  return [xs[0] + derivative(xs.slice(1))];\n};\n\n/* Return sum of all elements in array.\n  >>> sum([1, 2, 3])\n  6\n  */\nconst sum = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/* Return product of all elements in array.\n  >>> product([1, 2, 3])\n  6\n  */\nconst product = (xs) => {\n  let product = 1;\n  for (let i = 0; i < xs.length; i++) {\n    product *= xs[i];\n  }\n  return product;\n};\n\n/* Return mean of all elements in array.\n  >>> mean([1, 2, 3])\n  2\n  */\nconst mean = (xs) => {\n  return sum(xs) / xs.length;\n};\n\n/* Return median of all elements in array.\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    return mean(xs);\n  }\n  const half = Math.floor((n - 1) / 2);\n  return mean(xs.slice(0, half)) + mean(xs.slice(half));\n};\n\n/* Return mode of all elements in array.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (xs) => {\n  const counts = {};\n  for (let i = 0; i < xs.length; i++) {\n    const x = xs[i];\n    if (counts[x]) {\n      counts[x]++;\n    } else {\n      counts[x] = 1;\n    }\n  }\n  const maxCount = max(counts);\n  const modes = [];\n  for (let i = 0; i < counts.length; i++) {\n    if (counts[i] === maxCount) {\n      modes.push(i);\n    }\n  }\n  return modes[0];\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stddev = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst variance = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return variance;\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDeviation = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDev = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return standard deviation of all elements in array.\n  >>> stddev([1, 2, 3])\n  1.5811388300841898\n  */\nconst stdDevP = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n/*\n  Write a function that takes in an array of integers and returns the sum of the squares of the integers in the array.\n  >>> squareSum([1,2,3,4,5])\n  25\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "<|endoftext|>/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  let digits = x.toString().split('');\n  if (shift > digits.length) return digits.reverse().join('');\n  for (let i = 0; i < shift; i++) digits = digits.reverse();\n  return digits.join('');\n};\n\n/*\n  Given a string, x, and a number y, return the string made by concatenating\n  the characters of x starting at index y with the characters of x.\n  >>> string_from_position('abc', 2, 3)\n  'bcd'\n  >>> string_from_position('abc', 2, 3)\n  'bcd'\n  >>> string_from_position('abc', 2, 4)\n  'bc'\n  >>> string_from_position('abc', 2, 5)\n  'bcd'\n  >>> string_from_position('abc', 2, 6)\n  'bc'\n  >>> string_from_position('abc', 2, 7)\n  'bcd'\n  >>> string_from_position('abc', 2, 8)\n  'bc'\n  >>> string_from_position('abc', 2, 9)\n  'bcd'\n  >>> string_from_position('abc', 2, 10)\n  'bc'\n  >>> string_from_position('abc', 2, 11)\n  'bcd'\n  >>> string_from_position('abc', 2, 12)\n  'bc'\n  >>> string_from_position('abc', 2, 13)\n  'bcd'\n  >>> string_from_position('abc', 2, 14)\n  'bc'\n  >>> string_from_position('abc', 2, 15)\n  'bcd'\n  >>> string_from_position('abc', 2, 16)\n  'bc'\n  >>> string_from_position('abc', 2, 17)\n  'bcd'\n  >>> string_from_position('abc', 2, 18)\n  'bc'\n  >>> string_from_position('abc', 2, 19)\n  'bcd'\n  >>> string_from_position('abc', 2, 20)\n  'bc'\n  >>> string_from_position('abc', 2, 21)\n  'bcd'\n  >>> string_from_position('abc', 2, 22)\n  'bc'\n  >>> string_from_position('abc', 2, 23)\n  'bcd'\n  >>> string_from_position('abc', 2, 24)\n  'bc'\n  >>> string_from_position('abc', 2, 25)\n  'bcd'\n  >>> string_from_position('abc', 2, 26)\n  'bc'\n  >>> string_from_position('abc', 2, 27)\n  'bcd'\n  >>> string_from_position('abc', 2, 28)\n  'bc'\n  >>> string_from_position('abc', 2, 29)\n  'bcd'\n  >>> string_from_position('abc', 2, 30)\n  'bc'\n  >>> string_from_position('abc', 2, 31)\n  'bcd'\n  >>> string_from_position('abc', 2, 32)\n  'bc'\n  >>> string_from_position('abc', 2, 33)\n  'bcd'\n  >>> string_from_position('abc', 2, 34)\n  'bc'\n  >>> string_from_position('abc', 2, 35)\n  'bcd'\n  >>> string_from_position('abc', 2, 36)\n  'bc'\n  >>> string_from_position('abc', 2, 37)\n  'bcd'\n  >>> string_from_position('abc', 2, 38)\n  'bc'\n  >>> string_from_position('abc', 2, 39)\n  'bcd'\n  >>> string_from_position('abc', 2, 40)\n  'bc'\n  >>> string_from_position('abc', 2, 41)\n  'bcd'\n  >>> string_from_position('abc', 2, 42)\n  'bc'\n  >>> string_from_position('abc', 2, 43)\n  'bcd'\n  >>> string_from_position('abc', 2, 44)\n  'bc'\n  >>> string_from_position('abc', 2, 45)\n  'bcd'\n  >>> string_from_position('abc', 2, 46)\n  'bc'\n  >>> string_from_position('abc', 2, 47)\n  'bcd'\n  >>> string_from_position('abc', 2, 48)\n  'bc'\n  >>> string_from_position('abc', 2, 49)\n  'bcd'\n  >>> string_from_position('abc', 2, 50)\n  'bc'\n  >>> string_from_position('abc', 2, 51)\n  'bcd'\n  >>> string_from_position('abc', 2, 52)\n  'bc'\n  >>> string_from_position('abc', 2, 53)\n  'bcd'\n  >>> string_from_position('abc', 2, 54)\n  'bc'\n  >>> string_from_position('abc', 2, 55)\n  'bcd'\n  >>> string_from_position('abc', 2, 56)\n  'bc'\n  >>> string_from_position('abc', 2, 57)\n  'bcd'\n  >>> string_from_position('abc', 2, 58)\n  'bc'\n  >>> string_from_position('abc', 2, 59)\n  'bcd'\n  >>> string_from_position('abc', 2, 60)\n  'bc'\n  >>> string_from_position('abc', 2, 61)\n  'bcd'\n  >>> string_from_position('abc', 2, 62)\n  'bc'\n  >>> string_from_position('abc', 2, 63)\n  'bcd'\n  >>> string_from_position('abc', 2, 64)\n  'bc'\n  >>> string_from_position('abc', 2, 65)\n  'bcd'\n  >>> string_from_position('abc', 2, 66)\n  'bc'\n  >>> string_from_position('abc', 2, 67)\n  'bcd'\n  >>> string_from_position('abc', 2, 68)\n  'bc'\n  >>> string_from_position('abc', 2, 69)\n  'bcd'\n  >>> string_from_position('abc', 2, 70)\n  'bc'\n  >>> string_from_position('abc', 2, 71)\n  'bcd'\n  >>> string_from_position('abc', 2, 72)\n  'bc'\n  >>> string_from_position('abc', 2, 73)\n  'bcd'\n  >>> string_from_position('abc', 2, 74)\n  'bc'\n  >>> string_from_position('abc', 2, 75)\n  'bcd'\n  >>> string_from_position('abc', 2, 76)\n  'bc'\n  >>> string_from_position('abc', 2, 77)\n  'bcd'\n  >>> string_from_position('abc', 2, 78)\n  'bc'\n  >>> string_from_position('abc', 2, 79)\n  'bcd'\n  >>> string_from_position('abc', 2, 80)\n  'bc'\n  >>> string_from_position('abc', 2, 81)\n  'bcd'\n  >>> string_from_position('abc', 2, 82)\n  'bc'\n  >>> string_from_position('abc', 2, 83)\n  'bcd'\n  >>> string_from_position('abc', 2, 84)\n  'bc'\n  >>> string_from_position('abc', 2, 85)\n  'bcd'\n  >>> string_from_position('abc', 2, 86)\n  'bc'\n  >>> string_from_position('abc', 2, 87)\n  'bcd'\n  >>> string_from_position('abc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char - 65;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 97 && char <= 122) {\n      sum += char - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char - 65;\n    }\n    if (char >= 97 && char <= 122) {\n      sum += char - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n    if (char >= 65 && char <= 90) {\n      sum += char - 65;\n    }\n    if (char >= 97 && char <= 122) {\n      sum += char - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n      total += apples;\n    } else if (s[i] === 'o') {\n      oranges++;\n      total += oranges;\n    } else if (s[i] ==='m') {\n      mango++;\n      total += mango;\n    }\n  }\n  return total - mango - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n      total += apples;\n    } else if (s[i] === 'o') {\n      oranges++;\n      total += oranges;\n    } else if (s[i] ==='m') {\n      mango++;\n      total += mango;\n    }\n  }\n  return total - mango - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n      total += apples;\n    } else if (s[i] === 'o') {\n      oranges++;\n      total += oranges;\n    } else if (s[i] ==='m') {\n      mango++;\n      total += mango;\n    }\n  }\n  return total - mango - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n      total += apples;\n    } else if (s[i] === 'o') {\n      oranges++;\n      total += oranges;\n    } else if (s[i] ==='m') {\n      mango++;\n      total += mango;\n    }\n  }\n  return total - mango - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n      total += apples;\n    } else if (s[i] === 'o') {\n      oranges++;\n      total += oranges;\n    } else if (s[i] ==='m') {\n      mango++;\n      total += mango;\n    }\n  }\n  return total - mango - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frui", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter((val) => val % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndexAndValue = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddsIndexAndValue };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndexAndValueIndex = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  if (oddValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex > -1? maxIndex : -1;\n};\n\n/*\n  You are given a list of integers representing a sequence of words. Write a function that returns a string\n  that represents this sequence. Words are separated by single spaces.\n  Examples:\n      sequence([1, 2, 3]) == \"1 2 3\"\n      sequence([1, 2, 3, 4, 5]) == \"1 2 3 4 5\"\n      sequence([1, 1, 1, 2, 2, 3]) == \"1 1 1 2 2 3\"\n      sequence([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4]) == \"1 1 1 2 2 3 3 3 4 4 4\"\n      sequence([5, 5, 4, 4, 4]) == \"5 4 4 4\"\n  */\nconst sequence = (lst) => {\n  let str = \"\";\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i] + \" \";\n  }\n  return str.trim();\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string that represents the\n  string after removing all vowels.\n  Examples:\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeVowels(\"hello\") == \"helo\"\n      removeV", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given a string, return a new string with each letter capitalized.\n  Capitalization only happens once, no matter how many times you call this function.\n\n  Examples:\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n  capitalize_letters(\"hello\") == \"Hello\"\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a >= b && a >= c && b >= c) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_2 = (a, b, c) => {\n  if (a >= b && a >= c && b >= c) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_3 = (a, b, c) => {\n  if (a >= b && a >= c && b >= c) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_4 = (a, b, c) => {\n  if (a >= b && a >= c && b >= c) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_5 = (a, b, c) => {\n  if (a >= b && a >= c && b >= c) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_6 = (a, b, c) => {\n  if (a >= b && a >= c && b >= c) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_7 = (a, b, c) => {\n  if (a >= b && a >= c && b >= c) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_8 = (a, b, c) => {\n  if (a >= b && a >= c && b >= c) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_9 = (a, b, c, d) => {\n  if (a >= b && a >= c && b >= c && d >= a) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_10 = (a, b, c, d, e) => {\n  if (a >= b && a >= c && b >= c && d >= a && e >= b) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_11 = (a, b, c, d, e, f) => {\n  if (a >= b && a >= c && b >= c && d >= a && e >= b && f >= d) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area_12 = (a, b, c, d, e, f, g) => {\n  if (a >= b && a >= c && b >= c && d >= a && e >= b && f >= d && g >= e) {\n    return Math.sqrt(a * b * c);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.max(...q);\n  return q.length === 0 || (maxSum === 0 && maxWeight === 0);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.max(...q);\n  return q.length === 0 || (maxSum === 0 && maxWeight === 0);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.max(...q);\n  return q.length === 0 || (maxSum === 0 && maxWeight === 0);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.max(...q);\n  return q.length === 0 || (maxSum === 0 && maxWeight === 0);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.max(...q);\n  return q.length === 0 || (maxSum === 0 && maxWeight === 0);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.max(...q);\n  return q.length === 0 || (maxSum === 0 && maxWeight === 0);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.max(...q);\n  return q.length === 0 || (maxSum === 0 && maxWeight === 0);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palin", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i];\n    for (let j = i; j > 0; j--) {\n      if (arr[j] < temp) {\n        temp = arr[j];\n      }\n    }\n    if (temp < min) {\n      min = temp;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of any subarray in arr. For example,\n  max_subarray([1,2,3,4,5,6,7]) == 7\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 15\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100\n  max_subarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1\n  return lst1.filter(x => lst2.indexOf(x) < 0)\n}\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is the multiplication of 5 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5 * 7\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is the multiplication of 7 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is the multiplication of 11 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is the multiplication of 13 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is the multiplication of 17 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is the multiplication of 19 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is the multiplication of 23 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is the multiplication of 29 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is the multiplication of 31 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is the multiplication of 37 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 8 === 0) return false;\n  if (n % 16 === 0) return false;\n  if (n % 32 === 0) return false;\n  if (n % 64 === 0) return false;\n  if (n % 128 === 0) return false;\n  if (n % 256 === 0) return false;\n  if (n % 512 === 0) return false;\n  if (n % 1024 === 0) return false;\n  if (n % 2048 === 0) return false;\n  if (n % 4096 === 0) return false;\n  if (n % 8192 === 0) return false;\n  if (n % 16384 === 0) return false;\n  if (n % 32768 === 0) return false;\n  if (n % 65536 === 0) return false;\n  if (n % 131072 === 0) return false;\n  if (n % 262144 === 0) return false;\n  if (n % 524288 === 0) return false;\n  if (n % 1048576 === 0) return false;\n  if (n % 2097152 === 0) return false;\n  if (n % 4194304 === 0) return false;\n  if (n % 8388608 === 0) return false;\n  if (n % 16777216 === 0) return false;\n  if (n % 33554432 === 0) return false;\n  if (n % 67108864 === 0) return false;\n  if (n % 134217728 === 0) return false;\n  if (n % 268435456 === 0) return false;\n  if (n % 536870912 === 0) return false;\n  if (n % 1073741824 === 0) return false;\n  if (n % 2147483648 === 0) return false;\n  if (n % 4294967296 === 0) return false;\n  if (n % 8589934592 === 0) return false;\n  if (n % 17179869184 === 0) return false;\n  if (n % 34359738368 === 0) return false;\n  if (n % 68719476736 === 0) return false;\n  if (n % 13743895347216 === 0) return false;\n  if (n % 27487790694432 === 0) return false;\n  if (n % 54975581388832 === 0) return false;\n  if (n % 1099511627776 === 0) return false;\n  if (n % 2199023255552 === 0) return false;\n  if (n % 4398046511104 === 0) return false;\n  if (n % 838860833179264 === 0) return false;\n  if (n % 167772169984 === 0) return false;\n  if (n % 335544357776 === 0) return false;\n  if (n % 671088665608 === 0) return false;\n  if (n % 134217727872 === 0) return false;\n  if (n % 2684354552688 === 0) return false;\n  if (n % 53687091296 === 0) return false;\n  if (n % 107374182432 === 0) return false;\n  if (n % 2147483648 === 0) return false;\n  if (n % 4294967296 === 0) return false;\n  if (n % 8589934592 === 0) return false;\n  if (n % 171798691840 === 0) return false;\n  if (n % 34359738368 === 0) return false;\n  if (n % 68719476736 === 0) return false;\n  if (n % 137438953472 === 0) return false;\n  if (n % 274877906944 === 0) return false;\n  if (n % 549755813888 === 0) return false;\n  if (n % 1099511627776 === 0) return false;\n  if (n % 2199023255552 === 0) return false;\n  if (n % 4398046511104 === 0) return false;\n  if (n % 838860833179264 === 0) return false;\n  if (n % 167772169984 === 0) return false;\n  if (n % 335544357776 === 0) return false;\n  if (n % 671088665608 === 0) return false;\n  if (n % 134217727872 === 0) return false;\n  if (n % 2684354552688 === 0) return false;\n  if (n % 53687091296 === 0) return false;\n  if (n % 107374182432 === 0) return false;\n  if (n % 2147483648 === 0) return false;\n  if (n % 4294967296 === 0) return false;\n  if (n % 8589934592 === 0) return false;\n  if (n % 171798691840 === 0) return false;\n  if (n % 34359738368 === 0) return false;\n  if (n % 68719476736 === 0) return false;\n  if (n % 137438953472 === 0) return false;\n  if (n % 274877906944 === 0) return false;\n  if (n % 549755813888 === 0) return false;\n  if (n % 1099511627776 === 0) return false;\n  if (n % 2199023255552 === 0) return false;\n  if (n % 4398046511104 === 0) return false;\n  if (n % 838860833179264 === 0) return false;\n  if (n % 167772169984 === 0) return false;\n  if (n % 335544357776 === 0) return false;\n  if (n % 671088665608 === 0) return false;\n  if (n % 134217727872 === 0) return false;\n  if (n % 2684354552688 === 0) return false;\n  if (n % 53687091296 === 0) return false;\n  if (n % 107374182432 === 0) return false;\n  if (n % 2147483648 === 0) return false;\n  if (n % 4294967296 === 0) return false;\n  if (n % 8589934592 === 0) return false;\n  if (n % 171798691840 === 0) return false;\n  if (n % 34359738368 === 0) return false;\n  if (n % 68719476736 === 0) return false;\n  if (n % 137438953472 === 0) return false;\n  if (n % 274877906944 === 0) return false;\n  if (n % 549755813888 === 0) return false;\n  if (n % 1099511627776 === 0) return false;\n  if (n % 2199023255552 === 0) return false;\n  if (n % 4398046511104 === 0) return false;\n  if (n % 838860833179264 === 0) return false;\n  if (n % 167772169984 === 0) return false;\n  if (n % 335544357776 === 0) return false;\n  if (n % 671088665608 === 0) return false;\n  if (n % 134217727872 === 0) return false;\n  if (n % 2684354552688 === 0) return false;\n  if (n % 53687091296 === 0) return false;\n  if (n % 107374182432 === 0) return false;\n  if (n % 2147483648 === 0) return false;\n  if (n % 4294967296 === 0) return false;\n  if (n % 8589934592 === 0) return false;\n  if (n % 171798691840 === 0) return false;\n  if (n % 34359738368 === 0) return false;\n  if (n % 68719476736 === 0) return false;\n  if (n % 137438953472 === 0) return false;\n  if (n % 274877906944 === 0) return false;\n  if (n % 549755813", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1!== 0) return false;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let hex_count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hex_count++;\n    }\n  }\n  return hex_count;\n};\n\n/*You have been tasked to write a function that receives a hexadecimal number\n  as a string and counts the number of hexadecimal digits that are primes\n  (prime number=== or a prime=== is a natural number greater than 1 that is not a product\n  of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key2 = (num) => {\n  let hex_count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hex_count++;\n    }\n  }\n  return hex_count;\n};\n\n/*You have been tasked to write a function that receives a hexadecimal number\n  as a string and counts the number of hexadecimal digits that are primes\n  (prime number=== or a prime=== is a natural number greater than 1 that is not a product\n  of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key3 = (num) => {\n  let hex_count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hex_count++;\n    }\n  }\n  return hex_count;\n};\n\n/*You have been tasked to write a function that receives a hexadecimal number\n  as a string and counts the number of hexadecimal digits that are primes\n  (prime number=== or a prime=== is a natural number greater than 1 that is not a product\n  of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key4 = (num) => {\n  let hex_count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hex_count++;\n    }\n  }\n  return hex_count;\n};\n\n/*You have been tasked to write a function that receives a hexadecimal number\n  as a string and counts the number of hexadecimal digits that are primes\n  (prime number=== or a prime=== is a natural number greater than 1 that is not a product\n  of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key5 = (num) => {\n  let hex_count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hex_count++;\n    }\n  }\n  return hex_count;\n};\n\n/*You have been tasked to write a function that receives a hexadecimal number\n  as a string and counts the number of hexadecimal digits that are primes\n  (prime number=== or a prime=== is a natural number greater than 1 that is not a product\n  of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    binary += decimalString[i] === '0'? '0' : '1';\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Write a function that will convert a binary number to a decimal number. The binary number\n  will be given as a string. The function should return the decimal number as a string.\n\n  Examples:\n  binary_to_decimal(\"100000\") returns 15\n  binary_to_decimal(\"111111\") returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = 0;\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    decimal += parseInt(binaryString[i]) * (Math.pow(2, i));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to a binary number. The decimal number\n  will be given as a string. The function should return the binary number as a string.\n\n  Examples:\n  decimal_to_binary(\"15\") returns \"100000\"\n  decimal_to_binary(\"32\") returns \"111111\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    binary += decimalString[i] === '0'? '0' : '1';\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a decimal number to a hexadecimal number. The decimal number\n  will be given as a string. The function should return the hexadecimal number as a string.\n\n  Examples:\n  decimal_to_hexadecimal(\"15\") returns \"f1\"\n  decimal_to_hexadecimal(\"32\") returns \"ff\"\n  */\nconst decimal_to_hexadecimal = (decimal) => {\n  let hexadecimal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    hexadecimal += decimalString[i] === '0'? '0' : decimalString[i];\n  }\n  return '0x' + hexadecimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a decimal number. The hexadecimal number\n  will be given as a string. The function should return the decimal number as a string.\n\n  Examples:\n  hexadecimal_to_decimal(\"0xf1\") returns 15\n  hexadecimal_to_decimal(\"0xff\") returns 32\n  */\nconst hexadecimal_to_decimal = (hexadecimal) => {\n  let decimal = 0;\n  let hexadecimalString = hexadecimal.toString();\n  for (let i = 0; i < hexadecimalString.length; i++) {\n    decimal += parseInt(hexadecimalString[i]) * (Math.pow(2, i));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number\n  will be given as a string. The function should return the hexadecimal number as a string.\n\n  Examples:\n  binary_to_hexadecimal(\"100000\") returns \"f1\"\n  binary_to_hexadecimal(\"111111\") returns \"ff\"\n  */\nconst binary_to_hexadecimal = (binary) => {\n  let hexadecimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    hexadecimal += binaryString[i] === '0'? '0' : binaryString[i];\n  }\n  return '0x' + hexadecimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The hexadecimal number\n  will be given as a string. The function should return the binary number as a string.\n\n  Examples:\n  hexadecimal_to_binary(\"0xf1\") returns \"100000\"\n  hexadecimal_to_binary(\"0xff\") returns \"111111\"\n  */\nconst hexadecimal_to_binary = (hexadecimal) => {\n  let binary = '';\n  let hexadecimalString = hexadecimal.toString();\n  for (let i = 0; i < hexadecimalString.length; i++) {\n    binary += hexadecimalString[i] === '0'? '0' : hexadecimalString[i];\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number\n  will be given as a string. The function should return the hexadecimal number as a string.\n\n  Examples:\n  binary_to_hexadecimal(\"100000\") returns \"f1\"\n  binary_to_hexadecimal(\"111111\") returns \"ff\"\n  */\nconst binary_to_hexadecimal = (binary) => {\n  let hexadecimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    hexadecimal += binaryString[i] === '0'? '0' : binaryString[i];\n  }\n  return '0x' + hexadecimal;\n};\n\n/*\n  Write a function that will convert a decimal number to a binary number. The decimal number\n  will be given as a string. The function should return the binary number as a string.\n\n  Examples:\n  decimal_to_octal(\"15\") returns \"1100001\"\n  decimal_to_octal(\"32\") returns \"1111111\"\n  */\nconst decimal_to_octal = (decimal) => {\n  let octal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    octal += decimalString[i] === '0'? '0' : decimalString[i];\n  }\n  return '0' + octal;\n};\n\n/*\n  Write a function that will convert a octal number to a decimal number. The octal number\n  will be given as a string. The function should return the decimal number as a string.\n\n  Examples:\n  octal_to_decimal(\"01100001\") returns 15\n  octal_to_decimal(\"01111111\") returns 32\n  */\nconst octal_to_decimal = (octal) => {\n  let decimal = 0;\n  let octalString = octal.toString();\n  for (let i = 0; i < octalString.length; i++) {\n    decimal += parseInt(octalString[i]) * (Math.pow(2, i));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a octal number to a binary number. The octal number\n  will be given as a string. The function should return the binary number as a string.\n\n  Examples:\n  octal_to_binary(\"01100001\") returns \"1100001\"\n  octal_to_binary(\"01111111\") returns \"1111111\"\n  */\nconst octal_to_binary = (octal) => {\n  let binary = '';\n  let octalString = octal.toString();\n  for (let i = 0; i < octalString.length; i++) {\n    binary += octalString[i] === '0'? '0' : octalString[i];\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a decimal number to a octal number. The decimal number\n  will be given as a string. The function should return the octal number as a string.\n\n  Examples:\n  decimal_to_octal(\"15\") returns \"1100001\"\n  decimal_to_octal(\"32\") returns \"1111111\"\n  */\nconst decimal_to_octal = (decimal) => {\n  let octal = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    octal += decimalString[i] === '0'? '0' : decimalString[i];\n  }\n  return octal;\n};\n\n/*\n  Write a function that will convert a octal number to a binary number. The octal number\n  will be given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, [0, 1]);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_zero([])\n  (0, 0)\n  >>> sum_product_with_zero([1, 2, 3, 4])\n  (0, 0)\n  */\nconst sum_product_with_zero = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 0);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, []);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_one([])\n  (0, 1)\n  >>> sum_product_with_one([1, 2, 3, 4])\n  (1, 4)\n  */\nconst sum_product_with_one = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, [1, 1]);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_one_and_zero([])\n  (0, 0)\n  >>> sum_product_with_one_and_zero([1, 2, 3, 4])\n  (0, 0)\n  */\nconst sum_product_with_one_and_zero = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 0);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, []);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_one_and_one([])\n  (0, 1)\n  >>> sum_product_with_one_and_one([1, 2, 3, 4])\n  (1, 4)\n  */\nconst sum_product_with_one_and_one = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, [1, 1]);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_one_and_two([])\n  (0, 0)\n  >>> sum_product_with_one_and_two([1, 2, 3, 4])\n  (0, 0)\n  */\nconst sum_product_with_one_and_two = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 0);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, []);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_one_and_three([])\n  (0, 0)\n  >>> sum_product_with_one_and_three([1, 2, 3, 4])\n  (0, 0)\n  */\nconst sum_product_with_one_and_three = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 0);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, []);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_one_and_four([])\n  (0, 0)\n  >>> sum_product_with_one_and_four([1, 2, 3, 4])\n  (0, 0)\n  */\nconst sum_product_with_one_and_four = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 0);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, []);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_one_and_five([])\n  (0, 0)\n  >>> sum_product_with_one_and_five([1, 2, 3, 4])\n  (0, 0)\n  */\nconst sum_product_with_one_and_five = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 0);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, []);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_one_and_six([])\n  (0, 0)\n  >>> sum_product_with_one_and_six([1, 2, 3, 4])\n  (0, 0)\n  */\nconst sum_product_with_one_and_six = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 0);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, []);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_one_and_seven([])\n  (0, 0)\n  >>> sum_product_with_one_and_seven([1, 2, 3, 4])\n  (0, 0)\n  */\nconst sum_product_with_one_and_seven = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 0);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, []);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_with_one_and_eight([])\n  (0, 0)\n  >>> sum_product_with_one_and_eight([1, 2, 3, 4])\n  (0, 0)\n  */\nconst sum_product_with_one_and_eight = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 0);\n  }\n  const [sum, product] = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product * number];\n  }, []);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_length = grades.length\n  const letter_grades = []\n  for (let i = 0; i < grades_length; i++) {\n    const gpa = grades[i]\n    const letter_grade = gpa_letter_grade(gpa)\n    letter_grades.push(letter_grade)\n  }\n  return letter_grades\n}\n\n/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst gpa_letter_grade = (gpa) => {\n  if (gpa >= 3.7) {\n    return 'A+'\n  } else if (gpa >= 3.3) {\n    return 'A'\n  } else if (gpa >= 3) {\n    return 'A-'\n  } else if (gpa >= 2.7) {\n    return 'B+'\n  } else if (gpa >= 2.3) {\n    return 'B'\n  } else if (gpa >= 2) {\n    return 'B-'\n  } else if (gpa >= 1.7) {\n    return 'C+'\n  } else if (gpa >= 1.3) {\n    return 'C'\n  } else if (gpa >= 1) {\n    return 'C-'\n  } else if (gpa >= 0.7) {\n    return 'D+'\n  } else if (gpa >= 0) {\n    return 'D'\n  } else if (gpa < 0) {\n    return 'D-'\n  } else if (gpa < 0) {\n    return 'E'\n  }\n}\n\n/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst gpa_letter_grade = (gpa) => {\n  if (gpa >= 3.7) {\n    return 'A+'\n  } else if (gpa >= 3.3) {\n    return 'A'\n  } else if (gpa >= 3) {\n    return 'A-'\n  } else if (gpa >= 2.7) {\n    return 'B+'\n  } else if (gpa >= 2.3) {\n    return 'B'\n  } else if (gpa >= 2) {\n    return 'B-'\n  } else if (gpa >= 1.7) {\n    return 'C+'\n  } else if (gpa >= 1.3) {\n    return 'C'\n  } else if (gpa >= 1) {\n    return 'C-'\n  } else if (gpa >= 0.7) {\n    return 'D+'\n  } else if (gpa >= 0) {\n    return 'D'\n  } else if (gpa < 0) {\n    return 'D-'\n  } else if (gpa < 0) {\n    return 'E'\n  }\n}\n\n/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst gpa_letter_grade = (gpa) => {\n  if (gpa >= 3.7) {\n    return 'A+'\n  } else if (gpa >= 3.3) {\n    return 'A'\n  } else if (gpa >= 3) {\n    return 'A-'\n  } else if (gpa >= 2.7) {\n    return 'B+'\n  } else if (gpa >= 2.3) {\n    return 'B'\n  } else if (gpa >= 2) {\n    return 'B-'\n  } else if (gpa >= 1.7) {\n    return 'C+'\n  } else if (gpa >= 1.3) {\n    return 'C'\n  } else if (gpa >= 1) {\n    return 'C-'\n  } else if (gpa >= 0.7) {\n    return 'D+'\n  } else if (gpa >= 0) {\n    return 'D'\n  } else if (gpa < 0) {\n    return 'D-'\n  } else if (gpa < 0) {\n    return 'E'\n  }\n}\n\n/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello World!') == false\n  is_alpha_only('kittens') == false\n  */\nconst is_alpha_only = (string) => {\n  let alpha = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      alpha = false;\n    }\n  }\n  return alpha;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_alpha_only('Hello') == true\n  is_alpha_only('Hello World') == false\n  is_alpha_only('Hello ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 1 && end % 10 === 1) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_2 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_3 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_4 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_5 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_6 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_7 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_8 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_9 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_10 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_11 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_12 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_13 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_14 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_15 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_16 = (n) => {\n  let count = 0;\n  let start = 0;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 0 && end % 10 === 0) {\n      count++;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"6\".\n      For N = 147, the output should be \"12\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4]\n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6]\n  */\nconst removeOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst removeEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOddEven = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  const re = new RegExp(/\\s+/g);\n  const words = s.split(re);\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = '';\n  }\n  return newWords.sort().join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'olleh'\n  anti_shuffle('Hello World!!!') returns 'World!!!'\n  */\nconst anti_shuffle_reverse = (s) => {\n  const re = new RegExp(/\\s+/g);\n  const words = s.split(re);\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = '';\n  }\n  return newWords.sort().reverse().join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_reverse_ascii = (s) => {\n  const re = new RegExp(/\\s+/g);\n  const words = s.split(re);\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = '';\n  }\n  return newWords.sort((a, b) => {\n    const aChar = a.charCodeAt(0);\n    const bChar = b.charCodeAt(0);\n    return aChar > bChar? 1 : aChar < bChar? -1 : 0;\n  }).join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'olleh'\n  anti_shuffle('Hello World!!!') returns 'World!!!'\n  */\nconst anti_shuffle_reverse_ascii_reverse = (s) => {\n  const re = new RegExp(/\\s+/g);\n  const words = s.split(re);\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = '';\n  }\n  return newWords.sort((a, b) => {\n    const aChar = a.charCodeAt(0);\n    const bChar = b.charCodeAt(0);\n    return aChar > bChar? 1 : aChar < bChar? -1 : 0;\n  }).reverse().join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_reverse_ascii_reverse_ascii = (s) => {\n  const re = new RegExp(/\\s+/g);\n  const words = s.split(re);\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = '';\n  }\n  return newWords.sort((a, b) => {\n    const aChar = a.charCodeAt(0);\n    const bChar = b.charCodeAt(0);\n    return aChar > bChar? 1 : aChar < bChar? -1 : 0;\n  }).reverse().sort((a, b) => {\n    const aChar = a.charCodeAt(0);\n    const bChar = b.charCodeAt(0);\n    return aChar > bChar? 1 : aChar < bChar? -1 : 0;\n  }).join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'olleh'\n  anti_shuffle('Hello World!!!') returns 'World!!!'\n  */\nconst anti_shuffle_reverse_ascii_reverse_ascii_reverse = (s) => {\n  const re = new RegExp(/\\s+/g);\n  const words = s.split(re);\n  const newWords = [];\n  let newWord = '';\n  for (let i = 0; i < words.length; i++) {\n    newWord += words[i];\n    newWords.push(newWord);\n    newWord = '';\n  }\n  return newWords.sort((a, b) => {\n    const aChar = a.charCodeAt(0);\n    const bChar = b.charCodeAt(0);\n    return aChar > bChar? 1 : aChar < bChar? -1 : 0;\n  }).reverse().sort((a, b) => {\n    const aChar = a.charCodeAt(0);\n    const bChar = b.charCodeAt(0);\n    return aChar > bChar? 1 : aChar < bChar? -1 : 0;\n  }).reverse().sort((a, b) => {\n    const aChar = a.charCodeAt(0);\n    const bChar = b.charCodeAt(0);\n    return aChar > bChar? 1 : aChar < bChar? -1 : 0;\n  }).join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  \n  while (row < lst.length) {\n    if (lst[row].indexOf(x)!== -1) {\n      result.push([row, col]);\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  }\n  \n  return result.sort((a, b) => b[1] - a[1]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  get_column([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  get_column([], 1) == []\n  get_column([[], [1], [1, 2, 3]], 3) == [(2, 1), (3, 2)]\n  */\nconst get_column = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  \n  while (col < lst[0].length) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  }\n  \n  return result.sort((a, b) => a[1] - b[1]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  get_diagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  get_diagonal([], 1) == []\n  get_diagonal([[], [1], [1, 2, 3]], 3) == [(2, 1), (3, 2)]\n  */\nconst get_diagonal = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  \n  while (col < lst[0].length) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  }\n  \n  return result.sort((a, b) => a[1] - b[1]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  get_diagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  get_diagonal([], 1) == []\n  get_diagonal([[], [1], [1, 2, 3]], 3) == [(2, 1), (3, 2)]\n  */\nconst get_diagonal = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  \n  while (col < lst[0].length) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  }\n  \n  return result.sort((a, b) => a[1] - b[1]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  get_diagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  get_diagonal([], 1) == []\n  get_diagonal([[], [1], [1, 2, 3]], 3) == [(2, 1), (3, 2)]\n  */\nconst get_diagonal = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  \n  while (col < lst[0].length) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  }\n  \n  return result.sort((a, b) => a[1] - b[1]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  get_diagonal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 2), (5, 3)]\n  get_diagonal([], 1) == []\n  get_diagonal([[], [1], [1, 2, 3]], 3) == [(2, 1), (3, 2)]\n  */\nconst get_diagonal = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  \n  while (col < lst[0].length) {\n    if (lst[row][col] === x) {\n      result.push([row, col]);\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  }\n  \n  return result.sort((a, b) => a[1] - b[1]);\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const newArray = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    newArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_desc([]) => []\n  * sort_array_desc([5]) => [5]\n  * sort_array_desc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sort_array_desc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_desc = (array) => {\n  const newArray = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    newArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_asc([]) => []\n  * sort_array_asc([5]) => [5]\n  * sort_array_asc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array_asc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_asc = (array) => {\n  const newArray = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    newArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_desc_array([]) => []\n  * sort_array_desc_array([5]) => [5]\n  * sort_array_desc_array([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sort_array_desc_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_desc_array = (array) => {\n  const newArray = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    newArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_asc_array([]) => []\n  * sort_array_asc_array([5]) => [5]\n  * sort_array_asc_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array_asc_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_asc_array = (array) => {\n  const newArray = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    newArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_desc_array([]) => []\n  * sort_array_desc_array([5]) => [5]\n  * sort_array_desc_array([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sort_array_desc_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_desc_array_desc = (array) => {\n  const newArray = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    newArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_asc_array([]) => []\n  * sort_array_asc_array([5]) => [5]\n  * sort_array_asc_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array_asc_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_asc_array_asc = (array) => {\n  const newArray = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    newArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_desc_array([]) => []\n  * sort_array_desc_array([5]) => [5]\n  * sort_array_desc_array([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sort_array_desc_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_desc_array_desc = (array) => {\n  const newArray = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    newArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_asc_array([]) => []\n  * sort_array_asc_array([5]) => [5]\n  * sort_array_asc_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array_asc_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_asc_array_asc = (array) => {\n  const newArray = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    newArray.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_desc_array([]) => []\n  * sort_array_desc_array([5]) => [5]\n  * sort_array_desc_array([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sort_array_desc_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let encrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    encrypted += rotatedAlphabet.indexOf(s.charAt(i)) + 2;\n  }\n  return encrypted;\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('ix') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let decrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    decrypted += rotatedAlphabet.indexOf(s.charAt(i)) - 2;\n  }\n  return decrypted;\n};\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  rotate('hi') returns 'ijk'\n  rotate('asdfghjkl') returns 'gfedcba'\n  rotate('gf') returns 'edcba'\n  rotate('et') returns 'gfedcba'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    rotated += rotatedAlphabet.indexOf(s.charAt(i)) + 2;\n  }\n  return rotated;\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('ijk') returns 'hi'\n  decrypt('gfedcba') returns 'asdfghjkl'\n  decrypt('edcba') returns 'gf'\n  decrypt('gfedcba') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let decrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    decrypted += rotatedAlphabet.indexOf(s.charAt(i)) - 2;\n  }\n  return decrypted;\n};\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  rotate('hi') returns 'ijk'\n  rotate('asdfghjkl') returns 'gfedcba'\n  rotate('gf') returns 'edcba'\n  rotate('et') returns 'gfedcba'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    rotated += rotatedAlphabet.indexOf(s.charAt(i)) + 2;\n  }\n  return rotated;\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('ijk') returns 'hi'\n  decrypt('gfedcba') returns 'asdfghjkl'\n  decrypt('edcba') returns 'gf'\n  decrypt('gfedcba') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let decrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    decrypted += rotatedAlphabet.indexOf(s.charAt(i)) - 2;\n  }\n  return decrypted;\n};\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  rotate('hi') returns 'ijk'\n  rotate('asdfghjkl') returns 'gfedcba'\n  rotate('gf') returns 'edcba'\n  rotate('et') returns 'gfedcba'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let rotated = '';\n  for (let i = 0; i < s.length; i += 1) {\n    rotated += rotatedAlphabet.indexOf(s.charAt(i)) + 2;\n  }\n  return rotated;\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('ijk') returns 'hi'\n  decrypt('gfedcba') returns 'asdfghjkl'\n  decrypt('edcba') returns 'gf'\n  decrypt('gfedcba') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let decrypted = '';\n  for (let i = 0; i < s.length; i += 1) {\n    decrypted += rotatedAlphabet.indexOf(s.charAt(i)) - 2;\n  }\n  return decrypted;\n};\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  rotate('hi') returns 'ijk'\n  rotate('asdfghjkl') returns 'gfedcba'\n  rotate('gf') returns 'edcba'\n  rotate('et') returns 'gfedcba'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const result = [];\n  let max = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] > max) {\n      max = numbers[index];\n    }\n    result.push(max);\n    index++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_min = (numbers) => {\n  const result = [];\n  let min = numbers[0];\n  let index = 0;\n  while (index < numbers.length) {\n    if (numbers[index] < min) {\n      min = numbers[index];\n    }\n    result.push(min);\n    index++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 6]\n  */\nconst rolling_sum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    sum += numbers[index];\n    result.push(sum);\n    index++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolling_average([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rolling_average = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    sum += numbers[index];\n    index++;\n  }\n  return sum / numbers.length;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_std([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.4142135623730951]\n  */\nconst rolling_std = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    sum += Math.pow(numbers[index] - rolling_average(numbers), 2);\n    index++;\n  }\n  return Math.sqrt(sum / numbers.length);\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.2903225806451613]\n  */\nconst rolling_variance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let index = 0;\n  while (index < numbers.length) {\n    sum += Math.pow(numbers[index] - rolling_average(numbers), 2);\n    index++;\n  }\n  return sum / numbers.length;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    const mid = Math.floor(index / 2);\n    if (numbers[index] > numbers[mid]) {\n      result.push(numbers[index]);\n      index = mid;\n    } else {\n      result.push(numbers[mid]);\n      index = mid + 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    const mid = Math.floor(index / 2);\n    if (numbers[index] > numbers[mid]) {\n      result.push(numbers[index]);\n      index = mid;\n    } else {\n      result.push(numbers[mid]);\n      index = mid + 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.2903225806451613]\n  */\nconst rolling_variance = (numbers) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    const mid = Math.floor(index / 2);\n    if (numbers[index] > numbers[mid]) {\n      result.push(numbers[index]);\n      index = mid;\n    } else {\n      result.push(numbers[mid]);\n      index = mid + 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_std([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.4142135623730951]\n  */\nconst rolling_std = (numbers) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    const mid = Math.floor(index / 2);\n    if (numbers[index] > numbers[mid]) {\n      result.push(numbers[index]);\n      index = mid;\n    } else {\n      result.push(numbers[mid]);\n      index = mid + 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.2903225806451613]\n  */\nconst rolling_variance = (numbers) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    const mid = Math.floor(index / 2);\n    if (numbers[index] > numbers[mid]) {\n      result.push(numbers[index]);\n      index = mid;\n    } else {\n      result.push(numbers[mid]);\n      index = mid + 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    const mid = Math.floor(index / 2);\n    if (numbers[index] > numbers[mid]) {\n      result.push(numbers[index]);\n      index = mid;\n    } else {\n      result.push(numbers[mid]);\n      index = mid + 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    const mid = Math.floor(index / 2);\n    if (numbers[index] > numbers[mid]) {\n      result.push(numbers[index]);\n      index = mid;\n    } else {\n      result.push(numbers[mid]);\n      index = mid + 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.2903225806451613]\n  */\nconst rolling_variance = (numbers) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    const mid = Math.floor(index / 2);\n    if (numbers[index] > numbers[mid]) {\n      result.push(numbers[index]);\n      index = mid;\n    } else {\n      result.push(numbers[mid]);\n      index = mid + 1;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  if (lst.length < 2) {\n    return null;\n  }\n  const [smallest, secondSmallest] = lst;\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers. Your task is to find the sum of all elements in the list.\n  \n  sum([1, 2, 3, 4, 5]) == 15\n  sum([5, 1, 4, 3, 2]) == 10\n  sum([]) == 0\n  sum([1, 1]) == 0\n  */\nconst sum = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  You are given a list of integers. Your task is to find the product of all elements in the list.\n  \n  product([1, 2, 3, 4, 5]) == 120\n  product([5, 1, 4, 3, 2]) == 120\n  product([]) == 1\n  product([1, 1]) == 1\n  */\nconst product = (lst) => {\n  if (lst.length === 0) {\n    return 1;\n  }\n  return lst.reduce((acc, val) => acc * val, 1);\n};\n\n/*\n  You are given a list of integers. Your task is to find the largest element in the list.\n  \n  max([1, 2, 3, 4, 5]) == 5\n  max([5, 1, 4, 3, 2]) == 5\n  max([]) == null\n  max([1, 1]) == null\n  */\nconst max = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  return Math.max(...lst);\n};\n\n/*\n  You are given a list of integers. Your task is to find the smallest element in the list.\n  \n  min([1, 2, 3, 4, 5]) == 1\n  min([5, 1, 4, 3, 2]) == 1\n  min([]) == null\n  min([1, 1]) == null\n  */\nconst min = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  return Math.min(...lst);\n};\n\n/*\n  You are given a list of integers. Your task is to find the sum of all even elements in the list.\n  \n  sumEven([1, 2, 3, 4, 5]) == 6\n  sumEven([5, 1, 4, 3, 2]) == 10\n  sumEven([]) == 0\n  sumEven([1, 1]) == 0\n  */\nconst sumEven = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  You are given a list of integers. Your task is to find the product of all even elements in the list.\n  \n  productEven([1, 2, 3, 4, 5]) == 120\n  productEven([5, 1, 4, 3, 2]) == 120\n  productEven([]) == 1\n  productEven([1, 1]) == 1\n  */\nconst productEven = (lst) => {\n  if (lst.length === 0) {\n    return 1;\n  }\n  return lst.reduce((acc, val) => acc * val, 1);\n};\n\n/*\n  You are given a list of integers. Your task is to find the largest even element in the list.\n  \n  maxEven([1, 2, 3, 4, 5]) == 5\n  maxEven([5, 1, 4, 3, 2]) == 5\n  maxEven([]) == null\n  maxEven([1, 1]) == null\n  */\nconst maxEven = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  return Math.max(...lst.filter((val) => val % 2 === 0));\n};\n\n/*\n  You are given a list of integers. Your task is to find the smallest even element in the list.\n  \n  minEven([1, 2, 3, 4, 5]) == 1\n  minEven([5, 1, 4, 3, 2]) == 1\n  minEven([]) == null\n  minEven([1, 1]) == null\n  */\nconst minEven = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  return Math.min(...lst.filter((val) => val % 2 === 0));\n};\n\n/*\n  You are given a list of integers. Your task is to find the sum of all odd elements in the list.\n  \n  sumOdd([1, 2, 3, 4, 5]) == 3\n  sumOdd([5, 1, 4, 3, 2]) == 6\n  sumOdd([]) == 0\n  sumOdd([1, 1]) == 0\n  */\nconst sumOdd = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  You are given a list of integers. Your task is to find the product of all odd elements in the list.\n  \n  productOdd([1, 2, 3, 4, 5]) == 120\n  productOdd([5, 1, 4, 3, 2]) == 120\n  productOdd([]) == 1\n  productOdd([1, 1]) == 1\n  */\nconst productOdd = (lst) => {\n  if (lst.length === 0) {\n    return 1;\n  }\n  return lst.reduce((acc, val) => acc * val, 1);\n};\n\n/*\n  You are given a list of integers. Your task is to find the largest odd element in the list.\n  \n  maxOdd([1, 2, 3, 4, 5]) == 3\n  maxOdd([5, 1, 4, 3, 2]) == 3\n  maxOdd([]) == null\n  maxOdd([1, 1]) == null\n  */\nconst maxOdd = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  return Math.max(...lst.filter((val) => val % 2 === 1));\n};\n\n/*\n  You are given a list of integers. Your task is to find the smallest odd element in the list.\n  \n  minOdd([1, 2, 3, 4, 5]) == 1\n  minOdd([5, 1, 4, 3, 2]) == 1\n  minOdd([]) == null\n  minOdd([1, 1]) == null\n  */\nconst minOdd = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  return Math.min(...lst.filter((val) => val % 2 === 1));\n};\n\n/*\n  You are given a list of integers. Your task is to find the sum of all elements in the list.\n  \n  sum([1, 2, 3, 4, 5]) == 15\n  sum([5, 1, 4, 3, 2]) == 10\n  sum([]) == 0\n  sum([1, 1]) == 0\n  */\nconst sum = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  You are given a list of integers. Your task is to find the product of all elements in the list.\n  \n  product([1, 2, 3, 4, 5]) == 120\n  product([5, 1, 4, 3, 2]) == 120\n  product([]) == 1\n  product([1, 1]) == 1\n  */\nconst product = (lst) => {\n  if (lst.length === 0) {\n    return 1;\n  }\n  return lst.reduce((acc, val) => acc * val, 1);\n};\n\n/*\n  You are given a list of integers. Your task is to find the largest element in the list.\n  \n  max([1, 2, 3, 4, 5]) == 5\n  max([5, 1, 4, 3, 2]) == 5\n  max([]) == null\n  max([1, 1]) == null\n  */\nconst max = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  return Math.max(...lst);\n};\n\n/*\n  You are given a list of integers. Your task is to find the smallest element in the list.\n  \n  min([1, 2, 3, 4, 5]) == 1\n  min([5, 1, 4, 3, 2]) == 1\n  min([]) == null\n  min([1, 1]) == null\n  */\nconst min = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  return Math.min(...lst);\n};\n\n/*\n  You are given a list of integers. Your task is to find the sum of all even elements in the list.\n  \n  sumEven([1, 2, 3, 4, 5]) == 6\n  sumEven([5, 1, 4, 3, 2]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of sadness. A sadness is a sentence that starts with the word \"U\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_sad(\"Hello world\")\n  0\n  >>> is_sad(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_sad = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of anger. An anger is a sentence that starts with the word \"E\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_anger(\"Hello world\")\n  0\n  >>> is_anger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_anger = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'E') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. An fear is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An disgust is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'O') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of contempt. An contempt is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_contempt(\"Hello world\")\n  0\n  >>> is_contempt(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_contempt = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of surprise. An surprise is a sentence that starts with the word \"U\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_surprise(\"Hello world\")\n  0\n  >>> is_surprise(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_surprise = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of awe. An awe is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_awe(\"Hello world\")\n  0\n  >>> is_awe(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_awe = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of joy. An joy is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_joy(\"Hello world\")\n  0\n  >>> is_joy(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_joy = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'O') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of love. An love is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_love(\"Hello world\")\n  0\n  >>> is_love(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_love = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'O') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. An fear is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An disgust is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_float = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_string = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_array = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_object = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_null = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_undefined = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_nan = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_false = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_true = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_nan_inf = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_nan_inf_false = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_nan_inf_true = (x, y, z) => {\n  const sum = x + y;\n  return z === sum && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const letterTwoLettersAfter = englishAlphabet[letterIndex + 1];\n    const letterTwoLettersBefore = englishAlphabet[letterIndex - 1];\n    \n    if (letterTwoLettersAfter) {\n      newMessage = newMessage.replace(letter, letterTwoLettersAfter);\n    }\n    \n    if (letterTwoLettersBefore) {\n      newMessage = newMessage.replace(letter, letterTwoLettersBefore);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const letterTwoLettersAfter = englishAlphabet[letterIndex + 1];\n    const letterTwoLettersBefore = englishAlphabet[letterIndex - 1];\n    \n    if (letterTwoLettersAfter) {\n      newMessage = newMessage.replace(letter, letterTwoLettersAfter);\n    }\n    \n    if (letterTwoLettersBefore) {\n      newMessage = newMessage.replace(letter, letterTwoLettersBefore);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const letterTwoLettersAfter = englishAlphabet[letterIndex + 1];\n    const letterTwoLettersBefore = englishAlphabet[letterIndex - 1];\n    \n    if (letterTwoLettersAfter) {\n      newMessage = newMessage.replace(letter, letterTwoLettersAfter);\n    }\n    \n    if (letterTwoLettersBefore) {\n      newMessage = newMessage.replace(letter, letterTwoLettersBefore);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const letterTwoLettersAfter = englishAlphabet[letterIndex + 1];\n    const letterTwoLettersBefore = englishAlphabet[letterIndex - 1];\n    \n    if (letterTwoLettersAfter) {\n      newMessage = newMessage.replace(letter, letterTwoLettersAfter);\n    }\n    \n    if (letterTwoLettersBefore) {\n      newMessage = newMessage.replace(letter, letterTwoLettersBefore);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const letterTwoLettersAfter = englishAlphabet[letterIndex + 1];\n    const letterTwoLettersBefore = englishAlphabet[letterIndex - 1];\n    \n    if (letterTwoLettersAfter) {\n      newMessage = newMessage.replace(letter, letterTwoLettersAfter);\n    }\n    \n    if (letterTwoLettersBefore) {\n      newMessage = newMessage.replace(letter, letterTwoLettersBefore);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const letterTwoLettersAfter = englishAlphabet[letterIndex + 1];\n    const letterTwoLettersBefore = englishAlphabet[letterIndex - 1];\n    \n    if (letterTwoLettersAfter) {\n      newMessage = newMessage.replace(letter, letterTwoLettersAfter);\n    }\n    \n    if (letterTwoLettersBefore) {\n      newMessage = newMessage.replace(letter, letterTwoLettersBefore);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < newMessage.length; i++) {\n    const letter = newMessage.charAt(i);\n    const letterIndex = englishAlphabet.indexOf(letter);\n    const letterTwoLettersAfter = englishAlphabet[letterIndex + 1];\n    const letterTwoLettersBefore = englishAlphabet[letterIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largestPrime = 0;\n  let sumOfDigits = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === largestPrime) {\n      sumOfDigits += lst[i];\n    }\n  }\n  return sumOfDigits;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of it and return the sum of the digits of its factors.\n\n  Examples:\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_space = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_space_and_dash = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_space_and_dash_and_underscore = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_space_and_dash_and_underscore_and_colon = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_space_and_dash_and_underscore_and_colon = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_space_and_dash_and_underscore_and_colon = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (is_prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum of the squares of the integers in the array.\n  for example:\n  square_of_array([]) => []\n  square_of_array([1,3,5]) => [1,9,25]\n  square_of_array([1,3,5,7]) => [16,49,81]\n  square_of_array([1,3,5,7,11,13,17]) => [49,121,257,625,1597]\n  square_of_array([1,3,5,7,11,13,17,19]) => [49,121,257,625,1597,2413,4969]\n  square_of_array([1,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]) => [49,121,257,625,1597,2413,4969,9871,19683,39161,78643,157919]\n  square_of_array([1,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  */\nconst square_of_array = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum of the cubes of the integers in the array.\n  for example:\n  cube_of_array([]) => []\n  cube_of_array([1,3,5]) => [1,27,81]\n  cube_of_array([1,3,5,7]) => [36,109,243,729]\n  cube_of_array([1,3,5,7,11,13,17]) => [36,109,243,729,827,1764]\n  cube_of_array([1,3,5,7,11,13,17,19]) => [36,109,243,729,827,1764,2416,5773]\n  cube_of_array([1,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  */\nconst cube_of_array = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  product_of_array([]) => []\n  product_of_array([1,3,5]) => [3,15,35]\n  product_of_array([1,3,5,7]) => [15,73,201]\n  product_of_array([1,3,5,7,11,13,17]) => [15,73,201,286,643,1255]\n  product_of_array([1,3,5,7,11,13,17,19]) => [15,73,201,286,643,1255,2416,7290]\n  product_of_array([1,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply14 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply15 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b) * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  count_digits('aBCdEf') returns 3\n  count_digits('abcdefg') returns 0\n  count_digits('dBBE') returns 0\n  */\nconst count_digits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_spaces('aBCdEf') returns 3\n  count_spaces('abcdefg') returns 0\n  count_spaces('dBBE') returns 0\n  */\nconst count_spaces = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase letters in odd indices.\n  \n  For example:\n  count_upper_odd('aBCdEf') returns 3\n  count_upper_odd('abcdefg') returns 0\n  count_upper_odd('dBBE') returns 0\n  */\nconst count_upper_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase letters in odd indices.\n  \n  For example:\n  count_lower_odd('aBCdEf') returns 3\n  count_lower_odd('abcdefg') returns 0\n  count_lower_odd('dBBE') returns 0\n  */\nconst count_lower_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in odd indices.\n  \n  For example:\n  count_digits_odd('aBCdEf') returns 3\n  count_digits_odd('abcdefg') returns 0\n  count_digits_odd('dBBE') returns 0\n  */\nconst count_digits_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in odd indices.\n  \n  For example:\n  count_spaces_odd('aBCdEf') returns 3\n  count_spaces_odd('abcdefg') returns 0\n  count_spaces_odd('dBBE') returns 0\n  */\nconst count_spaces_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase letters in even indices.\n  \n  For example:\n  count_upper_even('aBCdEf') returns 3\n  count_upper_even('abcdefg') returns 0\n  count_upper_even('dBBE') returns 0\n  */\nconst count_upper_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase letters in even indices.\n  \n  For example:\n  count_lower_even('aBCdEf') returns 3\n  count_lower_even('abcdefg') returns 0\n  count_lower_even('dBBE') returns 0\n  */\nconst count_lower_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  count_digits_even('aBCdEf') returns 3\n  count_digits_even('abcdefg') returns 0\n  count_digits_even('dBBE') returns 0\n  */\nconst count_digits_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_spaces_even('aBCdEf') returns 3\n  count_spaces_even('abcdefg') returns 0\n  count_spaces_even('dBBE') returns 0\n  */\nconst count_spaces_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase letters in odd indices.\n  \n  For example:\n  count_upper_odd('aBCdEf') returns 3\n  count_upper_odd('abcdefg') returns 0\n  count_upper_odd('dBBE') returns 0\n  */\nconst count_upper_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase letters in odd indices.\n  \n  For example:\n  count_lower_odd('aBCdEf') returns 3\n  count_lower_odd('abcdefg') returns 0\n  count_lower_odd('dBBE') returns 0\n  */\nconst count_lower_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in odd indices.\n  \n  For example:\n  count_digits_odd('aBCdEf') returns 3\n  count_digits_odd('abcdefg') returns ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const num = parseFloat(value);\n  const diff = Math.abs(num - Math.floor(num));\n  if (diff < 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_decimal(\"10\")\n  10\n  >>> closest_decimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_decimal(\"14.5\") should\n  return 15.3 and closest_decimal(\"-14.5\") should return -15.3\n  */\nconst closest_decimal = (value) => {\n  const num = parseFloat(value);\n  const diff = Math.abs(num - Math.floor(num));\n  if (diff < 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_number(\"10\")\n  10\n  >>> closest_number(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_number(\"14.5\") should\n  return 15.3 and closest_number(\"-14.5\") should return -15.3\n  */\nconst closest_number = (value) => {\n  const num = parseFloat(value);\n  const diff = Math.abs(num - Math.floor(num));\n  if (diff < 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_number(\"10\")\n  10\n  >>> closest_number(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_number(\"14.5\") should\n  return 15.3 and closest_number(\"-14.5\") should return -15.3\n  */\nconst closest_number_with_precision = (value, precision) => {\n  const num = parseFloat(value);\n  const diff = Math.abs(num - Math.floor(num));\n  if (diff < 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_number(\"10\")\n  10\n  >>> closest_number(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_number(\"14.5\") should\n  return 15.3 and closest_number(\"-14.5\") should return -15.3\n  */\nconst closest_number_with_precision_and_rounding = (value, precision) => {\n  const num = parseFloat(value);\n  const diff = Math.abs(num - Math.floor(num));\n  if (diff < 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_number(\"10\")\n  10\n  >>> closest_number(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_number(\"14.5\") should\n  return 15.3 and closest_number(\"-14.5\") should return -15.3\n  */\nconst closest_number_with_precision_and_rounding_and_precision = (value, precision) => {\n  const num = parseFloat(value);\n  const diff = Math.abs(num - Math.floor(num));\n  if (diff < 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_number(\"10\")\n  10\n  >>> closest_number(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_number(\"14.5\") should\n  return 15.3 and closest_number(\"-14.5\") should return -15.3\n  */\nconst closest_number_with_precision_and_rounding_and_precision_and_rounding = (value, precision) => {\n  const num = parseFloat(value);\n  const diff = Math.abs(num - Math.floor(num));\n  if (diff < 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_number(\"10\")\n  10\n  >>> closest_number(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_number(\"14.5\") should\n  return 15.3 and closest_number(\"-14.5\") should return -15.3\n  */\nconst closest_number_with_precision_and_rounding_and_precision_and_rounding_and_precision = (value, precision) => {\n  const num = parseFloat(value);\n  const diff = Math.abs(num - Math.floor(num));\n  if (diff < 0.5) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_number(\"10\")\n  10\n  >>> closest_number(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_number(\"14.5\") should\n  return 15.3 and closest_number(\"-14.5\") should return -15.3\n  */\nconst closest_number_with_precision_and_rounding_and_precision_and_rounding_and_precision_and_rounding = (value, precision) => {\n  const num = parseFloat", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
