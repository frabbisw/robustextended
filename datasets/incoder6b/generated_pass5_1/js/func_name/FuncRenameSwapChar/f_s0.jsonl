{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isCloserTo([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isCloserTo([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isCloserTo = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isCloserTo([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isCloserTo([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isCloserTo = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isCloserTo([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isCloserTo([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isCloserTo = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isCloserTo([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isCloserTo([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isCloserTo = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isCloserTo([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isCloserTo([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isCloserTo = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isCloserTo([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isCloserTo([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isCloserTo = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isCloserTo([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isCloserTo([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isCloserTo = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isCloserTo([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isCloserTo([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isCloserTo = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isCloserTo([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isCloserTo([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isCloserTo = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n  return Math.abs(firstNumber - middleNumber) < threshold && Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> isCloserTo([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> isCloserTo([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst isCloserTo = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_2 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_3 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_4 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_5 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_6 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_7 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_8 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_9 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_10 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_11 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_12 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_13 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_14 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_15 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_16 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_17 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_18 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_19 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_20 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_21 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_22 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_23 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_24 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_25 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_26 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_27 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_28 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_29 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_30 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_31 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_32 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_33 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_34 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_35 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_36 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_37 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_38 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_39 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_40 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_41 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_42 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_43 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_44 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_45 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_46 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_47 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_48 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_49 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_50 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_51 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_52 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_53 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_54 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_55 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_56 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_57 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_58 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_59 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_60 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_61 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_62 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_63 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_64 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_65 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_66 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_67 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_68 = paren_string.match(/\\(([^\\(\\)]+)\\)/g);\n  const paren_array_69 = paren_string.match(/\\(([^\\(\\)]+)\\)/g", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);\n  return `${prefix}${postfix}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, string.length - postfix.length);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(n - i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that start with a given letter.\n  \n  For example:\n  startsWithLetter(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  startsWithLetter(\"One, two, three, four, five, six\", \"o\") == [\"one\", \"two\", \"four\", \"five\"]\n  */\nconst startsWithLetter = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.startsWith(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that end with a given letter.\n  \n  For example:\n  endsWithLetter(\"Hi, my name is John\", \"n\") == [\"John\"]\n  endsWithLetter(\"One, two, three, four, five, six\", \"o\") == [\"six\"]\n  */\nconst endsWithLetter = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.endsWith(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given letter.\n  \n  For example:\n  containsLetter(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  containsLetter(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\"]\n  */\nconst containsLetter = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given letter anywhere.\n  \n  For example:\n  containsLetterAnywhere(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  containsLetterAnywhere(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\"]\n  */\nconst containsLetterAnywhere = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given letter anywhere in the word.\n  \n  For example:\n  containsLetterAnywhereInWord(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  containsLetterAnywhereInWord(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\"]\n  */\nconst containsLetterAnywhereInWord = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given letter anywhere in the word.\n  \n  For example:\n  containsLetterAnywhereInWord(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  containsLetterAnywhereInWord(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\"]\n  */\nconst containsLetterAnywhereInWord = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given letter anywhere in the word.\n  \n  For example:\n  containsLetterAnywhereInWord(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  containsLetterAnywhereInWord(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\"]\n  */\nconst containsLetterAnywhereInWord = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given letter anywhere in the word.\n  \n  For example:\n  containsLetterAnywhereInWord(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  containsLetterAnywhereInWord(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\"]\n  */\nconst containsLetterAnywhereInWord = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given letter anywhere in the word.\n  \n  For example:\n  containsLetterAnywhereInWord(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  containsLetterAnywhereInWord(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\"]\n  */\nconst containsLetterAnywhereInWord = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given letter anywhere in the word.\n  \n  For example:\n  containsLetterAnywhereInWord(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  containsLetterAnywhereInWord(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\"]\n  */\nconst containsLetterAnywhereInWord = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given letter anywhere in the word.\n  \n  For example:\n  containsLetterAnywhereInWord(\"Hi, my name is John\", \"n\") == [\"my\", \"name\"]\n  containsLetterAnywhereInWord(\"One, two, three, four, five, six\", \"o\") == [\"four\", \"five\"]\n  */\nconst containsLetterAnywhereInWord = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given letter anywhere in the word.\n  \n  For example:\n  containsLetterAnywhereInWord(\"H", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  return `${(avg).toString(2)}`.padStart(avg.toString().length + 1, '0');\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| a tags=javascript,algorithm,binary,math |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,algorithm,binary,math |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,algorithm,binary,math dscore=0 |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,algorithm,binary,math |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,algorithm,binary,math |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let evenDigit = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      evenDigit.push(x[i]);\n    } else {\n      result.push(...evenDigit);\n      evenDigit = [];\n    }\n  }\n  result.push(...evenDigit);\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let oddDigit = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      oddDigit.push(x[i]);\n    } else {\n      result.push(...oddDigit);\n      oddDigit = [];\n    }\n  }\n  result.push(...oddDigit);\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let evenDigit = [];\n  let oddDigit = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      evenDigit.push(x[i]);\n    } else {\n      oddDigit.push(x[i]);\n    }\n  }\n  result.push(...evenDigit);\n  result.push(...oddDigit);\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let evenDigit = [];\n  let oddDigit = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      oddDigit.push(x[i]);\n    } else {\n      evenDigit.push(x[i]);\n    }\n  }\n  result.push(...evenDigit);\n  result.push(...oddDigit);\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let evenDigit = [];\n  let oddDigit = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      oddDigit.push(x[i]);\n    } else {\n      evenDigit.push(x[i]);\n    }\n  }\n  result.push(...evenDigit);\n  result.push(...oddDigit);\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let evenDigit = [];\n  let oddDigit = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      oddDigit.push(x[i]);\n    } else {\n      evenDigit.push(x[i]);\n    }\n  }\n  result.push(...evenDigit);\n  result.push(...oddDigit);\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let evenDigit = [];\n  let oddDigit = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      oddDigit.push(x[i]);\n    } else {\n      evenDigit.push(x[i]);\n    }\n  }\n  result.push(...evenDigit);\n  result.push(...oddDigit);\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let evenDigit = [];\n  let oddDigit = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      oddDigit.push(x[i]);\n    } else {\n      evenDigit.push(x[i]);\n    }\n  }\n  result.push(...evenDigit);\n  result.push(...oddDigit);\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let evenDigit = [];\n  let oddDigit = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      oddDigit.push(x[i]);\n    } else {\n      evenDigit.push(x[i]);\n    }\n  }\n  result.push(...evenDigit);\n  result.push(...oddDigit);\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let result = [];\n  let evenDigit = [];\n  let oddDigit = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      oddDigit.push(x[i]);\n    } else {\n      even", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  let result = [];\n  let temp = [];\n  let temp2 = [];\n  let temp3 = [];\n  let temp4 = [];\n  let temp5 = [];\n  let temp6 = [];\n  let temp7 = [];\n  let temp8 = [];\n  let temp9 = [];\n  let temp10 = [];\n  let temp11 = [];\n  let temp12 = [];\n  let temp13 = [];\n  let temp14 = [];\n  let temp15 = [];\n  let temp16 = [];\n  let temp17 = [];\n  let temp18 = [];\n  let temp19 = [];\n  let temp20 = [];\n  let temp21 = [];\n  let temp22 = [];\n  let temp23 = [];\n  let temp24 = [];\n  let temp25 = [];\n  let temp26 = [];\n  let temp27 = [];\n  let temp28 = [];\n  let temp29 = [];\n  let temp30 = [];\n  let temp31 = [];\n  let temp32 = [];\n  let temp33 = [];\n  let temp34 = [];\n  let temp35 = [];\n  let temp36 = [];\n  let temp37 = [];\n  let temp38 = [];\n  let temp39 = [];\n  let temp40 = [];\n  let temp41 = [];\n  let temp42 = [];\n  let temp43 = [];\n  let temp44 = [];\n  let temp45 = [];\n  let temp46 = [];\n  let temp47 = [];\n  let temp48 = [];\n  let temp49 = [];\n  let temp50 = [];\n  let temp51 = [];\n  let temp52 = [];\n  let temp53 = [];\n  let temp54 = [];\n  let temp55 = [];\n  let temp56 = [];\n  let temp57 = [];\n  let temp58 = [];\n  let temp59 = [];\n  let temp60 = [];\n  let temp61 = [];\n  let temp62 = [];\n  let temp63 = [];\n  let temp64 = [];\n  let temp65 = [];\n  let temp66 = [];\n  let temp67 = [];\n  let temp68 = [];\n  let temp69 = [];\n  let temp70 = [];\n  let temp71 = [];\n  let temp72 = [];\n  let temp73 = [];\n  let temp74 = [];\n  let temp75 = [];\n  let temp76 = [];\n  let temp77 = [];\n  let temp78 = [];\n  let temp79 = [];\n  let temp80 = [];\n  let temp81 = [];\n  let temp82 = [];\n  let temp83 = [];\n  let temp84 = [];\n  let temp85 = [];\n  let temp86 = [];\n  let temp87 = [];\n  let temp88 = [];\n  let temp89 = [];\n  let temp90 = [];\n  let temp91 = [];\n  let temp92 = [];\n  let temp93 = [];\n  let temp94 = [];\n  let temp95 = [];\n  let temp96 = [];\n  let temp97 = [];\n  let temp98 = [];\n  let temp99 = [];\n  let temp100 = [];\n  let temp101 = [];\n  let temp102 = [];\n  let temp103 = [];\n  let temp104 = [];\n  let temp105 = [];\n  let temp106 = [];\n  let temp107 = [];\n  let temp108 = [];\n  let temp109 = [];\n  let temp110 = [];\n  let temp111 = [];\n  let temp112 = [];\n  let temp113 = [];\n  let temp114 = [];\n  let temp115 = [];\n  let temp116 = [];\n  let temp117 = [];\n  let temp118 = [];\n  let temp119 = [];\n  let temp120 = [];\n  let temp121 = [];\n  let temp122 = [];\n  let temp123 = [];\n  let temp124 = [];\n  let temp125 = [];\n  let temp126 = [];\n  let temp127 = [];\n  let temp128 = [];\n  let temp129 = [];\n  let temp130 = [];\n  let temp131 = [];\n  let temp132 = [];\n  let temp133 = [];\n  let temp134 = [];\n  let temp135 = [];\n  let temp136 = [];\n  let temp137 = [];\n  let temp138 = [];\n  let temp139 = [];\n  let temp140 = [];\n  let temp141 = [];\n  let temp142 = [];\n  let temp143 = [];\n  let temp144 = [];\n  let temp145 = [];\n  let temp146 = [];\n  let temp147 = [];\n  let temp148 = [];\n  let temp149 = [];\n  let temp150 = [];\n  let temp151 = [];\n  let temp152 = [];\n  let temp153 = [];\n  let temp154 = [];\n  let temp155 = [];\n  let temp156 = [];\n  let temp157 = [];\n  let temp158 = [];\n  let temp159 = [];\n  let temp160 = [];\n  let temp161 = [];\n  let temp162 = [];\n  let temp163 = [];\n  let temp164 = [];\n  let temp165 = [];\n  let temp166 = [];\n  let temp167 = [];\n  let temp168 = [];\n  let temp169 = [];\n  let temp170 = [];\n  let temp171 = [];\n  let temp172 = [];\n  let temp173 = [];\n  let temp174 = [];\n  let temp175 = [];\n  let temp176 = [];\n  let temp177 = [];\n  let temp178 = [];\n  let temp179 = [];\n  let temp180 = [];\n  let temp181 = [];\n  let temp182 = [];\n  let temp183 = [];\n  let temp184 = [];\n  let temp185 = [];\n  let temp186 = [];\n  let temp187 = [];\n  let temp188 = [];\n  let temp189 = [];\n  let temp190 = [];\n  let temp191 = [];\n  let temp192 = [];\n  let temp193 = [];\n  let temp194 = [];\n  let temp195 = [];\n  let temp196 = [];\n  let temp197 = [];\n  let temp198 = [];\n  let temp199 = [];\n  let temp200 = [];\n  let temp201 = [];\n  let temp202 = [];\n  let temp203 = [];\n  let temp204 = [];\n  let temp205 = [];\n  let temp206 = [];\n  let temp207 = [];\n  let temp208 = [];\n  let temp209 = [];\n  let temp210 = [];\n  let temp211 = [];\n  let temp212 = [];\n  let temp213 = [];\n  let temp214 = [];\n  let temp215 = [];\n  let temp216 = [];\n  let temp217 = [];\n  let temp218 = [];\n  let temp219 = [];\n  let temp220 = [];\n  let temp221 = [];\n  let temp222 = [];\n  let temp223 = [];\n  let temp224 = [];\n  let temp225 = [];\n  let temp226 = [];\n  let temp227 = [];\n  let temp228 = [];\n  let temp229 = [];\n  let temp230 = [];\n  let temp231 = [];\n  let temp232 = [];\n  let temp233 = [];\n  let temp234 = [];\n  let temp235 = [];\n  let temp236 = [];\n  let temp237 = [];\n  let temp238 = [];\n  let temp239 = [];\n  let temp240 = [];\n  let temp241 = [];\n  let temp242 = [];\n  let temp243 = [];\n  let temp244 = [];\n  let temp245 = [];\n  let temp246 = [];\n  let temp247 = [];\n  let temp248 = [];\n  let temp249 = [];\n  let temp250 = [];\n  let temp251 = [];\n  let temp252 = [];\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n// TESTS\nconst tests = [\n  { name: 'factorial', input: 5, expected: [1, 2, 6, 24, 15] },\n  { name: 'factorial', input: 10, expected: [1, 2, 6, 24, 120, 20, 60, 40, 30, 20, 10, 5, 16, 8, 4, 2, 1] }\n];\n\ntests.forEach((test) => {\n  const actual = f(test.input);\n  console.assert(actual.every((actual, index) => actual === test.expected[index]), test.name);\n});</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  let result = 1;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(evenPalindrome)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(evenPalindrome)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(evenPalindrome)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(evenPalindrome)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(evenPalindrome)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindro", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "<|endoftext|>/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n < 0) {\n      n += 10;\n    }\n    if (n < 10) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let sortedArr = arr.sort((a, b) => b - a);\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result ^= sortedArr[i];\n  }\n  return result === 0;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  element in arr and return its index. If there is no such element then return\n  -1.\n\n  Note: If there are more than one maximum element then return any one of them.\n  \n  Example:\n  \n  maxElement([3, 6, 9, 10, 1, 2])==>6\n  maxElement([3, 6, 9, 10, 1, 4])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst maxElement = (arr) => {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the minimum\n  element in arr and return its index. If there is no such element then return\n  -1.\n\n  Note: If there are more than one minimum element then return any one of them.\n  \n  Example:\n  \n  minElement([3, 6, 9, 10, 1, 2])==>1\n  minElement([3, 6, 9, 10, 1, 4])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst minElement = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the average\n  of the numbers in the array. If there is no such element then return -1.\n\n  Note: If there are more than one minimum element then return any one of them.\n  \n  Example:\n  \n  averageElement([3, 6, 9, 10, 1, 2])==>5.5\n  averageElement([3, 6, 9, 10, 1, 4])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst averageElement = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the sum\n  of the numbers in the array. If there is no such element then return -1.\n\n  Note: If there are more than one minimum element then return any one of them.\n  \n  Example:\n  \n  sumElement([3, 6, 9, 10, 1, 2])==>15\n  sumElement([3, 6, 9, 10, 1, 4])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst sumElement = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the product\n  of the numbers in the array. If there is no such element then return -1.\n\n  Note: If there are more than one minimum element then return any one of them.\n  \n  Example:\n  \n  productElement([3, 6, 9, 10, 1, 2])==>120\n  productElement([3, 6, 9, 10, 1, 4])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst productElement = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  product of any two numbers in the array. If there is no such element then\n  return -1.\n\n  Note: If there are more than one maximum product then return any one of them.\n  \n  Example:\n  \n  maxProductElement([3, 6, 9, 10, 1, 2])==>60\n  maxProductElement([3, 6, 9, 10, 1, 4])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst maxProductElement = (arr) => {\n  let maxProduct = arr[0] * arr[1];\n  for (let i = 2; i < arr.length; i++) {\n    maxProduct = Math.max(maxProduct, arr[i] * arr[i]);\n  }\n  return maxProduct;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the minimum\n  product of any two numbers in the array. If there is no such element then\n  return -1.\n\n  Note: If there are more than one minimum product then return any one of them.\n  \n  Example:\n  \n  minProductElement([3, 6, 9, 10, 1, 2])==>30\n  minProductElement([3, 6, 9, 10, 1, 4])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst minProductElement = (arr) => {\n  let minProduct = arr[0] * arr[1];\n  for (let i = 2; i < arr.length; i++) {\n    minProduct = Math.min(minProduct, arr[i] * arr[i]);\n  }\n  return minProduct;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the maximum\n  product of any three numbers in the array. If there is no such element then\n  return -1.\n\n  Note: If there are more than one maximum product then return any one of them.\n  \n  Example:\n  \n  maxProductElement([3, 6, 9, 10, 1, 2])==>60\n  maxProductElement([3, 6, 9, 10, 1, 4])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst maxProductElement = (arr) => {\n  let maxProduct = arr[0] * arr[1] * arr[2];\n  for (let i = 3; i < arr.length; i++) {\n    maxProduct = Math.max(maxProduct, arr[i] * arr[i] * arr[i]);\n  }\n  return maxProduct;\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find the minimum\n  product of any three numbers in the array. If there is no such element then\n  return -1.\n\n  Note: If there are more than one minimum product then return any one of them.\n  \n  Example:\n  \n  minProductElement([3, 6, 9, 10, 1, 2])==>30\n  minProductElement([3, 6, 9, 10, 1, 4])==>-1\n  Explanation: There is no such element in the given array.\n  \n  */\nconst minProductElement = (arr) => {\n  let minProduct = arr[0] * arr[1] * arr[2];\n  for (let i = 3; i < arr.length; i++) {\n    minProduct = Math.min(minProduct, arr[i] * arr[i]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  const xorResult = a.split('').map((x, i) => x ^ b[i]).join('');\n  return xorResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgand = (a, b) => {\n  const andResult = a.split('').map((x, i) => x & b[i]).join('');\n  return andResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgorr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgnot = (input) => {\n  const notResult = input\n   .split('')\n   .map((x, i) => ~x)\n   .join('');\n  return notResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgandr = (input) => {\n  const andResult = input\n   .split('')\n   .map((x, i) => x & 1)\n   .join('');\n  return andResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgand = (input) => {\n  const andResult = input\n   .split('')\n   .map((x, i) => x | 1)\n   .join('');\n  return andResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgorr = (input) => {\n  const orResult = input\n   .split('')\n   .map((x, i) => x | 1)\n   .join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgor = (input) => {\n  const orResult = input\n   .split('')\n   .map((x, i) => x | 1)\n   .join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgnotr = (input) => {\n  const notResult = input\n   .split('')\n   .map((x, i) => ~x)\n   .join('');\n  return notResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgnot = (input) => {\n  const notResult = input\n   .split('')\n   .map((x, i) => ~x)\n   .join('');\n  return notResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgandr = (input) => {\n  const andResult = input\n   .split('')\n   .map((x, i) => x & 1)\n   .join('');\n  return andResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgand = (input) => {\n  const andResult = input\n   .split('')\n   .map((x, i) => x | 1)\n   .join('');\n  return andResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgorr = (input) => {\n  const orResult = input\n   .split('')\n   .map((x, i) => x | 1)\n   .join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgor = (input) => {\n  const orResult = input\n   .split('')\n   .map((x, i) => x | 1)\n   .join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgnotr = (input) => {\n  const notResult = input\n   .split('')\n   .map((x, i) => ~x)\n   .join('');\n  return notResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgnot = (input) => {\n  const notResult = input\n   .split('')\n   .map((x, i) => ~x)\n   .join('');\n  return notResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinXgand('010', '110')\n  '100'\n  */\nconst strinXgandr = (input) => {\n  const andResult = input\n   .split('')\n   .map((x, i) => x & 1)\n   .join('');\n  return andResult;\n};\n\n/* Input are two strings a and b consisting of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinX", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  // Your code here\n};\n\n// Test cases\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(xechange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const testArray = test.split(' ');\n  testArray.forEach((letter) => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      result += s.charAt(i)\n    } else {\n      isPalindrome = false\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  You are given a string s and a number k. Your task is to find and print all the substrings of s of length k that is a palindrome.\n  Example\n  For s = \"abcabcbb\", k = 3, the output should be\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb\n  bc\n  abc\n  ab\n  bb", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] === '1') {\n        odds.push(1);\n      } else {\n        odds.push(0);\n      }\n    }\n  }\n  return odds;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst evenCount = (lst) => {\n  const evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] === '0') {\n        evens.push(1);\n      } else {\n        evens.push(0);\n      }\n    }\n  }\n  return evens;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const oddEvens = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] === '1') {\n        oddEvens.push(1);\n      } else if (digits[j] === '0') {\n        oddEvens.push(0);\n      } else {\n        oddEvens.push(0);\n      }\n    }\n  }\n  return oddEvens;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const oddEvens = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] === '1') {\n        oddEvens.push(1);\n      } else if (digits[j] === '0') {\n        oddEvens.push(0);\n      } else {\n        oddEvens.push(0);\n      }\n    }\n  }\n  return oddEvens;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const oddEvens = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] === '1') {\n        oddEvens.push(1);\n      } else if (digits[j] === '0') {\n        oddEvens.push(0);\n      } else {\n        oddEvens.push(0);\n      }\n    }\n  }\n  return oddEvens;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const oddEvens = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] === '1') {\n        oddEvens.push(1);\n      } else if (digits[j] === '0') {\n        oddEvens.push(0);\n      } else {\n        oddEvens.push(0);\n      }\n    }\n  }\n  return oddEvens;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str2ng 2 of the 2nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const oddEvens = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] === '1') {\n        oddEvens.push(1);\n      } else if (digits[j] === '0') {\n        oddEvens.push(0);\n      } else {\n        oddEvens.push(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements smaller than the given value.\n  Example\n  sumSmaller([2, 3, 4], 2) == 5\n  sumSmaller([2, 3, 4], 3) == 4\n  sumSmaller([2, 3, 4], 4) == 4\n  sumSmaller([2, 3, 4], 5) == 4\n  sumSmaller([2, 3, 4], 6) == 4\n  sumSmaller([2, 3, 4], 7) == 4\n  sumSmaller([2, 3, 4], 8) == 4\n  sumSmaller([2, 3, 4], 9) == 4\n  sumSmaller([2, 3, 4], 10) == 4\n  sumSmaller([2, 3, 4], 11) == 4\n  sumSmaller([2, 3, 4], 12) == 4\n  sumSmaller([2, 3, 4], 13) == 4\n  sumSmaller([2, 3, 4], 14) == 4\n  sumSmaller([2, 3, 4], 15) == 4\n  sumSmaller([2, 3, 4], 16) == 4\n  sumSmaller([2, 3, 4], 17) == 4\n  sumSmaller([2, 3, 4], 18) == 4\n  sumSmaller([2, 3, 4], 19) == 4\n  sumSmaller([2, 3, 4], 20) == 4\n  sumSmaller([2, 3, 4], 21) == 4\n  sumSmaller([2, 3, 4], 22) == 4\n  sumSmaller([2, 3, 4], 23) == 4\n  sumSmaller([2, 3, 4], 24) == 4\n  sumSmaller([2, 3, 4], 25) == 4\n  sumSmaller([2, 3, 4], 26) == 4\n  sumSmaller([2, 3, 4], 27) == 4\n  sumSmaller([2, 3, 4], 28) == 4\n  sumSmaller([2, 3, 4], 29) == 4\n  sumSmaller([2, 3, 4], 30) == 4\n  sumSmaller([2, 3, 4], 31) == 4\n  sumSmaller([2, 3, 4], 32) == 4\n  sumSmaller([2, 3, 4], 33) == 4\n  sumSmaller([2, 3, 4], 34) == 4\n  sumSmaller([2, 3, 4], 35) == 4\n  sumSmaller([2, 3, 4], 36) == 4\n  sumSmaller([2, 3, 4], 37) == 4\n  sumSmaller([2, 3, 4], 38) == 4\n  sumSmaller([2, 3, 4], 39) == 4\n  sumSmaller([2, 3, 4], 40) == 4\n  sumSmaller([2, 3, 4], 41) == 4\n  sumSmaller([2, 3, 4], 42) == 4\n  sumSmaller([2, 3, 4], 43) == 4\n  sumSmaller([2, 3, 4], 44) == 4\n  sumSmaller([2, 3, 4], 45) == 4\n  sumSmaller([2, 3, 4], 46) == 4\n  sumSmaller([2, 3, 4], 47) == 4\n  sumSmaller([2, 3, 4], 48) == 4\n  sumSmaller([2, 3, 4], 49) == 4\n  sumSmaller([2, 3, 4], 50) == 4\n  sumSmaller([2, 3, 4], 51) == 4\n  sumSmaller([2, 3, 4], 52) == 4\n  sumSmaller([2, 3, 4], 53) == 4\n  sumSmaller([2, 3, 4], 54) == 4\n  sumSmaller([2, 3, 4], 55) == 4\n  sumSmaller([2, 3, 4], 56) == 4\n  sumSmaller([2, 3, 4], 57) == 4\n  sumSmaller([2, 3, 4], 58) == 4\n  sumSmaller([2, 3, 4], 59) == 4\n  sumSmaller([2, 3, 4], 60) == 4\n  sumSmaller([2, 3, 4], 61) == 4\n  sumSmaller([2, 3, 4], 62) == 4\n  sumSmaller([2, 3, 4], 63) == 4\n  sumSmaller([2, 3, 4], 64) == 4\n  sumSmaller([2, 3, 4], 65) == 4\n  sumSmaller([2, 3, 4], 66) == 4\n  sumSmaller([2, 3, 4], 67) == 4\n  sumSmaller([2, 3, 4], 68) == 4\n  sumSmaller([2, 3, 4], 69) == 4\n  sumSmaller([2, 3, 4], 70) == 4\n  sumSmaller([2, 3, 4], 71) == 4\n  sumSmaller([2, 3, 4], 72) == 4\n  sumSmaller([2, 3, 4], 73) == 4\n  sumSmaller([2, 3, 4], 74) == 4\n  sumSmaller([2, 3, 4], 75) == 4\n  sumSmaller([2, 3, 4], 76) == 4\n  sumSmaller([2, 3, 4], 77) == 4\n  sumSmaller([2, 3, 4], 78) == 4\n  sumSmaller([2, 3, 4], 79) == 4\n  sumSmaller([2, 3, 4], 80) == 4\n  sumSmaller([2, 3, 4], 81) == 4\n  sumSmaller([2, 3, 4], 82) == 4\n  sumSmaller([2, 3, 4], 83) == 4\n  sumSmaller([2, 3, 4], 84) == 4\n  sumSmaller([2, 3, 4], 85) == 4\n  sumSmaller([2, 3, 4], 86) == 4\n  sumSmaller([2, 3, 4], 87) == 4\n  sumSmaller([2, 3, 4], 88) == 4\n  sumSmaller([2, 3, 4], 89) == 4\n  sumSmaller([2, 3, 4], 90) == 4\n  sumSmaller([2, 3, 4], 91) == 4\n  sumSmaller([2, 3, 4], 92) == 4\n  sumSmaller([2, 3, 4], 93) == 4\n  sumSmaller([2, 3, 4], 94) == 4\n  sumSmaller([2, 3, 4], 95) == 4\n  sumSmaller([2, 3, 4], 96) == 4\n  sumSmaller([2, 3, 4], 97) == 4\n  sumSmaller([2, 3, 4], 98) == 4\n  sumSmaller([2, 3, 4], 99) == 4\n  sumSmaller([2, 3, 4], 100) == 4\n  sumSmaller([2, 3, 4], 101) == 4\n  sumSmaller([2, 3, 4], 102) == 4\n  sumSmaller([2, 3, 4], 103) == 4\n  sumSmaller([2, 3, 4], 104) == 4\n  sumSmaller([2, 3, 4], 105) == 4\n  sumSmaller([2, 3, 4], 106) == 4\n  sumSmaller([2, 3, 4], 107) == 4\n  sumSmaller([2, 3, 4], 108) == 4\n  sumSmaller([2, 3, 4], 109) == 4\n  sumSmaller([2, 3, 4], 110) == 4\n  sumSmaller([2, 3, 4], 111) == 4\n  sumSmaller([2, 3, 4], 112) == 4\n  sumSmaller([2, 3, 4], 113) == 4\n  sumSmaller([2, 3, 4], 114) == 4\n  sumSmaller([2, 3, 4], 115) == 4\n  sumSmaller([2, 3, 4], 116) == 4\n  sumSmaller([2, 3, 4], 117) == 4\n  sumSmaller([2, 3, 4], 118) == 4\n  sumSmaller([2, 3, 4], 119) == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.max(\n          grid[i - 1][j] + 1,\n          grid[i][j - 1] + 1,\n          grid[i - 1][j - 1] + 1,\n        );\n      }\n    }\n  }\n  return Math.max(0, count - capacity);\n};\n\nexport { maxFill };\n\n/*\n  You are given an n x n 2D matrix representing an image.\n  Each pixel in the image is either black or white.\n  You are also given an m x n matrix representing a mask of the same size as image.\n  Pixels inside the mask are water.\n  You are required to fill the image using the water mask to cover all non-water areas.\n  Return the number of water pixels inside the image.\n\n  Example 1:\n      Input:\n          image = [[1,1,1],[1,1,1],[1,1,1]]\n          mask = [[1,1],[1,1],[1,1]]\n      Output: 3\n\n  Example 2:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,1],[1,1],[1,1]]\n      Output: 2\n\n  Example 3:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,0],[1,0],[1,0]]\n      Output: 0\n\n  Example 4:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,1],[1,0],[1,0]]\n      Output: 1\n\n  Example 5:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,1],[1,1],[0,1]]\n      Output: 4\n\n  Constraints:\n      * image.length == mask.length\n      * image[i].length == mask[i].length\n      * 0 <= image[i][j] <= 1\n      * image.length == m * n\n      * m == mask.length\n      * n == image[i].length\n      * m == image.length\n*/\nconst countWaterPixels = (image, mask) => {\n  let count = 0;\n  for (let i = 0; i < image.length; i++) {\n    for (let j = 0; j < image[i].length; j++) {\n      if (image[i][j] === 1) {\n        count += Math.max(\n          image[i - 1][j] + 1,\n          image[i][j - 1] + 1,\n          image[i - 1][j - 1] + 1,\n        );\n      }\n    }\n  }\n  return Math.max(0, count - mask.length);\n};\n\nexport { countWaterPixels };\n\n/*\n  You are given an n x n 2D matrix representing an image.\n  Each pixel in the image is either black or white.\n  You are also given an m x n matrix representing a mask of the same size as image.\n  Pixels inside the mask are water.\n  You are required to fill the image using the water mask to cover all non-water areas.\n  Return the number of water pixels inside the image.\n\n  Example 1:\n      Input:\n          image = [[1,1,1],[1,1,1],[1,1,1]]\n          mask = [[1,1],[1,1],[1,1]]\n      Output: 3\n\n  Example 2:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,1],[1,1],[1,1]]\n      Output: 2\n\n  Example 3:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,0],[1,0],[1,0]]\n      Output: 0\n\n  Example 4:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,1],[1,0],[1,0]]\n      Output: 1\n\n  Example 5:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,1],[1,1],[0,1]]\n      Output: 4\n\n  Constraints:\n      * image.length == mask.length\n      * image[i].length == mask[i].length\n      * 0 <= image[i][j] <= 1\n      * image.length == m * n\n      * m == mask.length\n      * n == image[i].length\n      * m == image.length\n*/\nconst countWaterPixelsV2 = (image, mask) => {\n  let count = 0;\n  for (let i = 0; i < image.length; i++) {\n    for (let j = 0; j < image[i].length; j++) {\n      if (image[i][j] === 1) {\n        count += Math.max(\n          image[i - 1][j] + 1,\n          image[i][j - 1] + 1,\n          image[i - 1][j - 1] + 1,\n        );\n      }\n    }\n  }\n  return Math.max(0, count - mask.length);\n};\n\nexport { countWaterPixelsV2 };\n\n/*\n  You are given an n x n 2D matrix representing an image.\n  Each pixel in the image is either black or white.\n  You are also given an m x n matrix representing a mask of the same size as image.\n  Pixels inside the mask are water.\n  You are required to fill the image using the water mask to cover all non-water areas.\n  Return the number of water pixels inside the image.\n\n  Example 1:\n      Input:\n          image = [[1,1,1],[1,1,1],[1,1,1]]\n          mask = [[1,1],[1,1],[1,1]]\n      Output: 3\n\n  Example 2:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,1],[1,1],[1,1]]\n      Output: 2\n\n  Example 3:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,0],[1,0],[1,0]]\n      Output: 0\n\n  Example 4:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,1],[1,0],[1,0]]\n      Output: 1\n\n  Example 5:\n      Input:\n          image = [[1,1,1],[1,0,1],[1,0,1]]\n          mask = [[1,1],[1,1],[0,1]]\n      Output: 4\n\n  Constraints:\n      * image.length == mask.length\n      * image[i].length == mask[i].length\n      * 0 <= image[i][j] <= 1\n      * image.length == m * n\n      * m == mask.length\n      * n == image[i].length\n      * m == image.length\n*/\nconst countWaterPixelsV3 = (image, mask) => {\n  let count = 0;\n  for (let i = 0; i < image.length; i++) {\n    for (let j = 0; j < image[i].length; j++) {\n      if (image[i][j] === 1) {\n        count += Math.max(\n          image[i - 1][j] + 1,\n          image[i][j - 1] + 1,\n          image[i - 1][j - 1] + 1,\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    if (ones > decimal) {\n      return 1;\n    }\n    if (ones < decimal) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    if (ones > decimal) {\n      return -1;\n    }\n    if (ones < decimal) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    if (ones > decimal) {\n      return -1;\n    }\n    if (ones < decimal) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    if (ones > decimal) {\n      return -1;\n    }\n    if (ones < decimal) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    if (ones > decimal) {\n      return -1;\n    }\n    if (ones < decimal) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    if (ones > decimal) {\n      return -1;\n    }\n    if (ones < decimal) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decimal = arr.filter((x) => x === 1).reduce((acc, x) => acc + x, 0);\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    if (ones > decimal) {\n      return -1;\n    }\n    if (ones < decimal) {\n      return 1;\n    }\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length === 0) {\n    return [];\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountFromRight = vowelsCount - 1;\n  let vowelsCountFromLeft = vowelsCount - 2;\n  let vowelsCountFromRightAndLeft = vowelsCount - 3;\n  let vowelsCountFromLeftAndRight = vowelsCount - 4;\n  let vowelsCountFromRightAndLeftAndUp = vowelsCount - 5;\n  let vowelsCountFromLeftAndRightAndUp = vowelsCount - 6;\n  let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n  let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRight = vowelsCount - 9;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 10;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 11;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 12;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 13;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 14;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 15;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 16;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 17;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 18;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 19;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 20;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 21;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 22;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 23;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 24;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 25;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight = vowelsCount - 26;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 27;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown = vowelsCount - 28;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp = vowelsCount - 29;\n  let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  const stackSize = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n      stackSize++;\n    } else if (lst[i] === ')') {\n      if (stackSize === 0) {\n        return 'No';\n      }\n      stackSize--;\n      if (stackSize === 0) {\n        stack.shift();\n      }\n    }\n  }\n  return stackSize === 0;\n};\n\n/* You are given a string S and a string T. Your task is to find out if there\n  is a way to concatenate S and T so that the resulting string will be good. You\n  can concatenate two strings S and T by adding characters from S to T one by\n  one. For example, if S = 'abc' and T = 'def', then you can concatenate S and\n  T by adding 'a' to T, 'b' to T, 'c' to T, 'd' to T, 'e' to T, and 'f' to\n  T. Your task is to find out if there is a way to concatenate S and T so that\n  the resulting string will be good.\n  Return 'Yes' if there's a way to concatenate S and T so that the resulting string\n  will be good, and return 'No' otherwise.\n  Examples:\n  goodConcat('abc', 'def') == 'Yes'\n  goodConcat('abc', 'abd') == 'No'\n  goodConcat('ab', 'ab') == 'Yes'\n  goodConcat('ab', 'abd') == 'No'\n  */\nconst goodConcat = (S, T) => {\n  const stack = [];\n  const stackSize = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === T[i]) {\n      stack.push(S[i]);\n      stackSize++;\n    } else {\n      if (stackSize === 0) {\n        return 'No';\n      }\n      stackSize--;\n      if (stackSize === 0) {\n        stack.shift();\n      }\n    }\n  }\n  return stackSize === 0;\n};\n\n/* You are given a string S and a string T. Your task is to find out if there\n  is a way to concatenate S and T so that the resulting string will be bad. You\n  can concatenate two strings S and T by adding characters from S to T one by\n  one. For example, if S = 'abc' and T = 'def', then you can concatenate S and\n  T by adding 'a' to T, 'b' to T, 'c' to T, 'd' to T, 'e' to T, and 'f' to\n  T. Your task is to find out if there is a way to concatenate S and T so that\n  the resulting string will be bad.\n  Return 'Yes' if there's a way to concatenate S and T so that the resulting string\n  will be bad, and return 'No' otherwise.\n  Examples:\n  badConcat('abc', 'def') == 'No'\n  badConcat('abc', 'abd') == 'Yes'\n  badConcat('ab', 'ab') == 'Yes'\n  badConcat('ab', 'abd') == 'No'\n  */\nconst badConcat = (S, T) => {\n  const stack = [];\n  const stackSize = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === T[i]) {\n      stack.push(S[i]);\n      stackSize++;\n    } else {\n      if (stackSize === 0) {\n        return 'Yes';\n      }\n      stackSize--;\n      if (stackSize === 0) {\n        stack.shift();\n      }\n    }\n  }\n  return stackSize === 0;\n};\n\n/* You are given a string S and a string T. Your task is to find out if there\n  is a way to concatenate S and T so that the resulting string will be good. You\n  can concatenate two strings S and T by adding characters from S to T one by\n  one. For example, if S = 'abc' and T = 'def', then you can concatenate S and\n  T by adding 'a' to T, 'b' to T, 'c' to T, 'd' to T, 'e' to T, and 'f' to\n  T. Your task is to find out if there is a way to concatenate S and T so that\n  the resulting string will be good.\n  Return 'Yes' if there's a way to concatenate S and T so that the resulting string\n  will be good, and return 'No' otherwise.\n  Examples:\n  goodConcat('abc', 'def') == 'Yes'\n  goodConcat('abc', 'abd') == 'No'\n  goodConcat('ab', 'ab') == 'Yes'\n  goodConcat('ab', 'abd') == 'No'\n  */\nconst goodConcat = (S, T) => {\n  const stack = [];\n  const stackSize = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === T[i]) {\n      stack.push(S[i]);\n      stackSize++;\n    } else {\n      if (stackSize === 0) {\n        return 'No';\n      }\n      stackSize--;\n      if (stackSize === 0) {\n        stack.shift();\n      }\n    }\n  }\n  return stackSize === 0;\n};\n\n/* You are given a string S and a string T. Your task is to find out if there\n  is a way to concatenate S and T so that the resulting string will be bad. You\n  can concatenate two strings S and T by adding characters from S to T one by\n  one. For example, if S = 'abc' and T = 'def', then you can concatenate S and\n  T by adding 'a' to T, 'b' to T, 'c' to T, 'd' to T, 'e' to T, and 'f' to\n  T. Your task is to find out if there is a way to concatenate S and T so that\n  the resulting string will be bad.\n  Return 'Yes' if there's a way to concatenate S and T so that the resulting string\n  will be bad, and return 'No' otherwise.\n  Examples:\n  badConcat('abc', 'def') == 'No'\n  badConcat('abc', 'abd') == 'Yes'\n  badConcat('ab', 'ab') == 'Yes'\n  badConcat('ab', 'abd') == 'No'\n  */\nconst badConcat = (S, T) => {\n  const stack = [];\n  const stackSize = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === T[i]) {\n      stack.push(S[i]);\n      stackSize++;\n    } else {\n      if (stackSize === 0) {\n        return 'Yes';\n      }\n      stackSize--;\n      if (stackSize === 0) {\n        stack.shift();\n      }\n    }\n  }\n  return stackSize === 0;\n};\n\n/* You are given a string S and a string T. Your task is to find out if there\n  is a way to concatenate S and T so that the resulting string will be good. You\n  can concatenate two strings S and T by adding characters from S to T one by\n  one. For example, if S = 'abc' and T = 'def', then you can concatenate S and\n  T by adding 'a' to T, 'b' to T, 'c' to T, 'd' to T, 'e' to T, and 'f' to\n  T. Your task is to find out if there is a way to concatenate S and T so that\n  the resulting string will be good.\n  Return 'Yes' if there's a way to concatenate S and T so that the resulting string\n  will be good, and return 'No' otherwise.\n  Examples:\n  goodConcat('abc', 'def", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const longestString = strings[0]\n  const longestLength = longestString.length\n\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    const currentLength = currentString.length\n\n    if (currentLength > longestLength) {\n      longestString = currentString\n      longestLength = currentLength\n    }\n  }\n\n  return longestString\n}\n\n/**\n * Takes a string and returns the first letter of it\n * If no letter found, returns null\n * >>> firstLetter('a')\n  'a'\n  >>> firstLetter('ab')\n  'a'\n  >>> firstLetter('abd')\n  null\n  */\nconst firstLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[0]\n}\n\n/**\n * Takes a string and returns the last letter of it\n * If no letter found, returns null\n * >>> lastLetter('a')\n  'a'\n  >>> lastLetter('ab')\n  'b'\n  >>> lastLetter('abd')\n  null\n  */\nconst lastLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[string.length - 1]\n}\n\n/**\n * Takes a string and returns the first letter of it\n * If no letter found, returns null\n * >>> firstLetter('a')\n  'a'\n  >>> firstLetter('ab')\n  'a'\n  >>> firstLetter('abd')\n  null\n  */\nconst firstLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[0]\n}\n\n/**\n * Takes a string and returns the last letter of it\n * If no letter found, returns null\n * >>> lastLetter('a')\n  'a'\n  >>> lastLetter('ab')\n  'b'\n  >>> lastLetter('abd')\n  null\n  */\nconst lastLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[string.length - 1]\n}\n\n/**\n * Takes a string and returns the first letter of it\n * If no letter found, returns null\n * >>> firstLetter('a')\n  'a'\n  >>> firstLetter('ab')\n  'a'\n  >>> firstLetter('abd')\n  null\n  */\nconst firstLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[0]\n}\n\n/**\n * Takes a string and returns the last letter of it\n * If no letter found, returns null\n * >>> lastLetter('a')\n  'a'\n  >>> lastLetter('ab')\n  'b'\n  >>> lastLetter('abd')\n  null\n  */\nconst lastLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[string.length - 1]\n}\n\n/**\n * Takes a string and returns the first letter of it\n * If no letter found, returns null\n * >>> firstLetter('a')\n  'a'\n  >>> firstLetter('ab')\n  'a'\n  >>> firstLetter('abd')\n  null\n  */\nconst firstLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[0]\n}\n\n/**\n * Takes a string and returns the last letter of it\n * If no letter found, returns null\n * >>> lastLetter('a')\n  'a'\n  >>> lastLetter('ab')\n  'b'\n  >>> lastLetter('abd')\n  null\n  */\nconst lastLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[string.length - 1]\n}\n\n/**\n * Takes a string and returns the first letter of it\n * If no letter found, returns null\n * >>> firstLetter('a')\n  'a'\n  >>> firstLetter('ab')\n  'a'\n  >>> firstLetter('abd')\n  null\n  */\nconst firstLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[0]\n}\n\n/**\n * Takes a string and returns the last letter of it\n * If no letter found, returns null\n * >>> lastLetter('a')\n  'a'\n  >>> lastLetter('ab')\n  'b'\n  >>> lastLetter('abd')\n  null\n  */\nconst lastLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[string.length - 1]\n}\n\n/**\n * Takes a string and returns the first letter of it\n * If no letter found, returns null\n * >>> firstLetter('a')\n  'a'\n  >>> firstLetter('ab')\n  'a'\n  >>> firstLetter('abd')\n  null\n  */\nconst firstLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[0]\n}\n\n/**\n * Takes a string and returns the last letter of it\n * If no letter found, returns null\n * >>> lastLetter('a')\n  'a'\n  >>> lastLetter('ab')\n  'b'\n  >>> lastLetter('abd')\n  null\n  */\nconst lastLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[string.length - 1]\n}\n\n/**\n * Takes a string and returns the first letter of it\n * If no letter found, returns null\n * >>> firstLetter('a')\n  'a'\n  >>> firstLetter('ab')\n  'a'\n  >>> firstLetter('abd')\n  null\n  */\nconst firstLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[0]\n}\n\n/**\n * Takes a string and returns the last letter of it\n * If no letter found, returns null\n * >>> lastLetter('a')\n  'a'\n  >>> lastLetter('ab')\n  'b'\n  >>> lastLetter('abd')\n  null\n  */\nconst lastLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[string.length - 1]\n}\n\n/**\n * Takes a string and returns the first letter of it\n * If no letter found, returns null\n * >>> firstLetter('a')\n  'a'\n  >>> firstLetter('ab')\n  'a'\n  >>> firstLetter('abd')\n  null\n  */\nconst firstLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[0]\n}\n\n/**\n * Takes a string and returns the last letter of it\n * If no letter found, returns null\n * >>> lastLetter('a')\n  'a'\n  >>> lastLetter('ab')\n  'b'\n  >>> lastLetter('abd')\n  null\n  */\nconst lastLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[string.length - 1]\n}\n\n/**\n * Takes a string and returns the first letter of it\n * If no letter found, returns null\n * >>> firstLetter('a')\n  'a'\n  >>> firstLetter('ab')\n  'a'\n  >>> firstLetter('abd')\n  null\n  */\nconst firstLetter = (string) => {\n  if (string.length === 0) {\n    return null\n  }\n\n  return string[0]\n}\n\n/**\n * Takes a string and returns the last letter of it\n * If no letter found, returns null\n * >>> lastLetter('a')\n  'a'\n  >>> lastLetter('ab')\n  'b'\n  >>> lastLetter('abd')\n  null\n  */\nconst ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max && arr[i] <= k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { maxmium };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimium = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min && arr[i] >= k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { minimium };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst max = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max && arr[i] <= k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { max };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst min = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min && arr[i] >= k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { min };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxCount = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxCount = 1;\n    }\n    if (arr[i] > max && arr[i] <= k) {\n      maxCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max && arr[i] <= k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { maxCount };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minCount = (arr, k) => {\n  const result = [];\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minCount = 1;\n    }\n    if (arr[i] < min && arr[i] >= k) {\n      minCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min && arr[i] >= k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { minCount };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxCount2 = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let maxCount = 0;\n  let maxCount2 = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxCount = 1;\n      maxCount2 = 1;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements that are\n  in either of the two given arrays, except the number itself. \n\n  Examples\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  intersect([5, 8, 7, 1], [3, 3, 3, 3, 3]) ==> [8, 7, 3]\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      result.push(currentNumber);\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  const result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      result.push(currentNumber);\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getDescendingCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst getDescendingCollatz = (n) => {\n  const result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      result.push(currentNumber);\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in collatz sequence in ascending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getAscendingCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst getAscendingCollatz = (n) => {\n  const result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      result.push(currentNumber);\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getDescendingCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst getDescendingCollatz = (n) => {\n  const result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      result.push(currentNumber);\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in collatz sequence in ascending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getAscendingCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst getAscendingCollatz = (n) => {\n  const result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      result.push(currentNumber);\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length!== 2) {\n    return false;\n  }\n  if (dateArray[1].length!== 2) {\n    return false;\n  }\n  if (dateArray[2].length!== 4) {\n    return false;\n  }\n  if (dateArray[0] > 12) {\n    return false;\n  }\n  if (dateArray[1] > 12) {\n    return false;\n  }\n  if (dateArray[2] > 31) {\n    return false;\n  }\n  if (dateArray[1] > 30) {\n    return false;\n  }\n  if (dateArray[2] > 29) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which returns the number of days between two given dates.\n  The two dates are valid if all of the following rules are satisfied:\n  1. The dates are not the same.\n  2. The months of the two dates are not less than 1 or higher than 12. And the number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  daysBetween('03-11-2000', '15-01-2012') => 3\n\n  daysBetween('04-0-2040', '06-04-2020') => 3\n\n  daysBetween('06/04/2020', '06/04/2020') => 0\n  */\nconst daysBetween = (date1, date2) => {\n  let dateArray1 = date1.split('-');\n  let dateArray2 = date2.split('-');\n  if (dateArray1 === dateArray2) {\n    return 0;\n  }\n  if (dateArray1.length!== 3 || dateArray2.length!== 3) {\n    return 0;\n  }\n  if (dateArray1[0] > 12 || dateArray2[0] > 12) {\n    return 0;\n  }\n  if (dateArray1[1] > 12 || dateArray2[1] > 12) {\n    return 0;\n  }\n  if (dateArray1[2] > 31 || dateArray2[2] > 31) {\n    return 0;\n  }\n  if (dateArray1[1] > 30 || dateArray2[1] > 30) {\n    return 0;\n  }\n  if (dateArray1[2] > 29 || dateArray2[2] > 29) {\n    return 0;\n  }\n  return dateArray1[1] - dateArray2[1];\n};\n\n/*You have to write a function which returns the number of days between two given dates.\n  The two dates are valid if all of the following rules are satisfied:\n  1. The dates are not the same.\n  2. The months of the two dates are not less than 1 or higher than 12. And the number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  daysBetween('03-11-2000', '15-01-2012') => 3\n\n  daysBetween('04-0-2040', '06-04-2020') => 3\n\n  daysBetween('06/04/2020', '06/04/2020') => 0\n  */\nconst daysBetween = (date1, date2) => {\n  let dateArray1 = date1.split('-');\n  let dateArray2 = date2.split('-');\n  if (dateArray1 === dateArray2) {\n    return 0;\n  }\n  if (dateArray1.length!== 3 || dateArray2.length!== 3) {\n    return 0;\n  }\n  if (dateArray1[0] > 12 || dateArray2[0] > 12) {\n    return 0;\n  }\n  if (dateArray1[1] > 12 || dateArray2[1] > 12) {\n    return 0;\n  }\n  if (dateArray1[2] > 31 || dateArray2[2] > 31) {\n    return 0;\n  }\n  if (dateArray1[1] > 30 || dateArray2[1] > 30) {\n    return 0;\n  }\n  if (dateArray1[2] > 29 || dateArray2[2] > 29) {\n    return 0;\n  }\n  return dateArray1[1] - dateArray2[1];\n};\n\n/*You have to write a function which returns the number of days between two given dates.\n  The two dates are valid if all of the following rules are satisfied:\n  1. The dates are not the same.\n  2. The months of the two dates are not less than 1 or higher than 12. And the number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  daysBetween('03-11-2000', '15-01-2012') => 3\n\n  daysBetween('04-0-2040', '06-04-2020') => 3\n\n  daysBetween('06/04/2020', '06/04/2020') => 0\n  */\nconst daysBetween = (date1, date2) => {\n  let dateArray1 = date1.split('-');\n  let dateArray2 = date2.split('-');\n  if (dateArray1 === dateArray2) {\n    return 0;\n  }\n  if (dateArray1.length!== 3 || dateArray2.length!== 3) {\n    return 0;\n  }\n  if (dateArray1[0] > 12 || dateArray2[0] > 12) {\n    return 0;\n  }\n  if (dateArray1[1] > 12 || dateArray2[1] > 12) {\n    return 0;\n  }\n  if (dateArray1[2] > 31 || dateArray2[2] > 31) {\n    return 0;\n  }\n  if (dateArray1[1] > 30 || dateArray2[1] > 30) {\n    return 0;\n  }\n  if (dateArray1[2] > 29 || dateArray2[2] > 29) {\n    return 0;\n  }\n  return dateArray1[1] - dateArray2[1];\n};\n\n/*You have to write a function which returns the number of days between two given dates.\n  The two dates are valid if all of the following rules are satisfied:\n  1. The dates are not the same.\n  2. The months of the two dates are not less than 1 or higher than 12. And the number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  daysBetween('03-11-2000", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") �", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSortedOrDesc([5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedOrDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length || sorted.length === lst.length - 1;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSortedOrDesc([5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedOrDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length || sorted.length === lst.length - 1;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedOrDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length || sorted.length === lst.length - 1;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedOrDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length || sorted.length === lst.length - 1;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedOrDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length || sorted.length === lst.length - 1;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ true\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1 === end2) return true\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num > 0? 1 : -1;\n    const mag = Math.abs(num);\n    res.push(sign * mag);\n  }\n  return res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num > 0? 1 : -1;\n    const mag = Math.abs(num);\n    res.push(sign * mag);\n  }\n  return res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num > 0? 1 : -1;\n    const mag = Math.abs(num);\n    res.push(sign * mag);\n  }\n  return res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num > 0? 1 : -1;\n    const mag = Math.abs(num);\n    res.push(sign * mag);\n  }\n  return res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num > 0? 1 : -1;\n    const mag = Math.abs(num);\n    res.push(sign * mag);\n  }\n  return res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num > 0? 1 : -1;\n    const mag = Math.abs(num);\n    res.push(sign * mag);\n  }\n  return res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num > 0? 1 : -1;\n    const mag = Math.abs(num);\n    res.push(sign * mag);\n  }\n  return res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num > 0? 1 : -1;\n    const mag = Math.abs(num);\n    res.push(sign * mag);\n  }\n  return res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num > 0? 1 : -1;\n    const mag = Math.abs(num);\n    res.push(sign * mag);\n  }\n  return res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sign = num > 0? 1 : -1;\n    const mag = Math.abs(num);\n    res.push(sign * mag);\n  }\n  return res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const path = new Array(N).fill(0);\n  const visited = new Array(N).fill(0);\n  M[0] = 1;\n  path[0] = 0;\n  for (let i = 1; i < N; i++) {\n    M[i] = M[i - 1] + grid[i - 1].length;\n    path[i] = path[i - 1];\n  }\n  let ans = [];\n  let cur = 0;\n  let min = 0;\n  while (cur < N) {\n    if (M[cur] < min) {\n      min = M[cur];\n      ans = [cur];\n    }\n    cur++;\n    for (let j = 0; j < N; j++) {\n      if (visited[j] === 0 && M[j] < min) {\n        visited[j] = 1;\n        min = M[j];\n        ans.push(j);\n      }\n    }\n  }\n  return ans;\n};\n\n/*\n  Given a 2D array grid of N rows and M columns, each cell is filled with a \n  character 'X' except for in some specific positions adjacent to itself, \n  where adjacent cells have '.' instead. \n  You are trying to capture the case where two or more paths cross, \n  where each path has at least two vertices.\n  Return the number of possible ways to capture all vertices. \n  A solution exists when a path has two or more vertices.\n  Return 0 if there is no such solution.\n\n  Examples:\n\n      Input: grid = [\n      ['.','.','X','.'],\n      ['.','X','.','.'],\n      ['X','.','.','.'],\n      ['.','.','.','X']\n      ]\n      Output: 4\n      Explanation: \n      One possible way to capture all vertices is by starting at (0,0) \n      and moving to (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2). \n      There are four ways to do it.\n\n      Input: grid = [\n      ['.','.','.','.'],\n      ['.','.','.','.'],\n      ['.','.','.','.'],\n      ['.','.','.','.']\n      ]\n      Output: 0\n      Explanation: \n      No way to capture all vertices.\n  */\nconst numWays = (grid) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const visited = new Array(N).fill(0);\n  const path = new Array(N).fill(0);\n  const ans = 0;\n  path[0] = 0;\n  for (let i = 1; i < N; i++) {\n    path[i] = path[i - 1];\n  }\n  visited[0] = 1;\n  for (let i = 1; i < N; i++) {\n    if (visited[i] === 0 && grid[i - 1][M - 1] === 'X') {\n      visited[i] = 1;\n      path[i] = path[i - 1] + 1;\n      ans += path[i];\n    }\n  }\n  return ans;\n};\n\n/*\n  Given a 2D array grid of N rows and M columns. \n  Each cell of the grid contains a character. \n  You are trying to capture the case where two or more paths cross, \n  where each path has at least two vertices.\n  Return the number of possible ways to capture all vertices. \n  A solution exists when a path has two or more vertices.\n  Return 0 if there is no such solution.\n\n  Examples:\n\n      Input: grid = [\n      ['X','.','.','.'],\n      ['.','.','.','.'],\n      ['.','.','.','.'],\n      ['.','.','.','.']\n      ]\n      Output: 4\n      Explanation: \n      One possible way to capture all vertices is by starting at (0,0) \n      and moving to (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2). \n      There are four ways to do it.\n\n      Input: grid = [\n      ['.','.','.','.'],\n      ['.','.','.','.'],\n      ['.','.','.','.'],\n      ['.','.','.','.']\n      ]\n      Output: 0\n      Explanation: \n      No way to capture all vertices.\n  */\nconst numWaysII = (grid) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const visited = new Array(N).fill(0);\n  const path = new Array(N).fill(0);\n  const ans = 0;\n  path[0] = 0;\n  for (let i = 1; i < N; i++) {\n    path[i] = path[i - 1];\n  }\n  visited[0] = 1;\n  for (let i = 1; i < N; i++) {\n    if (visited[i] === 0 && grid[i - 1][M - 1] === 'X') {\n      visited[i] = 1;\n      path[i] = path[i - 1] + 1;\n      ans += path[i];\n    }\n  }\n  return ans;\n};\n\n/*\n  Given a 2D array grid of N rows and M columns. \n  Each cell of the grid contains a character. \n  You are trying to capture the case where two or more paths cross, \n  where each path has at least two vertices.\n  Return the number of possible ways to capture all vertices. \n  A solution exists when a path has two or more vertices.\n  Return 0 if there is no such solution.\n\n  Examples:\n\n      Input: grid = [\n      ['X','.','.','.'],\n      ['.','.','.','.'],\n      ['.','.','.','.'],\n      ['.','.','.','.']\n      ]\n      Output: 4\n      Explanation: \n      One possible way to capture all vertices is by starting at (0,0) \n      and moving to (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2). \n      There are four ways to do it.\n\n      Input: grid = [\n      ['.','.','.','.'],\n      ['.','.','.','.'],\n      ['.','.','.','.'],\n      ['.','.','.','.']\n      ]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  if (a > b) {\n    return a\n  }\n  if (b > a) {\n    return b\n  }\n  let c = a % b\n  while (c!== 0) {\n    c = b\n    b = a % b\n  }\n  return b\n}\n\n// Return true if a is divisible by b\nconst isDivisibleBy = (num, divisor) => {\n  return num % divisor === 0\n}\n\n// Return true if a is divisible by b\nconst isDivisibleByAll = (num, divisors) => {\n  for (let i = 0; i < divisors.length; i++) {\n    if (isDivisibleBy(num, divisors[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleBy(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAllAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleByAll(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAll = (num, divisors) => {\n  for (let i = 0; i < divisors.length; i++) {\n    if (isDivisibleBy(num, divisors[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleBy(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAllAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleByAll(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAll = (num, divisors) => {\n  for (let i = 0; i < divisors.length; i++) {\n    if (isDivisibleBy(num, divisors[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleBy(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAllAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleByAll(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAll = (num, divisors) => {\n  for (let i = 0; i < divisors.length; i++) {\n    if (isDivisibleBy(num, divisors[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleBy(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAllAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleByAll(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAll = (num, divisors) => {\n  for (let i = 0; i < divisors.length; i++) {\n    if (isDivisibleBy(num, divisors[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleBy(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAllAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleByAll(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAll = (num, divisors) => {\n  for (let i = 0; i < divisors.length; i++) {\n    if (isDivisibleBy(num, divisors[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleBy(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAllAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleByAll(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAll = (num, divisors) => {\n  for (let i = 0; i < divisors.length; i++) {\n    if (isDivisibleBy(num, divisors[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleBy(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAllAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleByAll(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAll = (num, divisors) => {\n  for (let i = 0; i < divisors.length; i++) {\n    if (isDivisibleBy(num, divisors[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleBy(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAllAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleByAll(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAll = (num, divisors) => {\n  for (let i = 0; i < divisors.length; i++) {\n    if (isDivisibleBy(num, divisors[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleBy(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAllAny = (a, b) => {\n  for (let i = 0; i < b.length; i++) {\n    if (isDivisibleByAll(a, b[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// Return true if a is divisible by any of b\nconst isDivisibleByAll = (num, divisors) => {\n  for (let i = 0; i < divisors.length; i++) {\n    if (isDivisibleBy(num, divisors[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tir(n - 1) + tir(n - 2) + tir(n + 1));\n    return arr;\n  }\n  arr.push(tir(n - 1) + tir(n - 2));\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, you have to return the number of \n  ways to form a palindrome with length n from the digits 0 to 9.\n  Examples:\n  palindrome(9) = 1\n  palindrome(10) = 2\n  palindrome(11) = 3\n  palindrome(12) = 2\n  palindrome(13) = 1\n  palindrome(14) = 2\n  palindrome(15) = 3\n  palindrome(16) = 2\n  palindrome(17) = 1\n  palindrome(18) = 2\n  palindrome(19) = 3\n  palindrome(20) = 2\n  palindrome(21) = 1\n  palindrome(22) = 2\n  palindrome(23) = 3\n  palindrome(24) = 2\n  palindrome(25) = 1\n  palindrome(26) = 2\n  palindrome(27) = 3\n  palindrome(28) = 2\n  palindrome(29) = 1\n  palindrome(30) = 2\n  palindrome(31) = 3\n  palindrome(32) = 2\n  palindrome(33) = 1\n  palindrome(34) = 2\n  palindrome(35) = 3\n  palindrome(36) = 2\n  palindrome(37) = 1\n  palindrome(38) = 2\n  palindrome(39) = 3\n  palindrome(40) = 2\n  palindrome(41) = 1\n  palindrome(42) = 2\n  palindrome(43) = 3\n  palindrome(44) = 2\n  palindrome(45) = 1\n  palindrome(46) = 2\n  palindrome(47) = 3\n  palindrome(48) = 2\n  palindrome(49) = 1\n  palindrome(50) = 2\n  palindrome(51) = 3\n  palindrome(52) = 2\n  palindrome(53) = 1\n  palindrome(54) = 2\n  palindrome(55) = 3\n  palindrome(56) = 2\n  palindrome(57) = 1\n  palindrome(58) = 2\n  palindrome(59) = 3\n  palindrome(60) = 2\n  palindrome(61) = 1\n  palindrome(62) = 2\n  palindrome(63) = 3\n  palindrome(64) = 2\n  palindrome(65) = 1\n  palindrome(66) = 2\n  palindrome(67) = 3\n  palindrome(68) = 2\n  palindrome(69) = 1\n  palindrome(70) = 2\n  palindrome(71) = 3\n  palindrome(72) = 2\n  palindrome(73) = 1\n  palindrome(74) = 2\n  palindrome(75) = 3\n  palindrome(76) = 2\n  palindrome(77) = 1\n  palindrome(78) = 2\n  palindrome(79) = 3\n  palindrome(80) = 2\n  palindrome(81) = 1\n  palindrome(82) = 2\n  palindrome(83) = 3\n  palindrome(84) = 2\n  palindrome(85) = 1\n  palindrome(86) = 2\n  palindrome(87) = 3\n  palindrome(88) = 2\n  palindrome(89) = 1\n  palindrome(90) = 2\n  palindrome(91) = 3\n  palindrome(92) = 2\n  palindrome(93) = 1\n  palindrome(94) = 2\n  palindrome(95) = 3\n  palindrome(96) = 2\n  palindrome(97) = 1\n  palindrome(98) = 2\n  palindrome(99) = 3\n  palindrome(100) = 2\n  palindrome(101) = 1\n  palindrome(102) = 2\n  palindrome(103) = 3\n  palindrome(104) = 2\n  palindrome(105) = 1\n  palindrome(106) = 2\n  palindrome(107) = 3\n  palindrome(108) = 2\n  palindrome(109) = 1\n  palindrome(110) = 2\n  palindrome(111) = 3\n  palindrome(112) = 2\n  palindrome(113) = 1\n  palindrome(114) = 2\n  palindrome(115) = 3\n  palindrome(116) = 2\n  palindrome(117) = 1\n  palindrome(118) = 2\n  palindrome(119) = 3\n  palindrome(120) = 2\n  palindrome(121) = 1\n  palindrome(122) = 2\n  palindrome(123) = 3\n  palindrome(124) = 2\n  palindrome(125) = 1\n  palindrome(126) = 2\n  palindrome(127) = 3\n  palindrome(128) = 2\n  palindrome(129) = 1\n  palindrome(130) = 2\n  palindrome(131) = 3\n  palindrome(132) = 2\n  palindrome(133) = 1\n  palindrome(134) = 2\n  p", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 7\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n\n      if (openingBrackets === closingBrackets) {\n        openingBrackets = 0;\n        closingBrackets = 0;\n        stack.shift();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested2('[[]]') ➞ true\n  isNested2('[]]]]]]][[[[[]') ➞ false\n  isNested2('[][]') ➞ false\n  isNested2('[]') ➞ false\n  isNested2('[[][]]') ➞ true\n  isNested2('[[]][[') ➞ true\n  */\nconst isNested2 = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n\n      if (openingBrackets === closingBrackets) {\n        openingBrackets = 0;\n        closingBrackets = 0;\n        stack.shift();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested3('[[]]') ➞ true\n  isNested3('[]]]]]]][[[[[]') ➞ false\n  isNested3('[][]') ➞ false\n  isNested3('[]') ➞ false\n  isNested3('[[][]]') ➞ true\n  isNested3('[[]][[') ➞ true\n  */\nconst isNested3 = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n\n      if (openingBrackets === closingBrackets) {\n        openingBrackets = 0;\n        closingBrackets = 0;\n        stack.shift();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested4('[[]]') ➞ true\n  isNested4('[]]]]]]][[[[[]') ➞ false\n  isNested4('[][]') ➞ false\n  isNested4('[]') ➞ false\n  isNested4('[[][]]') ➞ true\n  isNested4('[[]][[') ➞ true\n  */\nconst isNested4 = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n\n      if (openingBrackets === closingBrackets) {\n        openingBrackets = 0;\n        closingBrackets = 0;\n        stack.shift();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested5('[[]]') ➞ true\n  isNested5('[]]]]]]][[[[[]') ➞ false\n  isNested5('[][]') ➞ false\n  isNested5('[]') ➞ false\n  isNested5('[[][]]') ➞ true\n  isNested5('[[]][[') ➞ true\n  */\nconst isNested5 = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n\n      if (openingBrackets === closingBrackets) {\n        openingBrackets = 0;\n        closingBrackets = 0;\n        stack.shift();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested6('[[]]') ➞ true\n  isNested6('[]]]]]]][[[[[]') ➞ false\n  isNested6('[][]') ➞ false\n  isNested6('[]') ➞ false\n  isNested6('[[][]]') ➞ true\n  isNested6('[[]][[') ➞ true\n  */\nconst isNested6 = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n\n      if (openingBrackets === closingBrackets) {\n        openingBrackets = 0;\n        closingBrackets = 0;\n        stack.shift();\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested7('[[]]') ➞ true\n  isNested7('[]]]]]]][[[[[]') ➞ false\n  isNested7('[][]') ➞ false\n  isNested7('[]') ➞ false\n  isNested7('[[][]]') �", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/[a-z]/i);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\d/i);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation mark and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\s+/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\w+/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\w+/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\w+/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\w+/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  check", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[largest]) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 0\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let smallest = arr.length - 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[smallest]) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given value. If no such element exists then\n  return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let closestIndex = -1;\n  let smallestDiff = Number.MAX_VALUE;\n  for (let i = 0; i < arr.length; i++) {\n    const diff = arr[i] - arr[0];\n    if (diff < smallestDiff) {\n      smallestDiff = diff;\n      closestIndex = i;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given value. If no such element exists then\n  return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let closestIndex = -1;\n  let largestDiff = Number.MAX_VALUE;\n  for (let i = 0; i < arr.length; i++) {\n    const diff = arr[i] - arr[0];\n    if (diff > largestDiff) {\n      largestDiff = diff;\n      closestIndex = i;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given value. If no such element exists then\n  return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let closestIndex = -1;\n  let smallestDiff = Number.MAX_VALUE;\n  let largestDiff = Number.MAX_VALUE;\n  for (let i = 0; i < arr.length; i++) {\n    const diff = arr[i] - arr[0];\n    if (diff < smallestDiff) {\n      smallestDiff = diff;\n      closestIndex = i;\n    } else if (diff > largestDiff) {\n      largestDiff = diff;\n      closestIndex = i;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given value. If no such element exists then\n  return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let closestIndex = -1;\n  let smallestDiff = Number.MAX_VALUE;\n  let largestDiff = Number.MAX_VALUE;\n  for (let i = 0; i < arr.length; i++) {\n    const diff = arr[i] - arr[0];\n    if (diff < smallestDiff) {\n      smallestDiff = diff;\n      closestIndex = i;\n    } else if (diff > largestDiff) {\n      largestDiff = diff;\n      closestIndex = i;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given value. If no such element exists then\n  return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let closestIndex = -1;\n  let smallestDiff = Number.MAX_VALUE;\n  let largestDiff = Number.MAX_VALUE;\n  for (let i = 0; i < arr.length; i++) {\n    const diff = arr[i] - arr[0];\n    if (diff < smallestDiff) {\n      smallestDiff = diff;\n      closestIndex = i;\n    } else if (diff > largestDiff) {\n      largestDiff = diff;\n      closestIndex = i;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given value. If no such element exists then\n  return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let closestIndex = -1;\n  let smallestDiff = Number.MAX_VALUE;\n  let largestDiff = Number.MAX_VALUE;\n  for (let i = 0; i < arr.length; i++) {\n    const diff = arr[i] - arr[0];\n    if (diff < smallestDiff) {\n      smallestDiff = diff;\n      closestIndex = i;\n    } else if (diff > largestDiff) {\n      largestDiff = diff;\n      closestIndex = i;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given value. If no such element exists then\n  return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let closestIndex = -1;\n  let smallestDiff = Number.MAX_VALUE;\n  let largestDiff = Number.MAX_VALUE;\n  for (let i = 0; i < arr.length; i++) {\n    const diff = arr[i] - arr[0];\n    if (diff < smallestDiff) {\n      smallestDiff = diff;\n      closestIndex = i;\n    } else if (diff > largestDiff) {\n      largestDiff = diff;\n      closestIndex = i;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given value. If no such element exists then\n  return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let closestIndex = -1;\n  let smallestDiff = Number.MAX_VALUE;\n  let largestDiff = Number.MAX_VALUE;\n  for (let i = 0; i < arr.length; i++) {\n    const diff = arr[i] - arr[0];\n    if (diff < smallestDiff) {\n      smallestDiff = diff;\n      closestIndex = i;\n    } else if (diff > largestDiff) {\n      largestDiff = diff;\n      closestIndex = i;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given value. If no such element exists then\n  return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let closestIndex = -1;\n  let smallestDiff = Number.MAX_VALUE;\n  let largestDiff = Number.MAX_VALUE;\n  for (let i = 0; i < arr.length; i++) {\n    const diff = arr[i] - arr[0];\n    if (diff < smallestDiff) {\n      smallestDiff = diff", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestLargestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestLargestIntgeers([]) == (null, null)\n  lagrestLargestIntgeers([0]) == (null, null)\n  */\nconst lagrestLargestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] > smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] < largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestLargestIntgeers([2, 4, 1, 3, 5, 7]) == (null, null)\n  lagrestLargestIntgeers([]) == (null, null)\n  lagrestLargestIntgeers([0]) == (null, null)\n  */\nconst lagrestLargestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] > smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] < largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestLargestIntgeers([2, 4, 1, 3, 5, 7]) == (null, null)\n  lagrestLargestIntgeers([]) == (null, null)\n  lagrestLargestIntgeers([0]) == (null, null)\n  */\nconst lagrestLargestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] > smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] < largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestLargestIntgeers([2, 4, 1, 3, 5, 7]) == (null, null)\n  lagrestLargestIntgeers([]) == (null, null)\n  lagrestLargestIntgeers([0]) == (null, null)\n  */\nconst lagrestLargestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] > smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] < largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, null)\n  lagrestSmallestIntgeers([]) == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return b\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\" || b === \"-\") return b\n  if (a === \"+\" || b === \"+\") return b\n  if (a === \"*\" || b === \"*\") return b\n  if (a === \"/\" || b === \"/\") return b\n  if (a === \"^\" || b === \"^\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b\n  if (a === \"<=\" || b === \"<=\") return b\n  if (a === \">=\" || b === \">=\") return b\n  if (a === \"==\" || b === \"==\") return b\n  if (a === \"!=\" || b === \"!=\") return b\n  if (a === \"<\" || b === \"<\") return b\n  if (a === \">\" || b === \">\") return b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == true\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddPositive(4) == false\n  isEqualToSumOddPositive(6) == true\n  isEqualToSumOddPositive(8) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegative(4) == false\n  isEqualToSumEvenNegative(6) == false\n  isEqualToSumEvenNegative(8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddNegative(4) == false\n  isEqualToSumOddNegative(6) == true\n  isEqualToSumOddNegative(8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositive(-4) == false\n  isEqualToSumEvenPositive(-6) == false\n  isEqualToSumEvenPositive(-8) == true\n  */\nconst isEqualToSumEvenPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddPositive(-4) == false\n  isEqualToSumOddPositive(-6) == true\n  isEqualToSumOddPositive(-8) == true\n  */\nconst isEqualToSumOddPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegative(-4) == false\n  isEqualToSumEvenNegative(-6) == false\n  isEqualToSumEvenNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddNegative(-4) == false\n  isEqualToSumOddNegative(-6) == true\n  isEqualToSumOddNegative(-8) == true\n  */\nconst isEqualToSumOddNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddPositivePositive(4) == false\n  isEqualToSumOddPositivePositive(6) == true\n  isEqualToSumOddPositivePositive(8) == true\n  */\nconst isEqualToSumOddPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegativePositive(4) == false\n  isEqualToSumEvenNegativePositive(6) == false\n  isEqualToSumEvenNegativePositive(8) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddNegativePositive(4) == false\n  isEqualToSumOddNegativePositive(6) == true\n  isEqualToSumOdd", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial2 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial3 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial4 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial5 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial6 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial7 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial8 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial9 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial10 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial11 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial12 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial13 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial14 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial15 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial16 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial17 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial18 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial19 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n*/\nconst brazilianFactorial20 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives a number as input and returns the factorial of\n  that number in Brazilian notation.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    prefix += string[i];\n    if (string[i]!== prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix += string[i];\n    if (string[i]!== suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    if (string[i]!== substring) {\n      substrings.push(substring);\n      substring = '';\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\");\n};\n\n/*\n  Given a string text, \n  replace all consecutive underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example 1\") == \"Example_1\"\n  fixUnderscores(\"Example_1\") == \"Example_1\"\n  fixUnderscores(\"Example__1\") == \"Example__1\"\n  fixUnderscores(\"Example____1\") == \"Example____1\"\n  fixUnderscores(\"Example______1\") == \"Example______1\"\n  fixUnderscores(\"Example______1_\") == \"Example______1_\"\n  fixUnderscores(\"Example______1__\") == \"Example______1__\"\n  fixUnderscores(\"Example______1___\") == \"Example______1___\"\n  fixUnderscores(\"Example______1___1\") == \"Example______1___1\"\n  fixUnderscores(\"Example______1___1_\") == \"Example______1___1_\"\n  fixUnderscores(\"Example______1___1__\") == \"Example______1___1__\"\n  fixUnderscores(\"Example______1___1___\") == \"Example______1___1___\"\n  fixUnderscores(\"Example______1___1___1\") == \"Example______1___1___1\"\n  fixUnderscores(\"Example______1___1___1_\") == \"Example______1___1___1_\"\n  fixUnderscores(\"Example______1___1___1__\") == \"Example______1___1___1__\"\n  fixUnderscores(\"Example______1___1___1___\") == \"Example______1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1\") == \"Example______1___1___1___1\"\n  fixUnderscores(\"Example______1___1___1___1_\") == \"Example______1___1___1___1_\"\n  fixUnderscores(\"Example______1___1___1___1__\") == \"Example______1___1___1___1__\"\n  fixUnderscores(\"Example______1___1___1___1___\") == \"Example______1___1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1___1\") == \"Example______1___1___1___1___1\"\n  fixUnderscores(\"Example______1___1___1___1___1_\") == \"Example______1___1___1___1___1_\"\n  fixUnderscores(\"Example______1___1___1___1___1__\") == \"Example______1___1___1___1___1__\"\n  fixUnderscores(\"Example______1___1___1___1___1___\") == \"Example______1___1___1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1___1___1\") == \"Example______1___1___1___1___1___1\"\n  fixUnderscores(\"Example______1___1___1___1___1___1_\") == \"Example______1___1___1___1___1___1_\"\n  fixUnderscores(\"Example______1___1___1___1___1___1__\") == \"Example______1___1___1___1___1___1__\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___\") == \"Example______1___1___1___1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1\") == \"Example______1___1___1___1___1___1___1\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1_\") == \"Example______1___1___1___1___1___1___1_\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1__\") == \"Example______1___1___1___1___1___1___1__\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___\") == \"Example______1___1___1___1___1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___\") == \"Example______1___1___1___1___1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___1\") == \"Example______1___1___1___1___1___1___1___1\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___1_\") == \"Example______1___1___1___1___1___1___1___1_\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1__\") == \"Example______1___1___1___1___1___1___1__\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___\") == \"Example______1___1___1___1___1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___1__\") == \"Example______1___1___1___1___1___1___1___1__\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___\") == \"Example______1___1___1___1___1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___\") == \"Example______1___1___1___1___1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___1___\") == \"Example______1___1___1___1___1___1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___1___\") == \"Example______1___1___1___1___1___1___1___1___\"\n  fixUnderscores(\"Example______1___1___1___1___1___1___1___1___\") == \"Example______1___1___1___1___", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3Or4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4 and is greater than or equal to 5.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 3\n  */\nconst countDivisibleBy3Or4AndGreaterOrEqualTo5 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0 || i >= 5) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4 and is less than or equal to 5.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 2\n  */\nconst countDivisibleBy3Or4AndLessOrEqualTo5 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0 || i <= 5) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4 and is less than or equal to 5 and is greater than or equal to 3.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 1\n  */\nconst countDivisibleBy3Or4AndLessOrEqualTo5AndGreaterOrEqualTo3 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0 || i <= 5 && i >= 3) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4 and is less than or equal to 5 and is greater than or equal to 3 and is greater than or equal to 4.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 1\n  */\nconst countDivisibleBy3Or4AndLessOrEqualTo5AndGreaterOrEqualTo3AndGreaterOrEqualTo4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0 || i <= 5 && i >= 3 && i <= 4) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4 and is less than or equal to 5 and is greater than or equal to 3 and is greater than or equal to 4 and is greater than or equal to 5.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 1\n  */\nconst countDivisibleBy3Or4AndLessOrEqualTo5AndGreaterOrEqualTo3AndGreaterOrEqualTo4AndGreaterOrEqualTo5 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0 || i <= 5 && i >= 3 && i <= 4 && i >= 5) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4 and is less than or equal to 5 and is greater than or equal to 3 and is greater than or equal to 4 and is greater than or equal to 5 and is greater than or equal to 6.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 1\n  */\nconst countDivisibleBy3Or4AndLessOrEqualTo5AndGreaterOrEqualTo3AndGreaterOrEqualTo4AndGreaterOrEqualTo5AndGreaterOrEqualTo6 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0 || i <= 5 && i >= 3 && i <= 4 && i >= 5 && i >= 6) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4 and is less than or equal to 5 and is greater than or equal to 3 and is greater than or equal to 4 and is greater than or equal to 5 and is greater than or equal to 6 and is greater than or equal to 7.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 1\n  */\nconst countDivisibleBy3Or4AndLessOrEqualTo5AndGreaterOrEqualTo3AndGreaterOrEqualTo4AndGreaterOrEqualTo5AndGreaterOrEqualTo6AndGreaterOrEqualTo7 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0 || i <= 5 && i >= 3 && i <= 4 && i >= 5 && i >= 6 && i >= 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3 or 4 and is less than or equal to 5 and is greater than or equal to 3 and is greater than or equal to 4 and is greater than or equal to 5 and is greater than or equal to 6 and is greater than or equal to 7 and is greater than or equal to 8.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j].match(/\\d/)) {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wrodsInSentenec,\n  wrodsInSentenec2 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec3 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j].match(/\\d/)) {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wrodsInSentenec3,\n  wrodsInSentenec4 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec5 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j].match(/\\d/)) {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wrodsInSentenec5,\n  wrodsInSentenec6 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec7 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j].match(/\\d/)) {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wrodsInSentenec7,\n  wrodsInSentenec8 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec9 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j].match(/\\d/)) {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wrodsInSentenec9,\n  wrodsInSentenec10 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec11 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j].match(/\\d/)) {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wrodsInSentenec11,\n  wrodsInSentenec12 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec13 = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j].match(/\\d/)) {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { wrodsInSentenec13,\n  wrodsInSentenec14 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "<|endoftext|>/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((a, v) => a + v, 0));\n  const sorted = sums.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const index = sorted.indexOf(num);\n    if (index!== -1) {\n      result.push(num);\n      sorted.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((a, v) => a + v, 0));\n  const sorted = sums.sort((a, b) => b - a);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const index = sorted.indexOf(num);\n    if (index!== -1) {\n      result.push(num);\n      sorted.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((a, v) => a + v, 0));\n  const sorted = sums.sort((a, b) => b - a);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const index = sorted.indexOf(num);\n    if (index!== -1) {\n      result.push(num);\n      sorted.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((a, v) => a + v, 0));\n  const sorted = sums.sort((a, b) => b - a);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const index = sorted.indexOf(num);\n    if (index!== -1) {\n      result.push(num);\n      sorted.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((a, v) => a + v, 0));\n  const sorted = sums.sort((a, b) => b - a);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const index = sorted.indexOf(num);\n    if (index!== -1) {\n      result.push(num);\n      sorted.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((a, v) => a + v, 0));\n  const sorted = sums.sort((a, b) => b - a);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const index = sorted.indexOf(num);\n    if (index!== -1) {\n      result.push(num);\n      sorted.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((a, v) => a + v, 0));\n  const sorted = sums.sort((a, b) => b - a);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const index = sorted.indexOf(num);\n    if (index!== -1) {\n      result.push(num);\n      sorted.splice(index, 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-12, -11, 1, 11, -1]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPointsDesc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((a, v) => a + v, 0));\n  const sorted = sums.sort", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the elements in the array.\n  For example:\n  sumArray([15, -73, 14, -15]) => -23\n  sumArray([33, -2, -3, 45, 21, 109]) => -26\n  */\nconst sumArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the elements in the array.\n  For example:\n  productArray([15, -73, 14, -15]) => -75\n  productArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  largestArray([15, -73, 14, -15]) => -15\n  largestArray([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst largestArray = (nums) => {\n  let largest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n    }\n  }\n  return largest;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  smallestArray([15, -73, 14, -15]) => -15\n  smallestArray([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst smallestArray = (nums) => {\n  let smallest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < smallest) {\n      smallest = nums[i];\n    }\n  }\n  return smallest;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the even numbers in the array.\n  For example:\n  evenSumArray([15, -73, 14, -15]) => -23\n  evenSumArray([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst evenSumArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the odd numbers in the array.\n  For example:\n  oddSumArray([15, -73, 14, -15]) => -45\n  oddSumArray([33, -2, -3, 45, 21, 109]) => -23\n  */\nconst oddSumArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the even numbers in the array.\n  For example:\n  evenProductArray([15, -73, 14, -15]) => -75\n  evenProductArray([33, -2, -3, 45, 21, 109]) => -90\n  */\nconst evenProductArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the odd numbers in the array.\n  For example:\n  oddProductArray([15, -73, 14, -15]) => -90\n  oddProductArray([33, -2, -3, 45, 21, 109]) => -75\n  */\nconst oddProductArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1) {\n      product *= nums[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 3.\n  For example:\n  divisibleBy3Array([15, -73, 14, -15]) => -23\n  divisibleBy3Array([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst divisibleBy3Array = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 3 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 5.\n  For example:\n  divisibleBy5Array([15, -73, 14, -15]) => -45\n  divisibleBy5Array([33, -2, -3, 45, 21, 109]) => -90\n  */\nconst divisibleBy5Array = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 5 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 7.\n  For example:\n  divisibleBy7Array([15, -73, 14, -15]) => -90\n  divisibleBy7Array([33, -2, -3, 45, 21, 109]) => -75\n  */\nconst divisibleBy7Array = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 7 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 11.\n  For example:\n  divisibleBy11Array([15, -73, 14, -15]) => -75\n  divisibleBy11Array([33, -2, -3, 45, 21, 109]) => -90\n  */\nconst divisibleBy11Array = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 11 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 13.\n  For example:\n  divisibleBy13Array([15, -73, 14, -15]) => -90\n  divisibleBy13Array([33, -2, -3, 45, 21, 109]) => -75\n  */\nconst divisibleBy13Array = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 13 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array that are divisible by 17.\n  For example:\n  divisibleBy17Array([15, -73, 14, -15]) => -75\n  divisibleBy17Array([33, -2, -3, 45, 21, 109]) => -90\n  */\nconst divisibleBy17Array = (nums) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\nconsole.log(getMaxTrpiles(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 tags=arrays,javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet1\n  );\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = planets[planet1];\n  const orbit2 = planets[planet2];\n  const distance = Math.abs(orbit1 - orbit2);\n  const orbits = [orbit1, orbit2];\n  const sortedOrbits = orbits.sort((a, b) => a - b);\n  const sortedOrbit = sortedOrbits[0];\n  const sortedOrbits = sortedOrbits.filter(\n    orbit => orbit!== sortedOrbit && orbit < distance\n  );\n  return sortedOrbits;\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet1\n  );\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = planets[planet1];\n  const orbit2 = planets[planet2];\n  const distance = Math.abs(orbit1 - orbit2);\n  const orbits = [orbit1, orbit2];\n  const sortedOrbits = orbits.sort((a, b) => a - b);\n  const sortedOrbit = sortedOrbits[0];\n  const sortedOrbits = sortedOrbits.filter(\n    orbit => orbit!== sortedOrbit && orbit < distance\n  );\n  return sortedOrbits;\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planet1 = planets.findIndex(\n    planet => planet === planet1 || planet === planet2\n  );\n  const planet2 = planets.findIndex(\n    planet => planet === planet2 || planet === planet1\n  );\n  if (planet1 === -1 || planet2 === -1) {\n    return [];\n  }\n  const orbit1 = planets[planet1];\n  const orbit2 = planets[planet2];\n  const distance = Math.abs(orbit1 - orbit2);\n  const orbits = [orbit1, orbit2];\n  const sortedOrbits = orbits.sort((a, b) => a - b);\n  const sortedOrbit = sortedOrbits[0];\n  const sortedOrbits = sortedOrbits.filter(\n    orbit => orbit!== sortedOrbit && orbit < distance\n  );\n  return sortedOrbits;\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Ven", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = [...lst].sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = [...lst].sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = [...lst].sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = [...lst].sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = [...lst].sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = [...lst].sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = [...lst].sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    }\n    return a.length - b.length;\n  });\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaces = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithCommas = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(',');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDots = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommas = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndSpaces = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('.. ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndSpaces = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndDots = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,.');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndDotsAndSpaces = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,.');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndDotsAndCommas = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,..');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndDotsAndCommasAndSpaces = (\n  n\n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,..');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndDotsAndCommasAndDots = (\n  n\n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,..,');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndDotsAndCommasAndDotsAndSpaces = (\n  n\n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,..,');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndDotsAndCommasAndDotsAndCommas = (\n  n\n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,..,..');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndDotsAndCommasAndDotsAndCommasAndSpaces = (\n  n\n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,..,..');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndDotsAndCommasAndDotsAndCommasAndDots = (\n  n\n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,..,..,');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndCommasAndDotsAndCommasAndDotsAndCommasAndDotsAndSpaces = (\n  n\n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join('..,..,..,');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithDotsAndComm", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));</code>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm.length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abracadabra' should return the\n  following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring uppercase and lowercase letters. For example,\n  the string 'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring punctuation. For example, the string 'abracadabra'\n  should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring spaces. For example, the string 'abracadabra'\n  should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring numbers. For example, the string 'abracadabra'\n  should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring special characters. For example, the string\n  'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring uppercase and lowercase letters, ignoring punctuation,\n  ignoring spaces, ignoring numbers, and ignoring special characters. For example,\n  the string 'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring uppercase and lowercase letters, ignoring punctuation,\n  ignoring spaces, ignoring numbers, and ignoring special characters. For example,\n  the string 'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring uppercase and lowercase letters, ignoring punctuation,\n  ignoring spaces, ignoring numbers, and ignoring special characters. For example,\n  the string 'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring uppercase and lowercase letters, ignoring punctuation,\n  ignoring spaces, ignoring numbers, and ignoring special characters. For example,\n  the string 'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring uppercase and lowercase letters, ignoring punctuation,\n  ignoring spaces, ignoring numbers, and ignoring special characters. For example,\n  the string 'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring uppercase and lowercase letters, ignoring punctuation,\n  ignoring spaces, ignoring numbers, and ignoring special characters. For example,\n  the string 'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring uppercase and lowercase letters, ignoring punctuation,\n  ignoring spaces, ignoring numbers, and ignoring special characters. For example,\n  the string 'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring uppercase and lowercase letters, ignoring punctuation,\n  ignoring spaces, ignoring numbers, and ignoring special characters. For example,\n  the string 'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of times each character\n  appears in the string, ignoring uppercase and lowercase letters, ignoring punctuation,\n  ignoring spaces, ignoring numbers, and ignoring special characters. For example,\n  the string 'abracadabra' should return the following object:\n  {\n    a: 2,\n    b: 2,\n    c: 2,\n    r: 2,\n    a: 2,\n    d: 1\n  }\n  Write a function that takes a string and returns the number of ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  if (a.length > b.length) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else if (a[i] > b[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return j === b.length;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => true\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => true\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => true\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc2 = (a, b) => {\n  if (a.length > b.length) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else if (a[i] > b[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return j === b.length;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => true\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => true\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => true\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc3 = (a, b) => {\n  if (a.length > b.length) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else if (a[i] > b[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return j === b.length;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => true\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => true\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => true\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc4 = (a, b) => {\n  if (a.length > b.length) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else if (a[i] > b[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return j === b.length;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => true\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => true\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => true\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc5 = (a, b) => {\n  if (a.length > b.length) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else if (a[i] > b[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return j === b.length;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => true\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => true\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => true\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc6 = (a, b) => {\n  if (a.length > b.length) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else if (a[i] > b[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return j === b.length;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => true\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => true\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => true\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc7 = (a, b) => {\n  if (a.length > b.length) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else if (a[i] > b[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return j === b.length;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => true\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => true\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => true\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc8 = (a, b) => {\n  if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toLowerCase() + romanNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxRioman(19) == 'XIX'\n  >>> intToMaxRioman(152) == 'CLII'\n  >>> intToMaxRioman(426) == 'CDXXVI'\n  */\nconst intToMaxRioman = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toUpperCase() + romanNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinDecimal(19) == '19'\n  >>> intToMinDecimal(152) == '152'\n  >>> intToMinDecimal(426) == '426'\n  */\nconst intToMinDecimal = (number) => {\n  const decimal = decimalNumerals(number);\n  return decimal.map((decimalNumber) => {\n    return decimalNumber.charAt(0).toLowerCase() + decimalNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxDecimal(19) == '19'\n  >>> intToMaxDecimal(152) == '152'\n  >>> intToMaxDecimal(426) == '426'\n  */\nconst intToMaxDecimal = (number) => {\n  const decimal = decimalNumerals(number);\n  return decimal.map((decimalNumber) => {\n    return decimalNumber.charAt(0).toUpperCase() + decimalNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinBinary(19) == '11'\n  >>> intToMinBinary(152) == '1111'\n  >>> intToMinBinary(426) == '111111'\n  */\nconst intToMinBinary = (number) => {\n  const binary = binaryNumerals(number);\n  return binary.map((binaryNumber) => {\n    return binaryNumber.charAt(0).toLowerCase() + binaryNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxBinary(19) == '11'\n  >>> intToMaxBinary(152) == '1111'\n  >>> intToMaxBinary(426) == '111111'\n  */\nconst intToMaxBinary = (number) => {\n  const binary = binaryNumerals(number);\n  return binary.map((binaryNumber) => {\n    return binaryNumber.charAt(0).toUpperCase() + binaryNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinHex(19) == '19'\n  >>> intToMinHex(152) == '152'\n  >>> intToMinHex(426) == '426'\n  */\nconst intToMinHex = (number) => {\n  const hex = hexNumerals(number);\n  return hex.map((hexNumber) => {\n    return hexNumber.charAt(0).toLowerCase() + hexNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxHex(19) == '19'\n  >>> intToMaxHex(152) == '152'\n  >>> intToMaxHex(426) == '426'\n  */\nconst intToMaxHex = (number) => {\n  const hex = hexNumerals(number);\n  return hex.map((hexNumber) => {\n    return hexNumber.charAt(0).toUpperCase() + hexNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinOct(19) == '19'\n  >>> intToMinOct(152) == '152'\n  >>> intToMinOct(426) == '426'\n  */\nconst intToMinOct = (number) => {\n  const oct = octNumerals(number);\n  return oct.map((octNumber) => {\n    return octNumber.charAt(0).toLowerCase() + octNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxOct(19) == '19'\n  >>> intToMaxOct(152) == '152'\n  >>> intToMaxOct(426) == '426'\n  */\nconst intToMaxOct = (number) => {\n  const oct = octNumerals(number);\n  return oct.map((octNumber) => {\n    return octNumber.charAt(0).toUpperCase() + octNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinHex(19) == '19'\n  >>> intToMinHex(152) == '152'\n  >>> intToMinHex(426) == '426'\n  */\nconst intToMinHex = (number) => {\n  const hex = hexNumerals(number);\n  return hex.map((hexNumber) => {\n    return hexNumber.charAt(0).toLowerCase() + hexNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxHex(19) == '19'\n  >>> intToMaxHex(152) == '152'\n  >>> intToMaxHex(426) == '426'\n  */\nconst intToMaxHex = (number) => {\n  const hex = hexNumerals(number);\n  return hex.map((hexNumber) => {\n    return hexNumber.charAt(0).toUpperCase() + hexNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinOct(19) == '19'\n  >>> intToMinOct(152) == '152'\n  >>> intToMinOct(426) == '426'\n  */\nconst intToMinOct = (number) => {\n  const oct = octNumerals(number);\n  return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  360 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which one angle is equal to\n  90 or 180 degree.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  360 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which one angle is equal to\n  90 or 180 degree.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  360 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which one angle is equal to\n  90 or 180 degree.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  360 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc === ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which one angle is equal to\n  90 or 180 degree.\n  Example:\n  scaleneTri", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > max) {\n      max = words[i].length;\n      word = words[i];\n    }\n  }\n  return word;\n};\n\n/*Write a function that accepts a string and returns a string where all the\n  vowels are replaced by \"y\".\n\n  replaceVowels(\"hello\") === \"yellyy\"\n  replaceVowels(\"hellooo\") === \"yellyy\"\n  replaceVowels(\"helloooo\") === \"yellyy\"\n  */\nconst replaceVowels = (str) => {\n  let vowels = \"aeiouAEIOU\";\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) > -1) {\n      newStr += `y${str[i]}`;\n    } else {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string where all the\n  consonants are replaced by \"y\".\n\n  replaceConsonants(\"hello\") === \"yellyy\"\n  replaceConsonants(\"hellooo\") === \"yellyy\"\n  replaceConsonants(\"helloooo\") === \"yellyy\"\n  */\nconst replaceConsonants = (str) => {\n  let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (consonants.indexOf(str[i]) > -1) {\n      newStr += `y${str[i]}`;\n    } else {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string where all the\n  letters are replaced by \"y\".\n\n  replaceLetters(\"hello\") === \"yellyy\"\n  replaceLetters(\"hellooo\") === \"yellyy\"\n  replaceLetters(\"helloooo\") === \"yellyy\"\n  */\nconst replaceLetters = (str) => {\n  let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (letters.indexOf(str[i]) > -1) {\n      newStr += `y${str[i]}`;\n    } else {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string where all the\n  numbers are replaced by \"y\".\n\n  replaceNumbers(\"hello\") === \"yellyy\"\n  replaceNumbers(\"hellooo\") === \"yellyy\"\n  replaceNumbers(\"helloooo\") === \"yellyy\"\n  */\nconst replaceNumbers = (str) => {\n  let numbers = \"1234567890\";\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (numbers.indexOf(str[i]) > -1) {\n      newStr += `y${str[i]}`;\n    } else {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string where all the\n  special characters are replaced by \"y\".\n\n  replaceSpecialChars(\"hello\") === \"yellyy\"\n  replaceSpecialChars(\"hellooo\") === \"yellyy\"\n  replaceSpecialChars(\"helloooo\") === \"yellyy\"\n  */\nconst replaceSpecialChars = (str) => {\n  let specialChars = \"!@#$%^&*()_+=-`~[]{}:;'<>,./?\";\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (specialChars.indexOf(str[i]) > -1) {\n      newStr += `y${str[i]}`;\n    } else {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string where all the\n  words are replaced by \"y\".\n\n  replaceWords(\"hello\") === \"yellyy\"\n  replaceWords(\"hellooo\") === \"yellyy\"\n  replaceWords(\"helloooo\") === \"yellyy\"\n  */\nconst replaceWords = (str) => {\n  let words = \"aardvark\";\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (words.indexOf(str[i]) > -1) {\n      newStr += `y${str[i]}`;\n    } else {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string where all the\n  punctuation marks are replaced by \"y\".\n\n  replacePunctuation(\"hello\") === \"yellyy\"\n  replacePunctuation(\"hellooo\") === \"yellyy\"\n  replacePunctuation(\"helloooo\") === \"yellyy\"\n  */\nconst replacePunctuation = (str) => {\n  let punctuation = \".,?!\";\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (punctuation.indexOf(str[i]) > -1) {\n      newStr += `y${str[i]}`;\n    } else {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string where all the\n  words are replaced by \"y\".\n\n  replaceAll(\"hello\") === \"yellyy\"\n  replaceAll(\"hellooo\") === \"yellyy\"\n  replaceAll(\"helloooo\") === \"yellyy\"\n  */\nconst replaceAll = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    newStr += replaceVowels(replaceConsonants(replaceLetters(replaceNumbers(replaceSpecialChars(replaceWords(replacePunctuation(str[i])))))));\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string where all the\n  words are replaced by \"y\".\n\n  replaceAll(\"hello\") === \"yellyy\"\n  replaceAll(\"hellooo\") === \"yellyy\"\n  replaceAll(\"helloooo\") === \"yellyy\"\n  */\nconst replaceAll = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    newStr += replaceVowels(replaceConsonants(replaceLetters(replaceNumbers(replaceSpecialChars(replaceWords(replacePunctuation(str[i])))))));\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string where all the\n  words are replaced by \"y\".\n\n  replaceAll(\"hello\") === \"yellyy\"\n  replaceAll(\"hellooo\") === \"yellyy\"\n  replaceAll(\"helloooo\") === \"yellyy\"\n  */\nconst replaceAll = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    newStr += replaceVowels(replaceConsonants(replaceLetters(replaceNumbers(replaceSpecialChars(replaceWords(replacePunctuation(str[i])))))));\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0 && remaining > 0) {\n    result.push(carrots - needs);\n    carrots = carrots - needs;\n    needs = needs - remaining;\n    remaining = remaining - carrots;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0 && remaining > 0) {\n    result.push(carrots - needs);\n    carrots = carrots - needs;\n    needs = needs - remaining;\n    remaining = remaining - carrots;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0 && remaining > 0) {\n    result.push(carrots - needs);\n    carrots = carrots - needs;\n    needs = needs - remaining;\n    remaining = remaining - carrots;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0 && remaining > 0) {\n    result.push(carrots - needs);\n    carrots = carrots - needs;\n    needs = needs - remaining;\n    remaining = remaining - carrots;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0 && remaining > 0) {\n    result.push(carrots - needs);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const stack = [];\n  let result = 0;\n\n  for (let i = 0; i < operand.length; i++) {\n    const currentOperand = operand[i];\n    const currentOperator = operator[stack.length];\n\n    if (currentOperand === undefined) {\n      stack.push(currentOperator);\n      continue;\n    }\n\n    switch (currentOperator) {\n      case '+':\n        stack.push(currentOperand);\n        break;\n      case '-':\n        stack.push(currentOperand);\n        break;\n      case '*':\n        stack.push(currentOperand);\n        break;\n      case '/':\n        stack.push(currentOperand);\n        break;\n      case '**':\n        stack.push(currentOperand);\n        break;\n      default:\n        throw Error('Invalid operator');\n    }\n  }\n\n  while (stack.length > 0) {\n    const currentOperator = stack.pop();\n    result += currentOperator;\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const stack = [];\n  let result = 0;\n\n  for (let i = 0; i < operand.length; i++) {\n    const currentOperand = operand[i];\n    const currentOperator = operator[stack.length];\n\n    if (currentOperand === undefined) {\n      stack.push(currentOperator);\n      continue;\n    }\n\n    switch (currentOperator) {\n      case '+':\n        stack.push(currentOperand);\n        break;\n      case '-':\n        stack.push(currentOperand);\n        break;\n      case '*':\n        stack.push(currentOperand);\n        break;\n      case '/':\n        stack.push(currentOperand);\n        break;\n      case '**':\n        stack.push(currentOperand);\n        break;\n      default:\n        throw Error('Invalid operator');\n    }\n  }\n\n  while (stack.length > 0) {\n    const currentOperator = stack.pop();\n    result += currentOperator;\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const stack = [];\n  let result = 0;\n\n  for (let i = 0; i < operand.length; i++) {\n    const currentOperand = operand[i];\n    const currentOperator = operator[stack.length];\n\n    if (currentOperand === undefined) {\n      stack.push(currentOperator);\n      continue;\n    }\n\n    switch (currentOperator) {\n      case '+':\n        stack.push(currentOperand);\n        break;\n      case '-':\n        stack.push(currentOperand);\n        break;\n      case '*':\n        stack.push(currentOperand);\n        break;\n      case '/':\n        stack.push(currentOperand);\n        break;\n      case '**':\n        stack.push(currentOperand);\n        break;\n      default:\n        throw Error('Invalid operator');\n    }\n  }\n\n  while (stack.length > 0) {\n    const currentOperator = stack.pop();\n    result += currentOperator;\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const stack = [];\n  let result = 0;\n\n  for (let i = 0; i < operand.length; i++) {\n    const currentOperand = operand[i];\n    const currentOperator = operator[stack.length];\n\n    if (currentOperand === undefined) {\n      stack.push(currentOperator);\n      continue;\n    }\n\n    switch (currentOperator) {\n      case '+':\n        stack.push(currentOperand);\n        break;\n      case '-':\n        stack.push(currentOperand);\n        break;\n      case '*':\n        stack.push(currentOperand);\n        break;\n      case '/':\n        stack.push(currentOperand);\n        break;\n      case '**':\n        stack.push(currentOperand);\n        break;\n      default:\n        throw Error('Invalid operator');\n    }\n  }\n\n  while (stack.length > 0) {\n    const currentOperator = stack.pop();\n    result += currentOperator;\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const stack = [];\n  let result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newString += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newString += s[i].toLowerCase();\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Given a string s and an integer k, \n  find the first k consecutive characters in s\n  that form a palindrome.\n  A palindrome is a word or phrase that is the same forwards and backwards.\n  A palindrome is a word or phrase that reads the same from left to right and from right to left.\n  Examples\n  palindrome(\"abba\", 2) = \"abb\"\n  palindrome(\"abba\", 3) = \"abba\"\n  palindrome(\"abba\", 1) = \"abb\"\n  palindrome(\"abba\", 0) = \"\"\n  palindrome(\"abba\", -1) = \"\"\n  palindrome(\"abba\", 4) = \"\"\n  palindrome(\"abba\", 5) = \"\"\n  palindrome(\"abba\", 6) = \"\"\n  palindrome(\"abba\", 7) = \"\"\n  palindrome(\"abba\", 8) = \"\"\n  palindrome(\"abba\", 9) = \"\"\n  palindrome(\"abba\", 10) = \"\"\n  palindrome(\"abba\", 11) = \"\"\n  palindrome(\"abba\", 12) = \"\"\n  palindrome(\"abba\", 13) = \"\"\n  palindrome(\"abba\", 14) = \"\"\n  palindrome(\"abba\", 15) = \"\"\n  palindrome(\"abba\", 16) = \"\"\n  palindrome(\"abba\", 17) = \"\"\n  palindrome(\"abba\", 18) = \"\"\n  palindrome(\"abba\", 19) = \"\"\n  palindrome(\"abba\", 20) = \"\"\n  palindrome(\"abba\", 21) = \"\"\n  palindrome(\"abba\", 22) = \"\"\n  palindrome(\"abba\", 23) = \"\"\n  palindrome(\"abba\", 24) = \"\"\n  palindrome(\"abba\", 25) = \"\"\n  palindrome(\"abba\", 26) = \"\"\n  palindrome(\"abba\", 27) = \"\"\n  palindrome(\"abba\", 28) = \"\"\n  palindrome(\"abba\", 29) = \"\"\n  palindrome(\"abba\", 30) = \"\"\n  palindrome(\"abba\", 31) = \"\"\n  palindrome(\"abba\", 32) = \"\"\n  palindrome(\"abba\", 33) = \"\"\n  palindrome(\"abba\", 34) = \"\"\n  palindrome(\"abba\", 35) = \"\"\n  palindrome(\"abba\", 36) = \"\"\n  palindrome(\"abba\", 37) = \"\"\n  palindrome(\"abba\", 38) = \"\"\n  palindrome(\"abba\", 39) = \"\"\n  palindrome(\"abba\", 40) = \"\"\n  palindrome(\"abba\", 41) = \"\"\n  palindrome(\"abba\", 42) = \"\"\n  palindrome(\"abba\", 43) = \"\"\n  palindrome(\"abba\", 44) = \"\"\n  palindrome(\"abba\", 45) = \"\"\n  palindrome(\"abba\", 46) = \"\"\n  palindrome(\"abba\", 47) = \"\"\n  palindrome(\"abba\", 48) = \"\"\n  palindrome(\"abba\", 49) = \"\"\n  palindrome(\"abba\", 50) = \"\"\n  palindrome(\"abba\", 51) = \"\"\n  palindrome(\"abba\", 52) = \"\"\n  palindrome(\"abba\", 53) = \"\"\n  palindrome(\"abba\", 54) = \"\"\n  palindrome(\"abba\", 55) = \"\"\n  palindrome(\"abba\", 56) = \"\"\n  palindrome(\"abba\", 57) = \"\"\n  palindrome(\"abba\", 58) = \"\"\n  palindrome(\"abba\", 59) = \"\"\n  palindrome(\"abba\", 60) = \"\"\n  palindrome(\"abba\", 61) = \"\"\n  palindrome(\"abba\", 62) = \"\"\n  palindrome(\"abba\", 63) = \"\"\n  palindrome(\"abba\", 64) = \"\"\n  palindrome(\"abba\", 65) = \"\"\n  palindrome(\"abba\", 66) = \"\"\n  palindrome(\"abba\", 67) = \"\"\n  palindrome(\"abba\", 68) = \"\"\n  palindrome(\"abba\", 69) = \"\"\n  palindrome(\"abba\", 70) = \"\"\n  palindrome(\"abba\", 71) = \"\"\n  palindrome(\"abba\", 72) = \"\"\n  palindrome(\"abba\", 73) = \"\"\n  palindrome(\"abba\", 74) = \"\"\n  palindrome(\"abba\", 75) = \"\"\n  palindrome(\"abba\", 76) = \"\"\n  palindrome(\"abba\", 77) = \"\"\n  palindrome(\"abba\", 78) = \"\"\n  palindrome(\"abba\", 79) = \"\"\n  palindrome(\"abba\", 80) = \"\"\n  palindrome(\"abba\", 81) = \"\"\n  palindrome(\"abba\", 82) = \"\"\n  palindrome(\"abba\", 83) = \"\"\n  palindrome(\"abba\", 84) = \"\"\n  palindrome(\"abba\", 85) = \"\"\n  palindrome(\"abba\", 86) = \"\"\n  palindrome(\"abba\", 87) = \"\"\n  palindrome(\"abba\", 88) = \"\"\n  palindrome(\"abba\", 89) = \"\"\n  palindrome(\"abba\", 90) = \"\"\n  palindrome(\"abba\", 91) = \"\"\n  palindrome(\"abba\", 92) = \"\"\n  palindrome(\"abba\", 93) = \"\"\n  palindrome(\"abba\", 94) = \"\"\n  palindrome(\"abba\", 95) = \"\"\n  palindrome(\"abba\", 96) = \"\"\n  palindrome(\"abba\", 97) = \"\"\n  palindrome(\"abba\", 98) = \"\"\n  palindrome(\"abba\", 99) = \"\"\n  palindrome(\"abba\", 100) = \"\"\n  palindro", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash2 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash3 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash4 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash5 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash6 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash7 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash8 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash9 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash10 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash11 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash12 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex') + text\n}\n\n/*\n  Given a string 'text', return a string 'text' with md5 hash appended.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the odd digits between a\n  and b, in ascending order.\n\n  For example:\n  generateOdds(2, 8) => [2, 4, 6, 8]\n  generateOdds(8, 2) => [8, 6, 4, 2]\n  generateOdds(10, 14) => []\n  */\nconst generateOdds = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in the form of a string.\n\n  For example:\n  digitSum(12) => \"1 + 2\"\n  digitSum(13) => \"1 + 3\"\n  digitSum(14) => \"1 + 4\"\n  digitSum(15) => \"1 + 5\"\n  digitSum(16) => \"1 + 6\"\n  digitSum(17) => \"1 + 7\"\n  digitSum(18) => \"1 + 8\"\n  digitSum(19) => \"1 + 9\"\n  digitSum(20) => \"1 + 10\"\n  digitSum(21) => \"1 + 11\"\n  digitSum(22) => \"1 + 12\"\n  digitSum(23) => \"1 + 13\"\n  digitSum(24) => \"1 + 14\"\n  digitSum(25) => \"1 + 15\"\n  digitSum(26) => \"1 + 16\"\n  digitSum(27) => \"1 + 17\"\n  digitSum(28) => \"1 + 18\"\n  digitSum(29) => \"1 + 19\"\n  digitSum(30) => \"1 + 20\"\n  digitSum(31) => \"1 + 21\"\n  digitSum(32) => \"1 + 22\"\n  digitSum(33) => \"1 + 23\"\n  digitSum(34) => \"1 + 24\"\n  digitSum(35) => \"1 + 25\"\n  digitSum(36) => \"1 + 26\"\n  digitSum(37) => \"1 + 27\"\n  digitSum(38) => \"1 + 28\"\n  digitSum(39) => \"1 + 29\"\n  digitSum(40) => \"1 + 30\"\n  digitSum(41) => \"1 + 31\"\n  digitSum(42) => \"1 + 32\"\n  digitSum(43) => \"1 + 33\"\n  digitSum(44) => \"1 + 34\"\n  digitSum(45) => \"1 + 35\"\n  digitSum(46) => \"1 + 36\"\n  digitSum(47) => \"1 + 37\"\n  digitSum(48) => \"1 + 38\"\n  digitSum(49) => \"1 + 39\"\n  digitSum(50) => \"1 + 40\"\n  digitSum(51) => \"1 + 41\"\n  digitSum(52) => \"1 + 42\"\n  digitSum(53) => \"1 + 43\"\n  digitSum(54) => \"1 + 44\"\n  digitSum(55) => \"1 + 45\"\n  digitSum(56) => \"1 + 46\"\n  digitSum(57) => \"1 + 47\"\n  digitSum(58) => \"1 + 48\"\n  digitSum(59) => \"1 + 49\"\n  digitSum(60) => \"1 + 50\"\n  digitSum(61) => \"1 + 51\"\n  digitSum(62) => \"1 + 52\"\n  digitSum(63) => \"1 + 53\"\n  digitSum(64) => \"1 + 54\"\n  digitSum(65) => \"1 + 55\"\n  digitSum(66) => \"1 + 56\"\n  digitSum(67) => \"1 + 57\"\n  digitSum(68) => \"1 + 58\"\n  digitSum(69) => \"1 + 59\"\n  digitSum(70) => \"1 + 60\"\n  digitSum(71) => \"1 + 61\"\n  digitSum(72) => \"1 + 62\"\n  digitSum(73) => \"1 + 63\"\n  digitSum(74) => \"1 + 64\"\n  digitSum(75) => \"1 + 65\"\n  digitSum(76) => \"1 + 66\"\n  digitSum(77) => \"1 + 67\"\n  digitSum(78) => \"1 + 68\"\n  digitSum(79) => \"1 + 69\"\n  digitSum(80) => \"1 + 70\"\n  digitSum(81) => \"1 + 71\"\n  digitSum(82) => \"1 + 72\"\n  digitSum(83) => \"1 + 73\"\n  digitSum(84) => \"1 + 74\"\n  digitSum(85) => \"1 + 75\"\n  digitSum(86) => \"1 + 76\"\n  digitSum(87) => \"1 + 77\"\n  digitSum(88) => \"1 + 78\"\n  digitSum(89) => \"1 + 79\"\n  digitSum(90) => \"1 + 80\"\n  digitSum(91) => \"1 + 81\"\n  digitSum(92) => \"1 + 82\"\n  digitSum(93) => \"1 + 83\"\n  digitSum(94) => \"1 + 84\"\n  digitSum(95) => \"1 + 85\"\n  digitSum(96) => \"1 + 86\"\n  digitSum(97) => \"1 + 87\"\n  digitSum(98) => \"1 + 88\"\n  digitSum(99) => \"1 + 89\"\n  digitSum(100) => \"1 + 90\"\n  digitSum(101) => \"1 + 91\"\n  digitSum(102) => \"1 + 92\"\n  digitSum(103) => \"1 + 93\"\n  digitSum(104) => \"1 + 94\"\n  digitSum(105) => \"1 + 95\"\n  digitSum(106) => \"1 + 96\"\n  digitSum(107) => \"1 + 97\"\n  digitSum(108) => \"1 + 98\"\n  digitSum(109) => \"1 + 99\"\n  digitSum(110) => \"1 + 100\"\n  digitSum(111) => \"1 + 101\"\n  digitSum(112) => \"1 + 102\"\n  digitSum(113) => \"1 + 103\"\n  digitSum(114) => \"1 + 104\"\n  digitSum(115) => \"1 + 105\"\n  digitSum(116) => \"1 + 106\"\n  digitSum(117) => \"1 + 107\"\n  digitSum(118) => \"1 + 108\"\n  digitSum(119) => \"1 + 109\"\n  digitSum(120) => \"1 + 110\"\n  digitSum(121) => \"1 + 111\"\n  digitSum(122) => \"1 + 112\"\n  digitSum(123) => \"1 + 113\"\n  digitSum(124) => \"1 + 114\"\n  digitSum(125) => \"1 + 115\"\n  digitSum(126) => \"1 + 116\"\n  digitSum(127) => \"1 + 117\"\n  digitSum(128) => \"1 + 118\"\n  digitSum(129) => \"1 + 119\"\n  digitSum(130) => \"1 + 120\"\n  digitSum(131) => \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n\n  const notes = [];\n  let current_note = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const note = music_array[i];\n    const is_note = note.includes('|');\n\n    if (is_note) {\n      notes[current_note] += 1;\n    } else {\n      notes[current_note] = 1;\n    }\n\n    current_note++;\n  }\n\n  return notes;\n};\n\nconst music_string = 'o o|.| o| o|.|.|.|.| o o';\nconst music_array = parseMusic(music_string);\n\nconsole.log(music_array);</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n\n  const notes = [];\n  let current_note = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const note = music_array[i];\n    const is_note = note.includes('|');\n\n    if (is_note) {\n      notes[current_note] += 1;\n    } else {\n      notes[current_note] = 1;\n    }\n\n    current_note++;\n  }\n\n  return notes;\n};\n\nconst music_string = 'o o|.| o| o|.|.|.|.| o o';\nconst music_array = parseMusic(music_string);\n\nconsole.log(music_array);</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n\n  const notes = [];\n  let current_note = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const note = music_array[i];\n    const is_note = note.includes('|');\n\n    if (is_note) {\n      notes[current_note] += 1;\n    } else {\n      notes[current_note] = 1;\n    }\n\n    current_note++;\n  }\n\n  return notes;\n};\n\nconst music_string = 'o o|.| o| o|.|.|.|.| o o';\nconst music_array = parseMusic(music_string);\n\nconsole.log(music_array);</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n\n  const notes = [];\n  let current_note = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const note = music_array[i];\n    const is_note = note.includes('|');\n\n    if (is_note) {\n      notes[current_note] += 1;\n    } else {\n      notes[current_note] = 1;\n    }\n\n    current_note++;\n  }\n\n  return notes;\n};\n\nconst music_string = 'o o|.| o| o|.|.|.|.| o o';\nconst music_array = parseMusic(music_string);\n\nconsole.log(music_array);</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n\n  const notes = [];\n  let current_note = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const note = music_array[i];\n    const is_note = note.includes('|');\n\n    if (is_note) {\n      notes[current_note] += 1;\n    } else {\n      notes[current_note] = 1;\n    }\n\n    current_note++;\n  }\n\n  return notes;\n};\n\nconst music_string = 'o o|.| o| o|.|.|.|.| o o';\nconst music_array = parseMusic(music_string);\n\nconsole.log(music_array);</code>\n<|/ a tags=javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n\n  const notes = [];\n  let current_note = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const note = music_array[i];\n    const is_note = note.includes('|');\n\n    if (is_note) {\n      notes[current_note] += 1;\n    } else {\n      notes[current_note] = 1;\n    }\n\n    current_note++;\n  }\n\n  return notes;\n};\n\nconst music_string = 'o o|.| o| o|.|.|.|.| o o';\nconst music_array = parseMusic(music_string);\n\nconsole.log(music_array);</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n\n  const notes = [];\n  let current_note = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const note = music_array[i];\n    const is_note = note.includes('|');\n\n    if (is_note) {\n      notes[current_note] += 1;\n    } else {\n      notes[current_note] = 1;\n    }\n\n    current_note++;\n  }\n\n  return notes;\n};\n\nconst music_string = 'o o|.| o| o|.|.|.|.| o o';\nconst music_array = parseMusic(music_string);\n\nconsole.log(music_array);</code>\n<|/ a dscore=0 |>\n<| a tags=javascript |>\n<code>\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n\n  const notes = [];\n  let current_note = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const note = music_array[i];\n    const is_note = note.includes('|');\n\n    if (is_note) {\n      notes[current_note] += 1;\n    } else {\n      notes[current_note] = 1;\n    }\n\n    current_note", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumbers = numberArray.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Given a string, return a new string with each word capitalized.\n  >>> capitalize('hi there')\n  'Hi There'\n  */\nconst capitalize = (string) => {\n  return string.split(' ').map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word underlined.\n  >>> underline('hi there')\n  '__hi there__'\n  */\nconst underline = (string) => {\n  return string.split(' ').map((word) => {\n    return `__${word}__`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word bolded.\n  >>> bolded('hi there')\n  '**hi there**'\n  */\nconst bolded = (string) => {\n  return string.split(' ').map((word) => {\n    return `**${word}**`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word italicized.\n  >>> italicize('hi there')\n  '_hi_ there_'\n  */\nconst italicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `_${word}_`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word underlined and italicized.\n  >>> underlineAndItalicize('hi there')\n  '__hi there__'\n  */\nconst underlineAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `__${word}__`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word bolded and italicized.\n  >>> boldedAndItalicize('hi there')\n  '**hi there**'\n  */\nconst boldedAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `**${word}**`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word underlined, bolded, and italicized.\n  >>> underlineAndBoldedAndItalicize('hi there')\n  '__hi there__'\n  */\nconst underlineAndBoldedAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `__${word}__`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word bolded, underlined, and italicized.\n  >>> boldedAndUnderlineAndItalicize('hi there')\n  '**hi there**'\n  */\nconst boldedAndUnderlineAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `**${word}**`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word underlined, bolded, underlined, and italicized.\n  >>> underlineAndBoldedAndUnderlineAndItalicize('hi there')\n  '__hi there__'\n  */\nconst underlineAndBoldedAndUnderlineAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `__${word}__`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word bolded, underlined, underlined, and italicized.\n  >>> boldedAndUnderlineAndUnderlineAndItalicize('hi there')\n  '**hi there**'\n  */\nconst boldedAndUnderlineAndUnderlineAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `**${word}**`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word bolded, underlined, bolded, underlined, and italicized.\n  >>> boldedAndUnderlineAndBoldedAndItalicize('hi there')\n  '**hi there**'\n  */\nconst boldedAndUnderlineAndBoldedAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `**${word}**`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word bolded, underlined, underlined, bolded, and italicized.\n  >>> boldedAndUnderlineAndUnderlineAndBoldedAndItalicize('hi there')\n  '**hi there**'\n  */\nconst boldedAndUnderlineAndUnderlineAndBoldedAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `**${word}**`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word bolded, underlined, underlined, bolded, underlined, and italicized.\n  >>> boldedAndUnderlineAndUnderlineAndBoldedAndUnderlineAndItalicize('hi there')\n  '**hi there**'\n  */\nconst boldedAndUnderlineAndUnderlineAndBoldedAndUnderlineAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `**${word}**`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word bolded, underlined, underlined, bolded, underlined, underlined, and italicized.\n  >>> boldedAndUnderlineAndUnderlineAndBoldedAndUnderlineAndUnderlineAndItalicize('hi there')\n  '**hi there**'\n  */\nconst boldedAndUnderlineAndUnderlineAndBoldedAndUnderlineAndUnderlineAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `**${word}**`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word bolded, underlined, underlined, bolded, underlined, underlined, and italicized.\n  >>> boldedAndUnderlineAndUnderlineAndBoldedAndUnderlineAndUnderlineAndBoldedAndItalicize('hi there')\n  '**hi there**'\n  */\nconst boldedAndUnderlineAndUnderlineAndBoldedAndUnderlineAndUnderlineAndBoldedAndItalicize = (string) => {\n  return string.split(' ').map((word) => {\n    return `**${word}**`;\n  }).join(' ');\n};\n\n/* Given a string, return a new string with each word bolded, underlined, underlined, bolded, underlined, underlined, and italicized.\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseFloat(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNub", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestPair = sortedNumbers.reduce((prev, curr) => {\n    if (Math.abs(curr - prev) < Math.abs(curr - closestPair[0])) {\n      return [curr, prev];\n    }\n    return prev;\n  });\n  return [closestPair[0], closestPair[1]];\n};\n\n/**\n * Given a number and a range, find the closest number in the range that is less than or equal to the number.\n * If the number provided is greater than the highest number in the range, return the highest number in the range.\n * If the number provided is less than the lowest number in the range, return the lowest number in the range.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest or lowest number in the range, return that number.\n * If the number provided is greater than the highest number in the range but less than the lowest number in the range, return that number.\n * If the number provided is less than the lowest number in the range but greater than the highest number in the range, return that number.\n * If the number provided is equal to the highest or lowest number in the range, return that number.\n * If the number provided ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for floats\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filetrItnegersFloat = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value) || Number.isFloat(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for strings\n  >>> filetrItnegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  ['abc']\n  */\nconst filetrItnegersString = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value ==='string') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filetrItnegers(['a', 3.14, 5])\n  [true, false]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filetrItnegersBoolean = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'boolean') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for none\n  >>> filetrItnegers(['a', 3.14, 5])\n  []\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filetrItnegersNone = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (value === null) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for dicts\n  >>> filetrItnegers(['a', 3.14, 5])\n  [{}, {}]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filetrItnegersDict = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'object') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for list\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersList = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersTuple = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for sets\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersSet = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for frozensets\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersFrozenset = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for dictionaries\n  >>> filetrItnegers(['a', 3.14, 5])\n  [{}, {}]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filetrItnegersDict = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'object') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for lists\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersList = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersTuple = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for sets\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersSet = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for frozensets\n  >>> filetrItnegers(['a', 3.14, 5])\n  [[], [], []]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filetrItnegersFrozenset = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for dictionaries\n  >>> filetrItnegers(['a', 3.14, 5])\n  [{}, {}]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filetrItnegersDict = (values) => {\n  const result = [];\n  values.forEach((value) => {\n    if (typeof value === 'object') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for lists\n  >>> filetrItnegers(['a', 3.14, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/**\n * Return true if given string ends with given suffix, false otherwise\n  >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'ac')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) === index;\n};\n\n/**\n * Return true if given string starts with given prefix, false otherwise\n  >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'bcd')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  const index = string.length - prefix.length;\n  return index >= 0 && string.indexOf(prefix, index) === index;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> contains('abc', 'a')\n  true\n  >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'ac')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1;\n};\n\n/**\n * Return true if given string contains given substring, ignoring case\n  >>> containsIgnoreCase('abc', 'a')\n  true\n  >>> containsIgnoreCase('abc', 'ab')\n  true\n  >>> containsIgnoreCase('abc', 'ac')\n  false\n  */\nconst containsIgnoreCase = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase())!== -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, ignoring case\n  >>> containsOnlyIgnoreCase('abc', 'a')\n  false\n  >>> containsOnlyIgnoreCase('abc', 'ab')\n  true\n  >>> containsOnlyIgnoreCase('abc', 'ac')\n  true\n  */\nconst containsOnlyIgnoreCase = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false\n  >>> containsOnly('abc', 'ac')\n  true\n  */\nconst containsOnly = (string, substring) => {\n  return string.toLowerCase().indexOf(substring.toLowerCase()) === -1;\n};\n\n/**\n * Return true if given string contains given substring, false otherwise\n  >>> containsOnly('abc', 'a')\n  false\n  >>> containsOnly('abc', 'ab')\n  false", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factor", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) + 1);\n    } else {\n      map.set(number, 1);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }\n  return Array.from(map.keys()).sort((a, b) => a - b);\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map.has(number)) {\n      map.set(number, map.get(number) - 1);\n    } else {\n      map.set(number, 0);\n    }\n  }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCase('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * >>> flipCaseString('Hello')\n * 'hELLO'\n */\nconst flipCaseString = (string) => {\n  return string\n   .split('')\n   .map((char) => char.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.reduce((acc, str) => {\n    return acc + str;\n  }, '');\n};\n\n/* Convert a string to camel case\n  >>> toCamelCase('oneTwoThree')\n  'oneTwoThree'\n  >>> toCamelCase('oneTwoThreeFour')\n  'oneTwoThreeFour'\n  >>> toCamelCase('oneTwoThreeFourFive')\n  'oneTwoThreeFourFive'\n  */\nconst toCamelCase = (str) => {\n  return str.replace(/-([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\n/* Convert a string to snake case\n  >>> toSnakeCase('oneTwoThree')\n  'one_two_three'\n  >>> toSnakeCase('oneTwoThreeFour')\n  'one_two_three_four'\n  >>> toSnakeCase('oneTwoThreeFourFive')\n  'one_two_three_four_five'\n  */\nconst toSnakeCase = (str) => {\n  return str.replace(/_([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\n/* Convert a string to pascal case\n  >>> toPascalCase('oneTwoThree')\n  'OneTwoThree'\n  >>> toPascalCase('oneTwoThreeFour')\n  'OneTwoThreeFour'\n  >>> toPascalCase('oneTwoThreeFourFive')\n  'OneTwoThreeFourFive'\n  */\nconst toPascalCase = (str) => {\n  return str.replace(/-([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\n/* Convert a string to kebab case\n  >>> toKebabCase('oneTwoThree')\n  'one_two-three'\n  >>> toKebabCase('oneTwoThreeFour')\n  'one_two-three-four'\n  >>> toKebabCase('oneTwoThreeFourFive')\n  'one_two-three-four-five'\n  */\nconst toKebabCase = (str) => {\n  return str.replace(/-([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\n/* Convert a string to title case\n  >>> toTitleCase('oneTwoThree')\n  'One Two Three'\n  >>> toTitleCase('oneTwoThreeFour')\n  'One Two Three Four'\n  >>> toTitleCase('oneTwoThreeFourFive')\n  'One Two Three Four Five'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/-/g,'').trim().split(/\\s+/).map(function (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }).join(' ');\n};\n\n/* Convert a string to snake case\n  >>> toSnakeCase('oneTwoThree')\n  'one_two_three'\n  >>> toSnakeCase('oneTwoThreeFour')\n  'one_two_three_four'\n  >>> toSnakeCase('oneTwoThreeFourFive')\n  'one_two_three_four_five'\n  */\nconst toSnakeCase = (str) => {\n  return str.replace(/_([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\n/* Convert a string to pascal case\n  >>> toPascalCase('oneTwoThree')\n  'OneTwoThree'\n  >>> toPascalCase('oneTwoThreeFour')\n  'OneTwoThreeFour'\n  >>> toPascalCase('oneTwoThreeFourFive')\n  'OneTwoThreeFourFive'\n  */\nconst toPascalCase = (str) => {\n  return str.replace(/-([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\n/* Convert a string to kebab case\n  >>> toKebabCase('oneTwoThree')\n  'one_two-three'\n  >>> toKebabCase('oneTwoThreeFour')\n  'one_two-three-four'\n  >>> toKebabCase('oneTwoThreeFourFive')\n  'one_two-three-four-five'\n  */\nconst toKebabCase = (str) => {\n  return str.replace(/-([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\n/* Convert a string to title case\n  >>> toTitleCase('oneTwoThree')\n  'One Two Three'\n  >>> toTitleCase('oneTwoThreeFour')\n  'One Two Three Four'\n  >>> toTitleCase('oneTwoThreeFourFive')\n  'One Two Three Four Five'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/-/g,'').trim().split(/\\s+/).map(function (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }).join(' ');\n};\n\n/* Convert a string to snake case\n  >>> toSnakeCase('oneTwoThree')\n  'one_two_three'\n  >>> toSnakeCase('oneTwoThreeFour')\n  'one_two_three_four'\n  >>> toSnakeCase('oneTwoThreeFourFive')\n  'one_two_three_four_five'\n  */\nconst toSnakeCase = (str) => {\n  return str.replace(/_([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\n/* Convert a string to pascal case\n  >>> toPascalCase('oneTwoThree')\n  'OneTwoThree'\n  >>> toPascalCase('oneTwoThreeFour')\n  'OneTwoThreeFour'\n  >>> toPascalCase('oneTwoThreeFourFive')\n  'OneTwoThreeFourFive'\n  */\nconst toPascalCase = (str) => {\n  return str.replace(/-([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\n/* Convert a string to kebab case\n  >>> toKebabCase('oneTwoThree')\n  'one_two-three'\n  >>> toKebabCase('oneTwoThreeFour')\n  'one_two-three-four'\n  >>> toKebabCase('oneTwoThreeFourFive')\n  'one_two-three-four-five'\n  */\nconst toKebabCase = (str) => {\n  return str.replace(/-([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\n/* Convert a string to title case\n  >>> toTitleCase('oneTwoThree')\n  'One Two Three'\n  >>> toTitleCase('oneTwoThreeFour')\n  'One Two Three Four'\n  >>> toTitleCase('oneTwoThreeFourFive')\n  'One Two Three Four Five'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/-/g,'').trim().split(/\\s+/).map(function (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }).join(' ');\n};\n\n/* Convert a string to snake case\n  >>> toSnakeCase('oneTwoThree')\n  'one_two_three'\n  >>> toSnakeCase('oneTwoThreeFour')\n  'one_two_three_four'\n  >>> toSnakeCase('", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> iflterByrSuffix([], 'a')\n  []\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst iflterByrSuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstring([], 'a')\n  []\n  >>> iflterByrSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst iflterByrSubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that match a given regex.\n  >>> iflterByrRegex([], 'a')\n  []\n  >>> iflterByrRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrRegex = (strings, regex) => {\n  return strings.filter(s => regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not match a given regex.\n  >>> iflterByrNotRegex([], 'a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return strings.filter(s =>!regex.test(s));\n};", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -5, 2, -3, -3, 9, 0, 123, 1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEvenOrOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getEvenOrOdd = (l) => {\n  return l.filter(n => n % 2 === 0);\n};\n\n/*Return only numbers in the list that are even or odd.\n  >>> getEvenOrOdd([-1, 2, -", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  while (xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0) === 0) {\n    x++;\n    found = true;\n  }\n  if (found) {\n    return x;\n  }\n  return findZero(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns only only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  3.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  while (xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0) === xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0)) {\n    x++;\n    found = true;\n  }\n  if (found) {\n    return x;\n  }\n  return findMax(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  0.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  while (xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0) === xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0)) {\n    x++;\n    found = true;\n  }\n  if (found) {\n    return x;\n  }\n  return findMin(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  3.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  while (xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0) === xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0)) {\n    x++;\n    found = true;\n  }\n  if (found) {\n    return x;\n  }\n  return findMax(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  0.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  while (xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0) === xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0)) {\n    x++;\n    found = true;\n  }\n  if (found) {\n    return x;\n  }\n  return findMin(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  3.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  while (xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0) === xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0)) {\n    x++;\n    found = true;\n  }\n  if (found) {\n    return x;\n  }\n  return findMax(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  0.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  while (xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0) === xs.reduce((prev, item) => {\n    return prev + item;\n  }, 0)) {\n    x++;\n    found = true;\n  }\n  if (found) {\n    return x;\n  }\n  return findMin(xs.reverse());\n}\n\n/*\n  xs are coefficient", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or nine, while its values at the indicies that are divisible by twenty or nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0 || i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or nine, while its values at the indicies that are divisible by twenty or nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0 || i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or nine, while its values at the indicies that are divisible by twenty or nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0 || i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or nine, while its values at the indicies that are divisible by twenty or nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0 || i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or nine, while its values at the indicies that are divisible by twenty or nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0 || i % 9 === 0) {\n      l", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = true\n  }\n  return a\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort()\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function(a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n  */\nconst sort = (l, fn) => {\n  if (fn) {\n    return l.sort(fn)\n  }\n  return l.sort()\n}\n\n/*\n  >>> 'abc'.toUpperCase()\n  'ABC'\n  >>> 'abc'.toLowerCase()\n  'abc'\n  >>> 'Abc'.toUpperCase()\n  'ABC'\n  >>> 'Abc'.toLowerCase()\n  'abc'\n  */\nconst toUpperCase = (s) => {\n  return s.toUpperCase()\n}\n\n/*\n  >>> 'abc'.toLowerCase()\n  'abc'\n  >>> 'Abc'.toLowerCase()\n  'abc'\n  >>> 'Abc'.toUpperCase()\n  'ABC'\n  >>> 'abc'.toUpperCase()\n  'ABC'\n  */\nconst toLowerCase = (s) => {\n  return s.toLowerCase()\n}\n\n/*\n  >>> 'abc'.toLocaleLowerCase()\n  'abc'\n  >>> 'Abc'.toLocaleLowerCase()\n  'abc'\n  >>> 'Abc'.toLocaleUpperCase()\n  'ABC'\n  >>> 'abc'.toLocaleUpperCase()\n  'ABC'\n  */\nconst toLocaleLowerCase = (s) => {\n  return s.toLocaleLowerCase()\n}\n\n/*\n  >>> 'abc'.toLocaleUpperCase()\n  'ABC'\n  >>> 'Abc'.toLocaleUpperCase()\n  'ABC'\n  >>> 'Abc'.toLocaleLowerCase()\n  'abc'\n  >>> 'abc'.toLocaleLowerCase()\n  'abc'\n  */\nconst toLocaleUpperCase = (s) => {\n  return s.toLocaleUpperCase()\n}\n\n/*\n  >>> 'abc'.trim()\n  'abc'\n  >>>'  abc   '.trim()\n  'abc'\n  >>>'  abc   '.trimRight()\n  'abc'\n  >>>'  abc   '.trimLeft()\n ' '\n  >>>'  abc   '.trim(' ')\n  'abc'\n  >>>'  abc   '.trim('  ')\n  'abc'\n  >>>'  abc   '.trim('  ', 2)\n  'abc'\n  >>>'  abc   '.trim('  ', 3)\n  'abc   '\n  >>>'  abc   '.trim('  ', 4)\n ' '\n  */\nconst trim = (s, chars, start, end) => {\n  if (chars) {\n    return s.trim()\n  }\n  return s.trimRight()\n}\n\n/*\n  >>>'  abc   '.trimLeft()\n ' '\n  >>>'  abc   '.trimRight()\n  'abc'\n  >>>'  abc   '.trim(' ')\n  'abc'\n  >>>'  abc   '.trim('  ')\n  'abc'\n  >>>'  abc   '.trim('  ', 2)\n  'abc'\n  >>>'  abc   '.trim('  ', 3)\n  'abc   '\n  >>>'  abc   '.trim('  ', 4)\n ' '\n  */\nconst trimLeft = (s, chars, start, end) => {\n  if (chars) {\n    return s.trimLeft()\n  }\n  return s.trimLeft()\n}\n\n/*\n  >>>'  abc   '.trim(' ')\n  'abc'\n  >>>'  abc   '.trim('  ')\n  'abc'\n  >>>'  abc   '.trim('  ', 2)\n  'abc'\n  >>>'  abc   '.trim('  ', 3)\n  'abc   '\n  >>>'  abc   '.trim('  ', 4)\n ' '\n  */\nconst trimRight = (s, chars, start, end) => {\n  if (chars) {\n    return s.trimRight()\n  }\n  return s.trimRight()\n}\n\n/*\n  >>>'  abc   '.trim(' ')\n  'abc'\n  >>>'  abc   '.trim('  ')\n  'abc'\n  >>>'  abc   '.trim('  ', 2)\n  'abc'\n  >>>'  abc   '.trim('  ', 3)\n  'abc   '\n  >>>'  abc   '.trim('  ', 4)\n ' '\n  */\nconst trim = (s, chars, start, end) => {\n  if (chars) {\n    return s.trim()\n  }\n  return s.trimRight()\n}\n\n/*\n  >>>'  abc   '.trim(' ')\n  'abc'\n  >>>'  abc   '.trim('  ')\n  'abc'\n  >>>'  abc   '.trim('  ', 2)\n  'abc'\n  >>>'  abc   '.trim('  ', 3)\n  'abc   '\n  >>>'  abc   '.trim('  ', 4)\n ' '\n  */\nconst trimLeft = (s, chars, start, end) => {\n  if (chars) {\n    return s.trimLeft()\n  }\n  return s.trimLeft()\n}\n\n/*\n  >>>'  abc   '.trim(' ')\n  'abc'\n  >>>'  abc   '.trim('  ')\n  'abc'\n  >>>'  abc   '.trim('  ', 2)\n  'abc'\n  >>>'  abc   '.trim('  ', 3)\n  'abc   '\n  >>>'  abc   '.trim('  ', 4)\n ' '\n  */\nconst trimRight = (s, chars, start, end) => {\n  if (chars) {\n    return s.trimRight()\n  }\n  return s.trimRight()\n}\n\n/*\n  >>>'  abc   '.trim(' ')\n  'abc'\n  >>>'  abc   '.trim('  ')\n  'abc'\n  >>>'  abc   '.trim('  ', 2)\n  'abc'\n  >>>'  abc   '.trim('  ', 3)\n  'abc   '\n  >>>'  abc   '.trim('  ', 4)\n ' '\n  */\nconst trim = (s, chars, start, end) => {\n  if (chars) {\n    return s.trim()\n  }\n  return s.trimRight()\n}\n\n/*\n  >>>'  abc   '.trim(' ')\n  'abc'\n  >>>'  abc   '.trim('  ')\n  'abc'\n  >>>'  abc   '.trim('  ', 2)\n  'abc'\n  >>>'  abc   '.trim('  ', 3)\n  'abc   '\n  >>>'  abc   '.trim('  ', 4)\n ' '\n  */\nconst trimLeft = (s, chars, start, end) => {\n  if (chars) {\n    return s.trimLeft()\n  }\n  return s.trimLeft()\n}\n\n/*\n  >>>'  abc   '.trim(' ')\n  'abc'\n  >>>'  abc   '.trim('  ')\n  'abc'\n  >>>'  abc   '.trim('  ', 2)\n  'abc'\n  >>>'  abc   '.trim('  ', 3)\n  'abc   '\n  >>>'  abc   ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l)\n}\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  return Math.min(...l)\n}\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0)\n}\n\n/*Return average of all elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -7.5\n  */\nconst averageElements = (l) => {\n  return sumElements(l) / l.length\n}\n\n/*Return number of elements in the list.\n  >>> countElements([1, 2, 3])\n  3\n  >>> countElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  10\n  */\nconst countElements = (l) => {\n  return l.length\n}\n\n/*Return sum of all elements in the list that are less than the specified value.\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  0\n  */\nconst sumLessThan = (l, val) => {\n  return l.filter((x) => x < val).reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list that are less than or equal to the specified value.\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  0\n  */\nconst sumLessThanOrEqual = (l, val) => {\n  return l.filter((x) => x <= val).reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list that are greater than the specified value.\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  0\n  */\nconst sumGreaterThan = (l, val) => {\n  return l.filter((x) => x > val).reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list that are greater than or equal to the specified value.\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  0\n  */\nconst sumGreaterThanOrEqual = (l, val) => {\n  return l.filter((x) => x >= val).reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list that are equal to the specified value.\n  >>> sumEquals([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumEquals([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumEquals([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  0\n  */\nconst sumEquals = (l, val) => {\n  return l.filter((x) => x === val).reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list that are greater than the specified value.\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  0\n  */\nconst sumGreaterThan = (l, val) => {\n  return l.filter((x) => x > val).reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list that are greater than or equal to the specified value.\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumGreaterThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  0\n  */\nconst sumGreaterThanOrEqual = (l, val) => {\n  return l.filter((x) => x >= val).reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list that are equal to the specified value.\n  >>> sumEquals([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumEquals([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumEquals([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  0\n  */\nconst sumEquals = (l, val) => {\n  return l.filter((x) => x === val).reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list that are less than the specified value.\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  0\n  */\nconst sumLessThan = (l, val) => {\n  return l.filter((x) => x < val).reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list that are less than or equal to the specified value.\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumLessThanOrEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  0\n  */\nconst sumLessThanOrEqual = (l, val) => {\n  return l.filter((x) => x <= val).reduce((acc, val) => acc + val, 0)\n}\n\n/*Return sum of all elements in the list that are greater than the specified value.\n  >>> sumGre", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n < 11 || n % 11 === 0) return 0\n  if (n < 13) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 13 or 17.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 13 || n % 13 === 0) return 0\n  if (n < 17) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 17 or 19.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 17 || n % 17 === 0) return 0\n  if (n < 19) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 19 or 23.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 19 || n % 19 === 0) return 0\n  if (n < 23) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 23 or 27.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 23 || n % 23 === 0) return 0\n  if (n < 27) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 27 or 31.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 27 || n % 27 === 0) return 0\n  if (n < 31) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 31 or 35.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 31 || n % 31 === 0) return 0\n  if (n < 35) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 35 or 39.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 35 || n % 35 === 0) return 0\n  if (n < 39) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 39 or 43.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 39 || n % 39 === 0) return 0\n  if (n < 43) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 43 or 47.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 43 || n % 43 === 0) return 0\n  if (n < 47) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 47 or 51.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 47 || n % 47 === 0) return 0\n  if (n < 51) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 51 or 55.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 51 || n % 51 === 0) return 0\n  if (n < 55) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 55 or 59.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 55 || n % 55 === 0) return 0\n  if (n < 59) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 59 or 63.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 59 || n % 59 === 0) return 0\n  if (n < 63) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 63 or 67.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 63 || n % 63 === 0) return 0\n  if (n < 67) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 67 or 71.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  2\n  */\nconst fizzBuzz = (n) => {\n  if (n < 67 || n % 67 === 0) return 0\n  if (n < 71) return 1\n  return 2\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 71 or 75.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      even.sort((a, b) => a - b)\n    }\n  }\n  return even\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrOdd = (l) => {\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      odd.sort((a, b) => a - b)\n    }\n  }\n  return odd\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return sotrEven(odd).concat(sotrOdd(even))\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return sotrOdd(odd).concat(sotrEven(even))\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return sotrEven(odd).concat(sotrOdd(even)).concat(sotrEven(even))\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrOddOdd = (l) => {\n  let odd = []\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return sotrOdd(odd).concat(sotrEven(even))\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEvenEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrEvenEven = (l) => {\n  let even = []\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      even.sort((a, b) => a - b)\n    }\n  }\n  return even\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrOddEvenOdd = (l) => {\n  let odd = []\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return sotrOdd(odd).concat(sotrEven(even)).concat(sotrOdd(even))\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEvenEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEvenEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrEvenEvenOdd = (l) => {\n  let even = []\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      even.sort((a, b) => a - b)\n    }\n  }\n  return even\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrOddOdd = (l) => {\n  let odd = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      odd.sort((a, b) => a - b)\n    }\n  }\n  return odd\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEvenOddOdd(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 1) {\n    groups.push(s.slice(i, i + 1));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 0) {\n    groups.push(s.slice(i, i + 0));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character and one character.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters and one character.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters and one character.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  while (b < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return a;\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let a = 1;\n  let b = 1;\n  let c;\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - meanValue));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - modeValue));\n  return mode(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - meanValue));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - modeValue));\n  return mode(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - meanValue));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - modeValue));\n  return mode(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - meanValue));\n  return mean(deviations);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollision = (i, j) => {\n  let collision = false;\n  let xi = acrRacelX(i);\n  let yi = acrRacelY(i);\n  let xj = acrRacelX(j);\n  let yj = acrRacelY(j);\n  let xmin = Math.min(xi, xj);\n  let ymin = Math.min(yi, yj);\n  let xmax = Math.max(xi, xj);\n  let ymax = Math.max(yi, yj);\n  let xd = xmax - xmin;\n  let yd = ymax - ymin;\n  let xc = (xi + xj) / 2;\n  let yc = (yi + yj) / 2;\n  let xi = xi - xc;\n  let yi = yi - yc;\n  let xj = xj - xc;\n  let yj = yj - yc;\n  let xmin = xmin - xc;\n  let ymin = ymin - yc;\n  let xmax = xmax - xc;\n  let ymax = ymax - yc;\n  let xd = xmax - xmin;\n  let yd = ymax - ymin;\n  if (xd > yd) {\n    if (xd > xc) {\n      if (yd > yc) {\n        collision = true;\n      }\n    }\n  } else if (yd > xd) {\n    if (yd > yc) {\n      collision = true;\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollisions = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollisions = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollisions = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollisions = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 7, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "<|endoftext|>/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> apirSsumoTOne([1, 3, 5, 0])\n  false\n  >>> apirSsumoTOne([1, 3, -2, 1])\n  false\n  >>> apirSsumoTOne([1, 2, 3, 7])\n  false\n  >>> apirSsumoTOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTOne([1])\n  false\n  */\nconst apirSsumoTOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTTwo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to two, and false otherwise.\n  >>> apirSsumoTTwo([1, 3, 5, 0])\n  false\n  >>> apirSsumoTTwo([1, 3, -2, 1])\n  false\n  >>> apirSsumoTTwo([1, 2, 3, 7])\n  false\n  >>> apirSsumoTTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTTwo([1])\n  false\n  */\nconst apirSsumoTTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTThree takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to three, and false otherwise.\n  >>> apirSsumoTThree([1, 3, 5, 0])\n  false\n  >>> apirSsumoTThree([1, 3, -2, 1])\n  false\n  >>> apirSsumoTThree([1, 2, 3, 7])\n  false\n  >>> apirSsumoTThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTThree([1])\n  false\n  */\nconst apirSsumoTThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTFour takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to four, and false otherwise.\n  >>> apirSsumoTFour([1, 3, 5, 0])\n  false\n  >>> apirSsumoTFour([1, 3, -2, 1])\n  false\n  >>> apirSsumoTFour([1, 2, 3, 7])\n  false\n  >>> apirSsumoTFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTFour([1])\n  false\n  */\nconst apirSsumoTFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTFive takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to five, and false otherwise.\n  >>> apirSsumoTFive([1, 3, 5, 0])\n  false\n  >>> apirSsumoTFive([1, 3, -2, 1])\n  false\n  >>> apirSsumoTFive([1, 2, 3, 7])\n  false\n  >>> apirSsumoTFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTFive([1])\n  false\n  */\nconst apirSsumoTFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTSix takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to six, and false otherwise.\n  >>> apirSsumoTSix([1, 3, 5, 0])\n  false\n  >>> apirSsumoTSix([1, 3, -2, 1])\n  false\n  >>> apirSsumoTSix([1, 2, 3, 7])\n  false\n  >>> apirSsumoTSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTSix([1])\n  false\n  */\nconst apirSsumoTSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTSeven takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to seven, and false otherwise.\n  >>> apirSsumoTSeven([1, 3, 5, 0])\n  false\n  >>> apirSsumoTSeven([1, 3, -2, 1])\n  false\n  >>> apirSsumoTSeven([1, 2, 3, 7])\n  false\n  >>> apirSsumoTSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTSeven([1])\n  false\n  */\nconst apirSsumoTSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTEight takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to eight, and false otherwise.\n  >>> apirSsumoTEight([1, 3, 5, 0])\n  false\n  >>> apirSsumoTEight([1, 3, -2, 1])\n  false\n  >>> apirSsumoTEight([1, 2, 3, 7])\n  false\n  >>> apirSsumoTEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTEight([1])\n  false\n  */\nconst apirSsumoTEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTNine take", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = ''\n  const n = parseInt(x, base)\n  while (n > 0) {\n    res = String(n%base) + res\n    n = parseInt(n/base, base)\n  }\n  return res\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let res = ''\n  const n = parseInt(x, base)\n  while (n > 0) {\n    res = String(n%base) + res\n    n = parseInt(n/base, base)\n  }\n  return res\n}\n\n/*\n  >>> changeBase2('111', 2)\n  '111'\n  >>> changeBase2('111', 3)\n  '1111'\n  >>> changeBase2('111', 4)\n  '11111'\n  >>> changeBase2('111', 5)\n  '111111'\n  >>> changeBase2('111', 6)\n  '11111111'\n  >>> changeBase2('111', 7)\n  '111111111'\n  >>> changeBase2('111', 8)\n  '1111111111'\n  >>> changeBase2('111', 9)\n  '11111111111'\n  >>> changeBase2('111', 10)\n  '111111111111'\n  >>> changeBase2('111', 11)\n  '1111111111111'\n  >>> changeBase2('111', 12)\n  '11111111111111'\n  >>> changeBase2('111', 13)\n  '111111111111111'\n  >>> changeBase2('111', 14)\n  '1111111111111112'\n  >>> changeBase2('111', 15)\n  '111111111111111222'\n  >>> changeBase2('111', 16)\n  '11111111111111122222'\n  >>> changeBase2('111', 17)\n  '111111111111111222222'\n  >>> changeBase2('111', 18)\n  '1111111111111112222222'\n  >>> changeBase2('111', 19)\n  '11111111111111122222222'\n  >>> changeBase2('111', 20)\n  '111111111111111222222222'\n  >>> changeBase2('111', 21)\n  '1111111111111112222222222'\n  >>> changeBase2('111', 22)\n  '11111111111111122222222222'\n  >>> changeBase2('111', 23)\n  '111111111111111222222222222'\n  >>> changeBase2('111', 24)\n  '1111111111111112222222222223'\n  >>> changeBase2('111', 25)\n  '11111111111111122222222222231'\n  >>> changeBase2('111', 26)\n  '111111111111111222222222222311'\n  >>> changeBase2('111', 27)\n  '1111111111111112222222222223111'\n  >>> changeBase2('111', 28)\n  '11111111111111122222222222231111'\n  >>> changeBase2('111', 29)\n  '111111111111111222222222222311111'\n  >>> changeBase2('111', 30)\n  '1111111111111112222222222223111111'\n  >>> changeBase2('111', 31)\n  '11111111111111122222222222231111111'\n  >>> changeBase2('111', 32)\n  '111111111111111222222222222311111112'\n  >>> changeBase2('111', 33)\n  '1111111111111112222222222223111111122'\n  >>> changeBase2('111', 34)\n  '11111111111111122222222222231111111222'\n  >>> changeBase2('111', 35)\n  '111111111111111222222222222311111112222'\n  >>> changeBase2('111', 36)\n  '1111111111111112222222222223111111122222'\n  >>> changeBase2('111', 37)\n  '11111111111111122222222222231111111222222'\n  >>> changeBase2('111', 38)\n  '111111111111111222222222222311111112222222'\n  >>> changeBase2('111', 39)\n  '1111111111111112222222222223111111122222222'\n  >>> changeBase2('111', 40)\n  '11111111111111122222222222231111111222222223'\n  >>> changeBase2('111', 41)\n  '111111111111111222222222222311111112222222231'\n  >>> changeBase2('111', 42)\n  '1111111111111112222222222223111111122222222311'\n  >>> changeBase2('111', 43)\n  '11111111111111122222222222231111111222222223111'\n  >>> changeBase2('111', 44)\n  '111111111111111222222222222311111112222222231111'\n  >>> changeBase2('111', 45)\n  '1111111111111112222222222223111111122222222311111'\n  >>> changeBase2('111', 46)\n  '11111111111111122222222222231111111222222223111111'\n  >>> changeBase2('111', 47)\n  '111111111111111222222222222311111112222222231111111'\n  >>> changeBase2('111', 48)\n  '1111111111111112222222222223111111122222222311111112'\n  >>> changeBase2('111', 49)\n  '11111111111111122222222222231111111222222223111111122'\n  >>> changeBase2('111', 50)\n  '111111111111111222222222222311111112222222231111111222'\n  >>> changeBase2('111', 51)\n  '1111111111111112222222222223111111122222222311111112222'\n  >>> changeBase2('111', 52)\n  '11111111111111122222222222231111111222222223111111122222'\n  >>> changeBase2('111', 53)\n  '111111111111111222222222222311111112222222231111111222222'\n  >>> changeBase2('111', 54)\n  '1111111111111112222222222223111111122222222311111112222222'\n  >>> changeBase2('111', 55)\n  '11111111111111122222222222231111111222222223111111122222222'\n  >>> changeBase2('111', 56)\n  '111111111111111222222222222311111112222222231111111222222223'\n  >>> changeBase2('111', 57)\n  '1111111111111112222222222223111111122222222311111112222222231'\n  >>> changeBase2('111', 58)\n  '11111111111111122222222222231111111222222223111111122222222311'\n  >>> changeBase2('111', ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter(5, 3)\n  7.5\n  */\nconst trianglePerimeter = (a, h) => {\n  return a + a + h + h + h;\n};\n\n/*Given a triangle, find the area of its circumcircle\n  >>> triangleCircumcircle(5, 3)\n  7.5\n  */\nconst triangleCircumcircle = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its equilateral triangle\n  >>> triangleEquilateral(5, 3)\n  7.5\n  */\nconst triangleEquilateral = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its scalene triangle\n  >>> triangleScalene(5, 3)\n  7.5\n  */\nconst triangleScalene = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its equilateral triangle with sides equal\n  >>> triangleEquilateralWithSides(5, 3)\n  7.5\n  */\nconst triangleEquilateralWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its scalene triangle with sides equal\n  >>> triangleScaleneWithSides(5, 3)\n  7.5\n  */\nconst triangleScaleneWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its equilateral triangle with sides equal\n  >>> triangleEquilateralWithSides(5, 3)\n  7.5\n  */\nconst triangleEquilateralWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its scalene triangle with sides equal\n  >>> triangleScaleneWithSides(5, 3)\n  7.5\n  */\nconst triangleScaleneWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its equilateral triangle with sides equal\n  >>> triangleEquilateralWithSides(5, 3)\n  7.5\n  */\nconst triangleEquilateralWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its scalene triangle with sides equal\n  >>> triangleScaleneWithSides(5, 3)\n  7.5\n  */\nconst triangleScaleneWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its equilateral triangle with sides equal\n  >>> triangleEquilateralWithSides(5, 3)\n  7.5\n  */\nconst triangleEquilateralWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its scalene triangle with sides equal\n  >>> triangleScaleneWithSides(5, 3)\n  7.5\n  */\nconst triangleScaleneWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its equilateral triangle with sides equal\n  >>> triangleEquilateralWithSides(5, 3)\n  7.5\n  */\nconst triangleEquilateralWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its scalene triangle with sides equal\n  >>> triangleScaleneWithSides(5, 3)\n  7.5\n  */\nconst triangleScaleneWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its equilateral triangle with sides equal\n  >>> triangleEquilateralWithSides(5, 3)\n  7.5\n  */\nconst triangleEquilateralWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its scalene triangle with sides equal\n  >>> triangleScaleneWithSides(5, 3)\n  7.5\n  */\nconst triangleScaleneWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its equilateral triangle with sides equal\n  >>> triangleEquilateralWithSides(5, 3)\n  7.5\n  */\nconst triangleEquilateralWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its scalene triangle with sides equal\n  >>> triangleScaleneWithSides(5, 3)\n  7.5\n  */\nconst triangleScaleneWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its equilateral triangle with sides equal\n  >>> triangleEquilateralWithSides(5, 3)\n  7.5\n  */\nconst triangleEquilateralWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its scalene triangle with sides equal\n  >>> triangleScaleneWithSides(5, 3)\n  7.5\n  */\nconst triangleScaleneWithSides = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(h + h, 2) + Math.pow(h + h, 2));\n};\n\n/*Given a triangle, find the area of its equilateral triangle with sides equal\n  >>> triangleEquilateralWithSides(5, 3)\n  7.5\n  */\nconst triangle", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Problem 7\n  -----------\n  Write a function to compute the nth term of the Fibonacci sequence.  Do not use recursion.\n  >>> fib7(0)\n  0\n  >>> fib7(1)\n  1\n  >>> fib7(2)\n  1\n  >>> fib7(3)\n  2\n  >>> fib7(4)\n  3\n  >>> fib7(5)\n  5\n  >>> fib7(6)\n  8\n  >>> fib7(7)\n  13\n  >>> fib7(8)\n  21\n  >>> fib7(9)\n  34\n  >>> fib7(10)\n  55\n  >>> fib7(11)\n  89\n  >>> fib7(12)\n  144\n  >>> fib7(13)\n  233\n  >>> fib7(14)\n  377\n  >>> fib7(15)\n  610\n  >>> fib7(16)\n  987\n  >>> fib7(17)\n  1597\n  >>> fib7(18)\n  2584\n  >>> fib7(19)\n  4181\n  >>> fib7(20)\n  6765\n  >>> fib7(21)\n  10946\n  >>> fib7(22)\n  17711\n  >>> fib7(23)\n  28657\n  >>> fib7(24)\n  46368\n  >>> fib7(25)\n  75025\n  >>> fib7(26)\n  1213969\n  >>> fib7(27)\n  1964185\n  >>> fib7(28)\n  3178113\n  >>> fib7(29)\n  5142293\n  >>> fib7(30)\n  8320407\n  >>> fib7(31)\n  13462697\n  >>> fib7(32)\n  21783097\n  >>> fib7(33)\n  35245785\n  >>> fib7(34)\n  57028874\n  >>> fib7(35)\n  949755813\n  >>> fib7(36)\n  14930352\n  >>> fib7(37)\n  241578575\n  >>> fib7(38)\n  390881693\n  >>> fib7(39)\n  632459863\n  >>> fib7(40)\n  102334151\n  >>> fib7(41)\n  165580141\n  >>> fib7(42)\n  267914296\n  >>> fib7(43)\n  433494437\n  >>> fib7(44)\n  701408733\n  >>> fib7(45)\n  1134903170\n  >>> fib7(46)\n  1836311903\n  >>> fib7(47)\n  2971215073\n  >>> fib7(48)\n  4807526976\n  >>> fib7(49)\n  7778742049\n  >>> fib7(50)\n  12586269025\n  >>> fib7(51)\n  20365011074\n  >>> fib7(52)\n  32951280099\n  >>> fib7(53)\n  53316291171\n  >>> fib7(54)\n  80651553357\n  >>> fib7(55)\n  130496954491\n  >>> fib7(56)\n  1955392684261\n  >>> fib7(57)\n  3178977697521\n  >>> fib7(58)\n  51422931009538\n  >>> fib7(59)\n  832040730987353\n  >>> fib7(60)\n  1346269725747852\n  >>> fib7(61)\n  21783096624323441\n  >>> fib7(62)\n  352457812626457314\n  >>> fib7(63)\n  570288747309942972\n  >>> fib7(64)\n  949755813970189439\n  >>> fib7(65)\n  14930353983661195791\n  >>> fib7(66)\n  24157857780777303667\n  >>> fib7(67)\n  3908816930438067900\n  >>> fib7(68)\n  6324598625954230032\n  >>> fib7(69)\n  10233415079943980465\n  >>> fib7(70)\n  16558014089915980088\n  >>> fib7(71)\n  26791429615501972171\n  >>> fib7(72)\n  43349443700844356313\n  >>> fib7(73)\n  7014087331065324450\n  >>> fib7(74)\n  11349031704665605657\n  >>> fib7(75)\n  18363119031006632961\n  >>> fib7(76)\n  29712150730334084739\n  >>> fib7(77)\n  48075269760121960632\n  >>> fib7(78)\n  77787420490094453464\n  >>> fib7(79)\n  125862690254026886613\n  >>> fib7(80)\n  203650110740049867021\n  >>> fib7(81)\n  32951280099044755996\n  >>> fib7(82)\n  53316291171060137664\n  >>> fib7(83)\n  80651553357009656449\n  >>> fib7(84)\n  13049695449100663296\n  >>> fib7(85)\n  19553926842600663296\n  >>> fib7(86)\n  317897769752100663296\n  >>> fib7(87)\n  514229310095380663296\n  >>> fib7(88)\n  8320407309873530663296\n  >>> fib7(89)\n  134626972574785206632", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[len / 2];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  */\nconst mode = (l) => {\n  if (l.length === 0) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces included\n  >>> isPalindromeWithSpaces('')\n  true\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with numbers included\n  >>> isPalindromeWithNumbers('')\n  true\n  >>> isPalindromeWithNumbers('aba')\n  true\n  >>> isPalindromeWithNumbers('aaaaa')\n  true\n  >>> isPalindromeWithNumbers('zbcd')\n  false\n  */\nconst isPalindromeWithNumbers = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed.replace(/[0-9]/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with special characters included\n  >>> isPalindromeWithSpecialChars('')\n  true\n  >>> isPalindromeWithSpecialChars('aba')\n  true\n  >>> isPalindromeWithSpecialChars('aaaaa')\n  true\n  >>> isPalindromeWithSpecialChars('zbcd')\n  false\n  */\nconst isPalindromeWithSpecialChars = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed.replace(/[^a-zA-Z]/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with special characters included\n  >>> isPalindromeWithSpecialChars('')\n  true\n  >>> isPalindromeWithSpecialChars('aba')\n  true\n  >>> isPalindromeWithSpecialChars('aaaaa')\n  true\n  >>> isPalindromeWithSpecialChars('zbcd')\n  false\n  */\nconst isPalindromeWithSpecialChars = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with special characters included\n  >>> isPalindromeWithSpecialChars('')\n  true\n  >>> isPalindromeWithSpecialChars('aba')\n  true\n  >>> isPalindromeWithSpecialChars('aaaaa')\n  true\n  >>> isPalindromeWithSpecialChars('zbcd')\n  false\n  */\nconst isPalindromeWithSpecialChars = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with special characters included\n  >>> isPalindromeWithSpecialChars('')\n  true\n  >>> isPalindromeWithSpecialChars('aba')\n  true\n  >>> isPalindromeWithSpecialChars('aaaaa')\n  true\n  >>> isPalindromeWithSpecialChars('zbcd')\n  false\n  */\nconst isPalindromeWithSpecialChars = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with special characters included\n  >>> isPalindromeWithSpecialChars('')\n  true\n  >>> isPalindromeWithSpecialChars('aba')\n  true\n  >>> isPalindromeWithSpecialChars('aaaaa')\n  true\n  >>> isPalindromeWithSpecialChars('zbcd')\n  false\n  */\nconst isPalindromeWithSpecialChars = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with special characters included\n  >>> isPalindromeWithSpecialChars('')\n  true\n  >>> isPalindromeWithSpecialChars('aba')\n  true\n  >>> isPalindromeWithSpecialChars('aaaaa')\n  true\n  >>> isPalindromeWithSpecialChars('zbcd')\n  false\n  */\nconst isPalindromeWithSpecialChars = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with special characters included\n  >>> isPalindromeWithSpecialChars('')\n  true\n  >>> isPalindromeWithSpecialChars('aba')\n  true\n  >>> isPalindromeWithSpecialChars('aaaaa')\n  true\n  >>> isPalindromeWithSpecialChars('zbcd')\n  false\n  */\nconst isPalindromeWithSpecialChars = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with special characters included\n  >>> isPalindromeWithSpecialChars('')\n  true\n  >>> isPalindromeWithSpecialChars('aba')\n  true\n  >>> isPalindromeWithSpecialChars('aaaaa')\n  true\n  >>> isPalindromeWithSpecialChars('zbcd')\n  false\n  */\nconst isPalindromeWithSpecialChars = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with special characters included\n  >>> isPalindromeWithSpecialChars('')\n  true\n  >>> isPalindromeWithSpecialChars('aba')\n  true\n  >>> isPalindromeWithSpecialChars('aaaaa')\n  true\n  >>> isPalindromeWithSpecial", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new RangeError('modp() arguments must be non-negative and less than or equal to p');\n  }\n  return ((n % p) + p) % p;\n};\n\n/*\n  >>> modpow(2, 5, 3)\n  8\n  >>> modpow(2, 5, 7)\n  2\n  >>> modpow(2, 5, 7)\n  2\n  >>> modpow(2, 5, 14)\n  4\n  >>> modpow(2, 5, 14)\n  4\n  >>> modpow(2, 14, 5)\n  8\n  >>> modpow(2, 14, 7)\n  2\n  >>> modpow(2, 14, 7)\n  2\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow(2, 14, 14)\n  4\n  >>> modpow", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index += 2;\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([4, 2, 3], 4)\n  [1, 4, 2, 4, 3, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encodRotate = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rotate function. Returns decoded string.\n  */\nconst decodeRotate = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by removing 5 from every character in the alphabet.\n  */\nconst encodSub5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_sub5 function. Returns decoded string.\n  */\nconst decodeSub5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by removing 5 from every character in the alphabet.\n  */\nconst encodSub5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_sub5 function. Returns decoded string.\n  */\nconst decodeSub5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by removing 5 from every character in the alphabet.\n  */\nconst encodSub5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_sub5 function. Returns decoded string.\n  */\nconst decodeSub5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by removing 5 from every character in the alphabet.\n  */\nconst encodSub5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_sub5 function. Returns decoded string.\n  */\nconst decodeSub5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by removing 5 from every character in the alphabet.\n  */\nconst encodSub5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encode", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "<|endoftext|>/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  return text\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[aeiouAEIO", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange2 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange3 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange4 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange5 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange6 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange7 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange8 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange9 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange10 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange11 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange12 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange13 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in the range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  >>> inRange([10, 20, 30, 40], 10, 30)\n  true\n  */\nconst inRange14 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x modulo y\n  >>> absMod(-3, 2)\n  1\n  >>> absMod(3, 2)\n  1\n  */\nconst absMod = (x, y) => {\n  return Math.abs(x) % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(3, 2)\n  1\n  */\nconst absModWithoutAbs = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x modulo y without using Math.abs\n  >>> absModWithoutAbs(-3, 2)\n  1\n  >>> absModWithoutAbs(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === '') return false;\n  if (s1 === '') return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === '') return false;\n  if (s1 === '') return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === '') return false;\n  if (s1 === '') return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === '') return false;\n  if (s1 === '') return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === '') return false;\n  if (s1 === '') return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === '') return false;\n  if (s1 === '') return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === '') return false;\n  if (s1 === '') return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === '') return false;\n  if (s1 === '') return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  10946\n  >>> fib(22)\n  17711\n  >>> fib(23)\n  28657\n  >>> fib(24)\n  46368\n  >>> fib(25)\n  75025\n  >>> fib(26)\n  121393\n  >>> fib(27)\n  196418\n  >>> fib(28)\n  317811\n  >>> fib(29)\n  514229\n  >>> fib(30)\n  832040\n  >>> fib(31)\n  1346269\n  >>> fib(32)\n  2178309\n  >>> fib(33)\n  3524578\n  >>> fib(34)\n  5702887\n  >>> fib(35)\n  927353\n  >>> fib(36)\n  14930352\n  >>> fib(37)\n  24157817\n  >>> fib(38)\n  39088169\n  >>> fib(39)\n  63245986\n  >>> fib(40)\n  102334155\n  >>> fib(41)\n  165580141\n  >>> fib(42)\n  267914293\n  >>> fib(43)\n  433494437\n  >>> fib(44)\n  701408733\n  >>> fib(45)\n  1134903170\n  >>> fib(46)\n  1836311903\n  >>> fib(47)\n  2971215073\n  >>> fib(48)\n  4807526976\n  >>> fib(49)\n  7778742049\n  >>> fib(50)\n  12586269025\n  >>> fib(51)\n  17207079632\n  >>> fib(52)\n  27487790691\n  >>> fib(53)\n  54975581388\n  >>> fib(54)\n  97655574333\n  >>> fib(55)\n  15480087559\n  >>> fib(56)\n  25047307819\n  >>> fib(57)\n  40527395376\n  >>> fib(58)\n  65574703191\n  >>> fib(59)\n  106102098577\n  >>> fib(60)\n  171676801775\n  >>> fib(61)\n  267914296675\n  >>> fib(62)\n  433494437380\n  >>> fib(63)\n  701408733125\n  >>> fib(64)\n  113490317002\n  >>> fib(65)\n  183631190321\n  >>> fib(66)\n  297121507309\n  >>> fib(67)\n  480752697608\n  >>> fib(68)\n  777874204939\n  >>> fib(69)\n  1258626902542\n  >>> fib(70)\n  1720707963247\n  >>> fib(71)\n  2748779069142\n  >>> fib(72)\n  5497558138837\n  >>> fib(73)\n  9765557433327\n  >>> fib(74)\n  1548008755952\n  >>> fib(75)\n  2504730781901\n  >>> fib(76)\n  4052739537637\n  >>> fib(77)\n  6557470319141\n  >>> fib(78)\n  10610209857740\n  >>> fib(79)\n  17167680177565\n  >>> fib(80)\n  26791429667539\n  >>> fib(81)\n  43349443738046\n  >>> fib(82)\n  7014087331253\n  >>> fib(83)\n  11349031700204\n  >>> fib(84)\n  18363119032121\n  >>> fib(85)\n  29712150730903\n  >>> fib(86)\n  48075269760839\n  >>> fib(87)\n  7778742049388\n  >>> fib(88)\n  12586269025427\n  >>> fib(89)\n  17207079632467\n  >>> fib(90)\n  27487790691417\n  >>> fib(91)\n  54975581388371\n  >>> fib(92)\n  97655574333271\n  >>> fib(93)\n  15480087559509\n  >>> fib(94)\n  25047307819011\n  >>> fib(95)\n  40527395376373\n  >>> fib(96)\n  65574703191411\n  >>> fib(97)\n  106102098577400\n  >>> fib(98)\n  171676801775655\n  >>> fib(99)\n  267914296675397\n  >>> fib(100)\n  433494437380465\n  >>> fib(101)\n  70140873312535\n  >>> fib(102)\n  113490317002043\n  >>> fib(103)\n  183631190321211\n  >>> fib(104)\n  297121507309029\n  >>> fib(105)\n  480752697608395\n  >>> fib(106)\n  77787420493881\n  >>> fib(107)\n  125862690254273\n  >>> fib(108)\n  172070796324671\n  >>> fib(109)\n  274877906914173\n  >>> fib(110)\n  5497558138837", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Checks whether a string is a valid XML element name.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element name, false otherwise.\n */\nconst isValidElementName = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z][A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML attribute name.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML attribute name, false otherwise.\n */\nconst isValidAttributeName = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z][A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML attribute value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML attribute value, false otherwise.\n */\nconst isValidAttributeValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidElementValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidAttributeValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidElementValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidAttributeValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidElementValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidAttributeValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidElementValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidAttributeValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidElementValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidAttributeValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidElementValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidAttributeValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidElementValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidAttributeValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidElementValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidAttributeValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidElementValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};\n\n/**\n * Checks whether a string is a valid XML element value.\n *\n * @param {string} str The string to check.\n * @returns {boolean} True if the string is a valid XML element value, false otherwise.\n */\nconst isValidAttributeValue = (str) => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[A-Za-z0-9:._-]*$/.test(str);\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "<|endoftext|>/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let l = l.slice();\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let max = 0;\n  let min = 0;\n  let temp = 0;\n  let flag = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] < l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] > l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] < l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] > l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] < l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] > l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] < l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] > l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] < l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] > l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] < l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] > l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] < l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] > l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] < l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] > l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] < l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] > l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    j = i;\n    while (j < n) {\n      k = j;\n      while (k < n) {\n        if (l[j] < l[k]) {\n          temp = l[j];\n          l[j] = l[k];\n          l[k] = temp;\n        }\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n  n = l.length;\n  i = 0;\n  while (i < n) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length) {\n    if (l1[j] === l2[j]) {\n      result.push(l1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 1;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 1;\n  }\n  return i;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> factorsOfNDesc(13195)\n  [5, 3, 1]\n  >>> factorsOfNDesc(2048)\n  [2]\n  */\nconst factorsOfNDesc = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> factorsOfNDesc(13195)\n  [5, 3, 1]\n  >>> factorsOfNDesc(2048)\n  [2]\n  */\nconst factorsOfNDesc = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> factorsOfNDesc(13195)\n  [5, 3, 1]\n  >>> factorsOfNDesc(2048)\n  [2]\n  */\nconst factorsOfNDesc = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in ascending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n in descending order. Assume n > 1 and is not a prime.\n  >>> factorsOfN(13195)\n  [1, 3, 5]\n  >>> factorsOfN(2048)\n  [2]\n  */\nconst factorsOfN = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const max_level = Math.max.apply(null, groups.map(g => g.length));\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === max_level);\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting in the string.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * 3\n */\nconst getMaxLevel = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === Math.max.apply(null, groups))[0];\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting in the string.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * 3\n */\nconst getMaxLevelWithParens = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === Math.max.apply(null, groups))[0];\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting in the string.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * 3\n */\nconst getMaxLevelWithParensAndSpaces = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === Math.max.apply(null, groups))[0];\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting in the string.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * 3\n */\nconst getMaxLevelWithParensAndSpacesAndSpaces = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === Math.max.apply(null, groups))[0];\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting in the string.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * 3\n */\nconst getMaxLevelWithParensAndSpacesAndSpacesAndSpaces = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === Math.max.apply(null, groups))[0];\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting in the string.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * 3\n */\nconst getMaxLevelWithParensAndSpacesAndSpacesAndSpacesAndSpaces = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === Math.max.apply(null, groups))[0];\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting in the string.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * 3\n */\nconst getMaxLevelWithParensAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === Math.max.apply(null, groups))[0];\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting in the string.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * 3\n */\nconst getMaxLevelWithParensAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === Math.max.apply(null, groups))[0];\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting in the string.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * 3\n */\nconst getMaxLevelWithParensAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === Math.max.apply(null, groups))[0];\n};\n\n/**\n * Given a string of parentheses, return the deepest level of nesting in the string.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n *\n * >>> parseNetsedParens('(()()) ((())) () ((())()())')\n * 3\n */\nconst getMaxLevelWithParensAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  return groups.map(g => g.match(/\\(([^()]+)\\)/g).length).filter(g => g === Math.max.apply(null, groups))[0];\n};\n\n/**\n * ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  if (openingBracketsCount === closingBracketsCount) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Given a string of text and a string containing only brackets, return the\n * number of brackets contained in the string.\n *\n * >>> countBrackets('(())', '()')\n 0\n * >>> countBrackets('(())', '(())')\n 1\n * >>> countBrackets('(())', '(()())')\n 2\n * >>> countBrackets('(())', '(()())(())')\n 3\n */\nconst countBrackets = (text, brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '(') {\n      count++;\n    } else if (text[i] === ')') {\n      count--;\n    }\n  }\n\n  return count + openingBracketsCount - closingBracketsCount;\n};\n\n/**\n * Given a string of text and a string containing only brackets, return the\n * number of brackets contained in the string.\n *\n * >>> countBrackets('(())', '()')\n 0\n * >>> countBrackets('(())', '(())')\n 1\n * >>> countBrackets('(())', '(()())')\n 2\n * >>> countBrackets('(())', '(()())(())')\n 3\n */\nconst countBrackets = (text, brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '(') {\n      count++;\n    } else if (text[i] === ')') {\n      count--;\n    }\n  }\n\n  return count + openingBracketsCount - closingBracketsCount;\n};\n\n/**\n * Given a string of text and a string containing only brackets, return the\n * number of brackets contained in the string.\n *\n * >>> countBrackets('(())', '()')\n 0\n * >>> countBrackets('(())', '(())')\n 1\n * >>> countBrackets('(())', '(()())')\n 2\n * >>> countBrackets('(())', '(()())(())')\n 3\n */\nconst countBrackets = (text, brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '(') {\n      count++;\n    } else if (text[i] === ')') {\n      count--;\n    }\n  }\n\n  return count + openingBracketsCount - closingBracketsCount;\n};\n\n/**\n * Given a string of text and a string containing only brackets, return the\n * number of brackets contained in the string.\n *\n * >>> countBrackets('(())', '()')\n 0\n * >>> countBrackets('(())', '(())')\n 1\n * >>> countBrackets('(())', '(()())')\n 2\n * >>> countBrackets('(())', '(()())(())')\n 3\n */\nconst countBrackets = (text, brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '(') {\n      count++;\n    } else if (text[i] === ')') {\n      count--;\n    }\n  }\n\n  return count + openingBracketsCount - closingBracketsCount;\n};\n\n/**\n * Given a string of text and a string containing only brackets, return the\n * number of brackets contained in the string.\n *\n * >>> countBrackets('(())', '()')\n 0\n * >>> countBrackets('(())', '(())')\n 1\n * >>> countBrackets('(())', '(()())')\n 2\n * >>> countBrackets('(())', '(()())(())')\n 3\n */\nconst countBrackets = (text, brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '(') {\n      count++;\n    } else if (text[i] === ')') {\n      count--;\n    }\n  }\n\n  return count + openingBracketsCount - closingBracketsCount;\n};\n\n/**\n * Given a string of text and a string containing only brackets, return the\n * number of brackets contained in the string.\n *\n * >>> countBrackets('(())', '()')\n 0\n * >>> countBrackets('(())', '(())')\n 1\n * >>> countBrackets('(())', '(()())')\n 2\n * >>> countBrackets('(())', '(()())(())')\n 3\n */\nconst countBrackets = (text, brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '(') {\n      count++;\n    } else if (text[i] === ')') {\n      count--;\n    }\n  }\n\n  return count + openingBracketsCount - closingBracketsCount;\n};\n\n/**\n * Given a string of text and a string containing only brackets, return the\n * number of brackets contained in the string.\n *\n * >>> countBrackets('(())', '()')\n 0\n * >>> countBrackets('(())', '(())')\n 1\n * >>> countBrackets('(())', '(()())')\n 2\n * >>> countBrackets('(())', '(()())(())')\n 3\n */\nconst countBrackets = (text, brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length;\n  if (n < 1) return [];\n  if (n === 1) return [xs[0]];\n  let d = xs[1];\n  for (let i = 2; i < n; i++) {\n    d *= xs[i];\n  }\n  return [xs[0] + d];\n};\n\n/* Returns true if two polynomials are equal up to some tolerance.\n  >>> equality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> equality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> equality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst equality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i] - p2[i]) > 1e-10) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are almost equal up to some tolerance.\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  True\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  False\n  >>> almostEquality([3, 1, 2, 4, 5], [3, 1, 2, 4, 6])\n  False\n  */\nconst almostEquality = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (Math.abs(p1[i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n// TEST CASES\nconsole.log(fibfib(0));\nconsole.log(fibfib(1));\nconsole.log(fibfib(2));\nconsole.log(fibfib(3));\nconsole.log(fibfib(4));\nconsole.log(fibfib(5));\nconsole.log(fibfib(6));\nconsole.log(fibfib(7));\nconsole.log(fibfib(8));\nconsole.log(fibfib(9));\nconsole.log(fibfib(10));\nconsole.log(fibfib(11));\nconsole.log(fibfib(12));\nconsole.log(fibfib(13));\nconsole.log(fibfib(14));\nconsole.log(fibfib(15));\nconsole.log(fibfib(16));\nconsole.log(fibfib(17));\nconsole.log(fibfib(18));\nconsole.log(fibfib(19));\nconsole.log(fibfib(20));\nconsole.log(fibfib(21));\nconsole.log(fibfib(22));\nconsole.log(fibfib(23));\nconsole.log(fibfib(24));\nconsole.log(fibfib(25));\nconsole.log(fibfib(26));\nconsole.log(fibfib(27));\nconsole.log(fibfib(28));\nconsole.log(fibfib(29));\nconsole.log(fibfib(30));\nconsole.log(fibfib(31));\nconsole.log(fibfib(32));\nconsole.log(fibfib(33));\nconsole.log(fibfib(34));\nconsole.log(fibfib(35));\nconsole.log(fibfib(36));\nconsole.log(fibfib(37));\nconsole.log(fibfib(38));\nconsole.log(fibfib(39));\nconsole.log(fibfib(40));\nconsole.log(fibfib(41));\nconsole.log(fibfib(42));\nconsole.log(fibfib(43));\nconsole.log(fibfib(44));\nconsole.log(fibfib(45));\nconsole.log(fibfib(46));\nconsole.log(fibfib(47));\nconsole.log(fibfib(48));\nconsole.log(fibfib(49));\nconsole.log(fibfib(50));\nconsole.log(fibfib(51));\nconsole.log(fibfib(52));\nconsole.log(fibfib(53));\nconsole.log(fibfib(54));\nconsole.log(fibfib(55));\nconsole.log(fibfib(56));\nconsole.log(fibfib(57));\nconsole.log(fibfib(58));\nconsole.log(fibfib(59));\nconsole.log(fibfib(60));\nconsole.log(fibfib(61));\nconsole.log(fibfib(62));\nconsole.log(fibfib(63));\nconsole.log(fibfib(64));\nconsole.log(fibfib(65));\nconsole.log(fibfib(66));\nconsole.log(fibfib(67));\nconsole.log(fibfib(68));\nconsole.log(fibfib(69));\nconsole.log(fibfib(70));\nconsole.log(fibfib(71));\nconsole.log(fibfib(72));\nconsole.log(fibfib(73));\nconsole.log(fibfib(74));\nconsole.log(fibfib(75));\nconsole.log(fibfib(76));\nconsole.log(fibfib(77));\nconsole.log(fibfib(78));\nconsole.log(fibfib(79));\nconsole.log(fibfib(80));\nconsole.log(fibfib(81));\nconsole.log(fibfib(82));\nconsole.log(fibfib(83));\nconsole.log(fibfib(84));\nconsole.log(fibfib(85));\nconsole.log(fibfib(86));\nconsole.log(fibfib(87));\nconsole.log(fibfib(88));\nconsole.log(fibfib(89));\nconsole.log(fibfib(90));\nconsole.log(fibfib(91));\nconsole.log(fibfib(92));\nconsole.log(fibfib(93));\nconsole.log(fibfib(94));\nconsole.log(fibfib(95));\nconsole.log(fibfib(96));\nconsole.log(fibfib(97));\nconsole.log(fibfib(98));\nconsole.log(fibfib(99));\nconsole.log(fibfib(100));\nconsole.log(fibfib(101));\nconsole.log(fibfib(102));\nconsole.log(fibfib(103));\nconsole.log(fibfib(104));\nconsole.log(fibfib(105));\nconsole.log(fibfib(106));\nconsole.log(fibfib(107));\nconsole.log(fibfib(108));\nconsole.log(fibfib(109));\nconsole.log(fibfib(110));\nconsole.log(fibfib(111));\nconsole.log(fibfib(112));\nconsole.log(fibfib(113));\nconsole.log(fibfib(114));\nconsole.log(fibfib(115));\nconsole.log(fibfib(116));\nconsole.log(fibfib(117));\nconsole.log(fibfib(118));\nconsole.log(fibfib(119));\nconsole.log(fibfib(120));\nconsole.log(fibfib(121));\nconsole.log(fibfib(122));\nconsole.log(fibfib(123));\nconsole.log(fibfib(124));\nconsole.log(fibfib(125));\nconsole.log(fibfib(126));\nconsole.log(fibfib(127));\nconsole.log(fibfib(128));\nconsole.log(fibfib(129));\nconsole.log(fibfib(130));\nconsole.log(fibfib(131));\nconsole.log(fibfib(132));\nconsole.log(fibfib(133));\nconsole.log(fibfib(134));\nconsole.log(fibfib(135));\nconsole.log(fibfib(136));\nconsole.log(fibfib(137));\nconsole.log(fibfib(138));\nconsole.log(fibfib(139));\nconsole.log(fibfib(140));\nconsole.log(fibfib(141));\nconsole.log(fibfib(142));\nconsole.log(fibfib(143));\nconsole.log(fibfib(144));\nconsole.log(fibfib(145));\nconsole.log(fibfib(146));\nconsole.log(fibfib(147));\nconsole.log(fibfib(148));\nconsole.log(fibfib(149));\nconsole.log(fibfib(150));\nconsole.log(fibfib(151));\nconsole.log(fibfib(152));\nconsole.log(fibfib(153));\nconsole.log(fibfib(154));\nconsole.log(fibfib(155));\nconsole.log(fibfib(156));\nconsole.log(fibfib(157));\nconsole.log(fibfib(158));\nconsole.log(fibfib(159));\nconsole.log(fibfib(160));\nconsole.log(fibfib(161));\nconsole.log(fibfib(162));\nconsole.log(fibfib(163));\nconsole.log(fibfib(164));\nconsole.log(fibfib(165));\nconsole.log(fibfib(166));\nconsole.log(fibfib(167));\nconsole.log(fibfib(168));\nconsole.log(fibfib(169));\nconsole.log(fibfib(170));\nconsole.log(fibfib(171));\nconsole.log(fibfib(172));\nconsole.log(fibfib(173));\nconsole.log(fibfib(174));\nconsole.log(fibfib(175));\nconsole.log(fibfib(176));\nconsole.log(fibfib(177));\nconsole.log(fibfib(178));\nconsole.log(fibfib(179));\nconsole.log(fibfib(180));\nconsole.log(fibfib(181));\nconsole.log(fibfib(182));\nconsole.log(fibfib(183));\nconsole.log(fibfib(184));\nconsole.log(fibfib(185));\nconsole.log(fibfib(186));\nconsole.log(fibfib(187));\nconsole.log(fibfib(188));\nconsole.log(fibfib(189));\nconsole.log(fibfib(190));\nconsole.log(fibfib(191));\nconsole.log(fibfib(192));\nconsole.log(fibfib(193));\nconsole.log(fibfib(194));\nconsole.log(fibfib(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "<|endoftext|>/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowel", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  const str = x.toString();\n  const reversed = str.split('').reverse().join('');\n  return reversed.substr(0, reversed.length - shift) + reversed.substr(reversed.length - shift);\n};\n\n/*\n  Convert a number to a string in base 10.\n  >>> toBase10(12)\n  \"12\"\n  >>> toBase10(12, 2)\n  \"10\"\n  >>> toBase10(12, 8)\n  \"100\"\n  >>> toBase10(12, 16)\n  \"1000\"\n  >>> toBase10(12, 24)\n  \"10000\"\n  >>> toBase10(12, 32)\n  \"100000\"\n  >>> toBase10(12, 64)\n  \"1000000\"\n  >>> toBase10(12, 128)\n  \"10000000\"\n  >>> toBase10(12, 256)\n  \"100000000\"\n  >>> toBase10(12, 512)\n  \"1000000000\"\n  >>> toBase10(12, 1024)\n  \"10000000000\"\n  >>> toBase10(12, 2048)\n  \"100000000000\"\n  >>> toBase10(12, 4096)\n  \"1000000000000\"\n  >>> toBase10(12, 8192)\n  \"10000000000000\"\n  >>> toBase10(12, 16384)\n  \"100000000000000\"\n  >>> toBase10(12, 32768)\n  \"1000000000000000\"\n  >>> toBase10(12, 65536)\n  \"1000000000000000000\"\n  >>> toBase10(12, 131072)\n  \"10000000000000000000\"\n  >>> toBase10(12, 262144)\n  \"100000000000000000000\"\n  >>> toBase10(12, 524288)\n  \"1000000000000000000000\"\n  >>> toBase10(12, 1048576)\n  \"10000000000000000000000\"\n  >>> toBase10(12, 2097152)\n  \"100000000000000000000000\"\n  >>> toBase10(12, 4194304)\n  \"1000000000000000000000000\"\n  >>> toBase10(12, 8388608)\n  \"10000000000000000000000000\"\n  >>> toBase10(12, 16777216)\n  \"100000000000000000000000000\"\n  >>> toBase10(12, 33554432)\n  \"1000000000000000000000000000\"\n  >>> toBase10(12, 67108864)\n  \"10000000000000000000000000000\"\n  >>> toBase10(12, 134217728)\n  \"100000000000000000000000000000\"\n  >>> toBase10(12, 268435456)\n  \"1000000000000000000000000000000\"\n  >>> toBase10(12, 536870912)\n  \"10000000000000000000000000000000\"\n  >>> toBase10(12, 1073741824)\n  \"100000000000000000000000000000000\"\n  >>> toBase10(12, 2147483648)\n  \"1000000000000000000000000000000000\"\n  >>> toBase10(12, 4294967296)\n  \"10000000000000000000000000000000000\"\n  >>> toBase10(12, 8589934592)\n  \"100000000000000000000000000000000000\"\n  >>> toBase10(12, 17179869184)\n  \"1000000000000000000000000000000000000\"\n  >>> toBase10(12, 34359738368)\n  \"10000000000000000000000000000000000000\"\n  >>> toBase10(12, 68719476736)\n  \"100000000000000000000000000000000000000\"\n  >>> toBase10(12, 137438953472)\n  \"1000000000000000000000000000000000000000\"\n  >>> toBase10(12, 274877906944)\n  \"10000000000000000000000000000000000000000\"\n  >>> toBase10(12, 549755813888)\n  \"100000000000000000000000000000000000000000\"\n  >>> toBase10(12, 1099511627776)\n  \"1000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 2199023255552)\n  \"10000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 4398046511104)\n  \"100000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 8796093022208)\n  \"1000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 17592186044416)\n  \"10000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 35184372088832)\n  \"100000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 70368744177664)\n  \"1000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 140737488355328)\n  \"10000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 281474976710656)\n  \"100000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 562949953421312)\n  \"1000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 1125899906842624)\n  \"10000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 2251799813685248)\n  \"100000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 4503599627370496)\n  \"1000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 9007199254740992)\n  \"10000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 18014398509481984)\n  \"100000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 36028797018963968)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 72057594037927936)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 144115188075855872)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 288230376151711744)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 576460752303423488)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 1152921504606846976)\n  \"100000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 2305843009213693952)\n  \"1000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 4611686018427387904)\n  \"10000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 9223372036854775808)\n  \"100000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 18446744073709551616)\n  \"1000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 37777777777777777777)\n  \"10000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 7555786372591432348)\n  \"100000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 14557407469457449920)\n  \"1000000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 2980232238769564544)\n  \"10000000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(12, 6189700196426901344)\n  \"100000000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 97 && char <= 122) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"a", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const [apples, oranges] = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter(node => node % 2 === 0);\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddValues = arr.filter(node => node % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddValues = arr.filter(node => node % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex2 = (arr) => {\n  const oddValues = arr.filter(node => node % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddsIndex2 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex3 = (arr) => {\n  const oddValues = arr.filter(node => node % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => Math.min(prev, curr));\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallest", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex > -1? maxIndex : -1;\n};\n\n/*\n  You are given a list of integers and a number k. Find out whether there is a subset of the list where\n  the sum of elements in the subset is divisible by k.\n  Examples:\n      subsets([1, 2, 3, 4], 2) -> true\n      subsets([1, 2, 3, 4], 3) -> false\n      subsets([1, 2, 3, 4], 0) -> false\n      subsets([1, 2, 3, 4], 5) -> false\n*/\nconst subsets = (lst, k) => {\n  const sum = (arr) => arr.reduce((acc, val) => acc + val, 0);\n  const isDivisible = (arr, k) => sum(arr) % k === 0;\n  const isSubset = (arr, k) => isDivisible(arr, k) && arr.length === k;\n  return lst.some(isSubset) && lst.every(isDivisible);\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string with all the\n  letters reversed.\n  Examples:\n      reverseWords('hello') -> 'olleh'\n      reverseWords('hello ') -> 'olleh '\n      reverseWords('')-> ''\n*/\nconst reverseWords = (str) => {\n  return str.split(' ').map((word) => word.split('').reverse().join('')).join(' ');\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string with all the\n  letters reversed, except for the first letter, which remains unchanged.\n  Examples:\n      reverseExceptFirstLetter('hello') -> 'olleh'\n      reverseExceptFirstLetter('hello ') -> 'olleh '\n      reverseExceptFirstLetter('') -> ''\n*/\nconst reverseExceptFirstLetter = (str) => {\n  return str.split(' ').map((word) => word.split('').reverse().join('')).join(' ');\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string with all the\n  letters reversed, except for the first and last letters, which remains unchanged.\n  Examples:\n      reverseExceptFirstAndLastLetter('hello') -> 'olleh'\n      reverseExceptFirstAndLastLetter('hello ') -> 'olleh '\n      reverseExceptFirstAndLastLetter('') -> ''\n*/\nconst reverseExceptFirstAndLastLetter = (str) => {\n  return str.split(' ').map((word) => word.split('').reverse().join('')).join(' ');\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string with all the\n  letters reversed, except for the first and last letters, which are replaced by the letter \"z\".\n  Examples:\n      reverseExceptFirstAndLastLetterWithZ('hello') -> 'olleh'\n      reverseExceptFirstAndLastLetterWithZ('hello ') -> 'olleh '\n      reverseExceptFirstAndLastLetterWithZ('') -> ''\n*/\nconst reverseExceptFirstAndLastLetterWithZ = (str) => {\n  return str.split(' ').map((word) => word.split('').reverse().join('')).join(' ');\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string with all the\n  letters reversed, except for the first and last letters, which are replaced by the letter \"z\".\n  Examples:\n      reverseExceptFirstAndLastLetterWithZ('hello') -> 'olleh'\n      reverseExceptFirstAndLastLetterWithZ('hello ') -> 'olleh '\n      reverseExceptFirstAndLastLetterWithZ('') -> ''\n*/\nconst reverseExceptFirstAndLastLetterWithZ = (str) => {\n  return str.split(' ').map((word) => word.split('').reverse().join('')).join(' ');\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string with all the\n  letters reversed, except for the first and last letters, which are replaced by the letter \"z\".\n  Examples:\n      reverseExceptFirstAndLastLetterWithZ('hello') -> 'olleh'\n      reverseExceptFirstAndLastLetterWithZ('hello ') -> 'olleh '\n      reverseExceptFirstAndLastLetterWithZ('') -> ''\n*/\nconst reverseExceptFirstAndLastLetterWithZ = (str) => {\n  return str.split(' ').map((word) => word.split('').reverse().join('')).join(' ');\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string with all the\n  letters reversed, except for the first and last letters, which are replaced by the letter \"z\".\n  Examples:\n      reverseExceptFirstAndLastLetterWithZ('hello') -> 'olleh'\n      reverseExceptFirstAndLastLetterWithZ('hello ') -> 'olleh '\n      reverseExceptFirstAndLastLetterWithZ('') -> ''\n*/\nconst reverseExceptFirstAndLastLetterWithZ = (str) => {\n  return str.split(' ').map((word) => word.split('').reverse().join('')).join(' ');\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string with all the\n  letters reversed, except for the first and last letters, which are replaced by the letter \"z\".\n  Examples:\n      reverseExceptFirstAndLastLetterWithZ('hello') -> 'olleh'\n      reverseExceptFirstAndLastLetterWithZ('hello ') -> 'olleh '\n      reverseExceptFirstAndLastLetterWithZ('') -> ''\n*/\nconst reverseExceptFirstAndLastLetterWithZ = (str) => {\n  return str.split(' ').map((word) => word.split('').reverse().join('')).join(' ');\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string with all the\n  letters reversed, except for the first and last letters, which are replaced by the letter \"z\".\n  Examples:\n      reverseExceptFirstAndLastLetterWithZ('hello') -> 'olleh'\n      reverseExceptFirstAndLastLetterWithZ('hello ') -> 'olleh '\n      reverseExceptFirstAndLastLetterWithZ('') -> ''\n*/\nconst reverseExceptFirstAndLastLetterWithZ = (str) => {\n  return str.split(' ').map((word) => word.split('').reverse().join('')).join(' ');\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns a string with all the\n  letters reversed, except for the first and last letters, which are replaced by the letter \"z\".\n  Examples:\n      reverseExceptFirstAndLastLetterWithZ('hello') -> 'olleh'\n      reverseExceptFirstAndLastLetterWithZ('hello ') -> 'olleh '\n      reverseExceptFirst", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"hello\") == \"hello\"\n  */\nconst reverse = (str) => {\n  return str\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n};\n\n/*\n  Given a string, return string with each character in reverse order.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"oehl\"\n  reverse(\"hello\") == \"ehllo\"\n  reverse(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 > 0? Math.round((side1 + side2 + side3) / 2) : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 > 0? Math.round((side1 + side2 + side3) / 2) : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 > 0? Math.round((side1 + side2 + side3) / 2) : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 > 0? Math.round((side1 + side2 + side3) / 2) : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 > 0? Math.round((side1 + side2 + side3) / 2) : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 > 0? Math.round((side1 + side2 + side3) / 2) : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 > 0? Math.round((side1 + side2 + side3) / 2) : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 > 0? Math.round((side1 + side2 + side3) / 2) : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d);\n  const side2 = Math.abs(a) + Math.abs(b) + Math.abs(c) - Math.abs(d);\n  const side3 = Math.abs(a) + Math.abs(b) - Math.abs(c) - Math.abs(d);\n  return side1 * side2 * side3 > 0? Math.round((side1 + side2 + side3) / 2) : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points if the sides form a valid triangle. Otherwise return -1\n  Two sides make a valid triangle when the sum of any two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d) + Math.abs(e);\n  const side2 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d) - Math.abs(e);\n  const side3 = Math.abs(a) + Math.abs(b) + Math.abs(c) - Math.abs(d) - Math.abs(e);\n  return side1 * side2 * side3 > 0? Math.round((side1 + side2 + side3) / 2) : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle rounded\n  to 2 decimal points ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.max(...q);\n  return q.length === 1 && maxSum === maxWeight;\n};\n\nconst isPalindromic = (arr) => {\n  return arr\n   .map((num) => num.toString())\n   .reverse()\n   .every((num) => num === num.toString().split(\"\").reverse().join(\"\"));\n};\n\nconst isBalanced = (arr) => {\n  const maxSum = Math.max(...arr);\n  return arr.every((num) => num === maxSum);\n};\n\nconst isPalindromicAndBalanced = (arr) => {\n  return isPalindromic(arr) && isBalanced(arr);\n};\n\nconst isPalindromicAndBalancedAndWillItFly = (arr) => {\n  return isPalindromicAndBalanced(arr) && willItFly(arr, 5);\n};\n\nconst isPalindromicAndBalancedAndWillItFlyAndIsIt = (arr) => {\n  return isPalindromicAndBalancedAndWillItFly(arr) && isItPalindromic(arr);\n};\n\nconst isItPalindromic = (arr) => {\n  return isPalindromic(arr) && arr.every((num) => num === num.toString().split(\"\").reverse().join(\"\"));\n};\n\nconst isItPalindromicAndWillItFly = (arr) => {\n  return isItPalindromic(arr) && willItFly(arr, 5);\n};\n\nconst isItPalindromicAndWillItFlyAndIsIt = (arr) => {\n  return isItPalindromicAndWillItFly(arr) && isItPalindromic(arr);\n};\n\nconst isItPalindromicAndBalanced = (arr) => {\n  return isItPalindromic(arr) && isBalanced(arr);\n};\n\nconst isItPalindromicAndBalancedAndWillItFly = (arr) => {\n  return isItPalindromicAndBalanced(arr) && willItFly(arr, 5);\n};\n\nconst isItPalindromicAndBalancedAndWillItFlyAndIsIt = (arr) => {\n  return isItPalindromicAndBalancedAndWillItFly(arr) && isItPalindromic(arr);\n};\n\nconst isItPalindromicAndBalancedAndIsIt = (arr) => {\n  return isItPalindromicAndBalanced(arr) && isItPalindromic(arr);\n};\n\nconst isItPalindromicAndBalancedAndIsItAndWillItFly = (arr) => {\n  return isItPalindromicAndBalancedAndIsIt(arr) && willItFly(arr, 5);\n};\n\nconst isItPalindromicAndBalancedAndIsItAndWillItFlyAndIsIt = (arr) => {\n  return isItPalindromicAndBalancedAndIsIt(arr) && willItFly(arr, 5) && isItPalindromic(arr);\n};\n\nconst isItPalindromicAndBalancedAndIsItAndWillItFlyAndIsItAndIsIt = (arr) => {\n  return isItPalindromicAndBalancedAndIsIt(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr);\n};\n\nconst isItPalindromicAndBalancedAndIsItAndWillItFlyAndIsItAndIsItAndWillItFly = (arr) => {\n  return isItPalindromicAndBalancedAndIsIt(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr) && willItFly(arr, 5);\n};\n\nconst isItPalindromicAndBalancedAndIsItAndWillItFlyAndIsItAndIsItAndWillItFlyAndIsIt = (arr) => {\n  return isItPalindromicAndBalancedAndIsIt(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr);\n};\n\nconst isItPalindromicAndBalancedAndIsItAndWillItFlyAndIsItAndIsItAndWillItFlyAndIsItAndIsIt = (arr) => {\n  return isItPalindromicAndBalancedAndIsIt(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr) && isItPalindromic(arr);\n};\n\nconst isItPalindromicAndBalancedAndIsItAndWillItFlyAndIsItAndIsItAndWillItFlyAndIsItAndIsItAndWillItFly = (arr) => {\n  return isItPalindromicAndBalancedAndIsIt(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr) && isItPalindromic(arr) && willItFly(arr, 5);\n};\n\nconst isItPalindromicAndBalancedAndIsItAndWillItFlyAndIsItAndIsItAndWillItFlyAndIsItAndIsItAndWillItFlyAndIsIt = (arr) => {\n  return isItPalindromicAndBalancedAndIsIt(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr) && isItPalindromic(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr);\n};\n\nconst isItPalindromicAndBalancedAndIsItAndWillItFlyAndIsItAndIsItAndWillItFlyAndIsItAndIsItAndWillItFlyAndIsItAndIsIt = (arr) => {\n  return isItPalindromicAndBalancedAndIsIt(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItPalindromic(arr) && willItFly(arr, 5) && isItPalindromic(arr) && isItP", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backward", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  const sorted1 = sortList(lst1);\n  const sorted2 = sortList(lst2);\n  const result = sorted1.filter(x => sorted2.indexOf(x) < 0);\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMismatch([], []) ➞ []\n  ottalMismatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMismatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMismatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMismatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMismatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  const sorted1 = sortList(lst1);\n  const sorted2 = sortList(lst2);\n  const result = sorted1.filter(x => sorted2.indexOf(x) > -1);\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalIdentical([], []) ➞ []\n  ottalIdentical(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalIdentical(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalIdentical(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalIdentical(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalIdentical = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  const sorted1 = sortList(lst1);\n  const sorted2 = sortList(lst2);\n  const result = sorted1.filter(x => sorted2.indexOf(x) === 0);\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalDifferent([], []) ➞ []\n  ottalDifferent(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalDifferent(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalDifferent(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalDifferent(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalDifference = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  const sorted1 = sortList(lst1);\n  const sorted2 = sortList(lst2);\n  const result = sorted1.filter(x => sorted2.indexOf(x) > -1);\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list that starts with the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalStartsWith([], []) ➞ []\n  ottalStartsWith(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalStartsWith(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalStartsWith(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalStartsWith(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalStartsWith = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  const sorted1 = sortList(lst1);\n  const sorted2 = sortList(lst2);\n  const result = sorted1.filter(x => sorted2.indexOf(x) > -1 && x.startsWith(sorted2));\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list that ends with the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalEndsWith([], []) ➞ []\n  ottalEndsWith(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalEndsWith(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalEndsWith(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalEndsWith(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalEndsWith = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  const sorted1 = sortList(lst1);\n  const sorted2 = sortList(lst2);\n  const result = sorted1.filter(x => sorted2.indexOf(x) > -1 && x.endsWith(sorted2));\n  return result;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list that contains the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalContains([], []) ➞ []\n  ottalContains(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalContains(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalContains(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalContains(['4'], ['1', '2', '3', '4', '5']) ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  const isMultiplicationOfThreePrimes = (a) => {\n    if (a < 100) {\n      return false\n    }\n    const isMultiplicationOfThreePrimesHelper = (num) => {\n      if (num === 1) {\n        return true\n      }\n      if (num % 2 === 0) {\n        return false\n      }\n      if (num % 3 === 0) {\n        return false\n      }\n      if (num % 5 === 0) {\n        return false\n      }\n      if (num % 7 === 0) {\n        return false\n      }\n      if (num % 11 === 0) {\n        return false\n      }\n      if (num % 13 === 0) {\n        return false\n      }\n      if (num % 17 === 0) {\n        return false\n      }\n      if (num % 19 === 0) {\n        return false\n      }\n      if (num % 23 === 0) {\n        return false\n      }\n      if (num % 29 === 0) {\n        return false\n      }\n      if (num % 31 === 0) {\n        return false\n      }\n      if (num % 37 === 0) {\n        return false\n      }\n      if (num % 41 === 0) {\n        return false\n      }\n      if (num % 43 === 0) {\n        return false\n      }\n      if (num % 47 === 0) {\n        return false\n      }\n      if (num % 51 === 0) {\n        return false\n      }\n      if (num % 53 === 0) {\n        return false\n      }\n      if (num % 59 === 0) {\n        return false\n      }\n      if (num % 61 === 0) {\n        return false\n      }\n      if (num % 67 === 0) {\n        return false\n      }\n      if (num % 71 === 0) {\n        return false\n      }\n      if (num % 73 === 0) {\n        return false\n      }\n      if (num % 79 === 0) {\n        return false\n      }\n      if (num % 83 === 0) {\n        return false\n      }\n      if (num % 89 === 0) {\n        return false\n      }\n      if (num % 97 === 0) {\n        return false\n      }\n      if (num % 101 === 0) {\n        return false\n      }\n      if (num % 103 === 0) {\n        return false\n      }\n      if (num % 105 === 0) {\n        return false\n      }\n      if (num % 107 === 0) {\n        return false\n      }\n      if (num % 109 === 0) {\n        return false\n      }\n      if (num % 111 === 0) {\n        return false\n      }\n      if (num % 113 === 0) {\n        return false\n      }\n      if (num % 115 === 0) {\n        return false\n      }\n      if (num % 117 === 0) {\n        return false\n      }\n      if (num % 119 === 0) {\n        return false\n      }\n      if (num % 121 === 0) {\n        return false\n      }\n      if (num % 123 === 0) {\n        return false\n      }\n      if (num % 125 === 0) {\n        return false\n      }\n      if (num % 127 === 0) {\n        return false\n      }\n      if (num % 131 === 0) {\n        return false\n      }\n      if (num % 133 === 0) {\n        return false\n      }\n      if (num % 135 === 0) {\n        return false\n      }\n      if (num % 137 === 0) {\n        return false\n      }\n      if (num % 139 === 0) {\n        return false\n      }\n      if (num % 141 === 0) {\n        return false\n      }\n      if (num % 143 === 0) {\n        return false\n      }\n      if (num % 145 === 0) {\n        return false\n      }\n      if (num % 147 === 0) {\n        return false\n      }\n      if (num % 149 === 0) {\n        return false\n      }\n      if (num % 151 === 0) {\n        return false\n      }\n      if (num % 153 === 0) {\n        return false\n      }\n      if (num % 155 === 0) {\n        return false\n      }\n      if (num % 157 === 0) {\n        return false\n      }\n      if (num % 159 === 0) {\n        return false\n      }\n      if (num % 161 === 0) {\n        return false\n      }\n      if (num % 163 === 0) {\n        return false\n      }\n      if (num % 165 === 0) {\n        return false\n      }\n      if (num % 167 === 0) {\n        return false\n      }\n      if (num % 169 === 0) {\n        return false\n      }\n      if (num % 171 === 0) {\n        return false\n      }\n      if (num % 173 === 0) {\n        return false\n      }\n      if (num % 175 === 0) {\n        return false\n      }\n      if (num % 177 === 0) {\n        return false\n      }\n      if (num % 179 === 0) {\n        return false\n      }\n      if (num % 181 === 0) {\n        return false\n      }\n      if (num % 183 === 0) {\n        return false\n      }\n      if (num % 185 === 0) {\n        return false\n      }\n      if (num % 187 === 0) {\n        return false\n      }\n      if (num % 189 === 0) {\n        return false\n      }\n      if (num % 191 === 0) {\n        return false\n      }\n      if (num % 193 === 0) {\n        return false\n      }\n      if (num % 195 === 0) {\n        return false\n      }\n      if (num % 197 === 0) {\n        return false\n      }\n      if (num % 199 === 0) {\n        return false\n      }\n      if (num % 201 === 0) {\n        return false\n      }\n      if (num % 203 === 0) {\n        return false\n      }\n      if (num % 205 === 0) {\n        return false\n      }\n      if (num % 207 === 0) {\n        return false\n      }\n      if (num % 209 === 0) {\n        return false\n      }\n      if (num % 211 === 0) {\n        return false\n      }\n      if (num % 213 === 0) {\n        return false\n      }\n      if (num % 215 === 0) {\n        return false\n      }\n      if (num % 217 === 0) {\n        return false\n      }\n      if (num % 219 === 0) {\n        return false\n      }\n      if (num % 221 === 0) {\n        return false\n      }\n      if (num % 223 === 0) {\n        return false\n      }\n      if (num % 225 === 0) {\n        return false\n      }\n      if (num % 227 === 0) {\n        return false\n      }\n      if (num % 229 === 0) {\n        return false\n      }\n      if (num % 231 === 0) {\n        return false\n      }\n      if (num % 233 === 0) {\n        return false\n      }\n      if (num % 235 === 0) {\n        return false\n      }\n      if (num % 237 === 0) {\n        return false\n      }\n      if (num % 239 === 0) {\n        return false\n      }\n      if (num % 241 === 0) {\n        return false\n      }\n      if (num % 243 === 0) {\n        return false\n      }\n      if (num % 245 === 0) {\n        return false\n      }\n      if (num % 247 === 0) {\n        return false\n      }\n      if (num % 249 === 0) {\n        return false\n      }\n      if (num % 251 === 0) {\n        return false\n      }\n      if (num % 253 === 0) {\n        return false\n      }\n      if (num % 255 === 0) {\n        return false\n      }\n      return true\n    }\n    return isMultiplicationOfThreePrimesHelper(a)\n  }\n  return isMultiplicationOfThreePrimesHelper(a)\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme2 = (a) => {\n  const isMultiplicationOfThreePrimesHelper2 = (num) => {\n    if (num === 1) {\n      return true\n    }\n    if (num % 2 === 0) {\n      return false\n    }\n    if (num % 3 === 0) {\n      return false\n    }\n    if (num % 5 === 0) {\n      return false\n    }\n    if (num % 7 === 0) {\n      return false\n    }\n    if (num % 11 === 0) {\n      return false\n    }\n    if (num % 13 === 0) {\n      return false\n    }\n    if (num % 17 === 0) {\n      return false\n    }\n    if (num % 19 === 0) {\n      return false\n    }\n    if (num % 23 === 0) {\n      return false\n    }\n    if (num % 29 === 0) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePwoer(x, n / 2);\n  return isSimplePwoer(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (a === ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArray = hexNum.split('');\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayCopy = hexNumArray.slice(0);\n  let hexNumArrayCopyLength = hexNumArrayCopy.length;\n  let hexNumArrayCopyCopy = hexNumArrayCopy.slice(0);\n  let hexNumArrayCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopy = hexNumArrayCopyCopy.slice(0);\n  let hexNumArrayCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopyCopyCopyLength = hexNumArrayCopyCopy.length;\n  let hexNumArrayCopy", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinaryHelper = (decimal) => {\n    if (decimal === 0) {\n      return binary;\n    }\n    decimalToBinaryHelper(decimal / 2);\n    binary += decimal % 2 === 0? '1' : '0';\n  };\n  decimalToBinaryHelper(decimal);\n  return 'db' + binary + 'db';\n};\n\n/*\n  Write a function that takes a string and returns the string in reverse order.\n  Examples:\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olleH'\n  reverseWords('Hello World!') // returns '!dlroW olle", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const sum = numbers.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  const product = numbers.reduce((acc, curr) => {\n    return acc * curr;\n  }, 1);\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([-1, 0, 1])\n  (-1, 0)\n  >>> sumProduct([-1, 0, 1], 1)\n  (-1, 1)\n  >>> sumProduct([-1, 0, 1], 2)\n  (-1, 2)\n  >>> sumProduct([-1, 0, 1], 3)\n  (-1, 3)\n  >>> sumProduct([-1, 0, 1], 4)\n  (-1, 4)\n  >>> sumProduct([-1, 0, 1], 5)\n  (-1, 5)\n  >>> sumProduct([-1, 0, 1], 6)\n  (-1, 6)\n  >>> sumProduct([-1, 0, 1], 7)\n  (-1, 7)\n  >>> sumProduct([-1, 0, 1], 8)\n  (-1, 8)\n  >>> sumProduct([-1, 0, 1], 9)\n  (-1, 9)\n  >>> sumProduct([-1, 0, 1], 10)\n  (-1, 10)\n  >>> sumProduct([-1, 0, 1], 11)\n  (-1, 11)\n  >>> sumProduct([-1, 0, 1], 12)\n  (-1, 12)\n  >>> sumProduct([-1, 0, 1], 13)\n  (-1, 13)\n  >>> sumProduct([-1, 0, 1], 14)\n  (-1, 14)\n  >>> sumProduct([-1, 0, 1], 15)\n  (-1, 15)\n  >>> sumProduct([-1, 0, 1], 16)\n  (-1, 16)\n  >>> sumProduct([-1, 0, 1], 17)\n  (-1, 17)\n  >>> sumProduct([-1, 0, 1], 18)\n  (-1, 18)\n  >>> sumProduct([-1, 0, 1], 19)\n  (-1, 19)\n  >>> sumProduct([-1, 0, 1], 20)\n  (-1, 20)\n  >>> sumProduct([-1, 0, 1], 21)\n  (-1, 21)\n  >>> sumProduct([-1, 0, 1], 22)\n  (-1, 22)\n  >>> sumProduct([-1, 0, 1], 23)\n  (-1, 23)\n  >>> sumProduct([-1, 0, 1], 24)\n  (-1, 24)\n  >>> sumProduct([-1, 0, 1], 25)\n  (-1, 25)\n  >>> sumProduct([-1, 0, 1], 26)\n  (-1, 26)\n  >>> sumProduct([-1, 0, 1], 27)\n  (-1, 27)\n  >>> sumProduct([-1, 0, 1], 28)\n  (-1, 28)\n  >>> sumProduct([-1, 0, 1], 29)\n  (-1, 29)\n  >>> sumProduct([-1, 0, 1], 30)\n  (-1, 30)\n  >>> sumProduct([-1, 0, 1], 31)\n  (-1, 31)\n  >>> sumProduct([-1, 0, 1], 32)\n  (-1, 32)\n  >>> sumProduct([-1, 0, 1], 33)\n  (-1, 33)\n  >>> sumProduct([-1, 0, 1], 34)\n  (-1, 34)\n  >>> sumProduct([-1, 0, 1], 35)\n  (-1, 35)\n  >>> sumProduct([-1, 0, 1], 36)\n  (-1, 36)\n  >>> sumProduct([-1, 0, 1], 37)\n  (-1, 37)\n  >>> sumProduct([-1, 0, 1], 38)\n  (-1, 38)\n  >>> sumProduct([-1, 0, 1], 39)\n  (-1, 39)\n  >>> sumProduct([-1, 0, 1], 40)\n  (-1, 40)\n  >>> sumProduct([-1, 0, 1], 41)\n  (-1, 41)\n  >>> sumProduct([-1, 0, 1], 42)\n  (-1, 42)\n  >>> sumProduct([-1, 0, 1], 43)\n  (-1, 43)\n  >>> sumProduct([-1, 0, 1], 44)\n  (-1, 44)\n  >>> sumProduct([-1, 0, 1], 45)\n  (-1, 45)\n  >>> sumProduct([-1, 0, 1], 46)\n  (-1, 46)\n  >>> sumProduct([-1, 0, 1], 47)\n  (-1, 47)\n  >>> sumProduct([-1, 0, 1], 48)\n  (-1, 48)\n  >>> sumProduct([-1, 0, 1], 49)\n  (-1, 49)\n  >>> sumProduct([-1, 0, 1], 50)\n  (-1, 50)\n  >>> sumProduct([-1, 0, 1], 51)\n  (-1, 51)\n  >>> sumProduct([-1, 0, 1], 52)\n  (-1, 52)\n  >>> sumProduct([-1, 0, 1], 53)\n  (-1, 53)\n  >>> sumProduct([-1, 0, 1], 54)\n  (-1, 54)\n  >>> sumProduct([-1, 0, 1], 55)\n  (-1, 55)\n  >>> sumProduct([-1, 0, 1], 56)\n  (-1, 56)\n  >>> sumProduct([-1, 0, 1], 57)\n  (-1, 57)\n  >>> sumProduct([-1, 0, 1], 58)\n  (-1, 58)\n  >>> sumProduct([-1, 0, 1], 59)\n  (-1, 59)\n  >>> sumProduct([-1, 0, 1], 60)\n  (-1, 60)\n  >>> sumProduct([-1, 0, 1], 61)\n  (-1, 61)\n  >>> sumProduct([-1, 0, 1], 62)\n  (-1, 62)\n  >>> sumProduct([-1, 0, 1], 63)\n  (-1, 63)\n  >>> sumProduct([-1, 0, 1], 64)\n  (-1, 64)\n  >>> sumProduct([-1, 0, 1], 65)\n  (-1, 65)\n  >>> sumProduct([-1, 0, 1], 66)\n  (-1, 66)\n  >>> sumProduct([-1, 0, 1], 67)\n  (-1, 67)\n  >>> sumProduct([-1, 0, 1], 68)\n  (-1, 68)\n  >>> sumProduct([-1, 0, 1], 69)\n  (-1, 69)\n  >>> sumProduct([-1, 0, 1], 70)\n  (-1, 70)\n  >>> sumProduct([-1, 0, 1], 71)\n  (-1, 71)\n  >>> sumProduct([-1, 0, 1], 72)\n  (-1, 72)\n  >>> sumProduct([-1, 0, 1], 73)\n  (-1, 73)\n  >>> sumProduct([-1, 0, 1], 74)\n  (-1, 74)\n  >>> sumProduct([-1, 0, 1], 75)\n  (-1, 75)\n  >>> sumProduct([-1, 0, 1], 76)\n  (-1, 76)\n  >>> sumProduct([-1, 0, 1], 77)\n  (-1, 77)\n  >>> sumProduct([-1, 0, 1], 78)\n  (-1, 78)\n  >>> sumProduct([-1, 0, 1], 79)\n  (-1, 79)\n  >>> sumProduct([-1, 0, 1], 80)\n  (-1, 80)\n  >>> sumProduct([-1, 0, 1], 81)\n  (-1, 81)\n  >>> sumProduct([-1, 0, 1], 82)\n  (-1, 82)\n  >>> sumProduct([-1, 0, 1], 83)\n  (-1, 83)\n  >>> sumProduct([-1, 0, 1], 84)\n  (-1, 84)\n  >>> sumProduct([-1, 0, 1], 85)\n  (-1, 85)\n  >>> sumProduct([-1, 0, 1], 86)\n  (-1, 86)\n  >>> sumProduct([-1, 0, 1], 87)\n  (-1, 87)\n  >>> sumProduct([-1, 0, 1], 88)\n  (-1, 88)\n  >>> sumProduct([-1, 0, 1], 89)\n  (-1, 89)\n  >>> sumProduct([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n  }\n  return true\n}\n\n/*You are given a string s.\n  Your task is to check if it is a palindrome or not.\n  A string is a palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(b) => true\n  isPalindrome(bb) => true\n  isPalindrome(aba) => true\n  isPalindrome(abba) => true\n  isPalindrome(abbba) => false\n  isPalindrome(abbbc) => false\n  isPalindrome(abbbcbc) => false\n  isPalindrome(abbbcbcbb) => false\n  isPalindrome(abbbcbcbbab) => false\n  isPalindrome(abbbcbcbbaba) => false\n  isPalindrome(abbbcbcbbabaa) => false\n  isPalindrome(abbbcbcbbabaaa) => false\n  isPalindrome(abbbcbcbbabaaab) => false\n  isPalindrome(abbbcbcbbabaaabb) => false\n  isPalindrome(abbbcbcbbabaaabbb) => false\n  isPalindrome(abbbcbcbbabaaabbbc) => false\n  isPalindrome(abbbcbcbbabaaabbbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbc) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbc) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbc) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbc) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbc) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb) => false\n  isPalindrome(abbbcbcbbabaaabbbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade > 3.7? 'A+' : grade > 3.3? 'A-' : grade > 3? 'B+' : grade > 2.7? 'B' : grade > 2.3? 'B-' : grade > 2? 'C+' : grade > 1.7? 'C' : grade > 1.3? 'C-' : grade > 1? 'D+' : grade > 0.7? 'D' : grade > 0? 'D-' : 'E');\n  return gradesArray;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade > 3.7? 'A+' : grade > 3.3? 'A-' : grade > 3? 'B+' : grade > 2.7? 'B' : grade > 2.3? 'B-' : grade > 2? 'C+' : grade > 1.7? 'C' : grade > 1.3? 'C-' : grade > 1? 'D+' : grade > 0.7? 'D' : grade > 0? 'D-' : 'E');\n  return gradesArray;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade > 3.7? 'A+' : grade > 3.3? 'A-' : grade > 3? 'B+' : grade > 2.7? 'B' : grade > 2.3? 'B-' : grade > 2? 'C+' : grade > 1.7? 'C' : grade > 1.3? 'C-' : grade > 1? 'D+' : grade > 0.7? 'D' : grade > 0? 'D-' : 'E');\n  return gradesArray;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade > 3.7? 'A+' : grade > 3.3? 'A-' : grade > 3? 'B+' : grade > 2.7? 'B' : grade > 2.3? 'B-' : grade > 2? 'C+' : grade > 1.7? 'C' : grade > 1.3? 'C-' : grade > 1? 'D+' : grade > 0.7? 'D' : grade > 0? 'D-' : 'E');\n  return gradesArray;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade > 3.7? 'A+' : grade > 3.3? 'A-' : grade > 3? 'B+' : grade > 2.7? 'B' : grade > 2.3? 'B-' : grade > 2? 'C+' : grade > 1.7? 'C' : grade > 1.3? 'C-' : grade > 1? 'D+' : grade > 0.7? 'D' : grade > 0? 'D-' : 'E');\n  return gradesArray;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters and false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only numbers and false otherwise\n  Examples\n  numbers('Hello') == true\n  numbers('abcdcba') == true\n  numbers('kittens') == false\n  numbers('orange') == false\n  */\nconst numbers = (string) => {\n  let numbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      numbers = false;\n      break;\n    }\n  }\n  return numbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters and false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == true\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let uppercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      uppercase = false;\n      break;\n    }\n  }\n  return uppercase;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters and false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('abcdcba') == true\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  let lowercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      lowercase = false;\n      break;\n    }\n  }\n  return lowercase;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only symbols and false otherwise\n  Examples\n  symbols('Hello') == true\n  symbols('abcdcba') == true\n  symbols('kittens') == false\n  symbols('orange') == false\n  */\nconst symbols = (string) => {\n  let symbols = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      symbols = false;\n      break;\n    }\n  }\n  return symbols;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only punctuation and false otherwise\n  Examples\n  punctuation('Hello') == true\n  punctuation('abcdcba') == true\n  punctuation('kittens') == false\n  punctuation('orange') == false\n  */\nconst punctuation = (string) => {\n  let punctuation = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      punctuation = false;\n      break;\n    }\n  }\n  return punctuation;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only spaces and false otherwise\n  Examples\n  spaces('Hello') == true\n  spaces('abcdcba') == true\n  spaces('kittens') == false\n  spaces('orange') == false\n  */\nconst spaces = (string) => {\n  let spaces = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      spaces = false;\n      break;\n    }\n  }\n  return spaces;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only special characters and false otherwise\n  Examples\n  specialChars('Hello') == true\n  specialChars('abcdcba') == true\n  specialChars('kittens') == false\n  specialChars('orange') == false\n  */\nconst specialChars = (string) => {\n  let special = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      special = false;\n      break;\n    }\n  }\n  return special;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only alphanumeric and false otherwise\n  Examples\n  alphanumeric('Hello') == true\n  alphanumeric('abcdcba') == true\n  alphanumeric('kittens') == false\n  alphanumeric('orange') == false\n  */\nconst alphanumeric = (string) => {\n  let alphanumeric = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      alphanumeric = false;\n      break;\n    }\n  }\n  return alphanumeric;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only numbers and letters and false otherwise\n  Examples\n  alphanumericAndNumbers('Hello') == true\n  alphanumericAndNumbers('abcdcba') == true\n  alphanumericAndNumbers('kittens') == false\n  alphanumericAndNumbers('orange') == false\n  */\nconst alphanumericAndNumbers = (string) => {\n  let alphanumericAndNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      alphanumericAndNumbers = false;\n      break;\n    }\n  }\n  return alphanumericAndNumbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters and numbers and false otherwise\n  Examples\n  uppercaseLettersAndNumbers('Hello') == true\n  uppercaseLettersAndNumbers('abcdcba') == true\n  uppercaseLettersAndNumbers('kittens') == false\n  uppercaseLettersAndNumbers('orange') == false\n  */\nconst uppercaseLettersAndNumbers = (string) => {\n  let uppercaseLettersAndNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      uppercaseLettersAndNumbers = false;\n      break;\n    }\n  }\n  return uppercaseLettersAndNumbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters and numbers and false otherwise\n  Examples\n  lowercaseLettersAndNumbers('Hello') == true\n  lowercaseLettersAndNumbers('abcdcba') == true\n  lowercaseLettersAndNumbers('kittens') == false\n  lowercaseLettersAndNumbers('orange') == false\n  */\nconst lowercaseLettersAndNumbers = (string) => {\n  let lowercaseLettersAndNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      lowercaseLettersAndNumbers = false;\n      break;\n    }\n  }\n  return lowercaseLettersAndNumbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only symbols and numbers and false otherwise\n  Examples\n  symbolsNumbers('Hello') == true\n  symbolsNumbers('abcdcba') == true\n  symbolsNumbers('kittens') == false\n  symbolsNumbers('orange') == false\n  */\nconst symbolsNumbers = (string) => {\n  let symbolsNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      symbolsNumbers = false;\n      break;\n    }\n  }\n  return symbolsNumbers;\n};\n\n/*Write a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6\n  */\nconst addOdd = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4]\n  */\nconst remove = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [6, 7]\n  */\nconst removeOdd = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non-empty list of integers lst. sort the elements of the list using selection sort..\n\n\n  Examples:\n      selectionSort([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst selectionSort = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    let min = i;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j] < lst[min]) {\n        min = j;\n      }\n    }\n    if (min!== i) {\n      let temp = lst[i];\n      lst[i] = lst[min];\n      lst[min] = temp;\n    }\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. sort the elements of the list using insertion sort..\n\n\n  Examples:\n      insertionSort([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst insertionSort = (lst) => {\n  for (let i = 1; i < lst.length; i++) {\n    let temp = lst[i];\n    let j = i - 1;\n    while (j >= 0 && lst[j] > temp) {\n      lst[j + 1] = lst[j];\n      j--;\n    }\n    lst[j + 1] = temp;\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. sort the elements of the list using merge sort..\n\n\n  Examples:\n      mergeSort([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst mergeSort = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  let mid = Math.floor(lst.length / 2);\n  let left = lst\n   .slice(0, mid)\n   .sort((a, b) => a - b);\n  let right = lst\n   .slice(mid)\n   .sort((a, b) => b - a);\n  return merge(mergeSort(left), mergeSort(right));\n};\n\n/*Given a non-empty list of integers lst. sort the elements of the list using quick sort..\n\n\n  Examples:\n      quickSort([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst quickSort = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  let mid = Math.floor(lst.length / 2);\n  let left = lst\n   .slice(0, mid)\n   .sort((a, b) => a - b);\n  let right = lst\n   .slice(mid)\n   .sort((a, b) => b - a);\n  return quickSort(left).concat(quickSort(right));\n};\n\n/*Given a non-empty list of integers lst. sort the elements of the list using merge sort recursively..\n\n\n  Examples:\n      mergeSortRecur([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst mergeSortRecur = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  let mid = Math.floor(lst.length / 2);\n  let left = lst\n   .slice(0, mid)\n   .sort((a, b) => a - b);\n  let right = lst\n   .slice(mid)\n   .sort((a, b) => b - a);\n  return mergeSortRecur(left).concat(mergeSortRecur(right));\n};\n\n/*Given a non-empty list of integers lst. sort the elements of the list using quick sort recursively..\n\n\n  Examples:\n      quickSortRecur([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst quickSortRecur = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  let mid = Math.floor(lst.length / 2);\n  let left = lst\n   .slice(0, mid)\n   .sort((a, b) => a - b);\n  let right = lst\n   .slice(mid)\n   .sort((a, b) => b - a);\n  return quickSortRecur(left).concat(quickSortRecur(right));\n};\n\n/*Given a non-empty list of integers lst. sort the elements of the list using merge sort iteratively..\n\n\n  Examples:\n      mergeSortIter([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst mergeSortIter = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  let mid = Math.floor(lst.length / 2);\n  let left = lst\n   .slice(0, mid)\n   .sort((a, b) => a - b);\n  let right = lst\n   .slice(mid)\n   .sort((a, b) => b - a);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < left.length && j < right.length) {\n    if (left[i] < right[j]) {\n      lst[k] = left[i];\n      i++;\n    } else {\n      lst[k] = right[j];\n      j++;\n    }\n    k++;\n  }\n  while (i < left.length) {\n    lst[k] = left[i];\n    i++;\n    k++;\n  }\n  while (j < right.length) {\n    lst[k] = right[j];\n    j++;\n    k++;\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. sort the elements of the list using quick sort iteratively..\n\n\n  Examples:\n      quickSortIter([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst quickSortIter = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  let mid = Math.floor(lst.length / 2);\n  let left = lst\n   .slice(0, mid)\n   .sort((a, b) => a - b);\n  let right = lst\n   .slice(mid)\n   .sort((a, b) => b - a);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < left.length && j < right.length) {\n    if (left[i] < right[j]) {\n      lst[k] = left[i];\n      i++;\n    } else {\n      lst[k] = right[j];\n      j++;\n    }\n    k++;\n  }\n  while (i < left.length) {\n    lst[k] = left[i];\n    i++;\n    k++;\n  }\n  while (j < right.length) {\n    lst[k] = right[j];\n    j++;\n    k++;\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. sort the elements of the list using merge sort iteratively and return the sorted list.\n\n\n  Examples:\n      mergeSortIterAndSort([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst mergeSortIterAndSort = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  let mid = Math.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = newString.indexOf(char);\n    if (index === -1) {\n      newString += char;\n    } else {\n      const nextChar = s[index + 1];\n      if (nextChar ==='') {\n        newString += char;\n      } else {\n        newString += char + nextChar;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'olleh'\n  antSihuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antSihuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = newString.indexOf(char);\n    if (index === -1) {\n      newString += char;\n    } else {\n      const nextChar = s[index + 1];\n      if (nextChar ==='') {\n        newString += char;\n      } else {\n        newString += char + nextChar;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antSihuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = newString.indexOf(char);\n    if (index === -1) {\n      newString += char;\n    } else {\n      const nextChar = s[index + 1];\n      if (nextChar ==='') {\n        newString += char;\n      } else {\n        newString += char + nextChar;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antSihuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = newString.indexOf(char);\n    if (index === -1) {\n      newString += char;\n    } else {\n      const nextChar = s[index + 1];\n      if (nextChar ==='') {\n        newString += char;\n      } else {\n        newString += char + nextChar;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antSihuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = newString.indexOf(char);\n    if (index === -1) {\n      newString += char;\n    } else {\n      const nextChar = s[index + 1];\n      if (nextChar ==='') {\n        newString += char;\n      } else {\n        newString += char + nextChar;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antSihuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = newString.indexOf(char);\n    if (index === -1) {\n      newString += char;\n    } else {\n      const nextChar = s[index + 1];\n      if (nextChar ==='') {\n        newString += char;\n      } else {\n        newString += char + nextChar;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antSihuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const index = newString.indexOf(char);\n    if (index === -1) {\n      newString += char;\n    } else {\n      const nextChar = s[index + 1];\n      if (nextChar ==='') {\n        newString += char;\n      } else {\n        newString += char + nextChar;\n      }\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  while (row < lst.length) {\n    if (lst[row].indexOf(x)!== -1) {\n      result.push([row, col]);\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (4, 3), (4, 4), (5, 5)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getCol = (lst, x) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  while (col < lst[0].length) {\n    if (lst[row].indexOf(x)!== -1) {\n      result.push([row, col]);\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 5, 6],\n    [2, 6, 4],\n    [3, 4, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [1, 3],\n    [2, 2],\n    [3, 1]\n  ]\n  */\nconst transpose = (lst) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  while (row < lst.length) {\n    if (lst[row].length > col) {\n      result.push([]);\n    }\n    while (col < lst[row].length) {\n      result[row].push(lst[row][col]);\n      col++;\n    }\n    row++;\n    col = 0;\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 5, 6],\n    [2, 6, 4],\n    [3, 4, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [1, 3],\n    [2, 2],\n    [3, 1]\n  ]\n  */\nconst transpose = (lst) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  while (row < lst.length) {\n    if (lst[row].length > col) {\n      result.push([]);\n    }\n    while (col < lst[row].length) {\n      result[row].push(lst[row][col]);\n      col++;\n    }\n    row++;\n    col = 0;\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 5, 6],\n    [2, 6, 4],\n    [3, 4, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [1, 3],\n    [2, 2],\n    [3, 1]\n  ]\n  */\nconst transpose = (lst) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  while (row < lst.length) {\n    if (lst[row].length > col) {\n      result.push([]);\n    }\n    while (col < lst[row].length) {\n      result[row].push(lst[row][col]);\n      col++;\n    }\n    row++;\n    col = 0;\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  transpose([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [\n    [1, 5, 6],\n    [2, 6, 4],\n    [3, 4, 1]\n  ]\n  transpose([]) == []\n  transpose([[], [1], [1, 2, 3]], 3) == [\n    [1, 3],\n    [2, 2],\n    [3, 1]\n  ]\n  */\nconst transpose = (lst) => {\n  const result = [];\n  let row = 0;\n  let col = 0;\n  while (row < lst.length) {\n    if (lst[row].length > col) {\n      result.push([]);\n    }\n    while (col < lst[row].", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  const sum = (first, last) => {\n    const sum = first + last;\n    return sum > 0? sum : sum * -1;\n  };\n  const isOdd = (first, last) => {\n    const sum = sum(first, last);\n    return sum % 2 === 1;\n  };\n  const isEven = (first, last) => {\n    const sum = sum(first, last);\n    return sum % 2 === 0;\n  };\n  const isFirst = (first, last) => {\n    return first < last;\n  };\n  const isLast = (first, last) => {\n    return first > last;\n  };\n  const isMiddle = (first, last) => {\n    return first > last && first < array.length - 1;\n  };\n  const isFirstMiddle = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddle = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last);\n  };\n  const isFirstLast = (first, last) => {\n    return isFirst(first, last) && isLast(first, last);\n  };\n  const isFirstMiddleLast = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isLast(first, last);\n  };\n  const isLastMiddleFirst = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last);\n  };\n  const isFirstLastMiddle = (first, last) => {\n    return isFirst(first, last) && isLast(first, last) && isMiddle(first, last);\n  };\n  const isFirstMiddleMiddle = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddleFirstMiddle = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last);\n  };\n  const isFirstMiddleMiddleLast = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isLast(first, last);\n  };\n  const isLastMiddleFirstMiddleLast = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last) && isLast(first, last);\n  };\n  const isFirstMiddleMiddleMiddleFirst = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddleFirstMiddleMiddleFirst = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last) && isFirst(first, last);\n  };\n  const isFirstMiddleMiddleMiddleLast = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isLast(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddleFirstMiddleMiddleLast = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last) && isLast(first, last) && isMiddle(first, last);\n  };\n  const isFirstMiddleMiddleMiddleMiddle = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddleFirstMiddleMiddleMiddle = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last);\n  };\n  const isFirstMiddleMiddleMiddleFirst = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddleFirstMiddleMiddleFirst = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isFirst(first, last);\n  };\n  const isFirstMiddleMiddleMiddleLast = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last) && isLast(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddleFirstMiddleMiddleLast = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isLast(first, last) && isMiddle(first, last);\n  };\n  const isFirstMiddleMiddleMiddle = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddleFirstMiddleMiddle = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last);\n  };\n  const isFirstMiddleMiddleFirst = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddleFirstMiddleFirst = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isFirst(first, last);\n  };\n  const isFirstMiddleMiddleLast = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last) && isLast(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddleFirstMiddleLast = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isLast(first, last);\n  };\n  const isFirstMiddleMiddle = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last);\n  };\n  const isLastMiddleFirstMiddle = (first, last) => {\n    return isLast(first, last) && isMiddle(first, last) && isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last);\n  };\n  const isFirstMiddleFirst = (first, last) => {\n    return isFirst(first, last) && isMiddle(first, last) && isMiddle(first, last) && isMiddle(first, last) && isFirst(first, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 2)\n  }\n  return newString\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.indexOf(s[i])\n    newString += alphabet.charAt(letter + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max;\n  let currentMax;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = max;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentMax = numbers[j];\n      }\n    }\n    result.push(currentMax);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min;\n  let currentMin;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMin = min;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] < currentNumber) {\n        currentMin = numbers[j];\n      }\n    }\n    result.push(currentMin);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentSum = numbers[j];\n      }\n    }\n    result.push(currentSum / i);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentSum = numbers[j];\n      }\n    }\n    result.push(currentSum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingCount = (numbers) => {\n  const result = [];\n  let count = 0;\n  let currentCount;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentCount = count;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentCount = numbers[j];\n      }\n    }\n    result.push(currentCount);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentSum = numbers[j];\n      }\n    }\n    result.push(currentSum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingCount = (numbers) => {\n  const result = [];\n  let count = 0;\n  let currentCount;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentCount = count;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentCount = numbers[j];\n      }\n    }\n    result.push(currentCount);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentSum = numbers[j];\n      }\n    }\n    result.push(currentSum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingCount = (numbers) => {\n  const result = [];\n  let count = 0;\n  let currentCount;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentCount = count;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentCount = numbers[j];\n      }\n    }\n    result.push(currentCount);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentSum = numbers[j];\n      }\n    }\n    result.push(currentSum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingCount = (numbers) => {\n  const result = [];\n  let count = 0;\n  let currentCount;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentCount = count;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentCount = numbers[j];\n      }\n    }\n    result.push(currentCount);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum;\n  let currentNumber;\n  let i;\n  let j;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    for (j = 0; j < i; j++) {\n      if (numbers[j] > currentNumber) {\n        currentSum = numbers[j];\n      }\n    }\n    result.push(currentSum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  if (lst.length < 2) return null;\n  const [a, b] = lst;\n  if (a < b) return a;\n  return b;\n};\n\n/*\n  You are given a list of integers. Your task is to find the sum of all even numbers in the list.\n  \n  sumEvens([1, 2, 3, 4, 5]) == 6\n  sumEvens([5, 1, 4, 3, 2]) == 6\n  sumEvens([]) == 0\n  sumEvens([1, 1]) == 0\n  \n  sumEvens([]) == null\n  sumEvens([1]) == null\n  sumEvens([1, 1]) == null\n  \n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null\n  sumEvens([1, 1]) == null", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      let index = vowels.indexOf(letter)\n      \n      if (index > -1) {\n        encodedMessage += vowels[index + 1]\n      }\n    }\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decodedMessage = ''\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      decodedMessage += letter\n    } else {\n      let index = vowels.indexOf(letter)\n      \n      if (index > -1) {\n        decodedMessage += vowels[index - 2]\n      }\n    }\n  }\n  \n  return decodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      let index = vowels.indexOf(letter)\n      \n      if (index > -1) {\n        encodedMessage += vowels[index + 1]\n      }\n    }\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decodedMessage = ''\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      decodedMessage += letter\n    } else {\n      let index = vowels.indexOf(letter)\n      \n      if (index > -1) {\n        decodedMessage += vowels[index - 2]\n      }\n    }\n  }\n  \n  return decodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      let index = vowels.indexOf(letter)\n      \n      if (index > -1) {\n        encodedMessage += vowels[index + 1]\n      }\n    }\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decodedMessage = ''\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      decodedMessage += letter\n    } else {\n      let index = vowels.indexOf(letter)\n      \n      if (index > -1) {\n        decodedMessage += vowels[index - 2]\n      }\n    }\n  }\n  \n  return decodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      encodedMessage += letter\n    } else {\n      let index = vowels.indexOf(letter)\n      \n      if (index > -1) {\n        encodedMessage += vowels[index + 1]\n      }\n    }\n  }\n  \n  return encodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decodedMessage = ''\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    \n    if (vowels.includes(letter)) {\n      decodedMessage += letter\n    } else {\n      let index = vowels.indexOf(letter)\n      \n      if (index > -1) {\n        decodedMessage += vowels[index - 2]\n      }\n    }\n  }\n  \n  return decodedMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers and a number k.\n  You need to find the number of pairs of integers in the list whose sum is equal to k.\n\n  Examples:\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 10 the output should be 4\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 9 the output should be 3\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 8 the output should be 2\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 7 the output should be 1\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 6 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 5 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 4 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 3 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 2 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 1 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 0 the output should be 0\n  */\nconst ksjkasddk = (lst, k) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === k) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*You are given a list of integers and a number k.\n  You need to find the number of pairs of integers in the list whose sum is equal to k.\n\n  Examples:\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 10 the output should be 4\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 9 the output should be 3\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 8 the output should be 2\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 7 the output should be 1\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 6 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 5 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 4 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 3 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 2 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 1 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 0 the output should be 0\n  */\nconst ksjkasddk = (lst, k) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === k) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*You are given a list of integers and a number k.\n  You need to find the number of pairs of integers in the list whose sum is equal to k.\n\n  Examples:\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 10 the output should be 4\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 9 the output should be 3\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 8 the output should be 2\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 7 the output should be 1\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 6 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 5 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 4 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 3 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 2 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 1 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 0 the output should be 0\n  */\nconst ksjkasddk = (lst, k) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === k) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*You are given a list of integers and a number k.\n  You need to find the number of pairs of integers in the list whose sum is equal to k.\n\n  Examples:\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 10 the output should be 4\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 9 the output should be 3\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 8 the output should be 2\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 7 the output should be 1\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 6 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 5 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 4 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 3 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 2 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 1 the output should be 0\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 0 the output should be 0\n  */\nconst ksjkasddk = (lst, k) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === k) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*You are given a list of integers and a number k.\n  You need to find the number of pairs of integers in the list whose sum is equal to k.\n\n  Examples:\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 10 the output should be 4\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 9 the output should be 3\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 8 the output should be 2\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 7 the output should be 1\n  For lst = [0,1,2,3,4,5,6,7,8,9] and k = 6 the output should be 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key]!== key) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum of the squares of the integers\n  in the array.\n  for example:\n  sumOfSquares([2,3,4]) => [4,9,16]\n  sumOfSquares([2,3,5,7]) => [16,25,49]\n  sumOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  sumOfSquares([]) => []\n  sumOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  sumOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  */\nconst sumOfSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  productOfSquares([2,3,4]) => [8,12,16]\n  productOfSquares([2,3,5,7]) => [32,73,145]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([]) => []\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  */\nconst productOfSquares = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  productOfSquares([2,3,4]) => [8,12,16]\n  productOfSquares([2,3,5,7]) => [32,73,145]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([]) => []\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  */\nconst productOfSquares = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  productOfSquares([2,3,4]) => [8,12,16]\n  productOfSquares([2,3,5,7]) => [32,73,145]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([]) => []\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  */\nconst productOfSquares = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  productOfSquares([2,3,4]) => [8,12,16]\n  productOfSquares([2,3,5,7]) => [32,73,145]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([]) => []\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  */\nconst productOfSquares = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  productOfSquares([2,3,4]) => [8,12,16]\n  productOfSquares([2,3,5,7]) => [32,73,145]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([]) => []\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  */\nconst productOfSquares = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  productOfSquares([2,3,4]) => [8,12,16]\n  productOfSquares([2,3,5,7]) => [32,73,145]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([]) => []\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  productOfSquares([2,3,5,7,11,13,17]) => [49,121,251,505,1023,1525]\n  */\nconst productOfSquares = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  productOfSqu", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = a % 10;\n    product *= b;\n    product %= 10;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the sum of the unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  \n  if (a > 0 && b > 0) {\n    sum = (a + b) % 10;\n  }\n  \n  return sum;\n}\n\n/*Complete the function that takes two integers and returns \n  the difference of the unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return 16.\n  difference(19, 28) should return 72.\n  difference(2020, 1851) should return 0.\n  difference(14,-15) should return 20.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  \n  if (a > 0 && b > 0) {\n    difference = (a - b) % 10;\n  }\n  \n  return difference;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of the unit digits of the sum of the two numbers.\n  Assume the input is always valid.\n  Examples:\n  productSum(148, 412) should return 16.\n  productSum(19, 28) should return 72.\n  productSum(2020, 1851) should return 0.\n  productSum(14,-15) should return 20.\n  */\nconst productSum = (a, b) => {\n  let productSum = 0;\n  \n  if (a > 0 && b > 0) {\n    productSum = (a + b) % 10;\n    productSum *= (a + b) % 10;\n  }\n  \n  return productSum;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of the unit digits of the difference of the two numbers.\n  Assume the input is always valid.\n  Examples:\n  productDifference(148, 412) should return 16.\n  productDifference(19, 28) should return 72.\n  productDifference(2020, 1851) should return 0.\n  productDifference(14,-15) should return 20.\n  */\nconst productDifference = (a, b) => {\n  let productDifference = 0;\n  \n  if (a > 0 && b > 0) {\n    productDifference = (a - b) % 10;\n    productDifference *= (a - b) % 10;\n  }\n  \n  return productDifference;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of the unit digits of the product of the two numbers.\n  Assume the input is always valid.\n  Examples:\n  productProductSum(148, 412) should return 16.\n  productProductSum(19, 28) should return 72.\n  productProductSum(2020, 1851) should return 0.\n  productProductSum(14,-15) should return 20.\n  */\nconst productProductSum = (a, b) => {\n  let productProductSum = 0;\n  \n  if (a > 0 && b > 0) {\n    productProductSum = (a + b) % 10;\n    productProductSum *= (a + b) % 10;\n    productProductSum *= (a + b) % 10;\n  }\n  \n  return productProductSum;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of the unit digits of the product of the two numbers.\n  Assume the input is always valid.\n  Examples:\n  productProductDifference(148, 412) should return 16.\n  productProductDifference(19, 28) should return 72.\n  productProductDifference(2020, 1851) should return 0.\n  productProductDifference(14,-15) should return 20.\n  */\nconst productProductDifference = (a, b) => {\n  let productProductDifference = 0;\n  \n  if (a > 0 && b > 0) {\n    productProductDifference = (a - b) % 10;\n    productProductDifference *= (a - b) % 10;\n    productProductDifference *= (a - b) % 10;\n    productProductDifference *= (a - b) % 10;\n  }\n  \n  return productProductDifference;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of the unit digits of the product of the two numbers.\n  Assume the input is always valid.\n  Examples:\n  productProductProductSum(148, 412) should return 16.\n  productProductProductSum(19, 28) should return 72.\n  productProductProductSum(2020, 1851) should return 0.\n  productProductProductSum(14,-15) should return 20.\n  */\nconst productProductProductSum = (a, b) => {\n  let productProductProductSum = 0;\n  \n  if (a > 0 && b > 0) {\n    productProductProductSum = (a + b) % 10;\n    productProductProductSum *= (a + b) % 10;\n    productProductProductSum *= (a + b) % 10;\n    productProductProductSum *= (a + b) % 10;\n    productProductProductSum *= (a + b) % 10;\n  }\n  \n  return productProductProductSum;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of the unit digits of the product of the two numbers.\n  Assume the input is always valid.\n  Examples:\n  productProductProductDifference(148, 412) should return 16.\n  productProductProductDifference(19, 28) should return 72.\n  productProductProductDifference(2020, 1851) should return 0.\n  productProductProductDifference(14,-15) should return 20.\n  */\nconst productProductProductDifference = (a, b) => {\n  let productProductProductDifference = 0;\n  \n  if (a > 0 && b > 0) {\n    productProductProductDifference = (a - b) % 10;\n    productProductProductDifference *= (a - b) % 10;\n    productProductProductDifference *= (a - b) % 10;\n    productProductProductDifference *= (a - b) % 10;\n    productProductProductDifference *= (a - b) % 10;\n    productProductProductDifference *= (a - b) % 10;\n  }\n  \n  return productProductProductDifference;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of the unit digits of the product of the two numbers.\n  Assume the input is always valid.\n  Examples:\n  productProductProductProductSum(148, 412) should return 16.\n  productProductProductProductSum(19, 28) should return 72.\n  productProductProductProductSum(2020, 1851) should return 0.\n  productProductProductProductSum(14,-15) should return 20.\n  */\nconst productProductProductProductSum = (a, b) => {\n  let productProductProductProductSum = 0;\n  \n  if (a > 0 && b > 0) {\n    productProductProductProductSum = (a + b) % 10;\n    productProductProductProductSum *= (a + b) % 10;\n    productProductProductProductSum *= (a + b) % 10;\n    productProductProductProductSum *= (a + b) % 10;\n    productProductProductProductSum *= (a + b) % 10;\n    productProductProductProductSum *= (a + b) % 10;\n    productProductProductProductSum *= (a + b", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices. \n  \n  For example:\n  countVowelsOdd('aBCdEf') returns 3\n  countVowelsOdd('abcdefg') returns 0\n  countVowelsOdd('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 3\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  countVowelsEven('aBCdEf') returns 3\n  countVowelsEven('abcdefg') returns 0\n  countVowelsEven('dBBE') returns 0\n  */\nconst countVowelsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  countConsonantsEven('aBCdEf') returns 3\n  countConsonantsEven('abcdefg') returns 0\n  countConsonantsEven('dBBE') returns 0\n  */\nconst countConsonantsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const intValue = parseInt(value, 10);\n  const intValueDiff = Math.abs(intValue - intValue);\n  const intValueDiffFloor = Math.floor(intValueDiff);\n  const intValueDiffCeil = Math.ceil(intValueDiff);\n  const intValueDiffRound = Math.round(intValueDiff);\n  const intValueDiffRoundCeil = Math.ceil(intValueDiffRound);\n  const intValueDiffRoundFloor = Math.floor(intValueDiffRound);\n  const intValueDiffRoundCeilFloor = Math.ceil(intValueDiffRoundCeil);\n  const intValueDiffRoundFloorCeil = Math.floor(intValueDiffRoundFloor);\n  const intValueDiffRoundFloorCeilFloor = Math.ceil(intValueDiffRoundFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeil = Math.floor(intValueDiffRoundFloorCeilFloor);\n  const intValueDiffRoundFloorCeilFloorCeilFloor = Math.ceil(intValueDiffRoundFloorCeilFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeil = Math.floor(intValueDiffRoundFloorCeilFloorCeilFloor);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloor = Math.ceil(intValueDiffRoundFloorCeilFloorCeilFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloor = Math.floor(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloor);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeil = Math.ceil(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloor = Math.floor(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloor);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil = Math.ceil(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloor = Math.floor(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloor);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil = Math.ceil(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil = Math.floor(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloor = Math.ceil(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloor);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloor = Math.floor(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloor);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil = Math.ceil(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloor = Math.floor(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloor);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil = Math.ceil(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloor = Math.floor(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloor = Math.ceil(intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeil);\n  const intValueDiffRoundFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorCeilFloorC", "passed": 0, "run_status": 2}
