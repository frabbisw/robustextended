{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  return Math.abs(firstNumber - lastNumber) < threshold;\n};\n\n/**\n * Returns true if given array contains only unique numbers, false otherwise.\n * If given array contains only unique numbers, it also returns true if the array is empty.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns false if the array contains\n * any duplicate numbers, except for one number in the array.\n * If given array contains only unique numbers, it also returns ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_groups_flat = paren_groups.flat();\n  const paren_groups_flat_reversed = paren_groups_flat.reverse();\n  const paren_groups_flat_reversed_string = paren_groups_flat_reversed.join('');\n  const paren_groups_flat_reversed_string_trimmed = paren_groups_flat_reversed_string.replace(/\\s/g, '');\n  const paren_groups_flat_reversed_string_trimmed_array = paren_groups_flat_reversed_string_trimmed.split('');\n  const paren_groups_flat_reversed_string_trimmed_array_trimmed = paren_groups_flat_reversed_string_trimmed_array.filter(Boolean);\n  const paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed = paren_groups_flat_reversed_string_trimmed_array_trimmed.reverse();\n  const paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string = paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed.join('');\n  const paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string_trimmed = paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string_trimmed_array.filter(Boolean);\n  const paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string_trimmed_reversed_string_trimmed = paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string_trimmed_reversed_string_trimmed_array.filter(Boolean);\n  const paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed = paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_array.filter(Boolean);\n  const paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed = paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_array.filter(Boolean);\n  const paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed = paren_groups_flat_reversed_string_trimmed_array_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trimmed_reversed_string_trim", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = findLongestPalindrome(string);\n  const prefix = string.slice(0, longestPalindrome);\n  const suffix = string.slice(longestPalindrome);\n  return `${prefix}${suffix}${string.reverse().slice(prefix.length)}`;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  0\n  >>> findLongestPalindrome('cat')\n  3\n  >>> findLongestPalindrome('cata')\n  3\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    const currentPalindrome = currentChar + nextChar;\n    const nextPalindrome = currentPalindrome;\n    if (isPalindrome(currentPalindrome)) {\n      longestPalindrome = i;\n    }\n    if (isPalindrome(nextPalindrome)) {\n      longestPalindrome = i;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  0\n  >>> findLongestPalindrome('cat')\n  3\n  >>> findLongestPalindrome('cata')\n  3\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    const currentPalindrome = currentChar + nextChar;\n    const nextPalindrome = currentPalindrome;\n    if (isPalindrome(currentPalindrome)) {\n      longestPalindrome = i;\n    }\n    if (isPalindrome(nextPalindrome)) {\n      longestPalindrome = i;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  0\n  >>> findLongestPalindrome('cat')\n  3\n  >>> findLongestPalindrome('cata')\n  3\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    const currentPalindrome = currentChar + nextChar;\n    const nextPalindrome = currentPalindrome;\n    if (isPalindrome(currentPalindrome)) {\n      longestPalindrome = i;\n    }\n    if (isPalindrome(nextPalindrome)) {\n      longestPalindrome = i;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  0\n  >>> findLongestPalindrome('cat')\n  3\n  >>> findLongestPalindrome('cata')\n  3\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    const currentPalindrome = currentChar + nextChar;\n    const nextPalindrome = currentPalindrome;\n    if (isPalindrome(currentPalindrome)) {\n      longestPalindrome = i;\n    }\n    if (isPalindrome(nextPalindrome)) {\n      longestPalindrome = i;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  0\n  >>> findLongestPalindrome('cat')\n  3\n  >>> findLongestPalindrome('cata')\n  3\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    const currentPalindrome = currentChar + nextChar;\n    const nextPalindrome = currentPalindrome;\n    if (isPalindrome(currentPalindrome)) {\n      longestPalindrome = i;\n    }\n    if (isPalindrome(nextPalindrome)) {\n      longestPalindrome = i;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  0\n  >>> findLongestPalindrome('cat')\n  3\n  >>> findLongestPalindrome('cata')\n  3\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = 0;\n  for (let i = 0; i < string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 1; i <= n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  first n words of the string. \n  \n  For example:\n  firstNWords(\"Hi, my name is John\", 3) == \"Hi\"\n  firstNWords(\"One, two, three, four, five, six\", 6) == \"One, two, three\"\n  */\nconst firstNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(0, n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  last n words of the string. \n  \n  For example:\n  lastNWords(\"Hi, my name is John\", 3) == \"John\"\n  lastNWords(\"One, two, three, four, five, six\", 6) == \"four, five, six\"\n  */\nconst lastNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(-n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  middle n words of the string. \n  \n  For example:\n  middleNWords(\"Hi, my name is John\", 3) == \"my name\"\n  middleNWords(\"One, two, three, four, five, six\", 6) == \"two, three\"\n  */\nconst middleNWords = (s, n) => {\n  return s.split(/,|\\s/).slice(n / 2, n / 2 + n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  first n characters of the string. \n  \n  For example:\n  firstNChars(\"Hi, my name is John\", 3) == \"Hi\"\n  firstNChars(\"One, two, three, four, five, six\", 6) == \"One, two, three\"\n  */\nconst firstNChars = (s, n) => {\n  return s.slice(0, n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  last n characters of the string. \n  \n  For example:\n  lastNChars(\"Hi, my name is John\", 3) == \"John\"\n  lastNChars(\"One, two, three, four, five, six\", 6) == \"four, five, six\"\n  */\nconst lastNChars = (s, n) => {\n  return s.slice(-n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  middle n characters of the string. \n  \n  For example:\n  middleNChars(\"Hi, my name is John\", 3) == \"my name\"\n  middleNChars(\"One, two, three, four, five, six\", 6) == \"two, three\"\n  */\nconst middleNChars = (s, n) => {\n  return s.slice(n / 2, n / 2 + n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  first n characters of the string with spaces inserted between each word.\n  \n  For example:\n  firstNCharsSpaced(\"Hi, my name is John\", 3) == \"Hi my name is\"\n  firstNCharsSpaced(\"One, two, three, four, five, six\", 6) == \"One two three four five six\"\n  */\nconst firstNCharsSpaced = (s, n) => {\n  return s.split(/,|\\s/).map((word) => `${word} `).slice(0, n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  last n characters of the string with spaces inserted between each word.\n  \n  For example:\n  lastNCharsSpaced(\"Hi, my name is John\", 3) == \"John is\"\n  lastNCharsSpaced(\"One, two, three, four, five, six\", 6) == \"four five six\"\n  */\nconst lastNCharsSpaced = (s, n) => {\n  return s.split(/,|\\s/).map((word) => `${word} `).slice(-n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  middle n characters of the string with spaces inserted between each word.\n  \n  For example:\n  middleNCharsSpaced(\"Hi, my name is John\", 3) == \"my name is\"\n  middleNCharsSpaced(\"One, two, three, four, five, six\", 6) == \"two three\"\n  */\nconst middleNCharsSpaced = (s, n) => {\n  return s.split(/,|\\s/).map((word) => `${word} `).slice(n / 2, n / 2 + n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  first n words of the string with spaces inserted between each word.\n  \n  For example:\n  firstNWordsSpaced(\"Hi, my name is John\", 3) == \"Hi my name is\"\n  firstNWordsSpaced(\"One, two, three, four, five, six\", 6) == \"One two three four five six\"\n  */\nconst firstNWordsSpaced = (s, n) => {\n  return s.split(/,|\\s/).map((word) => `${word} `).slice(0, n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  last n words of the string with spaces inserted between each word.\n  \n  For example:\n  lastNWordsSpaced(\"Hi, my name is John\", 3) == \"John is\"\n  lastNWordsSpaced(\"One, two, three, four, five, six\", 6) == \"four five six\"\n  */\nconst lastNWordsSpaced = (s, n) => {\n  return s.split(/,|\\s/).map((word) => `${word} `).slice(-n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  middle n words of the string with spaces inserted between each word.\n  \n  For example:\n  middleNWordsSpaced(\"Hi, my name is John\", 3) == \"my name is\"\n  middleNWordsSpaced(\"One, two, three, four, five, six\", 6) == \"two three\"\n  */\nconst middleNWordsSpaced = (s, n) => {\n  return s.split(/,|\\s/).map((word) => `${word} `).slice(n / 2, n / 2 + n);\n};\n\n/*\n  You will be given a string of words and a number n. Your task is to return the\n  first n characters of the string with spaces inserted between each word.\n  \n  For example:\n  firstNCharsSpaced(\"Hi, my name is John\", 3) == \"Hi my name is\"\n  firstNCharsSpaced(\"One, two, three, four, five, six\", ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = `${Math.round(avg)}`;\n  if (binary > m) {\n    return -1;\n  }\n  return binary;\n};\n\n/*\n  Write a function that accepts a string and returns the number of characters in it.\n  Example:\n  countChars(\"hello\") => 5\n  countChars(\"helloooo\") => 6\n  countChars(\"helloooo!\") => 7\n  countChars(\"helloooo!ooo\") => 8\n  countChars(\"helloooo!ooo!\") => 9\n  countChars(\"helloooo!ooo!ooo\") => 10\n  countChars(\"helloooo!ooo!ooo!\") => 11\n  countChars(\"helloooo!ooo!ooo!ooo\") => 12\n  countChars(\"helloooo!ooo!ooo!ooo!\") => 13\n  countChars(\"helloooo!ooo!ooo!ooo!ooo\") => 14\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo\") => 15\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!\") => 16\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 17\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!\") => 18\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 19\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 20\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 21\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 22\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!\") => 23\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!oo\") => 24\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!oo\") => 25\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!oo\") => 26\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 27\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 28\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 29\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 30\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 31\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 32\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 33\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 34\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 35\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 36\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 37\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 38\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 39\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 40\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 41\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 42\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 43\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 44\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 45\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 46\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 47\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 48\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo!ooo\") => 49\n  countChars(\"helloooo!ooo!ooo!ooo!ooo!ooo!ooo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0 && digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0 && digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0 && digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0 && digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0 && digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0 && digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0 && digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0 && digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueEvenOddDigtis([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueEvenOddDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0 && digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in incre", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reversedArr = sortedArr.reverse();\n\n  const oneIndex = reversedArr.findIndex((num) => num === 1);\n  const twoIndex = reversedArr.findIndex((num) => num === 2);\n  const threeIndex = reversedArr.findIndex((num) => num === 3);\n  const fourIndex = reversedArr.findIndex((num) => num === 4);\n  const fiveIndex = reversedArr.findIndex((num) => num === 5);\n  const sixIndex = reversedArr.findIndex((num) => num === 6);\n  const sevenIndex = reversedArr.findIndex((num) => num === 7);\n  const eightIndex = reversedArr.findIndex((num) => num === 8);\n  const nineIndex = reversedArr.findIndex((num) => num === 9);\n\n  const one = reversedArr.slice(0, oneIndex);\n  const two = reversedArr.slice(oneIndex, twoIndex);\n  const three = reversedArr.slice(twoIndex, threeIndex);\n  const four = reversedArr.slice(threeIndex, fourIndex);\n  const five = reversedArr.slice(fourIndex, fiveIndex);\n  const six = reversedArr.slice(fiveIndex, sixIndex);\n  const seven = reversedArr.slice(sixIndex, sevenIndex);\n  const eight = reversedArr.slice(sevenIndex, eightIndex);\n  const nine = reversedArr.slice(eightIndex, nineIndex);\n\n  return [\n   ...one,\n   ...two,\n   ...three,\n   ...four,\n   ...five,\n   ...six,\n   ...seven,\n   ...eight,\n   ...nine,\n  ];\n};\n\n// TESTS\nconst tests = [\n  {\n    name: \"ybLength\",\n    arr: [2, 1, 1, 4, 5, 8, 2, 3],\n    expected: [1, 1, 2, 2, 3, 4, 5, 8],\n  },\n  {\n    name: \"ybLength\",\n    arr: [],\n    expected: [],\n  },\n  {\n    name: \"ybLength\",\n    arr: [1, -1, 55],\n    expected: ['One'],\n  },\n];\n\ntests.forEach(({ name, arr, expected }) => {\n  test(name, () => {\n    expect(ybLength(arr)).toEqual(expected);\n  });\n});</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3];\nconst result = arr.sort((a, b) => a - b).reverse().map(\n  (_, i) => [\n    'One',\n    'Two',\n    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n  ][i % 10]\n);\n\nconsole.log(result);</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3];\nconst result = arr.sort((a, b) => a - b).reverse().map(\n  (_, i) => [\n    'One',\n    'Two',\n    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n  ][i % 10]\n);\n\nconsole.log(result);</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3];\nconst result = arr.sort((a, b) => a - b).reverse().map(\n  (_, i) => [\n    'One',\n    'Two',\n    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n  ][i % 10]\n);\n\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3];\nconst result = arr.sort((a, b) => a - b).reverse().map(\n  (_, i) => [\n    'One',\n    'Two',\n    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n  ][i % 10]\n);\n\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3];\nconst result = arr.sort((a, b) => a - b).reverse().map(\n  (_, i) => [\n    'One',\n    'Two',\n    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n  ][i % 10]\n);\n\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3];\nconst result = arr.sort((a, b) => a - b).reverse().map(\n  (_, i) => [\n    'One',\n    'Two',\n    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n  ][i % 10]\n);\n\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3];\nconst result = arr.sort((a, b) => a - b).reverse().map(\n  (_, i) => [\n    'One',\n    'Two',\n    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n  ][i % 10]\n);\n\nconsole.log(result);</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3];\nconst result = arr.sort((a, b) => a - b).reverse().map(\n  (_, i) => [\n    'One',\n    'Two',\n    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n  ][i % 10]\n);\n\nconsole.log(result);</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3];\nconst result = arr.sort((a, b) => a - b).reverse().map(\n  (_, i) => [\n    'One',\n    'Two',\n    '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n// TESTS\nconsole.log(\n  f(5).join(',')\n); // 1,2,6,24,15\n\nconsole.log(\n  f(10).join(',')\n); // 1,2,6,24,120,720,5040,40320,362880,3628800,39916800,479001600,6227020800,87178291200,1307674368000,20922789888000,355687428096000,6402373705728000,121645100408832000,2432902008176640000,51090942171709440000,1124000727777607680000,25852016738884976640000,620448401733239439360000,15511210043330985984000000,251721606893912307301344000000,5109094217170944000000,112400072777760768000000,2585201673888497664000000,62044840173323943936000000,1551121004333098598400000000,25172160689391230730134400000000,510909421717094400000000,11240007277776076800000000,258520167388849766400000000,6204484017332394393600000000,15511210043330985984000000000,251721606893912307301344000000000,5109094217170944000000000,112400072777760768000000000,2585201673888497664000000000,62044840173323943936000000000,15511210043330985984000000000000,251721606893912307301344000000000000,5109094217170944000000000000,112400072777760768000000000000,2585201673888497664000000000000,62044840173323943936000000000000,1551121004333098598400000000000000,25172160689391230730134400000000000000,510909421717094400000000000000,11240007277776076800000000000000,258520167388849766400000000000000,6204484017332394393600000000000000,155112100433309859840000000000000000,2517216068939123073013440000000000000000,51090942171709440000000000000000,1124000727777607680000000000000000,25852016738884976640000000000000000,620448401733239439360000000000000000,1551121004333098598400000000000000000,25172160689391230730134400000000000000000,510909421717094400000000000000000,11240007277776076800000000000000000,258520167388849766400000000000000000,6204484017332394393600000000000000000,1551121004333098598400000000000000000000,25172160689391230730134400000000000000000000,510909421717094400000000000000000000,11240007277776076800000000000000000000,258520167388849766400000000000000000000,6204484017332394393600000000000000000000,155112100433309859840000000000000000000000,2517216068939123073013440000000000000000000000,51090942171709440000000000000000000000,1124000727777607680000000000000000000000,25852016738884976640000000000000000000000,620448401733239439360000000000000000000000,15511210043330985984000000000000000000000000,251721606893912307301344000000000000000000000000,5109094217170944000000000000000000000000,112400072777760768000000000000000000000000,2585201673888497664000000000000000000000000,62044840173323943936000000000000000000000000,155112100433309859840000000000000000000000000,2517216068939123073013440000000000000000000000000,51090942171709440000000000000000000000000,1124000727777607680000000000000000000000000,25852016738884976640000000000000000000000000,620448401733239439360000000000000000000000000,155112100433309859840000000000000000000000000000,2517216068939123073013440000000000000000000000000000,51090942171709440000000000000000000000000000,1124000727777607680000000000000000000000000000,25852016738884976640000000000000000000000000000,620448401733239439360000000000000000000000000000,15511210043330985984000000000000000000000000000000,251721606893912307301344000000000000000000000000000000,5109094217170944000000000000000000000000000000,112400072777760768000000000000000000000000000000,2585201673888497664000000000000000000000000000000,62044840173323943936000000000000000000000000000000,155112100433309859840000000000000000000000000000000\n);</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Can you explain why you used `...range(1, i)` instead of `range(1, i)`?\n<|/ c |>\n<| c |>\n`range(1, i)` will return a list with one element only, and that element will be the number `i`. `...range(1, i)` will return a list with all the numbers from 1 to `i`, but since `i` is an odd number, the list will contain one element only, and that element will be the number `i`. So `range(1, i)` will return a list with all the numbers from 1 to `i`, but since `i` is an odd number, the list will contain one element only, and that element will be the number `i`.\n<|/ c |>\n<| c |>\nThanks for your explanation. Can you explain why you used `...range(1, i)` instead of `range(1, i)`?\n<|/ c |>\n<| c |>\n`range(1, i)` will return a list with all the numbers from 1 to `i`, but since `i` is an odd number, the list will contain one element only, and that element will be the number `i`. So `range(1, i)` will return a list with all the numbers from 1 to `i`, but since `i` is an odd number, the list will contain one element only, and that element will be the number `i`.\n<|/ c |>\n<| c |>\nThanks for your explanation. Can you explain why you used `...range(1, i)` instead of `range(1, i)`?\n<|/ c |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.ceil(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "<|endoftext|>/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      n++;\n    }\n  }\n  return n;\n};\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  \n  if(n === 0){\n    return true;\n  }\n  \n  for(let i = 0; i < n; i++){\n    let temp = arr[i];\n    arr[i] = arr[n-1];\n    arr[n-1] = temp;\n  }\n  \n  return true;\n};\n\n/*\n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced else return false.\n  \n  A binary search tree is said to be balanced if every level of the tree is of height \n  1 except the leaf nodes. A leaf node is a node with no children. \n  \n  A binary search tree is said to be unbalanced if there are two or more levels of \n  height greater than 1.\n  \n  Write a function that returns true if a binary search tree is balanced ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  const xorResult = a.split('').map((x, i) => x ^ b[i]).join('');\n  return xorResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinAnd = (a, b) => {\n  const andResult = a.split('').map((x, i) => x & b[i]).join('');\n  return andResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinNot('010', '110')\n  '110'\n  */\nconst strinNot = (a, b) => {\n  const notResult = a.split('').map((x, i) => ~x & b[i]).join('');\n  return notResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinNot('010', '110')\n  '110'\n  */\nconst strinNot = (a, b) => {\n  const notResult = a.split('').map((x, i) => ~x & b[i]).join('');\n  return notResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinNot('010', '110')\n  '110'\n  */\nconst strinNot = (a, b) => {\n  const notResult = a.split('').map((x, i) => ~x & b[i]).join('');\n  return notResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinNot('010', '110')\n  '110'\n  */\nconst strinNot = (a, b) => {\n  const notResult = a.split('').map((x, i) => ~x & b[i]).join('');\n  return notResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinNot('010', '110')\n  '110'\n  */\nconst strinNot = (a, b) => {\n  const notResult = a.split('').map((x, i) => ~x & b[i]).join('');\n  return notResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinAnd('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinOr('010', '110')\n  '100'\n  */\nconst strinOr = (a, b) => {\n  const orResult = a.split('').map((x, i) => x | b[i]).join('');\n  return orResult;\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinNot('010', '110')\n  '110'\n  */\nconst str", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  // Your code here\n};\n\n// Test Cases\nxechange([1, 2, 3, 4], [1, 2, 3, 4]); // => \"YES\"\nxechange([1, 2, 3, 4], [1, 5, 3, 4]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]); // => \"NO\"\nxechange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = ''\n  let flag = true\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(i)) {\n      flag = false\n    }\n  }\n  if (flag) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, flag]\n}\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = ''\n  let flag = true\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(i)) {\n      flag = false\n    }\n  }\n  if (flag) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, flag]\n}\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = ''\n  let flag = true\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(i)) {\n      flag = false\n    }\n  }\n  if (flag) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, flag]\n}\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = ''\n  let flag = true\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(i)) {\n      flag = false\n    }\n  }\n  if (flag) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, flag]\n}\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = ''\n  let flag = true\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(i)) {\n      flag = false\n    }\n  }\n  if (flag) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, flag]\n}\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = ''\n  let flag = true\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(i)) {\n      flag = false\n    }\n  }\n  if (flag) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, flag]\n}\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = ''\n  let flag = true\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(i)) {\n      flag = false\n    }\n  }\n  if (flag) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i)!== c.charAt(i)) {\n        result += s.charAt(i)\n      }\n    }\n  }\n  return [result, flag]\n}\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcded", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odds = lst\n   .map(x => x.replace(/\\d/g, ''))\n   .map(x => x.split(''))\n   .map(x => x.filter(y => y % 2 === 1))\n   .map(x => x.length)\n   .map(x => x.toString())\n   .join(',');\n  return [odds];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  const evens = lst\n   .map(x => x.replace(/\\d/g, ''))\n   .map(x => x.split(''))\n   .map(x => x.filter(y => y % 2 === 0))\n   .map(x => x.length)\n   .map(x => x.toString())\n   .join(',');\n  return [evens];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const odds = lst\n   .map(x => x.replace(/\\d/g, ''))\n   .map(x => x.split(''))\n   .map(x => x.filter(y => y % 2 === 1))\n   .map(x => x.length)\n   .map(x => x.toString())\n   .join(',');\n  const evens = lst\n   .map(x => x.replace(/\\d/g, ''))\n   .map(x => x.split(''))\n   .map(x => x.filter(y => y % 2 === 0))\n   .map(x => x.length)\n   .map(x => x.toString())\n   .join(',');\n  return [odds, evens];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount2 = (lst) => {\n  const odds = lst\n   .map(x => x.replace(/\\d/g, ''))\n   .map(x => x.split(''))\n   .map(x => x.filter(y => y % 2 === 1))\n   .map(x => x.length)\n   .map(x => x.toString())\n   .join(',');\n  const evens = lst\n   .map(x => x.replace(/\\d/g, ''))\n   .map(x => x.split(''))\n   .map(x => x.filter(y => y % 2 === 0))\n   .map(x => x.length)\n   .map(x => x.toString())\n   .join(',');\n  return [odds, evens];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount2(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount2(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount3 = (lst) => {\n  const odds = lst\n   .map(x => x.replace(/\\d/g, ''))\n   .map(x => x.split(''))\n   .map(x => x.filter(y => y % 2 === 1))\n   .map(x => x.length)\n   .map(x => x.toString())\n   .join(',');\n  const evens = lst\n   .map(x => x.replace(/\\d/g, ''))\n   .map(x => x.split(''))\n   .map(x => x.filter(y => y % 2 === 0))\n   .map(x => x.length)\n   .map(x => x.toString())\n   .join(',');\n  return [odds, evens];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount3(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount3(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount4 = (lst) => {\n  const odds = lst\n   .map(x => x.replace(/\\d/g, ''))\n   .map(x => x.split(''))\n   .map(x => x.filter(y => y % 2 === 1))\n   .map(x => x.length)\n   .map(x => x.toString())\n   .join(',');\n  const evens = lst\n   .map(x => x.replace(/\\d/g, ''))\n   .map(x => x.split(''))\n   .map(x => x.filter(y => y % 2 === 0))\n   .map(x => x.length)\n   .map(x => x.toString())\n   .join(',');\n  return [odds, evens];\n};\n\n/*Given a list of strings, where each string ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, curr) => acc + curr, 0);\n    if (currentSum < min) {\n      min = currentSum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums.reduce((acc, curr) => acc + curr, 0);\n    if (currentSum > max) {\n      max = currentSum;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the sum of all even numbers in nums.\n  Example\n  evenSum([2, 3, 4, 1, 2, 4]) == 6\n  evenSum([-1, -2, -3]) == 6\n  */\nconst evenSum = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all odd numbers in nums.\n  Example\n  oddSum([2, 3, 4, 1, 2, 4]) == 3\n  oddSum([-1, -2, -3]) == 3\n  */\nconst oddSum = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 3.\n  Example\n  divisibleBy3([2, 3, 4, 1, 2, 4]) == 6\n  divisibleBy3([-1, -2, -3]) == 6\n  */\nconst divisibleBy3 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 5.\n  Example\n  divisibleBy5([2, 3, 4, 1, 2, 4]) == 10\n  divisibleBy5([-1, -2, -3]) == 10\n  */\nconst divisibleBy5 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 7.\n  Example\n  divisibleBy7([2, 3, 4, 1, 2, 4]) == 14\n  divisibleBy7([-1, -2, -3]) == 14\n  */\nconst divisibleBy7 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 11.\n  Example\n  divisibleBy11([2, 3, 4, 1, 2, 4]) == 21\n  divisibleBy11([-1, -2, -3]) == 21\n  */\nconst divisibleBy11 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 15.\n  Example\n  divisibleBy15([2, 3, 4, 1, 2, 4]) == 28\n  divisibleBy15([-1, -2, -3]) == 28\n  */\nconst divisibleBy15 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 17.\n  Example\n  divisibleBy17([2, 3, 4, 1, 2, 4]) == 34\n  divisibleBy17([-1, -2, -3]) == 34\n  */\nconst divisibleBy17 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 19.\n  Example\n  divisibleBy19([2, 3, 4, 1, 2, 4]) == 42\n  divisibleBy19([-1, -2, -3]) == 42\n  */\nconst divisibleBy19 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 23.\n  Example\n  divisibleBy23([2, 3, 4, 1, 2, 4]) == 50\n  divisibleBy23([-1, -2, -3]) == 50\n  */\nconst divisibleBy23 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 29.\n  Example\n  divisibleBy29([2, 3, 4, 1, 2, 4]) == 58\n  divisibleBy29([-1, -2, -3]) == 58\n  */\nconst divisibleBy29 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 31.\n  Example\n  divisibleBy31([2, 3, 4, 1, 2, 4]) == 66\n  divisibleBy31([-1, -2, -3]) == 66\n  */\nconst divisibleBy31 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 37.\n  Example\n  divisibleBy37([2, 3, 4, 1, 2, 4]) == 74\n  divisibleBy37([-1, -2, -3]) == 74\n  */\nconst divisibleBy37 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 43.\n  Example\n  divisibleBy43([2, 3, 4, 1, 2, 4]) == 82\n  divisibleBy43([-1, -2, -3]) == 82\n  */\nconst divisibleBy43 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 51.\n  Example\n  divisibleBy51([2, 3, 4, 1, 2, 4]) == 90\n  divisibleBy51([-1, -2, -3]) == 90\n  */\nconst divisibleBy51 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 59.\n  Example\n  divisibleBy59([2, 3, 4, 1, 2, 4]) == 98\n  divisibleBy59([-1, -2, -3]) == 98\n  */\nconst divisibleBy59 = (nums) => {\n  return nums.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given an array of integers nums, find the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = Array.from({ length: capacity }, () => Array(grid[0].length).fill(0));\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]].push({ x: i, y: j });\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    for (let j = 0; j < buckets[i].length; j++) {\n      if (buckets[i][j].length === 0) {\n        buckets[i].splice(j, 1);\n        count++;\n      }\n    }\n  }\n\n  return count;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is a 2D array representing the wells, and capacity is an integer representing the bucket capacity.\n */\nconst grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nconst capacity = 1;\nconst result = maxFill(grid, capacity);\n\nconsole.log(result);</code>\n<|/ a tags=arrays,javascript,algorithm,multidimensional-array |>\n<| c |>\nThanks for your answer. Can you please explain why you used `buckets[i].splice(j, 1);` instead of `buckets[i].splice(j, 1);`?\n<|/ c |>\n<| c |>\n`buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(j, 1);` removes the element at `j` from the array at `i`. `buckets[i].splice(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0)\n  const decimal = arr.reduce((acc, val) => acc + val / 2, 0)\n  return [...arr].sort((a, b) => {\n    if (a === b) return 0\n    if (a > b) return -1\n    if (a < b) return 1\n    return decimal\n  })\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0)\n  const decimal = arr.reduce((acc, val) => acc + val / 2, 0)\n  return [...arr].sort((a, b) => {\n    if (a === b) return 0\n    if (a > b) return -1\n    if (a < b) return 1\n    return decimal\n  }).reverse()\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0)\n  const decimal = arr.reduce((acc, val) => acc + val / 2, 0)\n  return [...arr].sort((a, b) => {\n    if (a === b) return 0\n    if (a > b) return -1\n    if (a < b) return 1\n    return decimal\n  }).reverse()\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0)\n  const decimal = arr.reduce((acc, val) => acc + val / 2, 0)\n  return [...arr].sort((a, b) => {\n    if (a === b) return 0\n    if (a > b) return -1\n    if (a < b) return 1\n    return decimal\n  }).reverse()\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0)\n  const decimal = arr.reduce((acc, val) => acc + val / 2, 0)\n  return [...arr].sort((a, b) => {\n    if (a === b) return 0\n    if (a > b) return -1\n    if (a < b) return 1\n    return decimal\n  }).reverse()\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0)\n  const decimal = arr.reduce((acc, val) => acc + val / 2, 0)\n  return [...arr].sort((a, b) => {\n    if (a === b) return 0\n    if (a > b) return -1\n    if (a < b) return 1\n    return decimal\n  }).reverse()\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0)\n  const decimal = arr.reduce((acc, val) => acc + val / 2, 0)\n  return [...arr].sort((a, b) => {\n    if (a === b) return 0\n    if (a > b) return -1\n    if (a < b) return 1\n    return decimal\n  }).reverse()\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0)\n  const decimal = arr.reduce((acc, val) => acc + val / 2, 0)\n  return [...arr].sort((a, b) => {\n    if (a === b) return 0\n    if (a > b) return -1\n    if (a < b) return 1\n    return decimal\n  }).reverse()\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      res.push(s.split(n)[0]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWvows(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWvows(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWvows(\"simple white space\", 2) ==> []\n  selectWvows(\"Hello world\", 4) ==> [\"world\"]\n  selectWvows(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWvows = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      res.push(s.split(n)[1]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdcons(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWdcons(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWdcons(\"simple white space\", 2) ==> []\n  selectWdcons(\"Hello world\", 4) ==> [\"world\"]\n  selectWdcons(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWdcons = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      res.push(s.split(n)[2]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWvows(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWvows(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWvows(\"simple white space\", 2) ==> []\n  selectWvows(\"Hello world\", 4) ==> [\"world\"]\n  selectWvows(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWvows = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      res.push(s.split(n)[3]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdcons(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWdcons(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWdcons(\"simple white space\", 2) ==> []\n  selectWdcons(\"Hello world\", 4) ==> [\"world\"]\n  selectWdcons(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWdcons = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      res.push(s.split(n)[4]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWvows(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWvows(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWvows(\"simple white space\", 2) ==> []\n  selectWvows(\"Hello world\", 4) ==> [\"world\"]\n  selectWvows(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWvows = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      res.push(s.split(n)[5]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdcons(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWdcons(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWdcons(\"simple white space\", 2) ==> []\n  selectWdcons(\"Hello world\", 4) ==> [\"world\"]\n  selectWdcons(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWdcons = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      res.push(s.split(n)[6]);\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWvows(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWvows(\"Mary had a little lamb\", 3) ==> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountFromRight = vowelsCount - 1;\n  let vowelsCountFromLeft = vowelsCount - 1;\n  let vowelsCountFromRightAndLeft = vowelsCount - 2;\n  let vowelsCountFromLeftAndRight = vowelsCount - 2;\n  let vowelsCountFromRightAndLeftAndUpper = vowelsCount - 3;\n  let vowelsCountFromLeftAndRightAndUpper = vowelsCount - 3;\n  let vowelsCountFromRightAndLeftAndUpperAndLowers = vowelsCount - 4;\n  let vowelsCountFromLeftAndRightAndUpperAndLowers = vowelsCount - 4;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbers = vowelsCount - 5;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbers = vowelsCount - 5;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuation = vowelsCount - 6;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuation = vowelsCount - 6;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthers = vowelsCount - 7;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthers = vowelsCount - 7;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthers = vowelsCount - 8;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthers = vowelsCount - 8;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthers = vowelsCount - 9;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthers = vowelsCount - 9;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthers = vowelsCount - 10;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthers = vowelsCount - 10;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthers = vowelsCount - 11;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthers = vowelsCount - 11;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 12;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 12;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 13;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 13;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 14;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 14;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 15;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 15;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 16;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 16;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 17;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 17;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 18;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 18;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 19;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 19;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 20;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 20;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 21;\n  let vowelsCountFromLeftAndRightAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 21;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers = vowelsCount - 22;\n  let vowels", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      open++;\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      close++;\n      if (open > close) {\n        stack.push(lst[i]);\n      }\n      if (open === close) {\n        if (stack.length === 1) {\n          return 'Yes';\n        }\n        return 'No';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of characters you need to remove to make the string valid\n  according to some rules. Rules are given below:\n  1. Remove all the characters that are not alphanumeric or whitespace.\n  2. Remove all the characters that are not '(' or ')'.\n  3. Remove all the characters that are not '[' or ']'.\n  4. Remove all the characters that are not '{' or '}'.\n  5. Remove all the characters that are not '<' or '>'.\n  6. Remove all the characters that are not '(' or ')'.\n  7. Remove all the characters that are not '[' or ']'.\n  8. Remove all the characters that are not '{' or '}'.\n  9. Remove all the characters that are not '<' or '>'.\n  10. Remove all the characters that are not '(' or ')'.\n  11. Remove all the characters that are not '[' or ']'.\n  12. Remove all the characters that are not '{' or '}'.\n  13. Remove all the characters that are not '<' or '>'.\n  14. Remove all the characters that are not '(' or ')'.\n  15. Remove all the characters that are not '[' or ']'.\n  16. Remove all the characters that are not '{' or '}'.\n  17. Remove all the characters that are not '<' or '>'.\n  18. Remove all the characters that are not '(' or ')'.\n  19. Remove all the characters that are not '[' or ']'.\n  20. Remove all the characters that are not '{' or '}'.\n  21. Remove all the characters that are not '<' or '>'.\n  22. Remove all the characters that are not '(' or ')'.\n  23. Remove all the characters that are not '[' or ']'.\n  24. Remove all the characters that are not '{' or '}'.\n  25. Remove all the characters that are not '<' or '>'.\n  26. Remove all the characters that are not '(' or ')'.\n  27. Remove all the characters that are not '[' or ']'.\n  28. Remove all the characters that are not '{' or '}'.\n  29. Remove all the characters that are not '<' or '>'.\n  30. Remove all the characters that are not '(' or ')'.\n  31. Remove all the characters that are not '[' or ']'.\n  32. Remove all the characters that are not '{' or '}'.\n  33. Remove all the characters that are not '<' or '>'.\n  34. Remove all the characters that are not '(' or ')'.\n  35. Remove all the characters that are not '[' or ']'.\n  36. Remove all the characters that are not '{' or '}'.\n  37. Remove all the characters that are not '<' or '>'.\n  38. Remove all the characters that are not '(' or ')'.\n  39. Remove all the characters that are not '[' or ']'.\n  40. Remove all the characters that are not '{' or '}'.\n  41. Remove all the characters that are not '<' or '>'.\n  42. Remove all the characters that are not '(' or ')'.\n  43. Remove all the characters that are not '[' or ']'.\n  44. Remove all the characters that are not '{' or '}'.\n  45. Remove all the characters that are not '<' or '>'.\n  46. Remove all the characters that are not '(' or ')'.\n  47. Remove all the characters that are not '[' or ']'.\n  48. Remove all the characters that are not '{' or '}'.\n  49. Remove all the characters that are not '<' or '>'.\n  50. Remove all the characters that are not '(' or ')'.\n  51. Remove all the characters that are not '[' or ']'.\n  52. Remove all the characters that are not '{' or '}'.\n  53. Remove all the characters that are not '<' or '>'.\n  54. Remove all the characters that are not '(' or ')'.\n  55. Remove all the characters that are not '[' or ']'.\n  56. Remove all the characters that are not '{' or '}'.\n  57. Remove all the characters that are not '<' or '>'.\n  58. Remove all the characters that are not '(' or ')'.\n  59. Remove all the characters that are not '[' or ']'.\n  60. Remove all the characters that are not '{' or '}'.\n  61. Remove all the characters that are not '<' or '>'.\n  62. Remove all the characters that are not '(' or ')'.\n  63. Remove all the characters that are not '[' or ']'.\n  64. Remove all the characters that are not '{' or '}'.\n  65. Remove all the characters that are not '<' or '>'.\n  66. Remove all the characters that are not '(' or ')'.\n  67. Remove all the characters that are not '[' or ']'.\n  68. Remove all the characters that are not '{' or '}'.\n  69. Remove all the characters that are not '<' or '>'.\n  70. Remove all the characters that are not '(' or ')'.\n  71. Remove all the characters that are not '[' or ']'.\n  72. Remove all the characters that are not '{' or '}'.\n  73. Remove all the characters that are not '<' or '>'.\n  74. Remove all the characters that are not '(' or ')'.\n  75. Remove all the characters that are not '[' or ']'.\n  76. Remove all the characters that are not '{' or '}'.\n  77. Remove all the characters that are not '<' or '>'.\n  78. Remove all the characters that are not '(' or ')'.\n  79. Remove all the characters that are not '[' or ']'.\n  80. Remove all the characters that are not '{' or '}'.\n  81. Remove all the characters that are not '<' or '>'.\n  82. Remove all the characters that are not '(' or ')'.\n  83. Remove all the characters that are not '[' or ']'.\n  84. Remove all the characters that are not '{' or '}'.\n  85. Remove all the characters that are not '<' or '>'.\n  86. Remove all the characters that are not '(' or ')'.\n  87. Remove all the characters that are not '[' or ']'.\n  88. Remove all the characters that are not '{' or '}'.\n  89. Remove all the characters that are not '<' or '>'.\n  90. Remove all the characters that are not '(' or ')'.\n  91. Remove all the characters that are not '[' or ']'.\n  92. Remove all the characters that are not '{' or '}'.\n  93. ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n\n  return longest\n}\n\n/**\n * Return the first string that starts with the given prefix. Return null if the prefix is not found.\n * >>> first('abc', 'ab')\n  'a'\n  >>> first('abc', 'ac')\n  null\n  >>> first('abc', 'ab', 'ac')\n  'a'\n  */\nconst first = (strings,...prefixes) => {\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].startsWith(prefixes[j])) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Return the last string that ends with the given suffix. Return null if the suffix is not found.\n * >>> last('abc', 'ab')\n  'c'\n  >>> last('abc', 'ac')\n  null\n  >>> last('abc', 'ab', 'ac')\n  'c'\n  */\nconst last = (strings,...suffixes) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    for (let j = 0; j < suffixes.length; j++) {\n      if (strings[i].endsWith(suffixes[j])) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Return the string that contains the given substring.\n * >>> contains('abc', 'a')\n  'a'\n  >>> contains('abc', 'b')\n  'b'\n  >>> contains('abc', 'c')\n  'c'\n  >>> contains('abc', 'a', 'b')\n  'a'\n  >>> contains('abc', 'a', 'c')\n  'c'\n  >>> contains('abc', 'b', 'a')\n  'b'\n  >>> contains('abc', 'b', 'c')\n  'c'\n  >>> contains('abc', 'a', 'b', 'c')\n  'c'\n  */\nconst contains = (strings,...substrings) => {\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < substrings.length; j++) {\n      if (strings[i].includes(substrings[j])) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Return the string that contains the given substring at the given index.\n * >>> containsAtIndex('abc', 'a', 0)\n  'a'\n  >>> containsAtIndex('abc', 'a', 1)\n  'b'\n  >>> containsAtIndex('abc', 'a', 2)\n  'c'\n  >>> containsAtIndex('abc', 'a', 3)\n  null\n  >>> containsAtIndex('abc', 'a', 4)\n  null\n  */\nconst containsAtIndex = (strings,...substrings) => {\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < substrings.length; j++) {\n      if (strings[i].includes(substrings[j], i)) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Return the string that contains the given substring at the given index.\n * >>> containsAtIndex('abc', 'a', 0)\n  'a'\n  >>> containsAtIndex('abc', 'a', 1)\n  'b'\n  >>> containsAtIndex('abc', 'a', 2)\n  'c'\n  >>> containsAtIndex('abc', 'a', 3)\n  null\n  >>> containsAtIndex('abc', 'a', 4)\n  null\n  */\nconst containsAtIndex = (strings,...substrings) => {\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < substrings.length; j++) {\n      if (strings[i].includes(substrings[j], i)) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Return the string that contains the given substring at the given index.\n * >>> containsAtIndex('abc', 'a', 0)\n  'a'\n  >>> containsAtIndex('abc', 'a', 1)\n  'b'\n  >>> containsAtIndex('abc', 'a', 2)\n  'c'\n  >>> containsAtIndex('abc', 'a', 3)\n  null\n  >>> containsAtIndex('abc', 'a', 4)\n  null\n  */\nconst containsAtIndex = (strings,...substrings) => {\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < substrings.length; j++) {\n      if (strings[i].includes(substrings[j], i)) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Return the string that contains the given substring at the given index.\n * >>> containsAtIndex('abc', 'a', 0)\n  'a'\n  >>> containsAtIndex('abc', 'a', 1)\n  'b'\n  >>> containsAtIndex('abc', 'a', 2)\n  'c'\n  >>> containsAtIndex('abc', 'a', 3)\n  null\n  >>> containsAtIndex('abc', 'a', 4)\n  null\n  */\nconst containsAtIndex = (strings,...substrings) => {\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < substrings.length; j++) {\n      if (strings[i].includes(substrings[j], i)) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Return the string that contains the given substring at the given index.\n * >>> containsAtIndex('abc', 'a', 0)\n  'a'\n  >>> containsAtIndex('abc', 'a', 1)\n  'b'\n  >>> containsAtIndex('abc', 'a', 2)\n  'c'\n  >>> containsAtIndex('abc', 'a', 3)\n  null\n  >>> containsAtIndex('abc', 'a', 4)\n  null\n  */\nconst containsAtIndex = (strings,...substrings) => {\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < substrings.length; j++) {\n      if (strings[i].includes(substrings[j], i)) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Return the string that contains the given substring at the given index.\n * >>> containsAtIndex('abc', 'a', 0)\n  'a'\n  >>> containsAtIndex('abc', 'a', 1)\n  'b'\n  >>> containsAtIndex('abc', 'a', 2)\n  'c'\n  >>> containsAtIndex('abc', 'a', 3)\n  null\n  >>> containsAtIndex('abc', 'a', 4)\n  null\n  */\nconst containsAtIndex = (strings,...substrings) => {\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < substrings.length; j++) {\n      if (strings[i].includes(substrings[j], i)) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Return the string that contains the given substring at the given index.\n * >>> containsAtIndex('abc', 'a', 0)\n  'a'\n  >>> containsAtIndex('abc', 'a', 1)\n  'b'\n  >>> containsAtIndex('abc', 'a', 2)\n  'c'\n  >>> containsAtIndex('abc', 'a', 3)\n  null\n  >>> containsAtIndex('abc', 'a', 4)\n  null\n  */\nconst containsAtIndex = (strings,...substrings) => {\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < substrings.length; j++) {\n      if (strings[i].includes(substrings[j], i)) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Return the string that contains the given substring at the given index.\n * >>> containsAtIndex('abc', 'a', 0)\n  'a'\n  >>> containsAtIndex('abc', 'a', 1)\n  'b'\n  >>> containsAtIndex('abc', 'a', 2)\n  'c'\n  >>> containsAtIndex('abc', 'a', 3)\n  null\n  >>> containsAtIndex('abc', 'a', 4)\n  null\n  */\nconst containsAtIndex = (strings,...substrings) => {\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < substrings.length; j++) {\n      if (strings[i].includes(substrings[j], i)) {\n        return strings[i]\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let min = Number.MAX_SAFE_INTEGER;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\nexport { maxmium };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimium = (arr, k) => {\n  const result = [];\n  let min = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < k; i++) {\n    let max = Number.MAX_SAFE_INTEGER;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nexport { minimium };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst max = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let min = Number.MAX_SAFE_INTEGER;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nexport { max };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst min = (arr, k) => {\n  const result = [];\n  let min = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < k; i++) {\n    let max = Number.MAX_SAFE_INTEGER;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\nexport { min };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxIndex = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let min = Number.MAX_SAFE_INTEGER;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maxIndex };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minIndex = (arr, k) => {\n  const result = [];\n  let min = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < k; i++) {\n    let max = Number.MAX_SAFE_INTEGER;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\nexport { minIndex };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxIndexOf = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let min = Number.MAX_SAFE_INTEGER;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maxIndexOf };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the even elements from the original list.\n  \n\n  Examples\n  evens([1, 2, 3, 4]) ==> [2, 4]\n  evens([1, 2, 3]) ==> [2, 3]\n  evens([]) ==> []\n  */\nconst evens = (lst) => {\n  let evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the odd elements from the original list.\n  \n\n  Examples\n  odds([1, 2, 3, 4]) ==> [1, 3]\n  odds([1, 2, 3]) ==> [1, 3]\n  odds([]) ==> []\n  */\nconst odds = (lst) => {\n  let odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      odds.push(lst[i]);\n    }\n  }\n  return odds;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that occur more than once in the original list.\n  \n\n  Examples\n  unique([1, 2, 2, 3, 4, 4, 5]) ==> [1, 2, 3, 4, 5]\n  unique([1, 1, 2, 3, 4, 5]) ==> [1, 2]\n  unique([1, 1, 1, 2, 3, 4, 5]) ==> [1, 2]\n  unique([1, 1, 1, 2, 3, 4, 5]) ==> [1, 2]\n  unique([1, 1, 1, 2, 3, 4, 5]) ==> [1, 2]\n  unique([1, 1, 1, 2, 3, 4, 5]) ==> [1, 2]\n  unique([1, 1, 1, 2, 3, 4, 5]) ==> [1, 2]\n  */\nconst unique = (lst) => {\n  let unique = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (unique.indexOf(lst[i]) === -1) {\n      unique.push(lst[i]);\n    }\n  }\n  return unique;\n};\n\n/*Given a non-empty list of strings, return a list containing only the strings that begin with the letter 'a'.\n  \n\n  Examples\n  startsWithA([\"a\", \"b\", \"c\"]) ==> [\"a\"]\n  startsWithA([\"a\", \"b\", \"c\", \"d\"]) ==> [\"a\", \"b\", \"c\"]\n  startsWithA([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [\"a\", \"b\", \"c\", \"d\"]\n  startsWithA([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  startsWithA([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  startsWithA([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  */\nconst startsWithA = (lst) => {\n  let startsWithA = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].startsWith(\"a\")) {\n      startsWithA.push(lst[i]);\n    }\n  }\n  return startsWithA;\n};\n\n/*Given a non-empty list of strings, return a list containing only the strings that end with the letter 'e'.\n  \n\n  Examples\n  endsWithE([\"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  endsWithE([\"a\", \"b\", \"c\", \"d\"]) ==> [\"a\", \"b\", \"c\", \"d\"]\n  endsWithE([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  endsWithE([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  endsWithE([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n  endsWithE([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n  */\nconst endsWithE = (lst) => {\n  let endsWithE = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].endsWith(\"e\")) {\n      endsWithE.push(lst[i]);\n    }\n  }\n  return endsWithE;\n};\n\n/*Given a non-empty list of strings, return a list containing only the strings that contain the letter 'e'.\n  \n\n  Examples\n  containsE([\"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  containsE([\"a\", \"b\", \"c\", \"d\"]) ==> [\"a\", \"b\", \"c\", \"d\"]\n  containsE([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  containsE([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  containsE([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n  containsE([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n  */\nconst containsE = (lst) => {\n  let containsE = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(\"e\")) {\n      containsE.push(lst[i]);\n    }\n  }\n  return containsE;\n};\n\n/*Given a non-empty list of strings, return a list containing only the strings that contain the letter 'a'.\n  \n\n  Examples\n  containsA([\"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  containsA([\"a\", \"b\", \"c\", \"d\"]) ==> [\"a\", \"b\", \"c\", \"d\"]\n  containsA([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  containsA([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  containsA([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n  containsA([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n  */\nconst containsA = (lst) => {\n  let containsA = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(\"a\")) {\n      containsA.push(lst[i]);\n    }\n  }\n  return containsA;\n};\n\n/*Given a non-empty list of strings, return a list containing only the strings that contain the letter 'b'.\n  \n\n  Examples\n  containsB([\"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  containsB([\"a\", \"b\", \"c\", \"d\"]) ==> [\"a\", \"b\", \"c\", \"d\"]\n  containsB([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  containsB([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  containsB([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n  containsB([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n  */\nconst containsB = (lst) => {\n  let containsB = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(\"b\")) {\n      containsB.push(lst[i]);\n    }\n  }\n  return containsB;\n};\n\n/*Given a non-empty list of strings, return a list containing only the strings that contain the letter 'c'.\n  \n\n  Examples\n  containsC", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements with two digits from the\n  first k elements of arr. \n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9]\n      Output: [1,3,7,15,21,27,41,73,101]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addTwoDigits = (arr, k) => {\n  let sum = [];\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i] + 10);\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements with three digits from the\n  first k elements of arr. \n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9]\n      Output: [1,3,7,15,21,27,41,73,101]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addThreeDigits = (arr, k) => {\n  let sum = [];\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i] + 100);\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements with four digits from the\n  first k elements of arr. \n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9]\n      Output: [1,3,7,15,21,27,41,73,101]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFourDigits = (arr, k) => {\n  let sum = [];\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i] + 1000);\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements with five digits from the\n  first k elements of arr. \n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9]\n      Output: [1,3,7,15,21,27,41,73,101]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFiveDigits = (arr, k) => {\n  let sum = [];\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i] + 10000);\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements with six digits from the\n  first k elements of arr. \n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9]\n      Output: [1,3,7,15,21,27,41,73,101]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addSixDigits = (arr, k) => {\n  let sum = [];\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i] + 100000);\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements with seven digits from the\n  first k elements of arr. \n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9]\n      Output: [1,3,7,15,21,27,41,73,101]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addSevenDigits = (arr, k) => {\n  let sum = [];\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i] + 1000000);\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements with eight digits from the\n  first k elements of arr. \n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9]\n      Output: [1,3,7,15,21,27,41,73,101]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addEightDigits = (arr, k) => {\n  let sum = [];\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i] + 10000000);\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements with nine digits from the\n  first k elements of arr. \n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9]\n      Output: [1,3,7,15,21,27,41,73,101]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addNineDigits = (arr, k) => {\n  let sum = [];\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i] + 100000000);\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements with ten digits from the\n  first k elements of arr. \n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9]\n      Output: [1,3,7,15,21,27,41,73,101]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addTenDigits = (arr, k) => {\n  let sum = [];\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i] + 1000000000);\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements with eleven digits from the\n  first k elements of arr. \n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9]\n      Output: [1,3,7,15,21,27,41,73,101]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElevenDigits = (arr, k) => {\n  let sum = [];\n  for (let i = 0; i < k; i++) {\n    sum.push(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    sum.push(arr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let currentNum = 1;\n  let currentNum2 = 1;\n  let currentNum3 = 1;\n  while (currentNum <= n) {\n    if (currentNum % 2 === 0) {\n      currentNum2 = currentNum;\n      currentNum3 = 1;\n    } else {\n      currentNum2 = currentNum * 3 + 1;\n      currentNum3 = currentNum * 3 + 2;\n    }\n    list.push(currentNum2);\n    list.push(currentNum3);\n    currentNum = currentNum2;\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let list = [];\n  let currentNum = 1;\n  let currentNum2 = 1;\n  let currentNum3 = 1;\n  while (currentNum <= n) {\n    if (currentNum % 2 === 0) {\n      currentNum2 = currentNum;\n      currentNum3 = 1;\n    } else {\n      currentNum2 = currentNum * 3 + 1;\n      currentNum3 = currentNum * 3 + 2;\n    }\n    list.push(currentNum2);\n    list.push(currentNum3);\n    currentNum = currentNum2;\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers from 1 to n in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the numbers are only 1, and 5.\n  */\nconst getCollatz = (n) => {\n  let list = [];\n  let currentNum = 1;\n  let currentNum2 = 1;\n  let currentNum3 = 1;\n  while (currentNum <= n) {\n    if (currentNum % 2 === 0) {\n      currentNum2 = currentNum;\n      currentNum3 = 1;\n    } else {\n      currentNum2 = currentNum * 3 + 1;\n      currentNum3 = currentNum * 3 + 2;\n    }\n    list.push(currentNum2);\n    list.push(currentNum3);\n    currentNum = currentNum2;\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers from 1 to n in reverse collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getReverseCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the numbers are only 1, and 5.\n  */\nconst getReverseCollatz = (n) => {\n  let list = [];\n  let currentNum = 1;\n  let currentNum2 = 1;\n  let currentNum3 = 1;\n  while (currentNum <= n) {\n    if (currentNum % 2 === 0) {\n      currentNum2 = currentNum;\n      currentNum3 = 1;\n    } else {\n      currentNum2 = currentNum * 3 + 1;\n      currentNum3 = currentNum * 3 + 2;\n    }\n    list.push(currentNum2);\n    list.push(currentNum3);\n    currentNum = currentNum2;\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers from 1 to n in reverse collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getReverseCollatzDesc(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the numbers are only 1, and 5.\n  */\nconst getReverseCollatzDesc = (n) => {\n  let list = [];\n  let currentNum = 1;\n  let currentNum2 = 1;\n  let currentNum3 = 1;\n  while (currentNum <= n) {\n    if (currentNum % 2 === 0) {\n      currentNum2 = currentNum;\n      currentNum3 = 1;\n    } else {\n      currentNum2 = currentNum * 3 + 1;\n      currentNum3 = currentNum * 3 + 2;\n    }\n    list.push(currentNum2);\n    list.push(currentNum3);\n    currentNum = currentNum2;\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers from 1 to n in reverse collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayValid = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 31 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 30;\n  const dateArrayValid2 = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 31 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 29;\n  const dateArrayValid3 = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 12 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 29;\n  const dateArrayValid4 = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 12 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 30;\n  return dateArrayValid;\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate2 = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayValid = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 31 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 30;\n  const dateArrayValid2 = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 31 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 29;\n  const dateArrayValid3 = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 12 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 29;\n  const dateArrayValid4 = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 12 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 30;\n  return dateArrayValid2;\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate3 = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayValid = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 31 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 30;\n  const dateArrayValid2 = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 31 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 29;\n  const dateArrayValid3 = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 12 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 29;\n  const dateArrayValid4 = dateArrayLength >= 1 && dateArrayLength <= 3 && dateArray[0] >= 1 && dateArray[0] <= 12 && dateArray[1] >= 1 && dateArray[1] <= 12 && dateArray[2] >= 1 && dateArray[2] <= 31 && dateArray[3] >= 1 && dateArray[3] <= 30;\n  return dateArrayValid3;\n};\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsComma = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsCommaSpace = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsCommaSpaceComma = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsCommaSpaceCommaSpace = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsCommaSpaceCommaSpaceComma = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsCommaSpaceCommaSpaceCommaSpace = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsCommaSpaceCommaSpaceCommaSpaceComma = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsCommaSpaceCommaSpaceCommaSpaceCommaSpace = (txt) => {\n  const words = txt.trim().split(/\\s*,\\s*/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDescending = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSortedOrdered([5]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrdered([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrdered([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrdered([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrdered([1, 2, 2, 2, 3, 4]) ➞ true\n  isSortedOrdered([1, 2, 2, 3, 3, 3]) ➞ false\n  isSortedOrdered([1, 2, 2, 2, 2, 2]) ➞ false\n  */\nconst isSortedOrdered = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSortedOrdered([5]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrdered([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrdered([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrdered([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrdered([1, 2, 2, 2, 3, 4]) ➞ true\n  isSortedOrdered([1, 2, 2, 3, 3, 3]) ➞ false\n  isSortedOrdered([1, 2, 2, 2, 2, 2]) ➞ false\n  */\nconst isSortedOrderedDescending = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrdered([5]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrdered([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrdered([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrdered([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrdered([1, 2, 2, 2, 3, 4]) ➞ true\n  isSortedOrdered([1, 2, 2, 3, 3, 3]) ➞ false\n  isSortedOrdered([1, 2, 2, 2, 2, 2]) ➞ false\n  */\nconst isSortedOrderedDescending = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrdered([5]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrdered([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrdered([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrdered([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrdered([1, 2, 2, 2, 3, 4]) ➞ true\n  isSortedOrdered([1, 2, 2, 3, 3, 3]) ➞ false\n  isSortedOrdered([1, 2, 2, 2, 2, 2]) ➞ false\n  */\nconst isSortedOrdered = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrdered([5]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrdered([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrdered([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrdered([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrdered([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrdered([1, 2, 2, 2, 3, 4]) ➞ true\n  isSortedOrdered([1, 2, 2, 3, 3, 3]) ➞ false\n  isSortedOrdered([1, 2, 2, 2, 2, 2]) ➞ false\n  */\nconst isSortedOrdered = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return false\n  }\n  if (interval1.end < interval2.start) {\n    return false\n  }\n  if (interval1.start === interval1.end) {\n    return true\n  }\n  if (interval2.start === interval2.end) {\n    return true\n  }\n  if (interval1.start < interval2.start) {\n    return false\n  }\n  if (interval1.end > interval2.end) {\n    return false\n  }\n  if (interval1.start === interval2.start) {\n    return true\n  }\n  if (interval1.end === interval2.end) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.start) {\n    return true\n  }\n  if (interval1.end === interval2.end) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval1.end > interval2.start) {\n    return false\n  }\n  if (interval1.start === interval2.end) {\n    return true\n  }\n  if (interval1.end === interval2.start) {\n    return true\n  }\n  if (interval1.start < interval2.end) {\n    return false\n  }\n  if (interval", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill(0);\n  queue[0] = 1;\n  while (queue.length > 0) {\n    const curr = queue.shift();\n    if (curr === k) {\n      result.push(grid[curr][0]);\n      visited[curr] = true;\n    } else {\n      for (let i = 0; i < N; i++) {\n        if (visited[i]) {\n          continue;\n        }\n        const next = grid[curr][i];\n        if (next === -1) {\n          continue;\n        }\n        queue[i] = next;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a 2D grid map of characters, a starting position index (i, j), and a \n  target position index (j, k), count and print the total number of possible \n  shortest paths from the starting position to the target position.\n\n  A path is considered as any sequence of characters starting with a \n  character from 1 to N, where N is the size of the grid map.\n\n  Example:\n\n      Input: grid = [\n          [ \"E\",\"X\",\"E\",\"I\" ],\n          [ \"S\",\"T\",\"E\",\"N\" ],\n          [ \"E\",\"X\",\"E\",\"I\" ]\n        ], start = [1,2], target = [2,0]\n      Output: 5\n      Explanation: One possible path is \"SXTXXE\".\n*/\nconst shortestPath = (grid, start, target) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill(0);\n  queue[0] = 1;\n  while (queue.length > 0) {\n    const curr = queue.shift();\n    if (curr === target) {\n      result.push(curr);\n      visited[curr] = true;\n    } else {\n      for (let i = 0; i < N; i++) {\n        if (visited[i]) {\n          continue;\n        }\n        const next = grid[curr][i];\n        if (next === -1) {\n          continue;\n        }\n        queue[i] = next;\n      }\n    }\n  }\n  return result.length;\n};\n\n/*\n  Given a 2D grid map of characters, a starting position index (i, j), and a \n  target position index (j, k), count and print the total number of possible \n  shortest paths from the starting position to the target position.\n\n  A path is considered as any sequence of characters starting with a \n  character from 1 to N, where N is the size of the grid map.\n\n  Example:\n\n      Input: grid = [\n          [ \"E\",\"X\",\"E\",\"I\" ],\n          [ \"S\",\"T\",\"E\",\"N\" ],\n          [ \"E\",\"X\",\"E\",\"I\" ]\n        ], start = [1,2], target = [2,0]\n      Output: 5\n      Explanation: One possible path is \"SXTXXE\".\n*/\nconst shortestPath = (grid, start, target) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill(0);\n  queue[0] = 1;\n  while (queue.length > 0) {\n    const curr = queue.shift();\n    if (curr === target) {\n      result.push(curr);\n      visited[curr] = true;\n    } else {\n      for (let i = 0; i < N; i++) {\n        if (visited[i]) {\n          continue;\n        }\n        const next = grid[curr][i];\n        if (next === -1) {\n          continue;\n        }\n        queue[i] = next;\n      }\n    }\n  }\n  return result.length;\n};\n\n/*\n  Given a 2D grid map of characters, a starting position index (i, j), and a \n  target position index (j, k), count and print the total number of possible \n  shortest paths from the starting position to the target position.\n\n  A path is considered as any sequence of characters starting with a \n  character from 1 to N, where N is the size of the grid map.\n\n  Example:\n\n      Input: grid = [\n          [ \"E\",\"X\",\"E\",\"I\" ],\n          [ \"S\",\"T\",\"E\",\"N\" ],\n          [ \"E\",\"X\",\"E\",\"I\" ]\n        ], start = [1,2], target = [2,0]\n      Output: 5\n      Explanation: One possible path is \"SXTXXE\".\n*/\nconst shortestPath = (grid, start, target) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill(0);\n  queue[0] = 1;\n  while (queue.length > 0) {\n    const curr = queue.shift();\n    if (curr === target) {\n      result.push(curr);\n      visited[curr] = true;\n    } else {\n      for (let i = 0; i < N; i++) {\n        if (visited[i]) {\n          continue;\n        }\n        const next = grid[curr][i];\n        if (next === -1) {\n          continue;\n        }\n        queue[i] = next;\n      }\n    }\n  }\n  return result.length;\n};\n\n/*\n  Given a 2D grid map of characters, a starting position index (i, j), and a \n  target position index (j, k), count and print the total number of possible \n  shortest paths from the starting position to the target position.\n\n  A path is considered as any sequence of characters starting with a \n  character from 1 to N, where N is the size of the grid map.\n\n  Example:\n\n      Input: grid = [\n          [ \"E\",\"X\",\"E\",\"I\" ],\n          [ \"S\",\"T\",\"E\",\"N\" ],\n          [ \"E\",\"X\",\"E\",\"I\" ]\n        ], start = [1,2], target = [2,0]\n      Output: 5\n      Explanation: One possible path is \"SXTXXE\".\n*/\nconst shortestPath = (grid, start, target) => {\n  const N = grid.length;\n  const result = [];\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill(0);\n  queue[0] = 1;\n  while (queue.length > 0) {\n    const curr = queue.shift();\n    if (curr === target) {\n      result.push(curr);\n      visited[curr] = true;\n    } else {\n      for (let i = 0; i < N; i++) {\n        if (visited[i]) {\n          continue;\n        }\n        const next = grid[curr][i];\n        if (next === -1) {\n          continue;\n        }\n        queue[i] = next;\n      }\n    }\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  let r = 0\n  while (a % b!= 0) {\n    a = a * b\n    r++\n  }\n  return r\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)\n  60\n  */\nconst leastCommonMultiple = (a, b) => {\n  let r = 1\n  while (a % b!= 0) {\n    a = a * b\n    r *= b\n  }\n  return a\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(6, 5)\n  30\n  >>> leastCommonMultiple(6, 6)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tir(n - 1) + tir(n - 2) + tir(n + 1));\n  } else {\n    arr.push(tir(n - 1) + tir(n - 2) + tir(n + 1) + tir(n + 2));\n  }\n  return arr;\n};\n\n/*\n  You are given an array of integers and you have to return a new array with the \n  same elements as the given array except that every other element is replaced \n  by \"X\".\n  Examples:\n  arr = [1, 2, 3, 4]\n  arr2 = [X, 2, 3, 4]\n  arr3 = [X, X, X, 4]\n  arr4 = [X, X, X, X, X, 4]\n  arrpassed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      product *= 2;\n    }\n    n /= 2;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2Sum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2Sum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2SumPow2 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2SumPow2Sum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2SumPow2SumPow2 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2SumPow2SumPow2Sum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2SumPow2SumPow2SumPow2 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2SumPow2SumPow2SumPow2Sum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2SumPow2SumPow2SumPow2SumPow2 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2SumPow2SumPow2SumPow2SumPow2Sum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      sum += n * 2;\n    }\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the power of 2.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 14\n  */\nconst digitSumPow2SumPow2SumPow2SumPow2SumPow2SumPow2Sum = (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const openingBrackets = string.match(/\\[/g) || [];\n  const closingBrackets = string.match(/\\]/g) || [];\n  return openingBrackets.length >= closingBrackets.length;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested2('[[]]') ➞ true\n  isNested2('[]]]]]]][[[[[]') ➞ false\n  isNested2('[][]') ➞ false\n  isNested2('[]') ➞ false\n  isNested2('[[][]]') ➞ true\n  isNested2('[[]][[') ➞ true\n  */\nconst isNested2 = (string) => {\n  const openingBrackets = string.match(/\\[/g) || [];\n  const closingBrackets = string.match(/\\]/g) || [];\n  return openingBrackets.length >= closingBrackets.length && openingBrackets.every((bracket) => {\n    return closingBrackets.includes(bracket);\n  });\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested3('[[]]') ➞ true\n  isNested3('[]]]]]]][[[[[]') ➞ false\n  isNested3('[][]') ➞ false\n  isNested3('[]') ➞ false\n  isNested3('[[][]]') ➞ true\n  isNested3('[[]][[') ➞ true\n  */\nconst isNested3 = (string) => {\n  const openingBrackets = string.match(/\\[/g) || [];\n  const closingBrackets = string.match(/\\]/g) || [];\n  return openingBrackets.length >= closingBrackets.length && openingBrackets.every((bracket) => {\n    return closingBrackets.includes(bracket);\n  });\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested4('[[]]') ➞ true\n  isNested4('[]]]]]]][[[[[]') ➞ false\n  isNested4('[][]') ➞ false\n  isNested4('[]') ➞ false\n  isNested4('[[][]]') ➞ true\n  isNested4('[[]][[') ➞ true\n  */\nconst isNested4 = (string) => {\n  const openingBrackets = string.match(/\\[/g) || [];\n  const closingBrackets = string.match(/\\]/g) || [];\n  return openingBrackets.length >= closingBrackets.length && openingBrackets.every((bracket) => {\n    return closingBrackets.includes(bracket);\n  });\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested5('[[]]') ➞ true\n  isNested5('[]]]]]]][[[[[]') ➞ false\n  isNested5('[][]') ➞ false\n  isNested5('[]') ➞ false\n  isNested5('[[][]]') ➞ true\n  isNested5('[[]][[') ➞ true\n  */\nconst isNested5 = (string) => {\n  const openingBrackets = string.match(/\\[/g) || [];\n  const closingBrackets = string.match(/\\]/g) || [];\n  return openingBrackets.length >= closingBrackets.length && openingBrackets.every((bracket) => {\n    return closingBrackets.includes(bracket);\n  });\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested6('[[]]') ➞ true\n  isNested6('[]]]]]]][[[[[]') ➞ false\n  isNested6('[][]') ➞ false\n  isNested6('[]') ➞ false\n  isNested6('[[][]]') ➞ true\n  isNested6('[[]][[') ➞ true\n  */\nconst isNested6 = (string) => {\n  const openingBrackets = string.match(/\\[/g) || [];\n  const closingBrackets = string.match(/\\]/g) || [];\n  return openingBrackets.length >= closingBrackets.length && openingBrackets.every((bracket) => {\n    return closingBrackets.includes(bracket);\n  });\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested7('[[]]') ➞ true\n  isNested7('[]]]]]]][[[[[]') ➞ false\n  isNested7('[][]') ➞ false\n  isNested7('[]') ➞ false\n  isNested7('[[][]]') ➞ true\n  isNested7('[[]][[') ➞ true\n  */\nconst isNested7 = (string) => {\n  const openingBrackets = string.match(/\\[/g) || [];\n  const closingBrackets = string.match(/\\]/g) || [];\n  return openingBrackets.length >= closingBrackets.length && openingBrackets.every((bracket) => {\n    return closingBrackets.includes(bracket);\n  });\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested8('[[]]') ➞ true\n  isNested8('[]]]]]]][[[[[]') ➞ false\n  isNested8('[][]') ➞ false\n  isNested8('[]') ➞ false\n  isNested8('[[][]]') ➞ true\n  isNested8('[[]][[') ➞ true\n  */\nconst isNested8 = (string) => {\n  const openingBrackets = string.match(/\\[/g) || [];\n  const closingBrackets = string.match(/\\]/g) || [];\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of all numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 21\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 153\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be -6\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 153\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be -6\n  */\nconst productSquare = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 153\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be -6\n  */\nconst productCube = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 153\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be -6\n  */\nconst productCube = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 153\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be -6\n  */\nconst productCube = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 153\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be -6\n  */\nconst productCube = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 153\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be -6\n  */\nconst productCube = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 153\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be -6\n  */\nconst productCube = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 153\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be -6\n  */\nconst productCube = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/[a-z]/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\d/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation mark and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/[!,.?]/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\w/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\w/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\w/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\w/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/\\w/);\n  return!isLastCharALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") �", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[i - 1]) {\n      maxIndex = i;\n    } else {\n      break;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      minIndex = i;\n    } else {\n      break;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i])!== i) {\n      unique = false;\n      break;\n    }\n  }\n  return unique;\n};\n\n/*Create a function which returns true if the given array contains no duplicate\n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = false\n  canArrange([1,2,3]) = true\n  */\nconst canArrange = (arr) => {\n  let unique = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestLargestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestLargestIntgeers([]) == (null, null)\n  lagrestLargestIntgeers([0]) == (null, null)\n  */\nconst lagrestLargestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] > smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] < largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestLargestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestLargestIntgeers([]) == (null, null)\n  lagrestLargestIntgeers([0]) == (null, null)\n  */\nconst lagrestLargestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] > smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] < largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestLargestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestLargestIntgeers([]) == (null, null)\n  lagrestLargestIntgeers([0]) == (null, null)\n  */\nconst lagrestLargestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] > smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] < largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestLargestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestLargestIntgeers([]) == (null, null)\n  lagrestLargestIntgeers([0]) == (null, null)\n  */\nconst lagrestLargestIntgeers = (lst) => {\n  let smallest = null;\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest == null || lst[i] > smallest) {\n      smallest = lst[i];\n    }\n    if (largest == null || lst[i] < largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, null)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrest", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \".\") return b\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isEqualToSumPositive(4) == false\n  isEqualToSumPositive(6) == false\n  isEqualToSumPositive(8) == true\n  */\nconst isEqualToSumPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isEqualToSumPositive(4) == false\n  isEqualToSumPositive(6) == false\n  isEqualToSumPositive(8) == true\n  */\nconst isEqualToSumPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSumNegative(4) == false\n  isEqualToSumNegative(6) == false\n  isEqualToSumNegative(8) == true\n  */\nconst isEqualToSumNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial2 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial3 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial4 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial5 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial6 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial7 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial8 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial9 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial10 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial11 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial12 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial13 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial14 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial15 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial16 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial17 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial18 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial19 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial20 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial21 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= specialFactorial(i);\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number\n  using the Brazilian factorial method\n*/\nconst brazilianFactorial22 = (n) => {\n  let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentPrefix) {\n      prefixes.push(currentPrefix);\n    } else {\n      currentPrefix = string[i];\n      prefixes.push(currentPrefix);\n    }\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = string[i];\n      suffixes.push(currentSuffix);\n    }\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringsWithPrefix = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  let currentPrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else if (string[i] === currentPrefix) {\n      substrings.push(currentSubstring);\n    } else {\n      currentPrefix = string[i];\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringsWithSuffix = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  let currentSuffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else if (string[i] === currentSuffix) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSuffix = string[i];\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefixAndSuffix('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstringsWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  let currentPrefix = '';\n  let currentSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else if (string[i] === currentPrefix) {\n      substrings.push(currentSubstring);\n    } else if (string[i] === currentSuffix) {\n      substrings.push(currentSubstring);\n    } else {\n      currentPrefix = string[i];\n      currentSuffix = string[i];\n      currentSubstring = string[i];\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefixAndSuffixAndRepetitions('abc')\n  ['', 'a', 'ab', 'abc', 'abcab', 'abcabc', 'abcabcab', 'abcabcabc', 'abcabcabcab', 'abcabcabcabc', 'abcabcabcabcab', 'abcabcabcabcabc', 'abcabcabcabcabcab', 'abcabcabcabcabcabc', 'abcabcabcabcabcabcab', 'abcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab', 'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed\nconst reverseString = (text) => {\n  return text.split(\"\").reverse().join(\"\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirst = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return a new string with all the \n// characters in it reversed, except for the first \n// character\nconst reverseStringExceptFirstAndSpaces = (text) => {\n  return text.split(\"\").reverse().join(\"\").replace(/^./, \"\").replace(/\\s/g, \"-\");\n};\n\n// Given a string, return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.substring(0, 3);\n  const file_name = file_name.substring(1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.substring(0, 1);\n  const file", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n// TESTS\n\n// Test 1\nconsole.log(sumSquares([1,2,3]));\n// Test 2\nconsole.log(sumSquares([]));\n// Test 3\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n// Test 4\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10]));\n// Test 5\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis doesn't work if there are negative numbers in the list\n<|/ c |>\n<| c |>\nIt does work if there are negative numbers in the list. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work if there are negative numbers in the list. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work if there are negative numbers in the list. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work if there are negative numbers in the list. Try it yourself.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sumSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += arr[i] * arr[i];\n    } else if (i % 3!== 0) {\n      sum += arr[i] * arr[i];\n    } else if (i % 4!== 0) {\n      sum += arr[i] * arr[i];\n    } else {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10]));\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis doesn't work if there are negative numbers in the list\n<|/ c |>\n<| c |>\nIt does work if there are negative numbers in the list. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work if there are negative numbers in the list. Try it yourself.\n<|/ c |>\n<|", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  let result = '';\n  for (let i = 0; i < sentence.length; i++) {\n    const char = sentence[i];\n    if (char ==='') {\n      result +='';\n    } else {\n      const isPrime = true;\n      for (let j = 2; j < i; j++) {\n        if (i % j === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        result += char;\n      }\n    }\n  }\n  return result;\n};\n\nexport { wrodsInSentenec,\n  wrodsInSentenec2,\n  wrodsInSentenec3,\n  wrodsInSentenec4,\n  wrodsInSentenec5,\n  wrodsInSentenec6,\n  wrodsInSentenec7,\n  wrodsInSentenec8,\n  wrodsInSentenec9,\n  wrodsInSentenec10,\n  wrodsInSentenec11,\n  wrodsInSentenec12,\n  wrodsInSentenec13,\n  wrodsInSentenec14,\n  wrodsInSentenec15,\n  wrodsInSentenec16,\n  wrodsInSentenec17,\n  wrodsInSentenec18,\n  wrodsInSentenec19,\n  wrodsInSentenec20,\n  wrodsInSentenec21,\n  wrodsInSentenec22,\n  wrodsInSentenec23,\n  wrodsInSentenec24,\n  wrodsInSentenec25,\n  wrodsInSentenec26,\n  wrodsInSentenec27,\n  wrodsInSentenec28,\n  wrodsInSentenec29,\n  wrodsInSentenec30,\n  wrodsInSentenec31,\n  wrodsInSentenec32,\n  wrodsInSentenec33,\n  wrodsInSentenec34,\n  wrodsInSentenec35,\n  wrodsInSentenec36,\n  wrodsInSentenec37,\n  wrodsInSentenec38,\n  wrodsInSentenec39,\n  wrodsInSentenec40,\n  wrodsInSentenec41,\n  wrodsInSentenec42,\n  wrodsInSentenec43,\n  wrodsInSentenec44,\n  wrodsInSentenec45,\n  wrodsInSentenec46,\n  wrodsInSentenec47,\n  wrodsInSentenec48,\n  wrodsInSentenec49,\n  wrodsInSentenec50,\n  wrodsInSentenec51,\n  wrodsInSentenec52,\n  wrodsInSentenec53,\n  wrodsInSentenec54,\n  wrodsInSentenec55,\n  wrodsInSentenec56,\n  wrodsInSentenec57,\n  wrodsInSentenec58,\n  wrodsInSentenec59,\n  wrodsInSentenec60,\n  wrodsInSentenec61,\n  wrodsInSentenec62,\n  wrodsInSentenec63,\n  wrodsInSentenec64,\n  wrodsInSentenec65,\n  wrodsInSentenec66,\n  wrodsInSentenec67,\n  wrodsInSentenec68,\n  wrodsInSentenec69,\n  wrodsInSentenec70,\n  wrodsInSentenec71,\n  wrodsInSentenec72,\n  wrodsInSentenec73,\n  wrodsInSentenec74,\n  wrodsInSentenec75,\n  wrodsInSentenec76,\n  wrodsInSentenec77,\n  wrodsInSentenec78,\n  wrodsInSentenec79,\n  wrodsInSentenec80,\n  wrodsInSentenec81,\n  wrodsInSentenec82,\n  wrodsInSentenec83,\n  wrodsInSentenec84,\n  wrodsInSentenec85,\n  wrodsInSentenec86,\n  wrodsInSentenec87,\n  wrodsInSentenec88,\n  wrodsInSentenec89,\n  wrodsInSentenec90,\n  wrodsInSentenec91,\n  wrodsInSentenec92,\n  wrodsInSentenec93,\n  wrodsInSentenec94,\n  wrodsInSentenec95,\n  wrodsInSentenec96,\n  wrodsInSentenec97,\n  wrodsInSentenec98,\n  wrodsInSentenec99,\n  wrodsInSentenec100,\n  wrodsInSentenec101,\n  wrodsInSentenec102,\n  wrodsInSentenec103,\n  wrodsInSentenec104,\n  wrodsInSentenec105,\n  wrodsInSentenec106,\n  wrodsInSentenec107,\n  wrodsInSentenec108,\n  wrodsInSentenec109,\n  wrodsInSentenec110,\n  wrodsInSentenec111,\n  wrodsInSentenec112,\n  wrodsInSentenec113,\n  wrodsInSentenec114,\n  wrodsInSentenec115,\n  wrodsInSentenec116,\n  wrodsInSentenec117,\n  wrodsInSentenec118,\n  wrodsInSentenec119,\n  wrodsInSentenec120,\n  wrodsInSentenec121,\n  wrodsInSentenec122,\n  wrodsInSentenec123,\n  wrodsInSentenec124,\n  wro", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "<|endoftext|>/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d => d.reduce((a, b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n  order.sort((a, b) => a[0] - b[0]);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const [s, i] = order[i];\n    result.push(nums[i]);\n    nums[i] = nums[s];\n    nums[s] = i;\n  }\n  return result;\n};\n\n/*\n  Write a function which returns the first number of the given\n  list which sum is equal to the given number.\n\n  For example:\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -30) == -10\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -40) == -20\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -50) == -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -60) == -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -70) == -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -80) == -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -90) == -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -100) == -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -110) == -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -120) == -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -130) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -140) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -150) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -160) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -170) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -180) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -190) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -200) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -210) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -220) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -230) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -240) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -250) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -260) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -270) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -280) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -290) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -300) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -310) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -320) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -330) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -340) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -350) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -360) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -370) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -380) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -390) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -400) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -410) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -420) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -430) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -440) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -450) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -460) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -470) === -1\n  >>> firstNumberOf([-1, -10, -20, -30, -40, -10, -20, -30, -40], -480) === -1\n  >>> firstNumberOf([-1, -10, -20, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    } else if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -56\n  specialFilter([33, -2, -3, 45, 21, 109]) => -26\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the numbers in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -56\n  specialFilter([33, -2, -3, 45, 21, 109]) => -26\n  */\nconst specialFilter = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -15\n  specialFilter([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst specialFilter = (nums) => {\n  let largest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n    }\n  }\n  return largest;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -15\n  specialFilter([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialFilter = (nums) => {\n  let smallest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < smallest) {\n      smallest = nums[i];\n    }\n  }\n  return smallest;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -56\n  specialFilter([33, -2, -3, 45, 21, 109]) => -26\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the numbers in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -56\n  specialFilter([33, -2, -3, 45, 21, 109]) => -26\n  */\nconst specialFilter = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -15\n  specialFilter([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst specialFilter = (nums) => {\n  let largest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n    }\n  }\n  return largest;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -15\n  specialFilter([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialFilter = (nums) => {\n  let smallest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < smallest) {\n      smallest = nums[i];\n    }\n  }\n  return smallest;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -56\n  specialFilter([33, -2, -3, 45, 21, 109]) => -26\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the numbers in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -56\n  specialFilter([33, -2, -3, 45, 21, 109]) => -26\n  */\nconst specialFilter = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -15\n  specialFilter([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialFilter = (nums) => {\n  let largest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n    }\n  }\n  return largest;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  specialFilter([15, -73, 14, -15]) => -15\n  specialFilter([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialFilter = (nums) => {\n  let smallest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < smallest) {\n      smallest = nums[i];\n    }\n  }\n  return smallest;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array.\n  For example:\n  special", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && a[j] > a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) where 0 <= a < b < c < nums.length such that a^2 + b^2 = c^2.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      There are 3 triples (1, 0, 1), (0, 1, 3), (0, 2, 5).\n  */\nconst getTriplets = (nums) => {\n  let a = new Array(nums.length).fill(0);\n  for (let i = 1; i <= nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      for (let k = j + 1; k <= nums.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && a[j] > a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) where 0 <= a < b < c < nums.length such that a^2 + b^2 = c^2 \n  and a^2 + b^2 = c^2 mod 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      There are 3 triples (1, 0, 1), (0, 1, 3), (0, 2, 5).\n  */\nconst getTriplets = (nums) => {\n  let a = new Array(nums.length).fill(0);\n  for (let i = 1; i <= nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      for (let k = j + 1; k <= nums.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && a[j] > a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) where 0 <= a < b < c < nums.length such that a^2 + b^2 = c^2 \n  and a^2 + b^2 = c^2 mod 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      There are 3 triples (1, 0, 1), (0, 1, 3), (0, 2, 5).\n  */\nconst getTriplets = (nums) => {\n  let a = new Array(nums.length).fill(0);\n  for (let i = 1; i <= nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      for (let k = j + 1; k <= nums.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && a[j] > a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) where 0 <= a < b < c < nums.length such that a^2 + b^2 = c^2 \n  and a^2 + b^2 = c^2 mod 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      There are 3 triples (1, 0, 1), (0, 1, 3), (0, 2, 5).\n  */\nconst getTriplets = (nums) => {\n  let a = new Array(nums.length).fill(0);\n  for (let i = 1; i <= nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      for (let k = j + 1; k <= nums.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && a[j] > a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) where 0 <= a < b < c < nums.length such that a^2 + b^2 = c^2 \n  and a^2 + b^2 = c^2 mod 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      There are 3 triples (1, 0, 1), (0, 1, 3), (0, 2, 5).\n  */\nconst getTriplets = (nums) => {\n  let a = new Array(nums.length).fill(0);\n  for (let i = 1; i <= nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      for (let k = j + 1; k <= nums.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && a[j] > a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) where 0 <= a < b < c < nums.length such that a^2 + b^2 = c^2 \n  and a^2 + b^2 = c^2 mod 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      There are 3 triples (1, 0, 1), (0, 1, 3), (0, 2, 5).\n  */\nconst getTriplets = (nums) => {\n  let a = new Array(nums.length).fill(0);\n  for (let i = 1; i <= nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      for (let k = j + 1; k <= nums.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && a[j] > a[k]) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = a[i];\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  You are given an integer array nums. Your task is to find the number of triplets \n  (a, b, c) where 0 <= a < b < c < nums.length such that a^2 + b^2 = c^2 \n  and a^2 + b^2 = c^2 mod 3.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 3\n      Explanation: \n      There are 3 triples (1, 0, 1), (0, 1, 3), (0, 2, 5).\n  */\nconst getTriplets = (nums) => {\n  let a = new Array(num", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => [planet, planet]);\n  orbits.forEach((orbit) => {\n    if (planet1 === orbit[1] && planet2 === orbit[0]) {\n      return;\n    }\n    if (planet1 === orbit[0] && planet2 === orbit[1]) {\n      return;\n    }\n    if (planet1 === orbit[0]) {\n      orbits.forEach((orbit2) => {\n        if (planet2 === orbit2[0]) {\n          orbits.forEach((orbit3) => {\n            if (planet1 === orbit3[0]) {\n              orbits.forEach((orbit4) => {\n                if (planet2 === orbit4[0]) {\n                  orbits.forEach((orbit5) => {\n                    if (planet1 === orbit5[0]) {\n                      orbits.forEach((orbit6) => {\n                        if (planet2 === orbit6[0]) {\n                          orbits.forEach((orbit7) => {\n                            if (planet1 === orbit7[0]) {\n                              orbits.forEach((orbit8) => {\n                                if (planet2 === orbit8[0]) {\n                                  orbits.forEach((orbit9) => {\n                                    if (planet1 === orbit9[0]) {\n                                      orbits.forEach((orbit10) => {\n                                        if (planet2 === orbit10[0]) {\n                                          orbits.forEach((orbit11) => {\n                                            if (planet1 === orbit11[0]) {\n                                              orbits.forEach((orbit12) => {\n                                                if (planet2 === orbit12[0]) {\n                                                  orbits.forEach((orbit13) => {\n                                                    if (planet1 === orbit13[0]) {\n                                                      orbits.forEach((orbit14) => {\n                                                        if (planet2 === orbit14[0]) {\n                                                          orbits.forEach((orbit15) => {\n                                                            if (planet1 === orbit15[0]) {\n                                                              orbits.forEach((orbit16) => {\n                                                                if (planet2 === orbit16[0]) {\n                                                                  orbits.forEach((orbit17) => {\n                                                                    if (planet1 === orbit17[0]) {\n                                                                      return [\n                                                                        orbit[0],\n                                                                        orbit[1],\n                                                                      ];\n                                                                    }\n                                                                  });\n                                                                }\n                                                              });\n                                                            }\n                                                          });\n                                                        }\n                                                      });\n                                                    }\n                                                  });\n                                                }\n                                              });\n                                            }\n                                          });\n                                        }\n                                      });\n                                    }\n                                  });\n                                }\n                              });\n                            }\n                          });\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n    }\n  });\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => [planet, planet]);\n  orbits.forEach((orbit) => {\n    if (planet1 === orbit[1] && planet2 === orbit[0]) {\n      return;\n    }\n    if (planet1 === orbit[0] && planet2 === orbit[1]) {\n      return;\n    }\n    if (planet1 === orbit[0]) {\n      orbits.forEach((orbit2) => {\n        if (planet2 === orbit2[0]) {\n          orbits.forEach((orbit3) => {\n            if (planet1 === orbit3[0]) {\n              orbits.forEach((orbit4) => {\n                if (planet2 === orbit4[0]) {\n                  orbits.forEach((orbit5) => {\n                    if (planet1 === orbit5[0]) {\n                      orbits.forEach((orbit6) => {\n                        if (planet2 === orbit6[0]) {\n                          orbits.forEach((orbit7) => {\n                            if (planet1 === orbit7[0]) {\n                              orbits.forEach((orbit8) => {\n                                if (planet2 === orbit8[0]) {\n                                  orbits.forEach((orbit9) => {\n                                    if (planet1 === orbit9[0]) {\n                                      orbits.forEach((orbit10) => {\n                                        if (planet2 === orbit10[0]) {\n                                          orbits.forEach((orbit11) => {\n                                            if (planet1 === orbit11[0]) {\n                                              orbits.forEach((orbit12) => {\n                                                if (planet2 === orbit12[0]) {\n                                                  orbits.forEach((orbit13) => {\n                                                    if (planet1 === orbit13[0]) {\n                                                      orbits.forEach((orbit14) => {\n                                                        if (planet2 === orbit14[0]) {\n                                                          orbits.forEach((orbit15) => {\n                                                            if (planet1 === orbit15[0]) {\n                                                              orbits.forEach((orbit16) => {\n                                                                if (planet2 === orbit16[0]) {\n                                                                  orbits.forEach((orbit17) => {\n                                                                    if (planet1 === orbit17[0]) {\n                                                                      return [\n                                                                        orbit[0],\n                                                                        orbit[1],\n                                                                      ];\n                                                                    }\n                                                                  });\n                                                                }\n                                                              });\n                                                            }\n                                                          });\n                                                        }\n                                                      });\n                                                    }\n                                                  });\n                                                }\n                                              });\n                                            }\n                                          });\n                                        }\n                                      });\n                                    }\n                                  });\n                                }\n                              });\n                            }\n                          });\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n    }\n  });\n};\n\n/* There are e", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => {\n      return word.length\n    })\n   .filter((word) => {\n      return word % 2 === 0\n    })\n   .sort((a, b) => {\n      if (a > b) {\n        return 1\n      }\n      if (a < b) {\n        return -1\n      }\n      return 0\n    })\n   .map((word) => {\n      return word\n    })\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => {\n      return word.length\n    })\n   .filter((word) => {\n      return word % 2 === 0\n    })\n   .sort((a, b) => {\n      if (a > b) {\n        return 1\n      }\n      if (a < b) {\n        return -1\n      }\n      return 0\n    })\n   .map((word) => {\n      return word\n    })\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => {\n      return word.length\n    })\n   .filter((word) => {\n      return word % 2 === 0\n    })\n   .sort((a, b) => {\n      if (a > b) {\n        return 1\n      }\n      if (a < b) {\n        return -1\n      }\n      return 0\n    })\n   .map((word) => {\n      return word\n    })\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => {\n      return word.length\n    })\n   .filter((word) => {\n      return word % 2 === 0\n    })\n   .sort((a, b) => {\n      if (a > b) {\n        return 1\n      }\n      if (a < b) {\n        return -1\n      }\n      return 0\n    })\n   .map((word) => {\n      return word\n    })\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => {\n      return word.length\n    })\n   .filter((word) => {\n      return word % 2 === 0\n    })\n   .sort((a, b) => {\n      if (a > b) {\n        return 1\n      }\n      if (a < b) {\n        return -1\n      }\n      return 0\n    })\n   .map((word) => {\n      return word\n    })\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((word) => {\n      return word.length\n    })\n   .filter((word) => {\n      return word % 2 === 0\n    })\n   .sort((a, b) => {\n      if (a > b) {\n        return 1\n      }\n      if (a < b) {\n        return -1\n      }\n      return 0\n    })\n   .map((word) => {\n      return word\n    })\n  return newList\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpace = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZero = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOne = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTwo = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndThree = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFour = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFive = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSix = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSeven = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndEight = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndNine = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTen = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndEleven = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTwelve = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndThirteen = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFourteen = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFifteen = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSixteen = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSe", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_length = class_name.length;\n  const extension_length = extensions.length;\n  let max_strength = -1;\n  let max_extension = null;\n\n  for (let i = 0; i < extension_length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_strength = extension_length - class_name_length;\n    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n      max_extension = extension;\n    }\n  }\n\n  return `${class_name}.${max_extension}`;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions. Each class should have the same\n  name as the given class but with the extensions given by the extensions argument.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC','my_class.AA']\n  */\nconst randomClasses = (class_name, extensions, n) => {\n  const class_name_length = class_name.length;\n  const extension_length = extensions.length;\n  const classes = [];\n  const class_name = `${class_name}.`;\n\n  for (let i = 0; i < n; i++) {\n    const extension = extensions[Math.floor(Math.random() * extension_length)];\n    classes.push(`${class_name} ${extension}`);\n  }\n\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions. Each class should have the same\n  name as the given class but with the extensions given by the extensions argument.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC','my_class.AA']\n  */\nconst randomClasses = (class_name, extensions, n) => {\n  const class_name_length = class_name.length;\n  const extension_length = extensions.length;\n  const classes = [];\n  const class_name = `${class_name}.`;\n\n  for (let i = 0; i < n; i++) {\n    const extension = extensions[Math.floor(Math.random() * extension_length)];\n    classes.push(`${class_name} ${extension}`);\n  }\n\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions. Each class should have the same\n  name as the given class but with the extensions given by the extensions argument.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC','my_class.AA']\n  */\nconst randomClasses = (class_name, extensions, n) => {\n  const class_name_length = class_name.length;\n  const extension_length = extensions.length;\n  const classes = [];\n  const class_name = `${class_name}.`;\n\n  for (let i = 0; i < n; i++) {\n    const extension = extensions[Math.floor(Math.random() * extension_length)];\n    classes.push(`${class_name} ${extension}`);\n  }\n\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions. Each class should have the same\n  name as the given class but with the extensions given by the extensions argument.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC','my_class.AA']\n  */\nconst randomClasses = (class_name, extensions, n) => {\n  const class_name_length = class_name.length;\n  const extension_length = extensions.length;\n  const classes = [];\n  const class_name = `${class_name}.`;\n\n  for (let i = 0; i < n; i++) {\n    const extension = extensions[Math.floor(Math.random() * extension_length)];\n    classes.push(`${class_name} ${extension}`);\n  }\n\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions. Each class should have the same\n  name as the given class but with the extensions given by the extensions argument.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC','my_class.AA']\n  */\nconst randomClasses = (class_name, extensions, n) => {\n  const class_name_length = class_name.length;\n  const extension_length = extensions.length;\n  const classes = [];\n  const class_name = `${class_name}.`;\n\n  for (let i = 0; i < n; i++) {\n    const extension = extensions[Math.floor(Math.random() * extension_length)];\n    classes.push(`${class_name} ${extension}`);\n  }\n\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions. Each class should have the same\n  name as the given class but with the extensions given by the extensions argument.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC','my_class.AA']\n  */\nconst randomClasses = (class_name, extensions, n) => {\n  const class_name_length = class_name.length;\n  const extension_length = extensions.length;\n  const classes = [];\n  const class_name = `${class_name}.`;\n\n  for (let i = 0; i < n; i++) {\n    const extension = extensions[Math.floor(Math.random() * extension_length)];\n    classes.push(`${class_name} ${extension}`);\n  }\n\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions. Each class should have the same\n  name as the given class but with the extensions given by the extensions argument.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC','my_class.AA']\n  */\nconst randomClasses = (class_name, extensions, n) => {\n  const class_name_length = class_name.length;\n  const extension_length = extensions.length;\n  const classes = [];\n  const class_name = `${class_name}.`;\n\n  for (let i = 0; i < n; i++) {\n    const extension = extensions[Math.floor(Math.random() * extension_length)];\n    classes.push(`${class_name} ${extension}`);\n  }\n\n  return classes;\n};\n\n/*\n  Given a class name, a list of extensions, and a number n, return a list of n random\n  classes from that class with the given extensions. Each class should have the same\n  name as the given class but with the extensions given by the extensions argument.\n  Example:\n  randomClasses('my_class', ['AA', 'Be', 'CC'], 2) == ['my_class.Be','my_class.CC','my_class.AA']\n  */\nconst randomClasses = (class_name, extensions, n) => {\n  const class_name_length = class_name.length;\n  const extension_length = extensions.length;\n  const classes = [];\n  const class_name = `${class_name}.`;\n\n  for (let i = 0; i < n; i++) {\n    const ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aIndex2 = 0;\n  let bIndex2 = 0;\n  let aIndex3 = 0;\n  let bIndex3 = 0;\n  let aIndex4 = 0;\n  let bIndex4 = 0;\n  let aIndex5 = 0;\n  let bIndex5 = 0;\n  let aIndex6 = 0;\n  let bIndex6 = 0;\n  let aIndex7 = 0;\n  let bIndex7 = 0;\n  let aIndex8 = 0;\n  let bIndex8 = 0;\n  let aIndex9 = 0;\n  let bIndex9 = 0;\n  let aIndex10 = 0;\n  let bIndex10 = 0;\n  let aIndex11 = 0;\n  let bIndex11 = 0;\n  let aIndex12 = 0;\n  let bIndex12 = 0;\n  let aIndex13 = 0;\n  let bIndex13 = 0;\n  let aIndex14 = 0;\n  let bIndex14 = 0;\n  let aIndex15 = 0;\n  let bIndex15 = 0;\n  let aIndex16 = 0;\n  let bIndex16 = 0;\n  let aIndex17 = 0;\n  let bIndex17 = 0;\n  let aIndex18 = 0;\n  let bIndex18 = 0;\n  let aIndex19 = 0;\n  let bIndex19 = 0;\n  let aIndex20 = 0;\n  let bIndex20 = 0;\n  let aIndex21 = 0;\n  let bIndex21 = 0;\n  let aIndex22 = 0;\n  let bIndex22 = 0;\n  let aIndex23 = 0;\n  let bIndex23 = 0;\n  let aIndex24 = 0;\n  let bIndex24 = 0;\n  let aIndex25 = 0;\n  let bIndex25 = 0;\n  let aIndex26 = 0;\n  let bIndex26 = 0;\n  let aIndex27 = 0;\n  let bIndex27 = 0;\n  let aIndex28 = 0;\n  let bIndex28 = 0;\n  let aIndex29 = 0;\n  let bIndex29 = 0;\n  let aIndex30 = 0;\n  let bIndex30 = 0;\n  let aIndex31 = 0;\n  let bIndex31 = 0;\n  let aIndex32 = 0;\n  let bIndex32 = 0;\n  let aIndex33 = 0;\n  let bIndex33 = 0;\n  let aIndex34 = 0;\n  let bIndex34 = 0;\n  let aIndex35 = 0;\n  let bIndex35 = 0;\n  let aIndex36 = 0;\n  let bIndex36 = 0;\n  let aIndex37 = 0;\n  let bIndex37 = 0;\n  let aIndex38 = 0;\n  let bIndex38 = 0;\n  let aIndex39 = 0;\n  let bIndex39 = 0;\n  let aIndex40 = 0;\n  let bIndex40 = 0;\n  let aIndex41 = 0;\n  let bIndex41 = 0;\n  let aIndex42 = 0;\n  let bIndex42 = 0;\n  let aIndex43 = 0;\n  let bIndex43 = 0;\n  let aIndex44 = 0;\n  let bIndex44 = 0;\n  let aIndex45 = 0;\n  let bIndex45 = 0;\n  let aIndex46 = 0;\n  let bIndex46 = 0;\n  let aIndex47 = 0;\n  let bIndex47 = 0;\n  let aIndex48 = 0;\n  let bIndex48 = 0;\n  let aIndex49 = 0;\n  let bIndex49 = 0;\n  let aIndex50 = 0;\n  let bIndex50 = 0;\n  let aIndex51 = 0;\n  let bIndex51 = 0;\n  let aIndex52 = 0;\n  let bIndex52 = 0;\n  let aIndex53 = 0;\n  let bIndex53 = 0;\n  let aIndex54 = 0;\n  let bIndex54 = 0;\n  let aIndex55 = 0;\n  let bIndex55 = 0;\n  let aIndex56 = 0;\n  let bIndex56 = 0;\n  let aIndex57 = 0;\n  let bIndex57 = 0;\n  let aIndex58 = 0;\n  let bIndex58 = 0;\n  let aIndex59 = 0;\n  let bIndex59 = 0;\n  let aIndex60 = 0;\n  let bIndex60 = 0;\n  let aIndex61 = 0;\n  let bIndex61 = 0;\n  let aIndex62 = 0;\n  let bIndex62 = 0;\n  let aIndex63 = 0;\n  let bIndex63 = 0;\n  let aIndex64 = 0;\n  let bIndex64 = 0;\n  let aIndex65 = 0;\n  let bIndex65 = 0;\n  let aIndex66 = 0;\n  let bIndex66 = 0;\n  let aIndex67 = 0;\n  let bIndex67 = 0;\n  let aIndex68 = 0;\n  let bIndex68 = 0;\n  let aIndex69 = 0;\n  let bIndex69 = 0;\n  let aIndex70 = 0;\n  let bIndex70 = 0;\n  let aIndex71 = 0;\n  let bIndex71 = 0;\n  let aIndex72 = 0;\n  let bIndex72 = 0;\n  let aIndex73 = 0;\n  let bIndex73 = 0;\n  let aIndex74 = 0;\n  let bIndex74 = 0;\n  let aIndex75 = 0;\n  let bIndex75 = 0;\n  let aIndex76 = 0;\n  let bIndex76 = 0;\n  let aIndex77 = 0;\n  let bIndex77 = 0;\n  let aIndex78 = 0;\n  let bIndex78 = 0;\n  let aIndex79 = 0;\n  let bIndex79 = 0;\n  let aIndex80 = 0;\n  let bIndex80 = 0;\n  let aIndex81 = 0;\n  let bIndex81 = 0;\n  let aIndex82 = 0;\n  let bIndex82 = 0;\n  let aIndex83 = 0;\n  let bIndex83 = 0;\n  let aIndex84 = 0;\n  let bIndex84 = 0;\n  let aIndex85 = 0;\n  let bIndex85 = 0;\n  let aIndex86 = 0;\n  let bIndex86 = 0;\n  let aIndex87 = 0;\n  let bIndex87 = 0;\n  let aIndex88 = 0;\n  let bIndex88 = 0;\n  let aIndex89 = 0;\n  let bIndex89 = 0;\n  let aIndex90 = 0;\n  let bIndex90 = 0;\n  let aIndex91 = 0;\n  let bIndex91 = 0;\n  let aIndex92 = 0;\n  let bIndex92 = 0;\n  let aIndex93 = 0;\n  let bIndex93 = 0;\n  let aIndex94 = 0;\n  let bIndex94 = 0;\n  let aIndex95 = 0;\n  let bIndex95 = 0;\n  let aIndex96 = 0;\n  let bIndex96 = 0;\n  let aIndex97 = 0;\n  let bIndex97 = 0;\n  let aIndex98 = 0;\n  let bIndex98 = 0;\n  let aIndex99 = 0;\n  let bIndex99 = 0;\n  let aIndex100 = 0;\n  let bIndex100 = 0;\n  let aIndex101 = 0;\n  let bIndex101 = 0;\n  let aIndex102 = 0;\n  let bIndex102 = 0;\n  let aIndex103 = 0;\n  let bIndex103 = 0;\n  let aIndex104 = 0;\n  let bIndex104 = 0;\n  let aIndex105 = 0;\n  let bIndex105 = 0;\n  let aIndex106 = 0;\n  let bIndex106 = 0;\n  let aIndex107 = 0;\n  let bIndex107 = 0;\n  let aIndex108 = 0;\n  let bIndex108 = 0;\n  let aIndex109 = 0;\n  let bIndex109 = 0;\n  let aIndex110 = 0;\n  let bIndex110 = 0;\n  let aIndex111 = 0;\n  let bIndex111 = 0;\n  let aIndex112 = 0;\n  let bIndex112 = 0;\n  let aIndex113 = 0;\n  let bIndex113 = 0;\n  let aIndex114 = 0;\n  let bIndex114 = 0;\n  let aIndex115 = 0;\n  let bIndex115 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a positive integer and an even or odd digit. return true if the number is divisible by that digit.\n\n   Example:\n      isDivisibleByDigit(123, 2) ==> true\n      isDivisibleByDigit(123, 3) ==> false\n      isDivisibleByDigit(123, 4) ==> true\n      isDivisibleByDigit(123, 5) ==> false\n      isDivisibleByDigit(123, 6) ==> true\n      isDivisibleByDigit(123, 7) ==> false\n      isDivisibleByDigit(123, 8) ==> true\n      isDivisibleByDigit(123, 9) ==> false\n      isDivisibleByDigit(123, 10) ==> true\n      isDivisibleByDigit(123, 11) ==> false\n      isDivisibleByDigit(123, 12) ==> true\n      isDivisibleByDigit(123, 13) ==> false\n      isDivisibleByDigit(123, 14) ==> true\n      isDivisibleByDigit(123, 15) ==> false\n      isDivisibleByDigit(123, 16) ==> true\n      isDivisibleByDigit(123, 17) ==> false\n      isDivisibleByDigit(123, 18) ==> true\n      isDivisibleByDigit(123, 19) ==> false\n      isDivisibleByDigit(123, 20) ==> true\n      isDivisibleByDigit(123, 21) ==> false\n      isDivisibleByDigit(123, 22) ==> true\n      isDivisibleByDigit(123, 23) ==> false\n      isDivisibleByDigit(123, 24) ==> true\n      isDivisibleByDigit(123, 25) ==> false\n      isDivisibleByDigit(123, 26) ==> true\n      isDivisibleByDigit(123, 27) ==> false\n      isDivisibleByDigit(123, 28) ==> true\n      isDivisibleByDigit(123, 29) ==> false\n      isDivisibleByDigit(123, 30) ==> true\n      isDivisibleByDigit(123, 31) ==> false\n      isDivisibleByDigit(123, 32) ==> true\n      isDivisibleByDigit(123, 33) ==> false\n      isDivisibleByDigit(123, 34) ==> true\n      isDivisibleByDigit(123, 35) ==> false\n      isDivisibleByDigit(123, 36) ==> true\n      isDivisibleByDigit(123, 37) ==> false\n      isDivisibleByDigit(123, 38) ==> true\n      isDivisibleByDigit(123, 39) ==> false\n      isDivisibleByDigit(123, 40) ==> true\n      isDivisibleByDigit(123, 41) ==> false\n      isDivisibleByDigit(123, 42) ==> true\n      isDivisibleByDigit(123, 43) ==> false\n      isDivisibleByDigit(123, 44) ==> true\n      isDivisibleByDigit(123, 45) ==> false\n      isDivisibleByDigit(123, 46) ==> true\n      isDivisibleByDigit(123, 47) ==> false\n      isDivisibleByDigit(123, 48) ==> true\n      isDivisibleByDigit(123, 49) ==> false\n      isDivisibleByDigit(123, 50) ==> true\n      isDivisibleByDigit(123, 51) ==> false\n      isDivisibleByDigit(123, 52) ==> true\n      isDivisibleByDigit(123, 53) ==> false\n      isDivisibleByDigit(123, 54) ==> true\n      isDivisibleByDigit(123, 55) ==> false\n      isDivisibleByDigit(123, 56) ==> true\n      isDivisibleByDigit(123, 57) ==> false\n      isDivisibleByDigit(123, 58) ==> true\n      isDivisibleByDigit(123, 59) ==> false\n      isDivisibleByDigit(123, 60) ==> true\n      isDivisibleByDigit(123, 61) ==> false\n      isDivisibleByDigit(123, 62) ==> true\n      isDivisibleByDigit(123, 63) ==> false\n      isDivisibleByDigit(123, 64) ==> true\n      isDivisibleByDigit(123, 65) ==> false\n      isDivisibleByDigit(123, 66) ==> true\n      isDivisibleByDigit(123, 67) ==> false\n      isDivisibleByDigit(123, 68) ==> true\n      isDivisibleByDigit(123, 69) ==> false\n      isDivisibleByDigit(123, 70) ==> true\n      isDivisibleByDigit(123, 71) ==> false\n      isDivisibleByDigit(123, 72) ==> true\n      isDivisibleByDigit(123, 73) ==> false\n      isDivisibleByDigit(123, 74) ==> true\n      isDivisibleByDigit(123, 75) ==> false\n      isDivisibleByDigit(123, 76) ==> true\n      isDivisibleByDigit(123, 77) ==> false\n      isDivisibleByDigit(123, 78) ==> true\n      isDivisibleByDigit(123, 79) ==> false\n      isDivisibleByDigit(123, 80) ==> true\n      isDivisibleByDigit(123, 81) ==> false\n      isDivisibleByDigit(123, 82) ==> true\n      isDivisibleByDigit(123, 83) ==> false\n      isDivisibleByDigit(123, 84) ==> true\n      isDivisibleByDigit(123, 85) ==> false\n      isDivisibleByDigit(123, 86) ==> true\n      isDivisibleByDigit(123, 87) ==> false\n      isDivisibleByDigit(123, 88) ==> true\n      isDivisibleByDigit(123, 89) ==> false\n      isDivisibleByDigit(123, 90) ==> true\n      isDivisibleByDigit(123, 91) ==> false\n      isDivisibleByDigit(123, 92) ==> true\n      isDivisibleByDigit(123, 93) ==> false\n      isDivisibleByDigit(123, 94) ==> true\n      isDivisibleByDigit(123, 95) ==> false\n      is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  const roman = romanNumeral(number);\n  return roman.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxRioman(19) == 'XIX'\n  >>> intToMaxRioman(152) == 'CLII'\n  >>> intToMaxRioman(426) == 'CDXXVI'\n  */\nconst intToMaxRioman = (number) => {\n  const roman = romanNumeral(number);\n  return roman.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinDecimal(19) == '19'\n  >>> intToMinDecimal(152) == '152'\n  >>> intToMinDecimal(426) == '426'\n  */\nconst intToMinDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxDecimal(19) == '19'\n  >>> intToMaxDecimal(152) == '152'\n  >>> intToMaxDecimal(426) == '426'\n  */\nconst intToMaxDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase and with commas every three digits.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinCommaDecimal(19) == '19,0'\n  >>> intToMinCommaDecimal(152) == '152,0'\n  >>> intToMinCommaDecimal(426) == '426,0'\n  */\nconst intToMinCommaDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase and with commas every three digits.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxCommaDecimal(19) == '19,0'\n  >>> intToMaxCommaDecimal(152) == '152,0'\n  >>> intToMaxCommaDecimal(426) == '426,0'\n  */\nconst intToMaxCommaDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase and with commas every four digits.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinCommaDecimal(19) == '19,0'\n  >>> intToMinCommaDecimal(152) == '152,0'\n  >>> intToMinCommaDecimal(426) == '426,0'\n  */\nconst intToMinCommaDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.replace(/(\\d)(?=(\\d{4})+(?!\\d))/g, '$1,');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase and with commas every four digits.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxCommaDecimal(19) == '19,0'\n  >>> intToMaxCommaDecimal(152) == '152,0'\n  >>> intToMaxCommaDecimal(426) == '426,0'\n  */\nconst intToMaxCommaDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.replace(/(\\d)(?=(\\d{4})+(?!\\d))/g, '$1,');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase and with commas every five digits.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinCommaDecimal(19) == '19,0'\n  >>> intToMinCommaDecimal(152) == '152,0'\n  >>> intToMinCommaDecimal(426) == '426,0'\n  */\nconst intToMinCommaDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.replace(/(\\d)(?=(\\d{5})+(?!\\d))/g, '$1,');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase and with commas every five digits.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxCommaDecimal(19) == '19,0'\n  >>> intToMaxCommaDecimal(152) == '152,0'\n  >>> intToMaxCommaDecimal(426) == '426,0'\n  */\nconst intToMaxCommaDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.replace(/(\\d)(?=(\\d{5})+(?!\\d))/g, '$1,');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase and with commas every six digits.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinCommaDecimal(19) == '19,0'\n  >>> intToMinCommaDecimal(152) == '152,0'\n  >>> intToMinCommaDecimal(426) == '426,0'\n  */\nconst intToMinCommaDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.replace(/(\\d)(?=(\\d{6})+(?!\\d))/g, '$1,');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase and with commas every six digits.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMaxCommaDecimal(19) == '19,0'\n  >>> intToMaxCommaDecimal(152) == '152,0'\n  >>> intToMaxCommaDecimal(426) == '426,0'\n  */\nconst intToMaxCommaDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.replace(/(\\d)(?=(\\d{6})+(?!\\d))/g, '$1,');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase and with commas every seven digits.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinCommaDecimal(19) == '19,0'\n  >>> intToMinCommaDecimal(152) == '152,0'\n  >>> intToMinCommaDecimal(426) == '426,0'\n  */\nconst intToMinCommaDecimal = (number) => {\n  const decimal = decimalNumeral(number);\n  return decimal.replace(/(\\d)(?=(\\d{7", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  if (Math.abs(b * b - 4 * a * c) < 1) {\n    return false\n  }\n  const sqrtOfA = Math.sqrt(a * a)\n  const sqrtOfB = Math.sqrt(b * b)\n  const sqrtOfC = Math.sqrt(c * c)\n  const rootOfAB = sqrtOfA - sqrtOfB\n  const rootOfAC = sqrtOfA - sqrtOfC\n  const rootOfBC = sqrtOfB - sqrtOfC\n  return (rootOfAB * rootOfBC - rootOfAC * rootOfAB) / rootOfAB < 0\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  if (Math.abs(b * b - 4 * a * c) < 1) {\n    return false\n  }\n  const sqrtOfA = Math.sqrt(a * a)\n  const sqrtOfB = Math.sqrt(b * b)\n  const sqrtOfC = Math.sqrt(c * c)\n  const rootOfAB = sqrtOfA - sqrtOfB\n  const rootOfAC = sqrtOfA - sqrtOfC\n  const rootOfBC = sqrtOfB - sqrtOfC\n  return (rootOfAB * rootOfBC - rootOfAC * rootOfAB) / rootOfAB == 0\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  if (Math.abs(b * b - 4 * a * c) < 1) {\n    return false\n  }\n  const sqrtOfA = Math.sqrt(a * a)\n  const sqrtOfB = Math.sqrt(b * b)\n  const sqrtOfC = Math.sqrt(c * c)\n  const rootOfAB = sqrtOfA - sqrtOfB\n  const rootOfAC = sqrtOfA - sqrtOfC\n  const rootOfBC = sqrtOfB - sqrtOfC\n  return (rootOfAB * rootOfBC - rootOfAC * rootOfAB) / rootOfAB == 0\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene(3, 4, 5) == true\n  scalene(1, 2, 3) == false\n  */\nconst scalene = (a, b, c) => {\n  if (Math.abs(b * b - 4 * a * c) < 1) {\n    return false\n  }\n  const sqrtOfA = Math.sqrt(a * a)\n  const sqrtOfB = Math.sqrt(b * b)\n  const sqrtOfC = Math.sqrt(c * c)\n  const rootOfAB = sqrtOfA - sqrtOfB\n  const rootOfAC = sqrtOfA - sqrtOfC\n  const rootOfBC = sqrtOfB - sqrtOfC\n  return (rootOfAB * rootOfBC - rootOfAC * rootOfAB) / rootOfAB == 0\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  if (Math.abs(b * b - 4 * a * c) < 1) {\n    return false\n  }\n  const sqrtOfA = Math.sqrt(a * a)\n  const sqrtOfB = Math.sqrt(b * b)\n  const sqrtOfC = Math.sqrt(c * c)\n  const rootOfAB = sqrtOfA - sqrtOfB\n  const rootOfAC = sqrtOfA - sqrtOfC\n  const rootOfBC = sqrtOfB - sqrtOfC\n  return (rootOfAB * rootOfBC - rootOfAC * rootOfAB) / rootOfAB == 0\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  if (Math.abs(b * b - 4 * a * c) < 1) {\n    return false\n  }\n  const sqrtOfA = Math.sqrt(a * a)\n  const sqrtOfB = Math.sqrt(b * b)\n  const sqrtOfC = Math.sqrt(c * c)\n  const rootOfAB = sqrtOfA - sqrtOfB\n  const rootOfAC = sqrtOfA - sqrtOfC\n  const rootOfBC = sqrtOfB - sqrtOfC\n  return (rootOfAB * rootOfBC - rootOfAC * rootOfAB) / rootOfAB == 0\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene(3, 4, 5) == true\n  scalene(1, 2, 3) == false\n  */\nconst scalene = (a, b, c) => {\n  if (Math.abs(b * b - 4 * a * c) < 1) {\n    return false\n  }\n  const sqrtOfA = Math.sqrt(a * a)\n  const sqrtOfB = Math.sqrt(b * b)\n  const sqrtOfC = Math.sqrt(c * c)\n  const rootOfAB = sqrtOfA - sqrtOfB\n  const rootOfAC = sqrtOfA - sqrtOfC\n  const rootOfBC = sqrtOfB - sqrtOfC\n  return (rootOfAB * rootOfBC - rootOfAC * rootOfAB) / rootOfAB == 0\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  if (Math.abs(b * b - 4 * a * c) < 1) {\n    return false\n  }\n  const sqrtOfA = Math.sqrt(a * a)\n  const sqrtOfB = Math.sqrt(b * b)\n  const sqrtOfC = Math.sqrt(c * c)\n  const rootOfAB = sqrtOfA - sqrtOfB\n  const rootOfAC = sqrtOfA - sqrtOfC\n  const rootOfBC = sqrtOfB - sqrtOfC\n  return (rootOfAB", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMin([\"name\", \"of\", \"string\"]) === \"string\"\n  findMin([\"name\", \"enam\", \"game\"]) === \"name\"\n  findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst findMin = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count < minCount) {\n      minCount = count;\n      minWord = word;\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return\n  the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMin([\"name\", \"of\", \"string\"]) === \"string\"\n  findMin([\"name\", \"enam\", \"game\"]) === \"name\"\n  findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst findMin = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count < minCount) {\n      minCount = count;\n      minWord = word;\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return\n  the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMin([\"name\", \"of\", \"string\"]) === \"string\"\n  findMin([\"name\", \"enam\", \"game\"]) === \"name\"\n  findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst findMin = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count < minCount) {\n      minCount = count;\n      minWord = word;\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return\n  the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMin([\"name\", \"of\", \"string\"]) === \"string\"\n  findMin([\"name\", \"enam\", \"game\"]) === \"name\"\n  findMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst findMin = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count < minCount) {\n      minCount = count;\n      minWord = word;\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number of unique\n  characters. If multiple strings have maximum number of unique characters, return\n  the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMin([\"name\", \"of\", \"string\"]) ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount += 1;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount += 1;\n    }\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength];\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n    const operandValue = parseInt(operand);\n    const operatorValue = parseInt(operator);\n\n    switch (operator) {\n      case '+':\n        result += operandValue;\n        break;\n      case '-':\n        result -= operandValue;\n        break;\n      case '*':\n        result *= operandValue;\n        break;\n      case '/':\n        result /= operandValue;\n        break;\n      case '**':\n        result **= operandValue;\n        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength];\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n    const operandValue = parseInt(operand);\n    const operatorValue = parseInt(operator);\n\n    switch (operator) {\n      case '+':\n        result += operandValue;\n        break;\n      case '-':\n        result -= operandValue;\n        break;\n      case '*':\n        result *= operandValue;\n        break;\n      case '/':\n        result /= operandValue;\n        break;\n      case '**':\n        result **= operandValue;\n        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength];\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n    const operandValue = parseInt(operand);\n    const operatorValue = parseInt(operator);\n\n    switch (operator) {\n      case '+':\n        result += operandValue;\n        break;\n      case '-':\n        result -= operandValue;\n        break;\n      case '*':\n        result *= operandValue;\n        break;\n      case '/':\n        result /= operandValue;\n        break;\n      case '**':\n        result **= operandValue;\n        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength];\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n    const operandValue = parseInt(operand);\n    const operatorValue = parseInt(operator);\n\n    switch (operator) {\n      case '+':\n        result += operandValue;\n        break;\n      case '-':\n        result -= operandValue;\n        break;\n      case '*':\n        result *= operandValue;\n        break;\n      case '/':\n        result /= operandValue;\n        break;\n      case '**':\n        result **= operandValue;\n        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length - 1;\n  const result = operandList[operandLength];\n\n  for (let i = 0; i < ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      res += s.charAt(i).toLowerCase();\n    } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      res += s.charAt(i).toUpperCase();\n    } else {\n      res += s.charAt(i);\n    }\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a new string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> \"3aa3\"\n  count(\"hi-bye\") --> \"3hi1bye1\"\n*/\nconst count = (s) => {\n  let res = \"\";\n  for (let i = 0; i < s.length; i++) {\n    res += s.split(s[i]).length - 1;\n  }\n  return res;\n};\n\n/*\n  Given a string s, return a string where each character in s has been \n  replaced with the number of times that character occurs in the original string.\n  Examples\n  count(\"abcabc\") --> \"3abc4\"\n  count(\"aAaAa\") --> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'c998dc642dfb56b06ede4befbe9f70e94c0'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha1')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha256')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'd99b29a45a06be7cae1c6a2c0f86e5b48e'\n  */\nconst stringToSha3 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '4cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'd99b29a45a06be7cae1c6a2c0f86e5b48e'\n  */\nconst stringToSha3 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '4cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'd99b29a45a06be7cae1c6a2c0f86e5b48e'\n  */\nconst stringToSha3 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '4cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'd99b29a45a06be7cae1c6a2c0f86e5b48e'\n  */\nconst stringToSha3 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '4cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits, in ascending order.\n\n  For example:\n  sumOfDigits(12) => 1 + 2 + 3 = 6\n  sumOfDigits(13) => 1 + 3 + 5 = 9\n  sumOfDigits(14) => 1 + 3 + 5 + 7 = 13\n  sumOfDigits(15) => 1 + 3 + 5 + 7 + 9 = 21\n  sumOfDigits(16) => 1 + 5 + 7 = 9\n  sumOfDigits(17) => 1 + 5 + 7 + 9 = 13\n  sumOfDigits(18) => 1 + 5 + 7 + 9 + 11 = 15\n  sumOfDigits(19) => 1 + 5 + 7 + 9 + 11 + 13 = 21\n  sumOfDigits(20) => 1 + 5 + 7 + 9 + 11 + 13 + 15 = 25\n  sumOfDigits(21) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 = 29\n  sumOfDigits(22) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 = 33\n  sumOfDigits(23) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 = 35\n  sumOfDigits(24) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 = 37\n  sumOfDigits(25) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 = 39\n  sumOfDigits(26) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 = 43\n  sumOfDigits(27) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    = 45\n  sumOfDigits(28) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 = 47\n  sumOfDigits(29) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 = 49\n  sumOfDigits(30) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 = 51\n  sumOfDigits(31) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 = 53\n  sumOfDigits(32) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 = 59\n  sumOfDigits(33) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 = 61\n  sumOfDigits(34) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 = 63\n  sumOfDigits(35) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 = 65\n  sumOfDigits(36) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 = 67\n  sumOfDigits(37) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 = 69\n  sumOfDigits(38) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 = 71\n  sumOfDigits(39) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61\n    = 73\n  sumOfDigits(40) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61\n    + 63 + 65 = 75\n  sumOfDigits(41) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61\n    + 63 + 65 + 67 = 77\n  sumOfDigits(42) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61\n    + 63 + 65 + 67 + 69 = 79\n  sumOfDigits(43) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61\n    + 63 + 65 + 67 + 69 + 71 = 81\n  sumOfDigits(44) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31\n    + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61\n    + 63 + 65 + 67 + 69 + 71 + 73 = 85\n  sumOfDigits(45) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 23 + 25 + 27 + 29 + 31", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  // Your code here\n};\n\n// === PART TWO: PARSE MUSIC FROM FILE ===\n\n// In this section you will write a function that reads music from a file and returns a\n// musical score as a list of integers corresponding to the musical notes.\n\n// To help you complete this function, we have provided you with a skeleton of the file format\n// you should expect to read.\n\n// You will receive the file path as an argument.\n// You should return a list of integers corresponding to the musical notes in the file.\n// Each integer should correspond to the note duration in beats.\n\n// For example, if the file contents were:\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 G4 A4\n// C4 E4 ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumbers = numberArray.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return decimalPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(3.5)\n  3\n  */\nconst truncateNubmerInt = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.');\n  return parseInt(integerPart);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmerInt(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const secondNumber = sortedNumbers[1];\n  if (firstNumber === secondNumber) {\n    return [firstNumber, firstNumber];\n  }\n  if (Math.abs(firstNumber - secondNumber) < Math.abs(firstNumber - sortedNumbers[sortedNumbers.length - 1])) {\n    return [firstNumber, secondNumber];\n  }\n  return [secondNumber, firstNumber];\n};\n\n/**\n * Given a number and a step size, returns the number rounded to the closest step\n * of stepSize\n */\nconst roundToStep = (number, stepSize) => {\n  const rounded = Math.round(number);\n  return rounded / stepSize * stepSize;\n};\n\n/**\n * Given a number and a step size, returns the number rounded to the closest step\n * of stepSize and also returns the number of steps it took to reach the number\n */\nconst roundToStepAndCountTowards = (number, stepSize) => {\n  const rounded = Math.round(number);\n  const difference = rounded - number;\n  const steps = difference / stepSize;\n  return [rounded, steps];\n};\n\n/**\n * Given a number and a step size, returns the number rounded to the closest step\n * of stepSize and also returns the number of steps it took to reach the number\n * and also returns the difference between the rounded number and the original number\n */\nconst roundToStepAndCountTowardsOriginal = (number, stepSize) => {\n  const rounded = Math.round(number);\n  const difference = rounded - number;\n  const steps = difference / stepSize;\n  const originalNumber = number - rounded;\n  return [originalNumber, steps, rounded];\n};\n\n/**\n * Given a number and a step size, returns the number rounded to the closest step\n * of stepSize and also returns the number of steps it took to reach the number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n */\nconst roundToStepAndCountTowardsOriginalAndOriginal = (number, stepSize) => {\n  const rounded = Math.round(number);\n  const difference = rounded - number;\n  const steps = difference / stepSize;\n  const originalNumber = number - rounded;\n  const originalNumber2 = number - rounded;\n  return [originalNumber, steps, originalNumber2, rounded];\n};\n\n/**\n * Given a number and a step size, returns the number rounded to the closest step\n * of stepSize and also returns the number of steps it took to reach the number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n */\nconst roundToStepAndCountTowardsOriginalAndOriginalAndOriginal = (number, stepSize) => {\n  const rounded = Math.round(number);\n  const difference = rounded - number;\n  const steps = difference / stepSize;\n  const originalNumber = number - rounded;\n  const originalNumber2 = number - rounded;\n  const originalNumber3 = number - rounded;\n  return [originalNumber, steps, originalNumber2, originalNumber3, rounded];\n};\n\n/**\n * Given a number and a step size, returns the number rounded to the closest step\n * of stepSize and also returns the number of steps it took to reach the number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n */\nconst roundToStepAndCountTowardsOriginalAndOriginalAndOriginalAndOriginal = (number, stepSize) => {\n  const rounded = Math.round(number);\n  const difference = rounded - number;\n  const steps = difference / stepSize;\n  const originalNumber = number - rounded;\n  const originalNumber2 = number - rounded;\n  const originalNumber3 = number - rounded;\n  const originalNumber4 = number - rounded;\n  return [originalNumber, steps, originalNumber2, originalNumber3, originalNumber4, rounded];\n};\n\n/**\n * Given a number and a step size, returns the number rounded to the closest step\n * of stepSize and also returns the number of steps it took to reach the number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n */\nconst roundToStepAndCountTowardsOriginalAndOriginalAndOriginalAndOriginalAndOriginal = (number, stepSize) => {\n  const rounded = Math.round(number);\n  const difference = rounded - number;\n  const steps = difference / stepSize;\n  const originalNumber = number - rounded;\n  const originalNumber2 = number - rounded;\n  const originalNumber3 = number - rounded;\n  const originalNumber4 = number - rounded;\n  const originalNumber5 = number - rounded;\n  return [originalNumber, steps, originalNumber2, originalNumber3, originalNumber4, originalNumber5, rounded];\n};\n\n/**\n * Given a number and a step size, returns the number rounded to the closest step\n * of stepSize and also returns the number of steps it took to reach the number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n */\nconst roundToStepAndCountTowardsOriginalAndOriginalAndOriginalAndOriginalAndOriginalAndOriginal = (number, stepSize) => {\n  const rounded = Math.round(number);\n  const difference = rounded - number;\n  const steps = difference / stepSize;\n  const originalNumber = number - rounded;\n  const originalNumber2 = number - rounded;\n  const originalNumber3 = number - rounded;\n  const originalNumber4 = number - rounded;\n  const originalNumber5 = number - rounded;\n  const originalNumber6 = number - rounded;\n  return [originalNumber, steps, originalNumber2, originalNumber3, originalNumber4, originalNumber5, originalNumber6, rounded];\n};\n\n/**\n * Given a number and a step size, returns the number rounded to the closest step\n * of stepSize and also returns the number of steps it took to reach the number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n * and also returns the difference between the rounded number and the original number\n */\nconst roundToStepAndCountTowardsOriginalAndOriginalAndOriginalAndOriginalAndOriginalAndOriginalAndOriginal = (number, stepSize) => {\n  const rounded = Math.round(number);\n  const difference = rounded - number;\n  const steps = difference / stepSize;\n  const originalNumber = number - rounded;\n  const originalNumber2 = number - rounded;\n  const originalNumber3 = number ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min / range);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a number and a range, return a number that is the closest to the given number in the range\n * >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> roundToClosest(0.5, 10)\n  0.5\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers2 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers3 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers4 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers5 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers6 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers7 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers8 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers9 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers10 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers11 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers12 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers13 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers14 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers15 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers16 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers17 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers18 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers19 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers20 = (values) => {\n  return values.filter(value => typeof value!== 'number');\n};\n\n/* Filter given list of any python values only for integers\n  >>> filetrItnegers(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') length++\n  }\n  return length\n}\n\n/* Return string with first letter capitalized\n  >>> capitalize('abc')\n  'Abc'\n  >>> capitalize('abc def')\n  'Abc def'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Return string with first letter lowercase\n  >>> lowercase('abc')\n  'abc'\n  >>> lowercase('abc def')\n  'abc def'\n  */\nconst lowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\n/* Return string with first letter uppercase\n  >>> uppercase('abc')\n  'ABC'\n  >>> uppercase('abc def')\n  'ABC DEF'\n  */\nconst uppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Return string with first letter capitalized and all others lowercase\n  >>> capitalizeAndLower('abc')\n  'Abc'\n  >>> capitalizeAndLower('abc def')\n  'Abc def'\n  */\nconst capitalizeAndLower = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Return string with first letter capitalized and all others uppercase\n  >>> capitalizeAndUpper('abc')\n  'ABC'\n  >>> capitalizeAndUpper('abc def')\n  'ABC DEF'\n  */\nconst capitalizeAndUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter lowercase and all others uppercase\n  >>> lowerAndUpper('abc')\n  'abc'\n  >>> lowerAndUpper('abc def')\n  'ABC DEF'\n  */\nconst lowerAndUpper = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter uppercase and all others lowercase\n  >>> upperAndLower('abc')\n  'ABC'\n  >>> upperAndLower('abc def')\n  'ABC DEF'\n  */\nconst upperAndLower = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Return string with first letter uppercase and all others uppercase\n  >>> upperAndUpper('abc')\n  'ABC'\n  >>> upperAndUpper('abc def')\n  'ABC DEF'\n  */\nconst upperAndUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter capitalized and all others lowercase\n  >>> capitalizeAndLower('abc')\n  'Abc'\n  >>> capitalizeAndLower('abc def')\n  'Abc def'\n  */\nconst capitalizeAndLower = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Return string with first letter capitalized and all others uppercase\n  >>> capitalizeAndUpper('abc')\n  'ABC'\n  >>> capitalizeAndUpper('abc def')\n  'ABC DEF'\n  */\nconst capitalizeAndUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter lowercase and all others uppercase\n  >>> lowerAndUpper('abc')\n  'abc'\n  >>> lowerAndUpper('abc def')\n  'ABC DEF'\n  */\nconst lowerAndUpper = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter uppercase and all others lowercase\n  >>> upperAndLower('abc')\n  'ABC'\n  >>> upperAndLower('abc def')\n  'ABC DEF'\n  */\nconst upperAndLower = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Return string with first letter uppercase and all others uppercase\n  >>> upperAndUpper('abc')\n  'ABC'\n  >>> upperAndUpper('abc def')\n  'ABC DEF'\n  */\nconst upperAndUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter capitalized and all others lowercase\n  >>> capitalizeAndLower('abc')\n  'Abc'\n  >>> capitalizeAndLower('abc def')\n  'Abc def'\n  */\nconst capitalizeAndLower = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Return string with first letter capitalized and all others uppercase\n  >>> capitalizeAndUpper('abc')\n  'ABC'\n  >>> capitalizeAndUpper('abc def')\n  'ABC DEF'\n  */\nconst capitalizeAndUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter lowercase and all others uppercase\n  >>> lowerAndUpper('abc')\n  'abc'\n  >>> lowerAndUpper('abc def')\n  'ABC DEF'\n  */\nconst lowerAndUpper = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter uppercase and all others lowercase\n  >>> upperAndLower('abc')\n  'ABC'\n  >>> upperAndLower('abc def')\n  'ABC DEF'\n  */\nconst upperAndLower = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Return string with first letter uppercase and all others uppercase\n  >>> upperAndUpper('abc')\n  'ABC'\n  >>> upperAndUpper('abc def')\n  'ABC DEF'\n  */\nconst upperAndUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter capitalized and all others lowercase\n  >>> capitalizeAndLower('abc')\n  'Abc'\n  >>> capitalizeAndLower('abc def')\n  'Abc def'\n  */\nconst capitalizeAndLower = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Return string with first letter capitalized and all others uppercase\n  >>> capitalizeAndUpper('abc')\n  'ABC'\n  >>> capitalizeAndUpper('abc def')\n  'ABC DEF'\n  */\nconst capitalizeAndUpper = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter lowercase and all others uppercase\n  >>> lowerAndUpper('abc')\n  'abc'\n  >>> lowerAndUpper('abc def')\n  'ABC DEF'\n  */\nconst lowerAndUpper = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1).toUpperCase()\n}\n\n/* Return string with first letter uppercase and all others lowercase\n  >>> upperAndLower('abc')\n  'ABC'\n  >>> upperAndLower('abc def')\n  'ABC DEF'\n  */\nconst upperAndLower = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Return string with first letter uppercase and all others uppercase\n  >>> upperAndUpper('abc')\n  'ABC'\n  >>> upperAnd", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n      while (n % i === 0) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.delete(number);\n    }\n  }\n  return [...map.keys()];\n};\n\n/**\n * Given a string, return a new string with all characters in reverse order.\n * If there are multiple instances of a character in the string, only one\n * instance is reversed.\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hi\")\n * \"ih\"\n * >>> reverseString(\"\")\n * \"\"\n * >>> reverseString(null)\n * null\n */\nconst reverseString = (str) => {\n  if (str === null || str === \"\") {\n    return str;\n  }\n  return [...str].reverse().join(\"\");\n};\n\n/**\n * Given a string, return a new string with all characters in reverse order.\n * If there are multiple instances of a character in the string, only one\n * instance is reversed.\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hi\")\n * \"ih\"\n * >>> reverseString(\"\")\n * \"\"\n * >>> reverseString(null)\n * null\n */\nconst reverseStringWithMap = (str) => {\n  if (str === null || str === \"\") {\n    return str;\n  }\n  const map = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!map.has(char)) {\n      map.set(char, true);\n    } else {\n      map.delete(char);\n    }\n  }\n  return [...map.keys()].reverse().join(\"\");\n};\n\n/**\n * Given a string, return a new string with all characters in reverse order.\n * If there are multiple instances of a character in the string, only one\n * instance is reversed.\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hi\")\n * \"ih\"\n * >>> reverseString(\"\")\n * \"\"\n * >>> reverseString(null)\n * null\n */\nconst reverseStringWithMapAndSet = (str) => {\n  if (str === null || str === \"\") {\n    return str;\n  }\n  const map = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!map.has(char)) {\n      map.set(char, true);\n    } else {\n      map.delete(char);\n    }\n  }\n  return [...map.keys()].reverse().join(\"\");\n};\n\n/**\n * Given a string, return a new string with all characters in reverse order.\n * If there are multiple instances of a character in the string, only one\n * instance is reversed.\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hi\")\n * \"ih\"\n * >>> reverseString(\"\")\n * \"\"\n * >>> reverseString(null)\n * null\n */\nconst reverseStringWithMapAndSetAndMap = (str) => {\n  if (str === null || str === \"\") {\n    return str;\n  }\n  const map = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!map.has(char)) {\n      map.set(char, true);\n    } else {\n      map.delete(char);\n    }\n  }\n  return [...map.keys()].reverse().join(\"\");\n};\n\n/**\n * Given a string, return a new string with all characters in reverse order.\n * If there are multiple instances of a character in the string, only one\n * instance is reversed.\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hi\")\n * \"ih\"\n * >>> reverseString(\"\")\n * \"\"\n * >>> reverseString(null)\n * null\n */\nconst reverseStringWithMapAndSetAndMapAndMap = (str) => {\n  if (str === null || str === \"\") {\n    return str;\n  }\n  const map = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!map.has(char)) {\n      map.set(char, true);\n    } else {\n      map.delete(char);\n    }\n  }\n  return [...map.keys()].reverse().join(\"\");\n};\n\n/**\n * Given a string, return a new string with all characters in reverse order.\n * If there are multiple instances of a character in the string, only one\n * instance is reversed.\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hi\")\n * \"ih\"\n * >>> reverseString(\"\")\n * \"\"\n * >>> reverseString(null)\n * null\n */\nconst reverseStringWithMapAndSetAndMapAndMapAndMap = (str) => {\n  if (str === null || str === \"\") {\n    return str;\n  }\n  const map = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!map.has(char)) {\n      map.set(char, true);\n    } else {\n      map.delete(char);\n    }\n  }\n  return [...map.keys()].reverse().join(\"\");\n};\n\n/**\n * Given a string, return a new string with all characters in reverse order.\n * If there are multiple instances of a character in the string, only one\n * instance is reversed.\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hi\")\n * \"ih\"\n * >>> reverseString(\"\")\n * \"\"\n * >>> reverseString(null)\n * null\n */\nconst reverseStringWithMapAndSetAndMapAndMapAndMapAndMap = (str) => {\n  if (str === null || str === \"\") {\n    return str;\n  }\n  const map = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!map.has(char)) {\n      map.set(char, true);\n    } else {\n      map.delete(char);\n    }\n  }\n  return [...map.keys()].reverse().join(\"\");\n};\n\n/**\n * Given a string, return a new string with all characters in reverse order.\n * If there are multiple instances of a character in the string, only one\n * instance is reversed.\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hey\")\n * \"ey\"\n * >>> reverseString(\"hi\")\n * \"ih\"\n * >>> reverseString(\"\")\n * \"\"\n * >>> reverseString(null)\n * null\n */\nconst reverse", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.toUpperCase() === char? char.toLowerCase() : char.toUpperCase();\n    })\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lowercase.\n * If no argument is given, return the string with each character in lowercase.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'hELLO'\n * >>> flipCase('Hello', 'World')\n * 'hELLO wORLD'\n */\nconst flipCaseWithDefault = (string, defaultString) => {\n  return string? string.toLowerCase() || defaultString : defaultString;\n};\n\n/**\n * Given a string, return a new string with each character in uppercase.\n * If no argument is given, return the string with each character in uppercase.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'HELLO'\n * >>> flipCase('Hello', 'World')\n * 'HELLO WORLD'\n */\nconst flipCaseWithDefault = (string, defaultString) => {\n  return string? string.toUpperCase() || defaultString : defaultString;\n};\n\n/**\n * Given a string, return a new string with each character in uppercase and lowercase.\n * If no argument is given, return the string with each character in uppercase and lowercase.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'HELLO'\n * >>> flipCase('Hello', 'World')\n * 'HELLO WORLD'\n */\nconst flipCaseWithDefault = (string, defaultString) => {\n  return string? string.toUpperCase().toLowerCase() || defaultString : defaultString;\n};\n\n/**\n * Given a string, return a new string with each character in uppercase and lowercase and flipped.\n * If no argument is given, return the string with each character in uppercase and lowercase and flipped.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'hELLO'\n * >>> flipCase('Hello', 'World')\n * 'hELLO wORLD'\n */\nconst flipCaseWithDefault = (string, defaultString) => {\n  return string? string.toUpperCase().toLowerCase().split('').reverse().join('') : defaultString;\n};\n\n/**\n * Given a string, return a new string with each character in uppercase and lowercase and flipped and flipped.\n * If no argument is given, return the string with each character in uppercase and lowercase and flipped and flipped.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'hELLO'\n * >>> flipCase('Hello', 'World')\n * 'hELLO wORLD'\n */\nconst flipCaseWithDefault = (string, defaultString) => {\n  return string? string.toUpperCase().toLowerCase().split('').reverse().join('').reverse().split('').reverse().join('') : defaultString;\n};\n\n/**\n * Given a string, return a new string with each character in uppercase and lowercase and flipped and flipped and flipped.\n * If no argument is given, return the string with each character in uppercase and lowercase and flipped and flipped and flipped.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'hELLO'\n * >>> flipCase('Hello', 'World')\n * 'hELLO wORLD'\n */\nconst flipCaseWithDefault = (string, defaultString) => {\n  return string? string.toUpperCase().toLowerCase().split('').reverse().join('').reverse().split('').reverse().join('').reverse().split('').reverse().join('') : defaultString;\n};\n\n/**\n * Given a string, return a new string with each character in uppercase and lowercase and flipped and flipped and flipped and flipped.\n * If no argument is given, return the string with each character in uppercase and lowercase and flipped and flipped and flipped and flipped.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'hELLO'\n * >>> flipCase('Hello', 'World')\n * 'hELLO wORLD'\n */\nconst flipCaseWithDefault = (string, defaultString) => {\n  return string? string.toUpperCase().toLowerCase().split('').reverse().join('').reverse().split('').reverse().join('').reverse().split('').reverse().join('') : defaultString;\n};\n\n/**\n * Given a string, return a new string with each character in uppercase and lowercase and flipped and flipped and flipped and flipped and flipped.\n * If no argument is given, return the string with each character in uppercase and lowercase and flipped and flipped and flipped and flipped and flipped.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'hELLO'\n * >>> flipCase('Hello', 'World')\n * 'hELLO wORLD'\n */\nconst flipCaseWithDefault = (string, defaultString) => {\n  return string? string.toUpperCase().toLowerCase().split('').reverse().join('').reverse().split('').reverse().join('').reverse().split('').reverse().join('').reverse().split('').reverse().join('') : defaultString;\n};\n\n/**\n * Given a string, return a new string with each character in uppercase and lowercase and flipped and flipped and flipped and flipped and flipped and flipped.\n * If no argument is given, return the string with each character in uppercase and lowercase and flipped and flipped and flipped and flipped and flipped and flipped and flipped.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'hELLO'\n * >>> flipCase('Hello', 'World')\n * 'hELLO wORLD'\n */\nconst flipCaseWithDefault = (string, defaultString) => {\n  return string? string.toUpperCase().toLowerCase().split('').reverse().join('').reverse().split('').reverse().join('').reverse().split('').reverse().join('').reverse().split('').reverse().join('').reverse().split('').reverse().join('') : defaultString;\n};\n\n/**\n * Given a string, return a new string with each character in uppercase and lowercase and flipped and flipped and flipped and flipped and flipped and flipped and flipped.\n * If no argument is given, return the string with each character in uppercase and lowercase and flipped and flipped and flipped and flipped and flipped and flipped and flipped and flipped.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'hELLO'\n * >>> flipCase('Hello', 'World')\n * 'hELLO wORLD'\n */\nconst flipCaseWithDefault = (string, defaultString) => {\n  return string? string.toUpperCase().toLowerCase().split('').reverse().join('').reverse().split('').reverse().join('').reverse().split('').reverse().join('').reverse().split('').reverse().join('').reverse().split('').reverse().join('') : defaultString;\n};\n\n/**\n * Given a string, return a new string with each character in uppercase and lowercase and flipped and flipped and flipped and flipped and flipped and flipped and flipped and flipped.\n * If no argument is given, return the string with each character in uppercase and lowercase and flipped and flipped and flipped and flipped and flipped and flipped and flipped and flipped and flipped.\n * >>> flipCase()\n * ''\n * >>> flipCase('Hello')\n * 'h", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/**\n * Converts a string to a boolean.\n * If the string is a valid boolean, returns it\n * Otherwise, returns false\n * \n * >>> toBoolean('true')\n * true\n * >>> toBoolean('false')\n * false\n * >>> toBoolean('1')\n * true\n * >>> toBoolean('0')\n * false\n * >>> toBoolean('yes')\n * true\n * >>> toBoolean('no')\n * false\n * >>> toBoolean('on')\n * true\n * >>> toBoolean('off')\n * false\n */\nconst toBoolean = (str) => {\n  if (str === \"true\" || str === \"false\" || str === \"1\" || str === \"0\" || str === \"yes\" || str === \"no\" || str === \"on\" || str === \"off\") {\n    return str === \"true\" || str === \"1\" || str === \"yes\";\n  }\n  return false;\n};\n\n/**\n * Converts a string to a number.\n * If the string is a valid number, returns it\n * Otherwise, returns 0\n * \n * >>> toNumber('1')\n * 1\n * >>> toNumber('1.1')\n * 1.1\n * >>> toNumber('yes')\n * 1\n * >>> toNumber('no')\n * 0\n * >>> toNumber('on')\n * 1\n * >>> toNumber('off')\n * 0\n */\nconst toNumber = (str) => {\n  if (str === \"1\" || str === \"0\" || str === \"yes\" || str === \"no\" || str === \"on\" || str === \"off\") {\n    return str === \"1\" || str === \"0\" || str === \"yes\" || str === \"no\" || str === \"on\" || str === \"off\"? str : 0;\n  }\n  return 0;\n};\n\n/**\n * Converts a string to a date.\n * If the string is a valid date, returns it\n * Otherwise, returns null\n * \n * >>> toDate('2018-01-22')\n * 2018-01-22\n * >>> toDate('2018-01-22T12:34:56')\n * 2018-01-22T12:34:56\n * >>> toDate('2018-01-22T12:34:56Z')\n * 2018-01-22T12:34:56Z\n * >>> toDate('2018-01-22T12:34:56+05:30')\n * 2018-01-22T12:34:56+05:30\n * >>> toDate('2018-01-22T12:34:56+05:30Z')\n * 2018-01-22T12:34:56+05:30Z\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30')\n * 2018-01-22T12:34:56+05:30+05:30\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30Z')\n * 2018-01-22T12:34:56+05:30+05:30Z\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30')\n * 2018-01-22T12:34:56+05:30+05:30+05:30\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30Z')\n * 2018-01-22T12:34:56+05:30+05:30+05:30Z\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30+05:30')\n * 2018-01-22T12:34:56+05:30+05:30+05:30+05:30\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30+05:30Z')\n * 2018-01-22T12:34:56+05:30+05:30+05:30+05:30Z\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30')\n * 2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30Z')\n * 2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30Z\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30')\n * 2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30Z')\n * 2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30Z\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30+05:30')\n * 2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30+05:30\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30+05:30+05:30Z')\n * 2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30+05:30+05:30Z\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30+05:30+05:30+05:30')\n * 2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30+05:30+05:30+05:30\n * >>> toDate('2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30+05:30+05:30+05:30+05:30Z')\n * 2018-01-22T12:34:56+05:30+05:30+05:30+05:30+05:30+05:30+05:30+", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> iflterByrSuffix([], 'a')\n  []\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst iflterByrSuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstring([], 'a')\n  []\n  >>> iflterByrSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst iflterByrSubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> iflterByrNoSubstring([], 'a')\n  []\n  >>> iflterByrNoSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> iflterByrNoPrefix([], 'a')\n  []\n  >>> iflterByrNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> iflterByrNoSuffix([], 'a')\n  []\n  >>> iflterByrNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> iflterByrNoSubstring([], 'a')\n  []\n  >>> iflterByrNoSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> iflterByrNoPrefix([], 'a')\n  []\n  >>> iflterByrNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> iflterByrNoSuffix([], 'a')\n  []\n  >>> iflterByrNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> iflterByrNoSubstring([], 'a')\n  []\n  >>> iflterByrNoSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> iflterByrNoPrefix([], 'a')\n  []\n  >>> iflterByrNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> iflterByrNoSuffix([], 'a')\n  []\n  >>> iflterByrNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> iflterByrNoSubstring([], 'a')\n  []\n  >>> iflterByrNoSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> iflterByrNoPrefix([], 'a')\n  []\n  >>> iflterByrNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> iflterByrNoSuffix([], 'a')\n  []\n  >>> iflterByrNoSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> iflterByrNoSubstring([], 'a')\n  []\n  >>> iflterByrNoSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> iflterByrNoPrefix([], 'a')\n  []\n  >>> iflterByrNoPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst iflterByrNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for one", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([-4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) return true;\n  }\n  return false;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*Return only numbers in the list that are multiples of 3.\n  >>> getMultiples([-1, 2, -4, 5, 6])\n  [-3, -3, -3, -3, -3]\n  >>> getMultiples([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-9, 0, 123, 1]\n  */\nconst getMultiples = (l) => {\n  return l.filter(n => n % 3 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 5.\n  >>> getFives([-1, 2, -4, 5, 6])\n  [-5, -5, -5, -5, -5]\n  >>> getFives([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getFives = (l) => {\n  return l.filter(n => n % 5 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 7.\n  >>> getSevens([-1, 2, -4, 5, 6])\n  [-7, -7, -7, -7, -7]\n  >>> getSevens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getSevens = (l) => {\n  return l.filter(n => n % 7 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 11.\n  >>> getElevens([-1, 2, -4, 5, 6])\n  [-11, -11, -11, -11, -11]\n  >>> getElevens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getElevens = (l) => {\n  return l.filter(n => n % 11 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 13.\n  >>> getThirteens([-1, 2, -4, 5, 6])\n  [-13, -13, -13, -13, -13]\n  >>> getThirteens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getThirteens = (l) => {\n  return l.filter(n => n % 13 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 17.\n  >>> getFifteens([-1, 2, -4, 5, 6])\n  [-17, -17, -17, -17, -17]\n  >>> getFifteens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getFifteens = (l) => {\n  return l.filter(n => n % 17 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 19.\n  >>> getNineteens([-1, 2, -4, 5, 6])\n  [-19, -19, -19, -19, -19]\n  >>> getNineteens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNineteens = (l) => {\n  return l.filter(n => n % 19 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 21.\n  >>> getTwenty([-1, 2, -4, 5, 6])\n  [-21, -21, -21, -21, -21]\n  >>> getTwenty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getTwenty = (l) => {\n  return l.filter(n => n % 21 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 23.\n  >>> getTwentyThrees([-1, 2, -4, 5, 6])\n  [-23, -23, -23, -23, -23]\n  >>> getTwentyThrees([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getTwentyThrees = (l) => {\n  return l.filter(n => n % 23 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 27.\n  >>> getThirtySevens([-1, 2, -4, 5, 6])\n  [-27, -27, -27, -27, -27]\n  >>> getThirtySevens([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getThirtySevens = (l) => {\n  return l.filter(n => n % 27 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 31.\n  >>> getThirtyOnes([-1, 2, -4, 5, 6])\n  [-31, -31, -31, -31, -31]\n  >>> getThirtyOnes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getThirtyOnes = (l) => {\n  return l.filter(n => n % 31 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 32.\n  >>> getFourtyTwos([-1, 2, -4, 5, 6])\n  [-32, -32, -32, -32, -32]\n  >>> getFourtyTwos([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getFourtyTwos = (l) => {\n  return l.filter(n => n % 32 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 33.\n  >>> getFourtyThrees([-1, 2, -4, 5, 6])\n  [-33, -33, -33, -33, -33]\n  >>> getFourtyThrees([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getFourtyThrees = (l) => {\n  return l.filter(n => n % 33 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 36.\n  >>> getFiftyFours([-1, 2, -4, 5, 6])\n  [-36, -36, -36, -36, -36]\n  >>> getFiftyFours([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getFiftyFours = (l) => {\n  return l.filter(n => n % 36 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 41.\n  >>> getFiftyFives([-1, 2, -4, 5, 6])\n  [-41, -41, -41, -41, -41]\n  >>> getFiftyFives([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getFiftyFives = (l) => {\n  return l.filter(n => n % 41 === 0);\n};\n\n/*Return only numbers in the list that are multiples of 42.\n  >>> getFiftySixes([-1, 2, -4, 5, 6])\n  [-42, -42, -42, -42, -42]\n  >>> getFiftySixes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n  }\n  if (n % 37 === 0) {\n    return false;\n  }\n  if (n % 43 === 0) {\n    return true;\n  }\n  if (n % 49 === 0) {\n    return false;\n  }\n  if (n % 63 === 0) {\n    return true;\n  }\n  if (n % 69 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n    return true;\n  }\n  if (n % 97 === 0) {\n    return false;\n  }\n  if (n % 103 === 0) {\n    return true;\n  }\n  if (n % 105 === 0) {\n    return false;\n  }\n  if (n % 111 === 0) {\n    return true;\n  }\n  if (n % 127 === 0) {\n    return false;\n  }\n  if (n % 131 === 0) {\n    return true;\n  }\n  if (n % 139 === 0) {\n    return false;\n  }\n  if (n % 143 === 0) {\n    return true;\n  }\n  if (n % 147 === 0) {\n    return false;\n  }\n  if (n % 151 === 0) {\n    return true;\n  }\n  if (n % 157 === 0) {\n    return false;\n  }\n  if (n % 163 === 0) {\n    return true;\n  }\n  if (n % 167 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {\n    return true;\n  }\n  if (n % 177 === 0) {\n    return false;\n  }\n  if (n % 183 === 0) {\n    return true;\n  }\n  if (n % 185 === 0) {\n    return false;\n  }\n  if (n % 191 === 0) {\n    return true;\n  }\n  if (n % 197 === 0) {\n    return false;\n  }\n  if (n % 203 === 0) {\n    return true;\n  }\n  if (n % 205 === 0) {\n    return false;\n  }\n  if (n % 211 === 1) {\n    return true;\n  }\n  if (n % 217 === 1) {\n    return false;\n  }\n  if (n % 223 === 1) {\n    return true;\n  }\n  if (n % 227 === 1) {\n    return false;\n  }\n  if (n % 239 === 1) {\n    return true;\n  }\n  if (n % 243 === 1) {\n    return false;\n  }\n  if (n % 247 === 1) {\n    return true;\n  }\n  if (n % 251 === 1) {\n    return false;\n  }\n  if (n % 257 === 1) {\n    return true;\n  }\n  if (n % 263 === 1) {\n    return true;\n  }\n  if (n % 269 === 1) {\n    return false;\n  }\n  if (n % 273 === 1) {\n    return true;\n  }\n  if (n % 279 === 1) {\n    return false;\n  }\n  if (n % 283 === 1) {\n    return true;\n  }\n  if (n % 287 === 1) {\n    return false;\n  }\n  if (n % 291 === 1) {\n    return true;\n  }\n  if (n % 297 === 1) {\n    return false;\n  }\n  if (n % 303 === 1) {\n    return true;\n  }\n  if (n % 305 === 1) {\n    return false;\n  }\n  if (n % 309 === 1) {\n    return true;\n  }\n  if (n % 313 === 1) {\n    return false;\n  }\n  if (n % 315 === 1) {\n    return true;\n  }\n  if (n % 317 === 1) {\n    return false;\n  }\n  if (n % 323 === 1) {\n    return true;\n  }\n  if (n % 325 === 1) {\n    return false;\n  }\n  if (n % 329 === 1) {\n    return true;\n  }\n  if (n % 333 === 1) {\n    return false;\n  }\n  if (n % 337 === 1) {\n    return true;\n  }\n  if (n % 343 === 1) {\n    return false;\n  }\n  if (n % 345 === 1) {\n    return true;\n  }\n  if (n % 349 === 1) {\n    return false;\n  }\n  if (n % 353 === 1) {\n    return true;\n  }\n  if (n % 357 === 1) {\n    return false;\n  }\n  if (n % 363 === 1) {\n    return true;\n  }\n  if (n % 365 === 1) {\n    return false;\n  }\n  if (n % 369 === 1) {\n    return true;\n  }\n  if (n % 373 === 1) {\n    return false;\n  }\n  if (n % 375 === 1) {\n    return true;\n  }\n  if (n % 379 === 1) {\n    return false;\n  }\n  if (n % 383 === 1) {\n    return true;\n  }\n  if (n % 385 === 1) {\n    return false;\n  }\n  if (n % 389 === 1) {\n    return true;\n  }\n  if (n % 393 === 1) {\n    return false;\n  }\n  if (n % 395 === 1) {\n    return true;\n  }\n  if (n % 397 === 1) {\n    return false;\n  }\n  if (n % 403 === 1) {\n    return true;\n  }\n  if (n % 405 === 1) {\n    return false;\n  }\n  if (n % 409 === 1) {\n    return true;\n  }\n  if (n % 413 === 1) {\n    return false;\n  }\n  if (n % 415 === 1) {\n    return true;\n  }\n  if (n % 417 === 1) {\n    return false;\n  }\n  if (n % 423 === 1) {\n    return true;\n  }\n  if (n % 425 === 1) {\n    return false;\n  }\n  if (n % 429 === 1) {\n    return true;\n  }\n  if (n % 433 === 1) {\n    return false;\n  }\n  if (n % 437 === 1) {\n    return true;\n  }\n  if (n % 443 === 1) {\n    return false;\n  }\n  if (n % 449 === 1) {\n    return true;\n  }\n  if (n % 467 === 1) {\n    return false;\n  }\n  if (n % 473 === 1) {\n    return true;\n  }\n  if (n % 479 === 1) {\n    return false;\n  }\n  if (n % 483 === 1) {\n    return true;\n  }\n  if (n % 487 === 1) {\n    return false;\n  }\n  if (n % 491 === 1) {\n    return true;\n  }\n  if (n % 497 === 1) {\n    return false;\n  }\n  if (n % 503 === 1) {\n    return true;\n  }\n  if (n % 509 === 1) {\n    return false;\n  }\n  if (n % 523 === 1) {\n    return true;\n  }\n  if (n % 529 === 1) {\n    return false;\n  }\n  if (n % 533 === 1) {\n    return true;\n  }\n  if (n % 537 === 1) {\n    return false;\n  }\n  if (n % 543 === 1) {\n    return true;\n  }\n  if (n % 549 === 1) {\n    return false;\n  }\n  if (n % 553 === 1) {\n    return true;\n  }\n  if (n % 557 === 1) {\n    return false;\n  }\n  if (n % 563 === 1) {\n    return true;\n  }\n  if (n % 569 === 1) {\n    return false;\n  }\n  if (n % 573 === 1) {\n    return true;\n  }\n  if (n % 577 === 1) {\n    return false;\n  }\n  if (n % 583 === 1) {\n    return true;\n  }\n  if (n % 587 === 1) {\n    return false;\n  }\n  if (n % 593 === 1) {\n    return true;\n  }\n  if (n % 597 === 1) {\n    return false;\n  }\n  if (n % 603 === 1) {\n    return true;\n  }\n  if (n % 609!== 1) {\n    return false;\n  }\n  if (n % 613 === 1) {\n    return true;\n  }\n  if (n % 617 === 1) {\n    return false;\n  }\n  if (n % 619 === 1) {\n    return true;\n  }\n  if (n % 623 === 1) {\n    return false;\n  }\n  if (n % 627 === 1) {\n    return true;\n  }\n  if (n % 629 === 1) {\n    return false;\n  }\n  if (n % 633 === 1) {\n    return true;\n  }\n  if (n % 637 === 1) {\n    return false;\n  }\n  if (n % 643 === 1) {\n    return true;\n  }\n  if (n % 649 === 1) {\n    return false;\n  }\n  if (n % 653 === 1) {\n    return true;\n  }\n  if (n % 657 === 1) {\n    return false;\n  }\n  if (n % 663 === 1) {\n    return true;\n  }\n  if (n % 669 === 1) {\n    return false;\n  }\n  if (n % 673 === 1) {\n    return true;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (poly(xs, x) === 0) {\n      found = true;\n      break;\n    }\n    x += xs[i];\n  }\n  if (found) {\n    return x;\n  }\n  return findZero(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (poly(xs, x) === xs[i]) {\n      found = true;\n      break;\n    }\n    x += xs[i];\n  }\n  if (found) {\n    return x;\n  }\n  return findMax(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (poly(xs, x) === xs[i]) {\n      found = true;\n      break;\n    }\n    x += xs[i];\n  }\n  if (found) {\n    return x;\n  }\n  return findMin(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMin find x such that poly(x) = min of all xs.\n  findMax returns only max point, even if there are many.\n  findMin returns only min point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMaxMin = (xs) => {\n  let x = 0;\n  let foundMax = false;\n  let foundMin = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (poly(xs, x) === xs[i]) {\n      if (foundMax) {\n        return x;\n      }\n      foundMax = true;\n      x += xs[i];\n    } else if (poly(xs, x) === -xs[i]) {\n      if (foundMin) {\n        return x;\n      }\n      foundMin = true;\n      x += xs[i];\n    }\n  }\n  return foundMax? x : findMax(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMin find x such that poly(x) = min of all xs.\n  findMax returns only max point, even if there are many.\n  findMin returns only min point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMaxMinAll = (xs) => {\n  let x = 0;\n  let foundMax = false;\n  let foundMin = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (poly(xs, x) === xs[i]) {\n      if (foundMax) {\n        return x;\n      }\n      foundMax = true;\n      x += xs[i];\n    } else if (poly(xs, x) === -xs[i]) {\n      if (foundMin) {\n        return x;\n      }\n      foundMin = true;\n      x += xs[i];\n    }\n  }\n  return foundMax? x : findMax(xs.reverse());\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMin find x such that poly(x) = min of all xs.\n  findMax returns only max point, even if there are many.\n  findMin returns only min point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMaxMinAllEven = (xs) => {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      newList.push(l[i]);\n    }\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n    }\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortSeventh = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n    }\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortNineth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNineth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortNineth = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n    }\n  }\n  return newList;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortTwenty = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);\n      newList.push(l[i]);", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = true\n  }\n  return a\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort()\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sort = (l) => {\n  return l.sort((a, b) => a - b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortBy = (l, fn) => {\n  return l.sort(fn)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDesc = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {\n ...   return a - b\n ... })\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortByDescending = (l, fn) => {\n  return l.sort(function (a, b) {\n    return fn(b) - fn(a)\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(function (a, b) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max;\n  let maxIndex;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min;\n  let minIndex;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return average of all elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -7.5\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return median of all elements in the list.\n  >>> medianElements([1, 2, 3])\n  2\n  >>> medianElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst medianElements = (l) => {\n  let sortedArray = l.slice().sort((a, b) => a - b);\n  let middleIndex = Math.floor(sortedArray.length / 2);\n  return sortedArray[middleIndex];\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (count > maxCount) {\n        modes.push(l[i]);\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      let count = 0;\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === l[i]) {\n          count++;\n        }\n      }\n      if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  1\n  >>> fizzBuzz(79)\n  1\n  */\nconst fizzBuzz = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return 1;\n  }\n  return fizzBuzz(n - 1);\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are di", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  const even = l.filter((x, i) => i % 2 === 0);\n  const odd = l.filter((x, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sotrOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sotrOdd = (l) => {\n  const even = l.filter((x, i) => i % 2 === 0);\n  const odd = l.filter((x, i) => i % 2 === 1);\n  return even.concat(odd).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order.\n  >>> sortAsc([1, 2, 3])\n  [1, 2, 3]\n  >>> sortAsc([5, 6, 3, 4])\n  [1, 2, 3, 4]\n  */\nconst sortAsc = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order.\n  >>> sortDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortDesc([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortDesc = (l) => {\n  return l.sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the first element of l.\n  >>> sortByFirst([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByFirst([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortByFirst = (l) => {\n  return l.sort((a, b) => a - b[0]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the first element of l.\n  >>> sortByFirstDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortByFirstDesc([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortByFirstDesc = (l) => {\n  return l.sort((a, b) => b[0] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the second element of l.\n  >>> sortBySecond([1, 2, 3])\n  [1, 2, 3]\n  >>> sortBySecond([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortBySecond = (l) => {\n  return l.sort((a, b) => a - b[1]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the second element of l.\n  >>> sortBySecondDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortBySecondDesc([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortBySecondDesc = (l) => {\n  return l.sort((a, b) => b[1] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the third element of l.\n  >>> sortByThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByThird([5, 6, 3, 4])\n  [5, 6, 4, 3]\n  */\nconst sortByThird = (l) => {\n  return l.sort((a, b) => a - b[2]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the third element of l.\n  >>> sortByThirdDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortByThirdDesc([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortByThirdDesc = (l) => {\n  return l.sort((a, b) => b[2] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the fourth element of l.\n  >>> sortByFourth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByFourth([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortByFourth = (l) => {\n  return l.sort((a, b) => a - b[3]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the fourth element of l.\n  >>> sortByFourthDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortByFourthDesc([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortByFourthDesc = (l) => {\n  return l.sort((a, b) => b[3] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the fifth element of l.\n  >>> sortByFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortByFifth([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortByFifth = (l) => {\n  return l.sort((a, b) => a - b[4]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the fifth element of l.\n  >>> sortByFifthDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortByFifthDesc([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortByFifthDesc = (l) => {\n  return l.sort((a, b) => b[4] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the sixth element of l.\n  >>> sortBySixth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortBySixth([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortBySixth = (l) => {\n  return l.sort((a, b) => a - b[5]);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in descending order by the sixth element of l.\n  >>> sortBySixthDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortBySixthDesc([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortBySixthDesc = (l) => {\n  return l.sort((a, b) => b[5] - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l, but sorted in ascending order by the seventh element of l.\n  >>> sortBySeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortBySeventh([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortBySeventh = (l) => {\n  return l.sort((a, b) => a - b[6]);\n};\n\n/*This function takes a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 1) {\n    groups.push(s.slice(i, i + 1));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 4) {\n    groups.push(s.slice(i, i + 4));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0] + group[1] + group[2] + group[3]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 5) {\n    groups.push(s.slice(i, i + 5));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0] + group[1] + group[2] + group[3]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0] + group[1] + group[2] + group[3] + group[4]);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeFib(Math.floor(n / 2)) + primeFib(Math.floor(n / 2) + 1);\n  return primeFib(Math.floor(n / 2)) + primeFib(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n <= 1) return n;\n  if (n === 2) return 3;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th number that is a prime number and it's also Fibonacci number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - meanValue;\n    return Math.abs(diff);\n  });\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - medianValue;\n    return Math.abs(diff);\n  });\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - modeValue;\n    return Math.abs(diff);\n  });\n  return mode(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - medianValue;\n    return Math.abs(diff);\n  });\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - modeValue;\n    return Math.abs(diff);\n  });\n  return mode(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - meanValue;\n    return Math.abs(diff);\n  });\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - medianValue;\n    return Math.abs(diff);\n  });\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - modeValue;\n    return Math.abs(diff);\n  });\n  return mode(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - medianValue;\n    return Math.abs(diff);\n  });\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - modeValue;\n    return Math.abs(diff);\n  });\n  return mode(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - meanValue;\n    return Math.abs(diff);\n  });\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((number) => {\n    const diff = number - medianValue;\n    return Math.abs(diff);\n  });\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to seven, and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to eight, and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToNine takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to nine, and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToNine([1])\n  false\n  */\nconst triplesSumToNine = (l", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollision = (i, j) => {\n  let collision = false;\n  let xi = acrRacelX(i);\n  let yi = acrRacelY(i);\n  let xj = acrRacelX(j);\n  let yj = acrRacelY(j);\n  let xd = xj - xi;\n  let yd = yj - yi;\n  let d = Math.sqrt(xd * xd + yd * yd);\n  if (d < acrRacelRadius * acrRacelRadius) {\n    collision = true;\n  }\n  return collision;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollisions = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollisions = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollisions = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollisions = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelCollisions = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (acrRacelCollision(i, j)) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] + i;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newL = [];\n  for (let j = 0; j < l.length; j++) {\n    newL[j] = l[j] - i;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremen", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "<|endoftext|>/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> ap", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(8, 3)\n  '22'\n  >>> changeBaseString(8, 2)\n  '1000'\n  >>> changeBaseString(7, 2)\n  '111'\n  */\nconst changeBaseString = (x, base) => {\n  let result = x;\n  while (result > base) {\n    result /= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBaseString(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return area of its perimeter.\n  >>> trianglePerimeter(3, 3)\n  5\n  */\nconst trianglePerimeter = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return area of its hypotenuse.\n  >>> triangleHypotenuse(3, 3)\n  5\n  */\nconst triangleHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral triangle.\n  >>> triangleEquilateral(3, 3)\n  5\n  */\nconst triangleEquilateral = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene.\n  >>> triangleScalene(3, 3)\n  5\n  */\nconst triangleScalene = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene.\n  >>> triangleEquilateralScalene(3, 3)\n  5\n  */\nconst triangleEquilateralScalene = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene with its hypotenuse.\n  >>> triangleScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene with its hypotenuse.\n  >>> triangleEquilateralScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleEquilateralScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene with its hypotenuse.\n  >>> triangleScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene with its hypotenuse.\n  >>> triangleEquilateralScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleEquilateralScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene with its hypotenuse.\n  >>> triangleScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene with its hypotenuse.\n  >>> triangleEquilateralScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleEquilateralScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene with its hypotenuse.\n  >>> triangleScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene with its hypotenuse.\n  >>> triangleEquilateralScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleEquilateralScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene with its hypotenuse.\n  >>> triangleScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene with its hypotenuse.\n  >>> triangleEquilateralScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleEquilateralScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene with its hypotenuse.\n  >>> triangleScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene with its hypotenuse.\n  >>> triangleEquilateralScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleEquilateralScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene with its hypotenuse.\n  >>> triangleScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene with its hypotenuse.\n  >>> triangleEquilateralScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleEquilateralScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene with its hypotenuse.\n  >>> triangleScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene with its hypotenuse.\n  >>> triangleEquilateralScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleEquilateralScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene with its hypotenuse.\n  >>> triangleScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene with its hypotenuse.\n  >>> triangleEquilateralScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleEquilateralScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its scalene with its hypotenuse.\n  >>> triangleScaleneWithHypotenuse(3, 3)\n  5\n  */\nconst triangleScaleneWithHypotenuse = (a, h) => {\n  return Math.sqrt(a * a + h * h)\n}\n\n/*Given a triangle, return area of its equilateral scalene with its hypotenuse.\n  >>> triangleEquilateralScaleneWithHypotenuse(3, 3)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to compute the sum of the numbers from 1 to n.  Do not use recursion.\n  >>> sumOfFib(5)\n  25\n  >>> sumOfFib(6)\n  49\n  >>> sumOfFib(7)\n  70\n  >>> sumOfFib(8)\n  89\n  >>> sumOfFib(9)\n  144\n  >>> sumOfFib(10)\n  233\n  >>> sumOfFib(11)\n  377\n  >>> sumOfFib(12)\n  610\n  >>> sumOfFib(13)\n  987\n  >>> sumOfFib(14)\n  1597\n  >>> sumOfFib(15)\n  2584\n  >>> sumOfFib(16)\n  4181\n  >>> sumOfFib(17)\n  6765\n  >>> sumOfFib(18)\n  10946\n  >>> sumOfFib(19)\n  17711\n  >>> sumOfFib(20)\n  28657\n  >>> sumOfFib(21)\n  46368\n  >>> sumOfFib(22)\n  75025\n  >>> sumOfFib(23)\n  121393\n  >>> sumOfFib(24)\n  196418\n  >>> sumOfFib(25)\n  317811\n  >>> sumOfFib(26)\n  514229\n  >>> sumOfFib(27)\n  832040\n  >>> sumOfFib(28)\n  1346269\n  >>> sumOfFib(29)\n  2178309\n  >>> sumOfFib(30)\n  3524578\n  >>> sumOfFib(31)\n  5702887\n  >>> sumOfFib(32)\n  927353\n  >>> sumOfFib(33)\n  14930352\n  >>> sumOfFib(34)\n  24157817\n  >>> sumOfFib(35)\n  39088169\n  >>> sumOfFib(36)\n  63245986\n  >>> sumOfFib(37)\n  102334155\n  >>> sumOfFib(38)\n  165580141\n  >>> sumOfFib(39)\n  267914296\n  >>> sumOfFib(40)\n  433494437\n  >>> sumOfFib(41)\n  701408733\n  >>> sumOfFib(42)\n  1134903170\n  >>> sumOfFib(43)\n  1836311903\n  >>> sumOfFib(44)\n  2971215073\n  >>> sumOfFib(45)\n  4494557013\n  >>> sumOfFib(46)\n  7068725065\n  >>> sumOfFib(47)\n  11349031799\n  >>> sumOfFib(48)\n  18363119301\n  >>> sumOfFib(49)\n  29712150737\n  >>> sumOfFib(50)\n  449455701393\n  >>> sumOfFib(51)\n  706872506513\n  >>> sumOfFib(52)\n  1134903179987\n  >>> sumOfFib(53)\n  1836311930141\n  >>> sumOfFib(54)\n  2971215073743\n  >>> sumOfFib(55)\n  44945570139387\n  >>> sumOfFib(56)\n  70687250651357\n  >>> sumOfFib(57)\n  113490317998746\n  >>> sumOfFib(58)\n  183631193014161\n  >>> sumOfFib(59)\n  297121507374349\n  >>> sumOfFib(60)\n  4494557013938746\n  >>> sumOfFib(61)\n  7068725065135746\n  >>> sumOfFib(62)\n  11349031799874657\n  >>> sumOfFib(63)\n  18363119301416171\n  >>> sumOfFib(64)\n  29712150737434974\n  >>> sumOfFib(65)\n  449455701393874657\n  >>> sumOfFib(66)\n  706872506513574657\n  >>> sumOfFib(67)\n  113490317998746577\n  >>> sumOfFib(68)\n  183631193014161719\n  >>> sumOfFib(69)\n  2971215073743497419\n  >>> sumOfFib(70)\n  4494557013938746577\n  >>> sumOfFib(71)\n  7068725065135746577\n  >>> sumOfFib(72)\n  11349031799874657729\n  >>> sumOfFib(73)\n  18363119301416171931\n  >>> sumOfFib(74)\n  297121507374349741931\n  >>> sumOfFib(75)\n  449455701393874657729\n  >>> sumOfFib(76)\n  706872506513574657729\n  >>> sumOfFib(77)\n  1134903179987465772939\n  >>> sumOfFib(78)\n  183631193014161719313\n  >>> sumOfFib(79)\n  2971215073743497419313\n  >>> sumOfFib(80)\n  44945570139387465772939\n  >>> sumOfFib(81)\n  70687250651357465772939\n  >>> sumOfFib(82)\n  113490317998746577293945\n  >>> sumOfFib(83)\n  1836311930141617193135\n  >>> sumOfFib(84)\n  29712150737434974193135\n  >>> sumOfFib(85)\n  4494557013938746577293945\n  >>> sumOf", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < mid) {\n    median += l[count];\n    count++;\n  }\n\n  median /= mid;\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n\n  while (count < ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.substr(1)) && isPalindromeRecursive(text.substr(0, text.length - 1));\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res % p;\n};\n\n/*\n  >>> modpow(3, 5, 7)\n  3\n  >>> modpow(1101, 101, 7)\n  3\n  >>> modpow(0, 101, 7)\n  1\n  >>> modpow(3, 11, 7)\n  7\n  >>> modpow(100, 101, 7)\n  1\n  */\nconst modpow = (n, p, m) => {\n  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  for (let i = 0; i < m; i++) {\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> isqrt(9)\n  3\n  >>> isqrt(8)\n  2\n  >>> isqrt(7)\n  2\n  >>> isqrt(6)\n  2\n  >>> isqrt(5)\n  2\n  >>> isqrt(4)\n  2\n  >>> isqrt(3)\n  2\n  >>> isqrt(2)\n  2\n  >>> isqrt(1)\n  2\n  >>> isqrt(0)\n  1\n  */\nconst isqrt = n => {\n  let res = 1;\n  for (let i = 1; i < n; i++) {\n    res *= i;\n  }\n  return res;\n};\n\n/*\n  >>> isqrt(0)\n  1\n  >>> isqrt(1)\n  1\n  >>> isqrt(2)\n  1\n  >>> isqrt(3)\n  1\n  >>> isqrt(4)\n  1\n  >>> isqrt(5)\n  1\n  >>> isqrt(6)\n  1\n  >>> isqrt(7)\n  1\n  >>> isqrt(8)\n  1\n  >>> isqrt(9)\n  1\n  */\nconst isqrt = (n, m) => {\n  let res = 1;\n  for (let i = 1; i < n; i++) {\n    res *= i;\n  }\n  for (let i = 1; i < m; i++) {\n    res %= i;\n  }\n  return res;\n};\n\n/*\n  >>> isqrt(0)\n  1\n  >>> isqrt(1)\n  1\n  >>> isqrt(2)\n  1\n  >>> isqrt(3)\n  1\n  >>> isqrt(4)\n  1\n  >>> isqrt(5)\n  1\n  >>> isqrt(6)\n  1\n  >>> isqrt(7)\n  1\n  >>> isqrt(8)\n  1\n  >>> isqrt(9)\n  1\n  */\nconst isqrt = (n, m) => {\n  let res = 1;\n  for (let i = 1; i < n; i++) {\n    res *= i;\n  }\n  for (let i = 1; i < m; i++) {\n    res %= i;\n  }\n  return res;\n};\n\n/*\n  >>> isqrt(0)\n  1\n  >>> isqrt(1)\n  1\n  >>> isqrt(2)\n  1\n  >>> isqrt(3)\n  1\n  >>> isqrt(4)\n  1\n  >>> isqrt(5)\n  1\n  >>> isqrt(6)\n  1\n  >>> isqrt(7)\n  1\n  >>> isqrt(8)\n  1\n  >>> isqrt(9)\n  1\n  */\nconst isqrt = (n, m) => {\n  let res = 1;\n  for (let i = 1; i < n; i++) {\n    res *= i;\n  }\n  for (let i = 1; i < m; i++) {\n    res %= i;\n  }\n  return res;\n};\n\n/*\n  >>> isqrt(0)\n  1\n  >>> isqrt(1)\n  1\n  >>> isqrt(2)\n  1\n  >>> isqrt(3)\n  1\n  >>> isqrt(4)\n  1\n  >>> isqrt(5)\n  1\n  >>> isqrt(6)\n  1\n  >>> isqrt(7)\n  1\n  >>> isqrt(8)\n  1\n  >>> isqrt(9)\n  1\n  */\nconst isqrt = (n, m) => {\n  let res = 1;\n  for (let i = 1; i < n; i++) {\n    res *= i;\n  }\n  for (let i = 1; i < m; i++) {\n    res %= i;\n  }\n  return res;\n};\n\n/*\n  >>> isqrt(0)\n  1\n  >>> isqrt(1)\n  1\n  >>> isqrt(2)\n  1\n  >>> isqrt(3)\n  1\n  >>> isqrt(4)\n  1\n  >>> isqrt(5)\n  1\n  >>> isqrt(6)\n  1\n  >>> isqrt(7)\n  1\n  >>> isqrt(8)\n  1\n  >>> isqrt(9)\n  1\n  */\nconst isqrt = (n, m) => {\n  let res = 1;\n  for (let i = 1; i < n; i++) {\n    res *= i;\n  }\n  for (let i = 1; i < m; i++) {\n    res %= i;\n  }\n  return res;\n};\n\n/*\n  >>> isqrt(0)\n  1\n  >>> isqrt(1)\n  1\n  >>> isqrt(2)\n  1\n  >>> isqrt(3)\n  1\n  >>> isqrt(4)\n  1\n  >>> isqrt(5)\n  1\n  >>> isqrt(6)\n  1\n  >>> isqrt(7)\n  1\n  >>> isqrt(8)\n  1\n  >>> isqrt(9)\n  1\n  */\nconst isqrt = (n, m) => {\n  let res = 1;\n  for (let i = 1; i < n; i++) {\n    res *= i;\n  }\n  for (let i = 1; i < m; i++) {\n    res %= i;\n  }\n  return res;\n};\n\n/*\n  >>> isqrt(0)\n  1\n  >>> isqrt(1)\n  1\n  >>> isqrt(2)\n  1\n  >>> isqrt(3)\n  1\n  >>> isqrt(4)\n  1\n  >>> isqrt(5)\n  1\n  >>> isqrt(6)\n  1\n  >>> isqrt(7)\n  1\n  >>> isqrt(8)\n  1\n  >>> isqrt(9)\n  1\n  */\nconst isqrt = (n, m) => {\n  let res = 1;\n  for (let i = 1; i < n; i++) {\n    res *= i;\n  }\n  for (let i = 1; i < m; i++) {\n    res %= i;\n  }\n  return res;\n};\n\n/*\n  >>> isqrt(0)\n  1\n  >>> isqrt(1)\n  1\n  >>> isqrt(2)\n  1\n  >>> isqrt(3)\n  1\n  >>> isqrt(4)\n  1\n  >>> isqrt(5)\n  1\n  >>> isqrt(6)\n  1\n  >>> isqrt(7)\n  1\n  >>> isqrt(8)\n  1\n  >>> isqrt(9)\n  1\n  */\nconst isqrt = (n, m) => {\n  let res = 1;\n  for (let i = 1; i < n; i++) {\n    res ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] === numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else if (numbers[i] > numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[j]);\n      j++;\n    }\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([2, 3], 4)\n  [2, 4, 3]\n  >>> interpserse([2, 3], 5)\n  [2, 3, 4]\n  >>> interpserse([2, 3], 6)\n  [2, 3, 4]\n  >>> interpserse([2, 3], 7)\n  [2, 3, 4]\n  >>> interpserse([2, 3], 8)\n  [2, 3, 4]\n  >>> interpserse([2, 3], 9)\n  [2, 3, 4]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] === numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else if (numbers[i] > numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[j]);\n      j++;\n    }\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([2, 3], 4)\n  [1, 4, 2, 3]\n  >>> interpserse([2, 3], 5)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 6)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 7)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 8)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 9)\n  [1, 2, 3, 4]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] === numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else if (numbers[i] > numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[j]);\n      j++;\n    }\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([2, 3], 4)\n  [1, 4, 2, 3]\n  >>> interpserse([2, 3], 5)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 6)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 7)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 8)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 9)\n  [1, 2, 3, 4]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] === numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else if (numbers[i] > numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[j]);\n      j++;\n    }\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([2, 3], 4)\n  [1, 4, 2, 3]\n  >>> interpserse([2, 3], 5)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 6)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 7)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 8)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 9)\n  [1, 2, 3, 4]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] === numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else if (numbers[i] > numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[j]);\n      j++;\n    }\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([2, 3], 4)\n  [1, 4, 2, 3]\n  >>> interpserse([2, 3], 5)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 6)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 7)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 8)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 9)\n  [1, 2, 3, 4]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] === numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else if (numbers[i] > numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[j]);\n      j++;\n    }\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([2, 3], 4)\n  [1, 4, 2, 3]\n  >>> interpserse([2, 3], 5)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 6)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 7)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 8)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 9)\n  [1, 2, 3, 4]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] === numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else if (numbers[i] > numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[j]);\n      j++;\n    }\n  }\n  return result;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([2, 3], 4)\n  [1, 4, 2, 3]\n  >>> interpserse([2, 3], 5)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 6)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 7)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 8)\n  [1, 2, 3, 4]\n  >>> interpserse([2, 3], 9)\n  [1, 2, 3, 4]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    if (numbers[i] === numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else if (numbers[i] > numbers[j]) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[j]);\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encodRotate = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rotate function. Returns decoded string.\n  */\nconst decodeRotate = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "<|endoftext|>/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return text\n   .replace(/[aeiou]/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n   .replace(/[aeiou]+/g, '')\n   .replace(/[aeiouy]+/g, '')\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThresholdNegative([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThresholdNegative([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholdNegative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t - delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdNegative([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdNegative([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdNegative([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdNegative = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 5)\n  true\n  >>> equalThresholdZero([1, 20, 4, 10], 10)\n  false\n  */\nconst equalThresholdZero = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equalThresholdZero([1, 2, 4, 10], 100)\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.2\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-5)\n  -1\n  >>> sign(5)\n  1\n  */\nconst sign = x => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = x => {\n  return x < 0? 1 : x * factorial(x - 1);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  -5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x, n) => {\n  return x < 0? 1 : x * factorial(x - 1, n);\n};\n\n/*", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers in an array.\n  >>> fibs([10, 20, 30, 40])\n  [1, 1, 2, 3]\n  */\nconst fibs = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(fib(i));\n  }\n  return arr;\n};\n\n/*Return Fibonacci ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Given a string, return an array of all possible valid brackets.\n * \n * >>> brackets(\"<\")\n * [\"<\", \"<\"]\n * >>> brackets(\"<>\")\n * [\"<\", \"<\", \">\", \">\"]\n * >>> brackets(\"<<><>>\")\n * [\"<\", \"<\", \">\", \">\", \"<\", \">\", \">\"]\n * >>> brackets(\"><<>\")\n * [\">\", \">\", \"<\", \">\", \">\", \"<\", \">\"]\n */\nconst brackets = (str) => {\n  const openingBrackets = str.match(/\\<+/g);\n  const closingBrackets = str.match(/\\>+/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \"<\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \">\" + i)\n  ) : openingBracketsCount > closingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \"<\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \">\" + i)\n  ) : closingBracketsCount > openingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \">\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \"<\" + i)\n  ) : [];\n};\n\n/**\n * Given a string, return an array of all possible valid brackets.\n * \n * >>> bracketsAll(\"<\")\n * [\"<\", \"<\", \">\", \">\"]\n * >>> bracketsAll(\"<>\")\n * [\"<\", \"<\", \">\", \">\", \">\", \">\"]\n * >>> bracketsAll(\"<<><>>\")\n * [\"<\", \"<\", \">\", \">\", \"<\", \">\", \">\", \">\", \">\", \">\", \">\"]\n * >>> bracketsAll(\"><<>\")\n * [\">\", \">\", \"<\", \">\", \">\", \"<\", \">\", \">\", \">\", \">\", \">\"]\n */\nconst bracketsAll = (str) => {\n  const openingBrackets = str.match(/\\<+/g);\n  const closingBrackets = str.match(/\\>+/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \"<\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \">\" + i)\n  ) : openingBracketsCount > closingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \"<\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \">\" + i)\n  ) : closingBracketsCount > openingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \">\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \"<\" + i)\n  ) : [];\n};\n\n/**\n * Given a string, return an array of all possible valid brackets.\n * \n * >>> bracketsAll(\"<<><>>\")\n * [\"<\", \"<\", \">\", \">\", \"<\", \">\", \">\", \">\", \">\", \">\", \">\"]\n * >>> bracketsAll(\"><<>\")\n * [\">\", \">\", \"<\", \">\", \">\", \"<\", \">\", \">\", \">\", \">\", \">\"]\n */\nconst bracketsAll2 = (str, brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \"<\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \">\" + i)\n  ) : openingBracketsCount > closingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \"<\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \">\" + i)\n  ) : closingBracketsCount > openingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \">\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \"<\" + i)\n  ) : [];\n};\n\n/**\n * Given a string, return an array of all possible valid brackets.\n * \n * >>> bracketsAll2(\"<<><>>\", [\"<\", \"<\", \">\", \">\"])\n * [\"<\", \"<\", \">\", \">\", \"<\", \">\", \">\", \">\", \">\", \">\"]\n * >>> bracketsAll2(\"><<>\", [\"<\", \"<\", \">\", \">\"])\n * [\">\", \">\", \"<\", \">\", \">\", \"<\", \">\", \">\", \">\", \">\"]\n */\nconst bracketsAll3 = (str, brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \"<\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \">\" + i)\n  ) : openingBracketsCount > closingBracketsCount? [...Array(openingBracketsCount)].map((_, i) => \"<\" + i).concat(\n    [...Array(closingBracketsCount)].map((_, i) => \">\" + i)\n  ) : closingBracketsCount > openingBracket", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "<|endoftext|>/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] > l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] < l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] > l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] < l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] > l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] < l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] > l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] > l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] < l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] > l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i, j, k;\n  const n = l.length;\n  const m = l[0];\n  if (n <= 1) return true;\n  if (m === 0) return false;\n  if (m > n) return true;\n  for (j = 1; j < n; j++) {\n    for (k = 0; k < j; k++) {\n      if (l[j] < l[k]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  8\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors(4, 6)\n  2\n  >>> numberOfDivisors(4, 7)\n  1\n  >>> numberOfDivisors(4, 8)\n  0\n  >>> numberOfDivisors(4, 9)\n  0\n  >>> numberOfDivisors(4, 10)\n  0\n  >>> numberOfDivisors(4, 11)\n  0\n  >>> numberOfDivisors(4, 12)\n  0\n  >>> numberOfDivisors(4, 13)\n  0\n  >>> numberOfDivisors(4, 14)\n  0\n  >>> numberOfDivisors(4, 15)\n  0\n  >>> numberOfDivisors(4, 16)\n  0\n  >>> numberOfDivisors(4, 17)\n  0\n  >>> numberOfDivisors(4, 18)\n  0\n  >>> numberOfDivisors(4, 19)\n  0\n  >>> numberOfDivisors(4, 20)\n  0\n  >>> numberOfDivisors(4, 21)\n  0\n  >>> numberOfDivisors(4, 22)\n  0\n  >>> numberOfDivisors(4, 23)\n  0\n  >>> numberOfDivisors(4, 24)\n  0\n  >>> numberOfDivisors(4, 25)\n  0\n  >>> numberOfDivisors(4, 26)\n  0\n  >>> numberOfDivisors(4, 27)\n  0\n  >>> numberOfDivisors(4, 28)\n  0\n  >>> numberOfDivisors(4, 29)\n  0\n  >>> numberOfDivisors(4, 30)\n  0\n  >>> numberOfDivisors(4, 31)\n  0\n  >>> numberOfDivisors(4, 32)\n  0\n  >>> numberOfDivisors(4, 33)\n  0\n  >>> numberOfDivisors(4, 34)\n  0\n  >>> numberOfDivisors(4, 35)\n  0\n  >>> numberOfDivisors(4, 36)\n  0\n  >>> numberOfDivisors(4, 37)\n  0\n  >>> numberOfDivisors(4, 38)\n  0\n  >>> numberOfDivisors(4, 39)\n  0\n  >>> numberOfDivisors(4, 40)\n  0\n  >>> numberOfDivisors(4, 41)\n  0\n  >>> numberOfDivisors(4, 42)\n  0\n  >>> numberOfDivisors(4, 43)\n  0\n  >>> numberOfDivisors(4, 44)\n  0\n  >>> numberOfDivisors(4, 45)\n  0\n  >>> numberOfDivisors(4, 46)\n  0\n  >>> numberOfDivisors(4, 47)\n  0\n  >>> numberOfDivisors(4, 48)\n  0\n  >>> numberOfDivisors(4, 49)\n  0\n  >>> numberOfDivisors(4, 50)\n  0\n  >>> numberOfDivisors(4, 51)\n  0\n  >>> numberOfDivisors(4, 52)\n  0\n  >>> numberOfDivisors(4, 53)\n  0\n  >>> numberOfDivisors(4, 54)\n  0\n  >>> numberOfDivisors(4, 55)\n  0\n  >>> numberOfDivisors(4, 56)\n  0\n  >>> numberOfDivisors(4, 57)\n  0\n  >>> numberOfDivisors(4, 58)\n  0\n  >>> numberOfDivisors(4, 59)\n  0\n  >>> numberOfDivisors(4, 60)\n  0\n  >>> numberOfDivisors(4, 61)\n  0\n  >>> numberOfDivisors(4, 62)\n  0\n  >>> numberOfDivisors(4, 63)\n  0\n  >>> numberOfDivisors(4, 64)\n  0\n  >>> numberOfDivisors(4, 65)\n  0\n  >>> numberOfDivisors(4, 66)\n  0\n  >>> numberOfDivisors(4, 67)\n  0\n  >>> numberOfDivisors(4, 68)\n  0\n  >>> numberOfDivisors(4, 69)\n  0\n  >>> numberOfDivisors(4, 70)\n  0\n  >>> numberOfDivisors(4, 71)\n  0\n  >>> numberOfDivisors(4, 72)\n  0\n  >>> numberOfDivisors(4, 73)\n  0\n  >>> numberOfDivisors(4, 74)\n  0\n  >>> numberOfDivisors(4, 75)\n  0\n  >>> numberOfDivisors(4, 76)\n  0\n  >>> numberOfDivisors(4, 77)\n  0\n  >>> numberOfDivisors(4, 78)\n  0\n  >>> numberOfDivisors(4, 79)\n  0\n  >>> numberOfDivisors(4, 80)\n  0\n  >>> numberOfDivisors(4, 81)\n  0\n  >>> numberOfDivisors(4, 82)\n  0\n  >>> numberOfDivisors(4, 83)\n  0\n  >>> numberOfDivisors(4, 84)\n  0\n  >>> numberOfDivisors(4, 85)\n  0\n  >>> numberOfDivisors(4, 86)\n  0\n  >>> numberOfDivisors(4, 87)\n  0\n  >>> numberOfDivisors(4, 88)\n  0\n  >>> numberOfDivisors(4, 89)\n  0\n  >>> numberOfDivisors(4, 90)\n  0\n  >>> numberOfDivisors(4, 91)\n  0\n  >>> numberOfDivisors(4, 92)\n  0\n  >>> numberOfDivisors(4, 93)\n  0\n  >>> numberOfDivisors(4, 94)\n  0\n  >>> numberOfDivisors(4, 95)\n  0\n  >>> numberOfDivisors(4, 96)\n  0\n  >>> numberOfDivisors(4, 97)\n  0\n  >>> numberOfDivisors(4, 98)\n  0\n  >>> numberOfDivisors(4, 99)\n  0\n  >>> numberOfDivisors(4, 100)\n  0\n  >>> numberOfDivisors(4, 101)\n  0\n  >>> numberOfDivisors(4, 102)\n  0\n  >>> numberOfDivisors(4, 103)\n  0\n  >>> numberOfDivisors(4, 104)\n  0\n  >>> numberOfDivisors(4, 105)\n  0\n  >>> numberOfDivisors(4, 106)\n  0\n  >>> numberOfDivisors(4, 107)\n  0\n  >>> numberOfDivisors(4, 108)\n  0\n  >>> numberOfDivisors(4, 109)\n  0\n  >>> numberOfDivisors(4, 110)\n  0\n  >>> numberOfDivisors(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\n  return paren_level;\n};\n\nconst getMaxLevel = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNesting = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParens = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespace = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespace = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespace = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespace = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespaceAndComments = (paren_level) => {\n  let max_level = 0;\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > max_level) {\n      max_level = paren_level[i];\n    }\n  }\n  return max_level;\n};\n\nconst getMaxLevelOfNestingWithParensAndWhitespaceAndCommentsAndWhitespaceAndCommentsAndWhitespace", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split(\"(\");\n  const closingBrackets = brackets.split(\")\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (closingBracketsCount > i) {\n      if (openingBrackets[i] === closingBrackets[i + 1]) {\n        closingBracketsCount--;\n      }\n    }\n  }\n\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Returns true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"[\")\n  false\n  >>> correctBracketnig(\"[]\")\n  true\n  >>> correctBracketnig(\"[[]]\")\n  true\n  >>> correctBracketnig(\"[][]\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split(\"[\");\n  const closingBrackets = brackets.split(\"]\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (closingBracketsCount > i) {\n      if (openingBrackets[i] === closingBrackets[i + 1]) {\n        closingBracketsCount--;\n      }\n    }\n  }\n\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Returns true if brackets is a string of \"{\" and \"}\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"{\")\n  false\n  >>> correctBracketnig(\"{}\")\n  true\n  >>> correctBracketnig(\"{{}}\")\n  true\n  >>> correctBracketnig(\"{}{}\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split(\"{\");\n  const closingBrackets = brackets.split(\"}\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (closingBracketsCount > i) {\n      if (openingBrackets[i] === closingBrackets[i + 1]) {\n        closingBracketsCount--;\n      }\n    }\n  }\n\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split(\"(\");\n  const closingBrackets = brackets.split(\")\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (closingBracketsCount > i) {\n      if (openingBrackets[i] === closingBrackets[i + 1]) {\n        closingBracketsCount--;\n      }\n    }\n  }\n\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Returns true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"[\")\n  false\n  >>> correctBracketnig(\"[]\")\n  true\n  >>> correctBracketnig(\"[[]]\")\n  true\n  >>> correctBracketnig(\"[][]\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split(\"[\");\n  const closingBrackets = brackets.split(\"]\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (closingBracketsCount > i) {\n      if (openingBrackets[i] === closingBrackets[i + 1]) {\n        closingBracketsCount--;\n      }\n    }\n  }\n\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Returns true if brackets is a string of \"{\" and \"}\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"{\")\n  false\n  >>> correctBracketnig(\"{}\")\n  true\n  >>> correctBracketnig(\"{{}}\")\n  true\n  >>> correctBracketnig(\"{}{}\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split(\"{\");\n  const closingBrackets = brackets.split(\"}\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (closingBracketsCount > i) {\n      if (openingBrackets[i] === closingBrackets[i + 1]) {\n        closingBracketsCount--;\n      }\n    }\n  }\n\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Returns true if brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const openingBrackets = brackets.split(\"(\");\n  const closingBrackets = brackets.split(\")\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (closingBracketsCount > i) {\n      if (openingBrackets[i] === closingBrackets[i + 1]) {\n        closingBracketsCount--;\n      }\n    }\n  }\n\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Returns true if brackets is a string of \"[\" and \"]\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"[\")\n  false\n  >>> correctBracketnig(\"[]\")\n  true\n  >>> correctBracketnig(\"[[]]\")\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* Return sum of all elements in an array.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; ++i) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/* Return product of all elements in an array.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (xs) => {\n  let product = 1;\n  for (let i = 0; i < xs.length; ++i) {\n    product *= xs[i];\n  }\n  return product;\n};\n\n/* Return mean of all elements in an array.\n  >>> mean([1, 2, 3, 4, 5])\n  2.8\n  */\nconst mean = (xs) => {\n  return sum(xs) / xs.length;\n};\n\n/* Return median of all elements in an array.\n  >>> median([1, 2, 3, 4, 5])\n  2\n  */\nconst median = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    return mean(xs.slice(0, n / 2));\n  }\n  return mean(xs.slice((n / 2) - 1, n / 2));\n};\n\n/* Return mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  const counts = {};\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < xs.length; ++i) {\n    const x = xs[i];\n    const count = counts[x] || 0;\n    counts[x] = count + 1;\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return xs[maxCountIndex];\n};\n\n/* Return standard deviation of all elements in an array.\n  >>> std([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return Math.sqrt(variance);\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;\n};\n\n/* Return sum of squared deviations of elements in an array.\n  >>> sumsq([1, 2, 3, 4, 5])\n  25\n  */\nconst sumsq = (xs) => {\n  const mean = mean(xs);\n  const variance = product(xs.map((x) => Math.pow((x - mean), 2)));\n  return sum(xs.map((x) => Math.pow((x - mean), 2))) - 2 * mean + variance;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n// TESTS\n\n// Test the fibfib() function\nconst testFibFib = (n) => {\n  expect(fibfib(n)).toBe(fibfib(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegative = (n) => {\n  expect(fibfibNegative(n)).toBe(fibfibNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegative = (n) => {\n  expect(fibfibNegativeNegative(n)).toBe(fibfibNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n));\n};\n\n// Test the fibfib() function\nconst testFibFibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  expect(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(n)).toBe(fibfibNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "<|endoftext|>/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowels", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str.reverse().toString();\n  return str.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\") + str.split(\"\").reverse().join(\"\");\n};\n\n/*\n  Given a binary string x, return the number of times x appears in the\n  binary representation of an integer.\n  >>> binaryCount(\"1100\")\n  3\n  >>> binaryCount(\"1110\")\n  2\n  >>> binaryCount(\"1111\")\n  1\n  >>> binaryCount(\"11111\")\n  0\n  >>> binaryCount(\"111111\")\n  1\n  >>> binaryCount(\"1111111\")\n  2\n  >>> binaryCount(\"11111111\")\n  1\n  >>> binaryCount(\"111111111\")\n  2\n  >>> binaryCount(\"1111111111\")\n  3\n  >>> binaryCount(\"11111111111\")\n  4\n  >>> binaryCount(\"111111111111\")\n  5\n  >>> binaryCount(\"1111111111111\")\n  6\n  >>> binaryCount(\"11111111111111\")\n  7\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"111111111111111\")\n  8\n  >>> binaryCount(\"11111111111111", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n    } else if (s[i] === 'o') {\n      oranges++;\n    } else if (s[i] ==='m') {\n      mangos++;\n    }\n    total++;\n  }\n  return total - apples - oranges - mangos - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n    } else if (s[i] === 'o') {\n      oranges++;\n    } else if (s[i] ==='m') {\n      mangos++;\n    }\n    total++;\n  }\n  return total - apples - oranges - mangos - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n    } else if (s[i] === 'o') {\n      oranges++;\n    } else if (s[i] ==='m') {\n      mangos++;\n    }\n    total++;\n  }\n  return total - apples - oranges - mangos - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n    } else if (s[i] === 'o') {\n      oranges++;\n    } else if (s[i] ==='m') {\n      mangos++;\n    }\n    total++;\n  }\n  return total - apples - oranges - mangos - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n    } else if (s[i] === 'o') {\n      oranges++;\n    } else if (s[i] ==='m') {\n      mangos++;\n    }\n    total++;\n  }\n  return total - apples - oranges - mangos - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangos = 0;\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n    } else if (s[i] === 'o') {\n      oranges++;\n    } else if (s[i] ==='m') {\n      mangos++;\n    }\n    total++;\n  }\n  return total - apples - oranges - mangos - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let evenValues = [];\n  let smallestIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenValues.push(arr[i]);\n      if (evenValues.length === 1) {\n        smallestIndex = i;\n      }\n    }\n  }\n  if (evenValues.length === 0) return [];\n  if (evenValues.length === 1) {\n    return [evenValues[0], smallestIndex];\n  }\n  let smallestValue = evenValues[0];\n  for (let i = 1; i < evenValues.length; i++) {\n    if (evenValues[i] < smallestValue) {\n      smallestValue = evenValues[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestValue, smallestIndex];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [1, 2]\n      Explanation: 1 has the smallest odd value, and 1 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [1, 2]\n      Explanation: 1 has the smallest odd value, and 1 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  let oddValues = [];\n  let smallestIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddValues.push(arr[i]);\n      if (oddValues.length === 1) {\n        smallestIndex = i;\n      }\n    }\n  }\n  if (oddValues.length === 0) return [];\n  if (oddValues.length === 1) {\n    return [oddValues[0], smallestIndex];\n  }\n  let smallestValue = oddValues[0];\n  for (let i = 1; i < oddValues.length; i++) {\n    if (oddValues[i] < smallestValue) {\n      smallestValue = oddValues[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestValue, smallestIndex];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [1, 2]\n      Explanation: 1 has the smallest odd value, and 1 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [1, 2]\n      Explanation: 1 has the smallest odd value, and 1 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  let oddValues = [];\n  let smallestIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddValues.push(arr[i]);\n      if (oddValues.length === 1) {\n        smallestIndex = i;\n      }\n    }\n  }\n  if (oddValues.length === 0) return [];\n  if (oddValues.length === 1) {\n    return [oddValues[0], smallestIndex];\n  }\n  let smallestValue = oddValues[0];\n  for (let i = 1; i < oddValues.length; i++) {\n    if (oddValues[i] < smallestValue) {\n      smallestValue = oddValues[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestValue, smallestIndex];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [1, 2]\n      Explanation: 1 has the smallest odd value, and 1 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [1, 2]\n      Explanation: 1 has the smallest odd value, and 1 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndexAndValue = (arr) => {\n  let oddValues = [];\n  let smallestIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddValues.push(arr[i]);\n      if (oddValues.length === 1) {\n        smallestIndex = i;\n      }\n    }\n  }\n  if (oddValues.length === 0) return [];\n  if (oddValues.length === 1) {\n    return [oddValues[0], smallestIndex];\n  }\n  let smallestValue = oddValues[0];\n  for (let i = 1; i < oddValues.length; i++) {\n    if (oddValues[i] < smallestValue) {\n      smallestValue = oddValues[i];\n      smallestIndex = i;\n    }\n  }\n  return [smallestValue, smallestIndex];\n};\n\nexport { pluckOddsIndexAndValue };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq > max? -1 : max;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if every element in the list\n  is greater than zero.\n  Examples:\n      isAllPositive([4, -5, -6, -7, -8, 9, -10, -9, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filteBryNoSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filteBryNoSubstring([], 'a')\n  []\n  >>> filteBryNoSubstring(['abc", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 >= 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 >= 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 >= 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 >= 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 >= 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 >= 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 >= 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) - Math.abs(c);\n  return side1 * side2 * side3 >= 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d);\n  const side2 = Math.abs(a) + Math.abs(b) + Math.abs(c) - Math.abs(d);\n  const side3 = Math.abs(a) + Math.abs(b) - Math.abs(c) - Math.abs(d);\n  return side1 * side2 * side3 >= 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d) + Math.abs(e);\n  const side2 = Math.abs(a) + Math.abs(b) + Math.abs(c) + Math.abs(d) - Math.abs(e);\n  const side3 = Math.abs(a) + Math.abs(b) + Math.abs(c) - Math.abs(d) - Math.abs(e);\n  return side1 * side2 * side3 >= 0? side1 + side2 + side3 : -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true if the object q will fly, and false otherwise.\n// 👉 Exercise: Write a function that returns true ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr[index]) {\n      min = Math.min(min, i - index);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let index = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i]!== arr[index]) {\n      max = Math.max(max, i + index);\n    }\n    index++;\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr[index]) {\n      min = Math.min(min, i - index);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let index = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i]!== arr[index]) {\n      max = Math.max(max, i + index);\n    }\n    index++;\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr[index]) {\n      min = Math.min(min, i - index);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let index = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i]!== arr[index]) {\n      max = Math.max(max, i + index);\n    }\n    index++;\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr[index]) {\n      min = Math.min(min, i - index);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let index = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i]!== arr[index]) {\n      max = Math.max(max, i + index);\n    }\n    index++;\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr[index]) {\n      min = Math.min(min, i - index);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let index = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i]!== ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1\n  return lst1.filter(item => lst2.indexOf(item) < 0)\n}\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ 'olleh'\n  reverseString('hello') ➞ '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let isMultiplyPirme = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPirme = false;\n      break;\n    }\n  }\n  return isMultiplyPirme;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyP", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x === 2) return true;\n  if (x === 3) return true;\n  if (x === 4) return true;\n  if (x === 5) return true;\n  if (x === 6) return true;\n  if (x === 7) return true;\n  if (x === 8) return true;\n  if (x === 9) return true;\n  if (x === 10) return true;\n  if (x === 11) return true;\n  if (x === 12) return true;\n  if (x === 13) return true;\n  if (x === 14) return true;\n  if (x === 15) return true;\n  if (x === 16) return true;\n  if (x === 17) return true;\n  if (x === 18) return true;\n  if (x === 19) return true;\n  if (x === 20) return true;\n  if (x === 21) return true;\n  if (x === 22) return true;\n  if (x === 23) return true;\n  if (x === 24) return true;\n  if (x === 25) return true;\n  if (x === 26) return true;\n  if (x === 27) return true;\n  if (x === 28) return true;\n  if (x === 29) return true;\n  if (x === 30) return true;\n  if (x === 31) return true;\n  if (x === 32) return true;\n  if (x === 33) return true;\n  if (x === 34) return true;\n  if (x === 35) return true;\n  if (x === 36) return true;\n  if (x === 37) return true;\n  if (x === 38) return true;\n  if (x === 39) return true;\n  if (x === 40) return true;\n  if (x === 41) return true;\n  if (x === 42) return true;\n  if (x === 43) return true;\n  if (x === 44) return true;\n  if (x === 45) return true;\n  if (x === 46) return true;\n  if (x === 47) return true;\n  if (x === 48) return true;\n  if (x === 49) return true;\n  if (x === 50) return true;\n  if (x === 51) return true;\n  if (x === 52) return true;\n  if (x === 53) return true;\n  if (x === 54) return true;\n  if (x === 55) return true;\n  if (x === 56) return true;\n  if (x === 57) return true;\n  if (x === 58) return true;\n  if (x === 59) return true;\n  if (x === 60) return true;\n  if (x === 61) return true;\n  if (x === 62) return true;\n  if (x === 63) return true;\n  if (x === 64) return true;\n  if (x === 65) return true;\n  if (x === 66) return true;\n  if (x === 67) return true;\n  if (x === 68) return true;\n  if (x === 69) return true;\n  if (x === 70) return true;\n  if (x === 71) return true;\n  if (x === 72) return true;\n  if (x === 73) return true;\n  if (x === 74) return true;\n  if (x === 75) return true;\n  if (x === 76) return true;\n  if (x === 77) return true;\n  if (x === 78) return true;\n  if (x === 79) return true;\n  if (x === 80) return true;\n  if (x === 81) return true;\n  if (x === 82) return true;\n  if (x === 83) return true;\n  if (x === 84) return true;\n  if (x === 85) return true;\n  if (x === 86) return true;\n  if (x === 87) return true;\n  if (x === 88) return true;\n  if (x === 89) return true;\n  if (x === 90) return true;\n  if (x === 91) return true;\n  if (x === 92) return true;\n  if (x === 93) return true;\n  if (x === 94) return true;\n  if (x === 95) return true;\n  if (x === 96) return true;\n  if (x === 97) return true;\n  if (x === 98) return true;\n  if (x === 99) return true;\n  if (x === 100) return true;\n  if (x === 101) return true;\n  if (x === 102) return true;\n  if (x === 103) return true;\n  if (x === 104) return true;\n  if (x === 105) return true;\n  if (x === 106) return true;\n  if (x === 107) return true;\n  if (x === 108) return true;\n  if (x === 109) return true;\n  if (x === 110) return true;\n  if (x === 111) return true;\n  if (x === 112) return true;\n  if (x === 113) return true;\n  if (x === 114) return true;\n  if (x === 115) return true;\n  if (x === 116) return true;\n  if (x === 117) return true;\n  if (x === 118) return true;\n  if (x === 119) return true;\n  if (x === 120) return true;\n  if (x === 121) return true;\n  if (x === 122) return true;\n  if (x === 123) return true;\n  if (x === 124) return true;\n  if (x === 125) return true;\n  if (x === 126) return true;\n  if (x === 127) return true;\n  if (x === 128) return true;\n  if (x === 129) return true;\n  if (x === 130) return true;\n  if (x === 131) return true;\n  if (x === 132) return true;\n  if (x === 133) return true;\n  if (x === 134) return true;\n  if (x === 135) return true;\n  if (x === 136) return true;\n  if (x === 137) return true;\n  if (x === 138) return true;\n  if (x === 139) return true;\n  if (x === 140) return true;\n  if (x === 141) return true;\n  if (x === 142) return true;\n  if (x === 143) return true;\n  if (x === 144) return true;\n  if (x === 145) return true;\n  if (x === 146) return true;\n  if (x === 147) return true;\n  if (x === 148) return true;\n  if (x === 149) return true;\n  if (x === 150) return true;\n  if (x === 151) return true;\n  if (x === 152) return true;\n  if (x === 153) return true;\n  if (x === 154) return true;\n  if (x === 155) return true;\n  if (x === 156) return true;\n  if (x === 157) return true;\n  if (x === 158) return true;\n  if (x === 159) return true;\n  if (x === 160) return true;\n  if (x === 161) return true;\n  if (x === 162) return true;\n  if (x === 163) return true;\n  if (x === 164) return true;\n  if (x === 165) return true;\n  if (x === 166) return true;\n  if (x === 167) return true;\n  if (x === 168) return true;\n  if (x === 169) return true;\n  if (x === 170) return true;\n  if (x === 171) return true;\n  if (x === 172) return true;\n  if (x === 173) return true;\n  if (x === 174) return true;\n  if (x === 175) return true;\n  if (x === 176) return true;\n  if (x === 177) return true;\n  if (x === 178) return true;\n  if (x === 179) return true;\n  if (x === 180) return true;\n  if (x === 181) return true;\n  if (x === 182) return true;\n  if (x === 183) return true;\n  if (x === 184) return true;\n  if (x === 185) return true;\n  if (x === 186) return true;\n  if (x === 187) return true;\n  if (x === 188) return true;\n  if (x === 189) return true;\n  if (x === 190) return true;\n  if (x === 191) return true;\n  if (x === 192) return true;\n  if (x === 193) return true;\n  if (x === 194) return true;\n  if (x === 195) return true;\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (a === ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArr = hexNum.split('');\n  let hexNumArrLen = hexNumArr.length;\n  let hexNumArrLen2 = hexNumArrLen / 2;\n  let hexNumArrLen3 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen4 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen5 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen6 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen7 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen8 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen9 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen10 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen11 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen12 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen13 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen14 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen15 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen16 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen17 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen18 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen19 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen20 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen21 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen22 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen23 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen24 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen25 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen26 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen27 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen28 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen29 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen30 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen31 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen32 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen33 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen34 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen35 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen36 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen37 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen38 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen39 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen40 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen41 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen42 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen43 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen44 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen45 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen46 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen47 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen48 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen49 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen50 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen51 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen52 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen53 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen54 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen55 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen56 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen57 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen58 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen59 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen60 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen61 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen62 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen63 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen64 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen65 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen66 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen67 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen68 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen69 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen70 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen71 = hexNumArrLen - hexNumArrLen2;\n  let hexNumArrLen72 = hexNumArrLen - ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${decimalToBinaryHelper(decimal)}${binary}`;\n    decimal--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to a decimal number. The binary number is\n  given as a string. The function should return the decimal number as a string.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"100000\") // returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal * 2 + binaryToDecimalHelper(binary[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number. The decimal number is\n  given as a string. The function should return the binary number as a string.\n\n  Examples:\n  decimalToBinary(\"15\") // returns \"1111\"\n  decimalToBinary(\"32\") // returns \"100000\"\n  */\nconst decimalToBinaryHelper = (decimal) => {\n  if (decimal === 0) {\n    return '0';\n  }\n  if (decimal === 1) {\n    return '1';\n  }\n  return decimalToBinaryHelper(decimal - 1) + decimalToBinaryHelper(decimal - 1);\n};\n\n/*\n  Write a function that converts a binary number to a hexadecimal number. The binary number is\n  given as a string. The function should return the hexadecimal number as a string.\n\n  Examples:\n  binaryToHex(\"1111\") // returns \"F\"\n  binaryToHex(\"100000\") // returns \"10\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = `${binaryToHexHelper(binary[i])}${hex}`;\n  }\n  return hex;\n};\n\n/*\n  Write a function that converts a hexadecimal number to a binary number. The hexadecimal number is\n  given as a string. The function should return the binary number as a string.\n\n  Examples:\n  hexToBinary(\"F\") // returns \"1111\"\n  hexToBinary(\"10\") // returns \"100000\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = `${hexToBinaryHelper(hex[i])}${binary}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to a octal number. The binary number is\n  given as a string. The function should return the octal number as a string.\n\n  Examples:\n  binaryToOctal(\"1111\") // returns \"15\"\n  binaryToOctal(\"100000\") // returns \"32\"\n  */\nconst binaryToOctal = (binary) => {\n  let octal = '';\n  for (let i = 0; i < binary.length; i++) {\n    octal = `${binaryToOctalHelper(binary[i])}${octal}`;\n  }\n  return octal;\n};\n\n/*\n  Write a function that converts a octal number to a binary number. The octal number is\n  given as a string. The function should return the binary number as a string.\n\n  Examples:\n  octalToBinary(\"15\") // returns \"1111\"\n  octalToBinary(\"32\") // returns \"100000\"\n  */\nconst octalToBinary = (octal) => {\n  let binary = '';\n  for (let i = 0; i < octal.length; i++) {\n    binary = `${octalToBinaryHelper(octal[i])}${binary}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to its equivalent hexadecimal number. The\n  binary number is given as a string. The function should return the hexadecimal number as a\n  string.\n\n  Examples:\n  binaryToHex(\"1111\") // returns \"F\"\n  binaryToHex(\"100000\") // returns \"10\"\n  */\nconst binaryToHexHelper = (binary) => {\n  if (binary === '0') {\n    return '0';\n  }\n  if (binary === '1') {\n    return '1';\n  }\n  return binaryToHexHelper(binary - 1) + binaryToHexHelper(binary - 1);\n};\n\n/*\n  Write a function that converts a hexadecimal number to its equivalent binary number. The\n  hexadecimal number is given as a string. The function should return the binary number as a\n  string.\n\n  Examples:\n  hexToBinary(\"F\") // returns \"1111\"\n  hexToBinary(\"10\") // returns \"100000\"\n  */\nconst hexToBinaryHelper = (hex) => {\n  if (hex === '0') {\n    return '0';\n  }\n  if (hex === '1') {\n    return '1';\n  }\n  return hexToBinaryHelper(hex - 1) + hexToBinaryHelper(hex - 1);\n};\n\n/*\n  Write a function that converts a binary number to its equivalent octal number. The binary number\n  is given as a string. The function should return the octal number as a string.\n\n  Examples:\n  binaryToOctal(\"1111\") // returns \"15\"\n  binaryToOctal(\"100000\") // returns \"32\"\n  */\nconst binaryToOctalHelper = (binary) => {\n  if (binary === '0') {\n    return '0';\n  }\n  if (binary === '1') {\n    return '7';\n  }\n  return binaryToOctalHelper(binary - 1) + binaryToOctalHelper(binary - 1);\n};\n\n/*\n  Write a function that converts a octal number to its equivalent binary number. The octal number\n  is given as a string. The function should return the binary number as a string.\n\n  Examples:\n  octalToBinary(\"15\") // returns \"1111\"\n  octalToBinary(\"32\") // returns \"100000\"\n  */\nconst octalToBinaryHelper = (octal) => {\n  if (octal === '0') {\n    return '0';\n  }\n  if (octal === '7') {\n    return '1';\n  }\n  return octalToBinaryHelper(octal - 1) + octalToBinaryHelper(octal - 1);\n};\n\n/*\n  Write a function that converts a binary number to its equivalent decimal number. The binary number\n  is given as a string. The function should return the decimal number as a string.\n\n  Examples:\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"100000\") // returns 32\n  */\nconst binaryToDecimalHelper = (binary) => {\n  if (binary === '0') {\n    return 0;\n  }\n  if (binary === '1') {\n    return 1;\n  }\n  return binaryToDecimalHelper(binary - 1) + binaryToDecimalHelper(binary - 1);\n};\n\n/*\n  Write a function that converts a decimal number to its equivalent binary number. The decimal number\n  is given as a string. The function should return the binary number as a string.\n\n  Examples:\n  decimalToBinary(\"15\") // returns \"1111\"\n  decimalToBinary(\"32\") // returns \"100000\"\n  */\nconst decimalToBinaryHelper = (decimal) => {\n  if (decimal === 0) {\n    return '0';\n  }\n  if (decimal === 1) {\n    return '1';\n  }\n  return decimalToBinaryHelper(decimal - 1) + decimalToBinaryHelper(decimal - 1);\n};\n\n/*\n  Write a function that converts a decimal number to its equivalent ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  'hello_world'\n  */\nconst removeNonAlphaNum = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '_');\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  'hello_world'\n  */\nconst removeNonAlphaNum = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '_');\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  'hello_world'\n  */\nconst removeNonAlphaNum = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '_');\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  'hello_world'\n  */\nconst removeNonAlphaNum = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '_');\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  'hello_world'\n  */\nconst removeNonAlphaNum = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '_');\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  'hello_world'\n  */\nconst removeNonAlphaNum = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '_');\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  'hello_world'\n  */\nconst removeNonAlphaNum = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '_');\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  'hello_world'\n  */\nconst removeNonAlphaNum = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '_');\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  'hello_world'\n  */\nconst removeNonAlphaNum = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '_');\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  'hello_world'\n  */\nconst removeNonAlphaNum = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '_');\n};\n\n/* Given a string, return a new string where all spaces are replaced with an underscore and all non-alphanumeric characters are removed.\n  >>> removeNonAlphaNum('   hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello')\n  'hello'\n  >>> removeNonAlphaNum('hello   ')\n  'hello'\n  >>> removeNonAlphaNum('hello   world')\n  'hello_world'\n  >>> removeNonAlphaNum('hello   world   ')\n  '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 1);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const gradesSorted = grades.sort((a, b) => a - b);\n  const gradesSum = gradesSorted.reduce((acc, cur) => acc + cur, 0);\n  const gradesGPA = gradesSorted.map((cur) => cur / gradesSum);\n  const gradesGPAIndex = gradesGPA.map((cur, i) => cur * gradesSum + i);\n  const gradesGPAIndexSorted = gradesGPA.sort((a, b) => a - b);\n  const gradesGPAIndexSum = gradesGPAIndex.reduce((acc, cur) => acc + cur, 0);\n  const gradesGPAIndexGPA = gradesGPAIndex.map((cur, i) => cur / gradesGPAIndexSum);\n  const gradesGPAIndexGPAIndex = gradesGPAIndexGPA.map((cur, i) => cur * gradesGPAIndexSum + i);\n  const gradesGPAIndexGPAIndexSorted = gradesGPAIndexGPA.sort((a, b) => a - b);\n  const gradesGPAIndexGPAIndexSum = gradesGPAIndexGPAIndex.reduce((acc, cur) => acc + cur, 0);\n  const gradesGPAIndexGPAIndexGPA = gradesGPAIndexGPAIndex.map((cur, i) => cur / gradesGPAIndexGPAIndexSum);\n  const gradesGPAIndexGPAIndexGPAIndex = gradesGPAIndexGPAIndexGPA.map((cur, i) => cur * gradesGPAIndexGPAIndexSum + i);\n  const gradesGPAIndexGPAIndexGPAIndexSorted = gradesGPAIndexGPAIndexGPAIndexGPA.sort((a, b) => a - b);\n  const gradesGPAIndexGPAIndexGPAIndexSum = gradesGPAIndexGPAIndexGPAIndexGPA.reduce((acc, cur) => acc + cur, 0);\n  const gradesGPAIndexGPAIndexGPAGPA = gradesGPAIndexGPAIndexGPAIndex.map((cur, i) => cur / gradesGPAIndexGPAIndexGPAIndexSum);\n  const gradesGPAIndexGPAIndexGPAGPAIndex = gradesGPAIndexGPAIndexGPAGPA.map((cur, i) => cur * gradesGPAIndexGPAIndexGPAIndexSum + i);\n  const gradesGPAIndexGPAIndexGPAGPAIndexSorted = gradesGPAIndexGPAIndexGPAIndexGPAGPA.sort((a, b) => a - b);\n  const gradesGPAIndexGPAIndexGPAGPAIndexSum = gradesGPAIndexGPAIndexGPAIndexGPAGPA.reduce((acc, cur) => acc + cur, 0);\n  const gradesGPAIndexGPAIndexGPAGPAGPA = gradesGPAIndexGPAIndexGPAIndexGPA.map((cur, i) => cur / gradesGPAIndexGPAIndexGPAIndexGPAIndexSum);\n  const gradesGPAIndexGPAIndexGPAGPAGPAIndex = gradesGPAIndexGPAIndexGPAGPAGPA.map((cur, i) => cur * gradesGPAIndexGPAIndexGPAIndexGPAIndexSum + i);\n  const gradesGPAIndexGPAIndexGPAGPAGPAIndexSorted = gradesGPAIndexGPAIndexGPAIndexGPAGPA.sort((a, b) => a - b);\n  const gradesGPAIndexGPAIndexGPAGPAGPAIndexSum = gradesGPAIndexGPAIndexGPAIndexGPAGPAGPA.reduce((acc, cur) => acc + cur, 0);\n  const gradesGPAIndexGPAIndexGPAGPAGPAGPA = gradesGPAIndexGPAIndexGPAIndexGPAGPA.map((cur, i) => cur / gradesGPAIndexGPAIndexGPAIndexGPAIndexGPAIndexSum);\n  const gradesGPAIndexGPAIndexGPAGPAGPAIndexSum = gradesGPAIndexGPAIndexGPAIndexGPAGPAGPA.reduce((acc, cur) => acc + cur, 0);\n  const gradesGPAIndexGPAIndexGPAGPAGPAGPA = gradesGPAIndexGPAIndexGPAIndexGPAGPAGPA.map((cur, i) => cur * gradesGPAIndexGPAIndexGPAIndexGPAIndexGPAIndexSum + i);\n  const gradesGPAIndexGPAIndexGPAGPAGPAIndexSum = gradesGPAIndexGPAIndexGPAIndexGPAGPAGPAGPA.reduce((acc, cur) => acc + cur, 0);\n  const gradesGPAIndexGPAIndexGPAGPAGPAGPA = gradesGPAIndexGPAIndexGPAIndexGPAGPAGPA.map((cur, i) => cur / gradesGPAIndexGPAIndexGPAIndexGPAIndexGPAIndexGPAIndexSum);\n  const gradesGPAIndexGPAIndexGPAGPAGPAGPAIndexSum = gradesGPAIndexGPAIndexGPAIndexGPAGPAGPAGPAGPA.reduce((acc, cur) => acc + cur, 0);\n  const gradesGPAIndexGPAIndexGPAGPAGPAGPAGPA = gradesGPAIndexGPAIndexGPAIndexGPAGPAGPAGPA.map((cur, i) => cur * gradesGPAIndexGPAIndexGPAIndexGPAIndexGPAIndexGPAIndexSum + i);\n  const gradesGPAIndexGPAIndexGPAGPAGPAGPAIndexSum = gradesGPAIndexGPAIndexGPAIndexGPAGPAGPAGPAGPA.reduce((acc, cur) => acc + cur, 0);\n  const gradesGPAIndexGPAIndexGPAGPAGPAGPAGPAGPA = gradesGPAIndexGPAIndexGPAIndexGPAGPAGPAGPAGPA.map((cur, i) => cur / gradesGPAIndexGPAIndexGPAIndexGPAIndexGPAIndexGPAIndexGPAIndexSum);\n  const gradesGPAIndexGPAIndexGPAGPAGPAGPAGPAIndexSum = grade", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) < 'a' || string.charAt(i) > 'z') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFast = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFaster = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsSlower = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsSlow = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFaster = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFast = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFaster = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsSlower = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsSlow = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFaster = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFast = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFaster = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsSlower = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsSlow = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFaster = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFast = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFaster = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsSlower = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsSlow = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFaster = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEndsFast = (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const bCharCode = b\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return aCharCode - bCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'olleh'\n  antSihuffle('Hello World!!!') returns 'rldHello!!!'\n*/\nconst antSihuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const bCharCode = b\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return bCharCode - aCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n*/\nconst antSihuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const bCharCode = b\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return aCharCode - bCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n*/\nconst antSihuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const bCharCode = b\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return aCharCode - bCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n*/\nconst antSihuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const bCharCode = b\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return aCharCode - bCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n*/\nconst antSihuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const bCharCode = b\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return aCharCode - bCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n*/\nconst antSihuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    const aCharCode = a\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const bCharCode = b\n     .split('')\n     .reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return aCharCode - bCharCode;\n  });\n  return sortedWords.join('');\n};\n\n/*\n  Write ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};\n\n/*\n  You are given a list of lists, each sublist contains integers,\n  and an integer x. Find all lists in lst such that x\n  appears in each sublist, and return a list of tuples,\n  [(sublist1, sublist2,...),...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getColumn([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 2)]\n  getColumn([], 1) == []\n  getColumn([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getColumn = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};\n\n/*\n  You are given a list of lists, each sublist contains integers,\n  and an integer x. Find all lists in lst such that x\n  appears in each sublist, and return a list of tuples,\n  [(sublist1, sublist2,...),...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  findSublist([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 2)]\n  findSublist([], 1) == []\n  findSublist([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst findSublist = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};\n\n/*\n  You are given a list of lists, each sublist contains integers,\n  and an integer x. Find all lists in lst such that x\n  appears in each sublist, and return a list of tuples,\n  [(sublist1, sublist2,...),...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  findSublist([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 2)]\n  findSublist([], 1) == []\n  findSublist([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst findSublist = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};\n\n/*\n  You are given a list of lists, each sublist contains integers,\n  and an integer x. Find all lists in lst such that x\n  appears in each sublist, and return a list of tuples,\n  [(sublist1, sublist2,...),...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  findSublist([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 2)]\n  findSublist([], 1) == []\n  findSublist([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst findSublist = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};\n\n/*\n  You are given a list of lists, each sublist contains integers,\n  and an integer x. Find all lists in lst such that x\n  appears in each sublist, and return a list of tuples,\n  [(sublist1, sublist2,...),...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  findSublist([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 2)]\n  findSublist([], 1) == []\n  findSublist([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst findSublist = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};\n\n/*\n  You are given a list of lists, each sublist contains integers,\n  and an integer x. Find all lists in lst such that x\n  appears in each sublist, and return a list of tuples,\n  [(sublist1, sublist2,...),...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAsc([]) => []\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  array.sort((a, b) => a - b);\n  return array;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  array.sort((a, b) => b - a);\n  return array;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAscIfOdd([]) => []\n  * sortArrayAscIfOdd([5]) => [5]\n  * sortArrayAscIfOdd([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscIfOdd([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  * sortArrayAscIfOdd([5, 4, 3, 2, 1]) => [5, 4, 3, 2, 1]\n  * sortArrayAscIfOdd([5, 4, 3, 2, 1]) => [5, 4, 3, 2, 1]\n  */\nconst sortArrayAscIfOdd = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDescIfOdd([]) => []\n  * sortArrayDescIfOdd([5]) => [5]\n  * sortArrayDescIfOdd([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDescIfOdd([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  * sortArrayDescIfOdd([5, 4, 3, 2, 1]) => [5, 4, 3, 2, 1]\n  * sortArrayDescIfOdd([5, 4, 3, 2, 1]) => [5, 4, 3, 2, 1]\n  */\nconst sortArrayDescIfOdd = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a, b) => a - b);\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAscIfEven([]) => []\n  * sortArrayAscIfEven([5]) => [5]\n  * sortArrayAscIfEven([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscIfEven([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  * sortArrayAscIfEven([5, 4, 3, 2, 1]) => [5, 4, 3, 2, 1]\n  * sortArrayAscIfEven([5, 4, 3, 2, 1]) => [5, 4, 3, 2, 1]\n  */\nconst sortArrayAscIfEven = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDescIfEven([]) => []\n  * sortArrayDescIfEven([5]) => [5]\n  * sortArrayDescIfEven([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDescIfEven([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  * sortArrayDescIfEven([5, 4, 3, 2, 1]) => [5, 4, 3, 2, 1]\n  * sortArrayDescIfEven([5, 4, 3, 2, 1]) => [5, 4, 3, 2, 1]\n  */\nconst sortArrayDescIfEven = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a, b) => a - b);\n  }\n  return array;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAscIfEvenAndOdd([]) => []\n  * sortArrayAscIfEvenAndOdd([5]) => [5]\n  * sortArrayAscIfEvenAndOdd([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscIfEvenAndOdd([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  * sortArrayAscIfEvenAndOdd([5, 4, 3, 2, 1]) => [5, 4, 3, 2, 1]\n  * sortArrayAscIfEvenAndOdd([5, 4, 3, 2, 1]) => [5, 4, 3, 2, 1]\n  */\nconst sortArrayAscIfEvenAndOdd = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2)\n  }\n  return newString\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2)\n  }\n  return newString\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated 90 degrees clockwise. \n  For example:\n  rotate('hi') returns 'jhi'\n  rotate('asdfghjkl') returns 'kjhkasdf'\n  rotate('gf') returns 'gfhg'\n  rotate('et') returns 'etx'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 1)\n  }\n  return newString\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated 90 degrees counterclockwise. \n  For example:\n  rotate('hi') returns 'ihi'\n  rotate('asdfghjkl') returns 'asdfgjkl'\n  rotate('gf') returns 'gfhg'\n  rotate('et') returns 'etx'\n  */\nconst rotateCW = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 1)\n  }\n  return newString\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated 180 degrees. \n  For example:\n  rotate('hi') returns 'fhi'\n  rotate('asdfghjkl') returns 'gjhkasdf'\n  rotate('gf') returns 'gfhg'\n  rotate('et') returns 'etx'\n  */\nconst rotate180 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2)\n  }\n  return newString\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated 270 degrees. \n  For example:\n  rotate('hi') returns 'ihi'\n  rotate('asdfghjkl') returns 'asdfgjkl'\n  rotate('gf') returns 'gfhg'\n  rotate('et') returns 'etx'\n  */\nconst rotate270 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 1)\n  }\n  return newString\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated 90 degrees clockwise and 180 degrees. \n  For example:\n  rotate('hi') returns 'jhi'\n  rotate('asdfghjkl') returns 'kjhkasdf'\n  rotate('gf') returns 'gfhg'\n  rotate('et') returns 'etx'\n  */\nconst rotateCW180 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2)\n  }\n  return newString\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated 90 degrees counterclockwise and 180 degrees. \n  For example:\n  rotate('hi') returns 'ihi'\n  rotate('asdfghjkl') returns 'asdfgjkl'\n  rotate('gf') returns 'gfhg'\n  rotate('et') returns 'etx'\n  */\nconst rotateCW270 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2)\n  }\n  return newString\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated 180 degrees clockwise and 270 degrees. \n  For example:\n  rotate('hi') returns 'fhi'\n  rotate('asdfghjkl') returns 'gjhkasdf'\n  rotate('gf') returns 'gfhg'\n  rotate('et') returns 'etx'\n  */\nconst rotate180CW = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2)\n  }\n  return newString\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated 180 degrees counterclockwise and 270 degrees. \n  For example:\n  rotate('hi') returns 'fhi'\n  rotate('asdfghjkl') returns 'gjhkasdf'\n  rotate('gf') returns 'gfhg'\n  rotate('et') returns 'etx'\n  */\nconst rotate180CW270 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 1)\n  }\n  return newString\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated 270 degrees clockwise and 90 degrees. \n  For example:\n  rotate('hi') returns 'ihi'\n  rotate('asdfghjkl') returns 'asdfgjkl'\n  rotate('gf') returns 'gfhg'\n  rotate('et') returns 'etx'\n  */\nconst rotateCW90 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2)\n  }\n  return newString\n}", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max;\n  let currentMax;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = max;\n    max = currentNumber;\n    if (currentNumber > max) {\n      max = currentNumber;\n    }\n  }\n  result.push(max);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min;\n  let currentMin;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMin = min;\n    min = currentNumber;\n    if (currentNumber < min) {\n      min = currentNumber;\n    }\n  }\n  result.push(min);\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    sum = currentNumber + currentSum;\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    sum = currentNumber + currentSum;\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    sum = currentNumber + currentSum;\n    result.push(Math.sqrt(sum / numbers.length));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    sum = currentNumber + currentSum;\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    sum = currentNumber + currentSum;\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let max;\n  let currentMax;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = max;\n    max = currentNumber;\n    if (currentNumber > max) {\n      max = currentNumber;\n    }\n  }\n  let mode;\n  let modeCount;\n  let modeNumber;\n  let modeIndex;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = max;\n    max = currentNumber;\n    if (currentNumber > max) {\n      max = currentNumber;\n    }\n    modeCount = 0;\n    modeNumber = currentNumber;\n    modeIndex = i;\n    while (modeNumber === currentMax) {\n      modeCount++;\n      modeNumber = numbers[modeIndex];\n      modeIndex++;\n    }\n    result.push(modeCount);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStdev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951, 1.4142135623730951]\n  */\nconst rollingStdev = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    sum = currentNumber + currentSum;\n    result.push(Math.sqrt(sum / numbers.length));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    sum = currentNumber + currentSum;\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let sum;\n  let currentSum;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentSum = sum;\n    sum = currentNumber + currentSum;\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let max;\n  let currentMax;\n  let currentNumber;\n  let i;\n  for (i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  if (lst.length < 2) return null;\n  const [smallest] = lst;\n  const [secondSmallest] = lst;\n  if (smallest < secondSmallest) return secondSmallest;\n  return smallest;\n};\n\n/*\n  You are given a list of integers. Write a function findSmallest() that returns the smallest integer in the list.\n  Return null if there is no such integer.\n  \n  findSmallest([1, 2, 3, 4, 5]) === 1\n  findSmallest([5, 1, 4, 3, 2]) === 1\n  findSmallest([]) === null\n  findSmallest([1, 1]) === null\n  */\nconst findSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  const [smallest] = lst;\n  return smallest;\n};\n\n/*\n  You are given a list of integers. Write a function findLargest() that returns the largest integer in the list.\n  Return null if there is no such integer.\n  \n  findLargest([1, 2, 3, 4, 5]) === 5\n  findLargest([5, 1, 4, 3, 2]) === 5\n  findLargest([]) === null\n  findLargest([1, 1]) === null\n  */\nconst findLargest = (lst) => {\n  if (lst.length === 0) return null;\n  const [largest] = lst;\n  return largest;\n};\n\n/*\n  You are given a list of integers. Write a function findMax() that returns the largest integer in the list.\n  Return null if there is no such integer.\n  \n  findMax([1, 2, 3, 4, 5]) === 5\n  findMax([5, 1, 4, 3, 2]) === 5\n  findMax([]) === null\n  findMax([1, 1]) === null\n  */\nconst findMax = (lst) => {\n  if (lst.length === 0) return null;\n  const [largest] = lst;\n  return largest;\n};\n\n/*\n  You are given a list of integers. Write a function findMin() that returns the smallest integer in the list.\n  Return null if there is no such integer.\n  \n  findMin([1, 2, 3, 4, 5]) === 1\n  findMin([5, 1, 4, 3, 2]) === 1\n  findMin([]) === null\n  findMin([1, 1]) === null\n  */\nconst findMin = (lst) => {\n  if (lst.length === 0) return null;\n  const [smallest] = lst;\n  return smallest;\n};\n\n/*\n  You are given a list of integers. Write a function findSum() that returns the sum of the integers in the list.\n  Return null if there are no integers in the list.\n  \n  findSum([1, 2, 3, 4, 5]) === 15\n  findSum([5, 1, 4, 3, 2]) === 15\n  findSum([]) === null\n  findSum([1, 1]) === null\n  */\nconst findSum = (lst) => {\n  if (lst.length === 0) return null;\n  const [sum] = lst;\n  return sum;\n};\n\n/*\n  You are given a list of integers. Write a function findAverage() that returns the average of the integers in the list.\n  Return null if there are no integers in the list.\n  \n  findAverage([1, 2, 3, 4, 5]) === 3\n  findAverage([5, 1, 4, 3, 2]) === 3\n  findAverage([]) === null\n  findAverage([1, 1]) === null\n  */\nconst findAverage = (lst) => {\n  if (lst.length === 0) return null;\n  const [sum] = lst;\n  return sum / lst.length;\n};\n\n/*\n  You are given a list of integers. Write a function findMedian() that returns the median of the integers in the list.\n  Return null if there are no integers in the list.\n  \n  findMedian([1, 2, 3, 4, 5]) === 3\n  findMedian([5, 1, 4, 3, 2]) === 3\n  findMedian([]) === null\n  findMedian([1, 1]) === null\n  */\nconst findMedian = (lst) => {\n  if (lst.length === 0) return null;\n  const [sum] = lst;\n  const sortedArr = lst.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedArr.length / 2);\n  return sortedArr[middleIndex];\n};\n\n/*\n  You are given a list of integers. Write a function findMode() that returns the mode of the integers in the list.\n  Return null if there are no integers in the list.\n  \n  findMode([1, 2, 3, 4, 5]) === 3\n  findMode([5, 1, 4, 3, 2]) === 3\n  findMode([]) === null\n  findMode([1, 1]) === null\n  */\nconst findMode = (lst) => {\n  if (lst.length === 0) return null;\n  const [mode] = lst;\n  return mode;\n};\n\n/*\n  You are given a list of integers. Write a function findKthSmallest() that returns the kth smallest integer in the list.\n  Return null if there is no such integer.\n  \n  findKthSmallest([1, 2, 3, 4, 5], 1) === 1\n  findKthSmallest([5, 1, 4, 3, 2], 1) === 1\n  findKthSmallest([], 1) === null\n  findKthSmallest([1, 1], 1) === null\n  */\nconst findKthSmallest = (lst, k) => {\n  if (lst.length === 0) return null;\n  const [smallest] = lst;\n  const sortedArr = lst.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedArr.length / 2);\n  if (k >= sortedArr.length) return null;\n  if (k === 0) return smallest;\n  if (k === sortedArr.length) return sortedArr[sortedArr.length - 1];\n  if (k === sortedArr.length - 1) return sortedArr[middleIndex];\n  return sortedArr[k - 1];\n};\n\n/*\n  You are given a list of integers. Write a function findKthLargest() that returns the kth largest integer in the list.\n  Return null if there is no such integer.\n  \n  findKthLargest([1, 2, 3, 4, 5], 1) === 5\n  findKthLargest([5, 1, 4, 3, 2], 1) === 5\n  findKthLargest([], 1) === null\n  findKthLargest([1, 1], 1) === null\n  */\nconst findKthLargest = (lst, k) => {\n  if (lst.length === 0) return null;\n  const [largest] = lst;\n  const sortedArr = lst.sort((a, b) => b - a);\n  const middleIndex = Math.floor(sortedArr.length / 2);\n  if (k >= sortedArr.length) return null;\n  if (k === 0) return largest;\n  if (k === sortedArr.length) return sortedArr[0];\n  if (k === sortedArr.length - 1) return sortedArr[middleIndex];\n  return sortedArr[k - 1];\n};\n\n/*\n  You are given a list of integers. Write a function findKthMax() that returns the kth largest integer in the list.\n  Return null if there is no such integer.\n  \n  findKthMax([1, 2, 3, 4, 5], 1) === 5\n  findKthMax([5, 1, 4, 3, 2], 1) === 5\n  findKthMax([], 1) === null\n  findKthMax([1, 1], 1) === null\n  */\nconst findKthMax = (lst, k) => {\n  if (lst.length === 0) return null;\n  const [largest] = lst;\n  const sortedArr = lst.sort((a, b) => b - a);\n  const middleIndex = Math.floor(sortedArr.length / 2);\n  if (k >= sortedArr.length) return null;\n  if (k === 0) return largest;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith(\"I\")) {\n      count++;\n    }\n  });\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return false\n  if (y < x && y < z) return false\n  if (z < x && z < y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is negative.\n  Returns false in any other cases.\n  Examples\n  allNeg(5, 2, 7) ➞ true\n  allNeg(3, 2, 2) ➞ false\n  allNeg(3, -2, 1) ➞ false\n  allNeg(3.6, -2.2, 2) ➞ true\n  */\nconst allNeg = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return false\n  if (y < x && y < z) return false\n  if (z < x && z < y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is positive.\n  Returns false in any other cases.\n  Examples\n  allPos(5, 2, 7) ➞ true\n  allPos(3, 2, 2) ➞ true\n  allPos(3, -2, 1) ➞ true\n  allPos(3.6, -2.2, 2) ➞ false\n  */\nconst allPos = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are positive.\n  Returns false in any other cases.\n  Examples\n  allPos(5, 2, 7) ➞ true\n  allPos(3, 2, 2) ➞ true\n  allPos(3, -2, 1) ➞ true\n  allPos(3.6, -2.2, 2) ➞ true\n  */\nconst allPos = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are negative.\n  Returns false in any other cases.\n  Examples\n  allNeg(5, 2, 7) ➞ true\n  allNeg(3, 2, 2) ➞ true\n  allNeg(3, -2, 1) ➞ true\n  allNeg(3.6, -2.2, 2) ➞ false\n  */\nconst allNeg = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return false\n  if (y < x && y < z) return false\n  if (z < x && z < y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is positive.\n  Returns false in any other cases.\n  Examples\n  allPos(5, 2, 7) ➞ true\n  allPos(3, 2, 2) ➞ true\n  allPos(3, -2, 1) ➞ true\n  allPos(3.6, -2.2, 2) ➞ true\n  */\nconst allPos = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are positive.\n  Returns false in any other cases.\n  Examples\n  allPos(5, 2, 7) ➞ true\n  allPos(3, 2, 2) ➞ true\n  allPos(3, -2, 1) ➞ true\n  allPos(3.6, -2.2, 2) ➞ true\n  */\nconst allPos = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are negative.\n  Returns false in any other cases.\n  Examples\n  allNeg(5, 2, 7) ➞ true\n  allNeg(3, 2, 2) ➞ true\n  allNeg(3, -2, 1) ➞ true\n  allNeg(3.6, -2.2, 2) ➞ true\n  */\nconst allNeg = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return false\n  if (y < x && y < z) return false\n  if (z < x && z < y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is negative.\n  Returns false in any other cases.\n  Examples\n  allNeg(5, 2, 7) ➞ true\n  allNeg(3, 2, 2) ➞ true\n  allNeg(3, -2, 1) ➞ true\n  allNeg(3.6, -2.2, 2) ➞ true\n  */\nconst allNeg = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return false\n  if (y < x && y < z) return false\n  if (z < x && z < y) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all number", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n      const vowelsBefore = message.slice(0, vowelIndex);\n      const vowelsAfter = message.slice(vowelIndex + 1);\n      newMessage = vowelsBefore.concat(vowelsAfter).join('');\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n      const vowelsBefore = message.slice(0, vowelIndex);\n      const vowelsAfter = message.slice(vowelIndex + 1);\n      newMessage = vowelsBefore.concat(vowelsAfter).join('');\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n      const vowelsBefore = message.slice(0, vowelIndex);\n      const vowelsAfter = message.slice(vowelIndex + 1);\n      newMessage = vowelsBefore.concat(vowelsAfter).join('');\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n      const vowelsBefore = message.slice(0, vowelIndex);\n      const vowelsAfter = message.slice(vowelIndex + 1);\n      newMessage = vowelsBefore.concat(vowelsAfter).join('');\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n      const vowelsBefore = message.slice(0, vowelIndex);\n      const vowelsAfter = message.slice(vowelIndex + 1);\n      newMessage = vowelsBefore.concat(vowelsAfter).join('');\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n      const vowelsBefore = message.slice(0, vowelIndex);\n      const vowelsAfter = message.slice(vowelIndex + 1);\n      newMessage = vowelsBefore.concat(vowelsAfter).join('');\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n      const vowelsBefore = message.slice(0, vowelIndex);\n      const vowelsAfter = message.slice(vowelIndex + 1);\n      newMessage = vowelsBefore.concat(vowelsAfter).join('');\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelIndex = vowels.indexOf(letter);\n    if (vowelIndex > -1) {\n      const vowelsBefore = message.slice(0, vowelIndex);\n      const vowelsAfter = message.slice(vowelIndex + 1);\n      newMessage", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    for (let j = num - 1; j >= 0; j--) {\n      if (num % j === 0) {\n        num = num / j;\n        sum += j;\n        break;\n      }\n    }\n    if (num > max) {\n      max = num;\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of all the numbers in the list.\n\n  Examples:\n  For lst = [2,3,5,7,11] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13,17] the output should be 7\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47] the output should be 11\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97] the output should be 13\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 17\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 19\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 23\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,28", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isString = true;\n  Object.keys(dict).forEach((key) => {\n    if (typeof dict[key]!=='string') {\n      isString = false;\n    }\n  });\n  return isString;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an array and returns an array of the numbers that do not appear\n  in the array.\n  for example:\n  removeDuplicates([1,2,2,3,4,5,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([]) => []\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  */\nconst removeDuplicates = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Implement a function that takes an array and returns an array of the numbers that do not appear\n  in the array.\n  for example:\n  removeDuplicates([1,2,2,3,4,5,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([]) => []\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  */\nconst removeDuplicates = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Implement a function that takes an array and returns an array of the numbers that do not appear\n  in the array.\n  for example:\n  removeDuplicates([1,2,2,3,4,5,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([]) => []\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  */\nconst removeDuplicates = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Implement a function that takes an array and returns an array of the numbers that do not appear\n  in the array.\n  for example:\n  removeDuplicates([1,2,2,3,4,5,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([]) => []\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  */\nconst removeDuplicates = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Implement a function that takes an array and returns an array of the numbers that do not appear\n  in the array.\n  for example:\n  removeDuplicates([1,2,2,3,4,5,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([]) => []\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  */\nconst removeDuplicates = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Implement a function that takes an array and returns an array of the numbers that do not appear\n  in the array.\n  for example:\n  removeDuplicates([1,2,2,3,4,5,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([]) => []\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  */\nconst removeDuplicates = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Implement a function that takes an array and returns an array of the numbers that do not appear\n  in the array.\n  for example:\n  removeDuplicates([1,2,2,3,4,5,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([]) => []\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  */\nconst removeDuplicates = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Implement a function that takes an array and returns an array of the numbers that do not appear\n  in the array.\n  for example:\n  removeDuplicates([1,2,2,3,4,5,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n  removeDuplicates([]) => []\n  removeDuplicates([1,2,2,3,4,5,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigitCount = unitDigits.length;\n  let unitDigitIndex = 0;\n  let unitDigitValue = 0;\n  \n  while(unitDigitIndex < unitDigitCount) {\n    unitDigitValue = parseInt(unitDigits[unitDigitIndex]);\n    unitDigitIndex++;\n    \n    if(unitDigitIndex < unitDigitCount) {\n      unitDigitValue = unitDigitValue * b;\n    }\n    \n    product = product + unitDigitValue;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigitCount = unitDigits.length;\n  let unitDigitIndex = 0;\n  let unitDigitValue = 0;\n  \n  while(unitDigitIndex < unitDigitCount) {\n    unitDigitValue = parseInt(unitDigits[unitDigitIndex]);\n    unitDigitIndex++;\n    \n    if(unitDigitIndex < unitDigitCount) {\n      unitDigitValue = unitDigitValue * b;\n    }\n    \n    product = product + unitDigitValue;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigitCount = unitDigits.length;\n  let unitDigitIndex = 0;\n  let unitDigitValue = 0;\n  \n  while(unitDigitIndex < unitDigitCount) {\n    unitDigitValue = parseInt(unitDigits[unitDigitIndex]);\n    unitDigitIndex++;\n    \n    if(unitDigitIndex < unitDigitCount) {\n      unitDigitValue = unitDigitValue * b;\n    }\n    \n    product = product + unitDigitValue;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigitCount = unitDigits.length;\n  let unitDigitIndex = 0;\n  let unitDigitValue = 0;\n  \n  while(unitDigitIndex < unitDigitCount) {\n    unitDigitValue = parseInt(unitDigits[unitDigitIndex]);\n    unitDigitIndex++;\n    \n    if(unitDigitIndex < unitDigitCount) {\n      unitDigitValue = unitDigitValue * b;\n    }\n    \n    product = product + unitDigitValue;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigitCount = unitDigits.length;\n  let unitDigitIndex = 0;\n  let unitDigitValue = 0;\n  \n  while(unitDigitIndex < unitDigitCount) {\n    unitDigitValue = parseInt(unitDigits[unitDigitIndex]);\n    unitDigitIndex++;\n    \n    if(unitDigitIndex < unitDigitCount) {\n      unitDigitValue = unitDigitValue * b;\n    }\n    \n    product = product + unitDigitValue;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigitCount = unitDigits.length;\n  let unitDigitIndex = 0;\n  let unitDigitValue = 0;\n  \n  while(unitDigitIndex < unitDigitCount) {\n    unitDigitValue = parseInt(unitDigits[unitDigitIndex]);\n    unitDigitIndex++;\n    \n    if(unitDigitIndex < unitDigitCount) {\n      unitDigitValue = unitDigitValue * b;\n    }\n    \n    product = product + unitDigitValue;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigitCount = unitDigits.length;\n  let unitDigitIndex = 0;\n  let unitDigitValue = 0;\n  \n  while(unitDigitIndex < unitDigitCount) {\n    unitDigitValue = parseInt(unitDigits[unitDigitIndex]);\n    unitDigitIndex++;\n    \n    if(unitDigitIndex < unitDigitCount) {\n      unitDigitValue = unitDigitValue * b;\n    }\n    \n    product = product + unitDigitValue;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  let product = 0;\n  let unitDigits = a.toString().split('');\n  let unitDigitCount = unitDigits.length;\n  let unitDigitIndex = 0;\n  let unitDigitValue = 0;\n  \n  while(unitDigitIndex < unitDigitCount) {\n    unitDigitValue = parseInt(unitDigits[unitDigitIndex]);\n    unitDigitIndex++;\n    \n    if(unitDigitIndex < unitDigitCount) {\n      unitDigitValue = unitDigitValue * b;\n    }\n    \n    product = product + unitDigitValue;\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 2\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 0\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in all indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsAll = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in all indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 0\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsAll = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in all indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsAllOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in all indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 0\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsAllOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of vowels found in even indices.\n  \n  For example:\n  vowelCount('aBCdEf') returns 3\n  vowelCount('abcdefg') returns 0\n  vowelCount('dBBE') returns 0\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int1 - int2;\n  return diff < 0? int1 + diff : diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int1 - int2;\n  return diff < 0? int1 + diff : diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int1 - int2;\n  return diff < 0? int1 + diff : diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int1 - int2;\n  return diff < 0? int1 + diff : diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int1 - int2;\n  return diff < 0? int1 + diff : diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int1 - int2;\n  return diff < 0? int1 + diff : diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int1 - int2;\n  return diff < 0? int1 + diff : diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  const diff = int1 - int2;\n  return diff < 0? int1 + diff : diff;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestI", "passed": 0, "run_status": 1}
